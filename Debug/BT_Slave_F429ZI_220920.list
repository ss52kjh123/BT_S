
BT_Slave_F429ZI_220920.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000145a0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c80  08014750  08014750  00024750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080173d0  080173d0  000300a4  2**0
                  CONTENTS
  4 .ARM          00000008  080173d0  080173d0  000273d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080173d8  080173d8  000300a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080173d8  080173d8  000273d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080173dc  080173dc  000273dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  080173e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300a4  2**0
                  CONTENTS
 10 .bss          00008694  200000a4  200000a4  000300a4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20008738  20008738  000300a4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023f76  00000000  00000000  000300d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005ebc  00000000  00000000  0005404a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a40  00000000  00000000  00059f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001980  00000000  00000000  0005b948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000f4c9  00000000  00000000  0005d2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b19b  00000000  00000000  0006c791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee538  00000000  00000000  0009792c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00185e64  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007330  00000000  00000000  00185eb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08014738 	.word	0x08014738

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000a8 	.word	0x200000a8
 80001ec:	08014738 	.word	0x08014738

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <Delay_us>:
 *  Created on: Aug 3, 2022
 *      Author: ydkim
 */
#include "main.h"
#include "Basic.h"
void Delay_us(int time_us){
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
              if(time_us>1){
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2b01      	cmp	r3, #1
 80005a0:	dd0a      	ble.n	80005b8 <Delay_us+0x24>
                       uint32_t count=time_us*8-6;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	00db      	lsls	r3, r3, #3
 80005a6:	3b06      	subs	r3, #6
 80005a8:	60fb      	str	r3, [r7, #12]
                       while(count--);
 80005aa:	bf00      	nop
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	1e5a      	subs	r2, r3, #1
 80005b0:	60fa      	str	r2, [r7, #12]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d1fa      	bne.n	80005ac <Delay_us+0x18>
               }else{
                       uint32_t count=3;
                       while(count--);
                       }
        }
 80005b6:	e007      	b.n	80005c8 <Delay_us+0x34>
                       uint32_t count=3;
 80005b8:	2303      	movs	r3, #3
 80005ba:	60bb      	str	r3, [r7, #8]
                       while(count--);
 80005bc:	bf00      	nop
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	1e5a      	subs	r2, r3, #1
 80005c2:	60ba      	str	r2, [r7, #8]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d1fa      	bne.n	80005be <Delay_us+0x2a>
        }
 80005c8:	bf00      	nop
 80005ca:	3714      	adds	r7, #20
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <Delay_ms>:

void Delay_ms(int time_ms)			/* time delay for ms in 72MHz */
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  while(time_ms--)
 80005dc:	e003      	b.n	80005e6 <Delay_ms+0x12>
    Delay_us(1000);
 80005de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005e2:	f7ff ffd7 	bl	8000594 <Delay_us>
  while(time_ms--)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	1e5a      	subs	r2, r3, #1
 80005ea:	607a      	str	r2, [r7, #4]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d1f6      	bne.n	80005de <Delay_ms+0xa>
}
 80005f0:	bf00      	nop
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <Bluetooth_PowerOn>:
void Bluetooth_PairingMode(void)
{
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
}
void Bluetooth_PowerOn(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_SET);
 8000600:	2201      	movs	r2, #1
 8000602:	2101      	movs	r1, #1
 8000604:	4802      	ldr	r0, [pc, #8]	; (8000610 <Bluetooth_PowerOn+0x14>)
 8000606:	f004 fb01 	bl	8004c0c <HAL_GPIO_WritePin>
}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40021800 	.word	0x40021800

08000614 <ST_LED_ON_1>:



/////////////////////////////////////////////////////////////////////////
void ST_LED_ON_1()
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000618:	2201      	movs	r2, #1
 800061a:	2101      	movs	r1, #1
 800061c:	4802      	ldr	r0, [pc, #8]	; (8000628 <ST_LED_ON_1+0x14>)
 800061e:	f004 faf5 	bl	8004c0c <HAL_GPIO_WritePin>
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40020400 	.word	0x40020400

0800062c <ST_LED_ON_2>:

void ST_LED_ON_2()
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000630:	2201      	movs	r2, #1
 8000632:	2180      	movs	r1, #128	; 0x80
 8000634:	4802      	ldr	r0, [pc, #8]	; (8000640 <ST_LED_ON_2+0x14>)
 8000636:	f004 fae9 	bl	8004c0c <HAL_GPIO_WritePin>
}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40020400 	.word	0x40020400

08000644 <ST_LED_ON_3>:
void ST_LED_ON_3()
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000648:	2201      	movs	r2, #1
 800064a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800064e:	4802      	ldr	r0, [pc, #8]	; (8000658 <ST_LED_ON_3+0x14>)
 8000650:	f004 fadc 	bl	8004c0c <HAL_GPIO_WritePin>
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40020400 	.word	0x40020400

0800065c <ST_LED_OFF_1>:

void ST_LED_OFF_1()
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	2101      	movs	r1, #1
 8000664:	4802      	ldr	r0, [pc, #8]	; (8000670 <ST_LED_OFF_1+0x14>)
 8000666:	f004 fad1 	bl	8004c0c <HAL_GPIO_WritePin>
}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40020400 	.word	0x40020400

08000674 <ST_LED_OFF_3>:
void ST_LED_OFF_2()
{
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
}
void ST_LED_OFF_3()
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800067e:	4802      	ldr	r0, [pc, #8]	; (8000688 <ST_LED_OFF_3+0x14>)
 8000680:	f004 fac4 	bl	8004c0c <HAL_GPIO_WritePin>
}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40020400 	.word	0x40020400

0800068c <MOSTEC_LED_ON_1>:


void MOSTEC_LED_ON_1()
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_SET);
 8000690:	2201      	movs	r2, #1
 8000692:	2104      	movs	r1, #4
 8000694:	4802      	ldr	r0, [pc, #8]	; (80006a0 <MOSTEC_LED_ON_1+0x14>)
 8000696:	f004 fab9 	bl	8004c0c <HAL_GPIO_WritePin>
}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40021800 	.word	0x40021800

080006a4 <MOSTEC_LED_ON_2>:

void MOSTEC_LED_ON_2()
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_SET);
 80006a8:	2201      	movs	r2, #1
 80006aa:	2108      	movs	r1, #8
 80006ac:	4802      	ldr	r0, [pc, #8]	; (80006b8 <MOSTEC_LED_ON_2+0x14>)
 80006ae:	f004 faad 	bl	8004c0c <HAL_GPIO_WritePin>
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40021800 	.word	0x40021800

080006bc <MOSTEC_LED_ON_3>:

void MOSTEC_LED_ON_3()
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_SET);
 80006c0:	2201      	movs	r2, #1
 80006c2:	2110      	movs	r1, #16
 80006c4:	4802      	ldr	r0, [pc, #8]	; (80006d0 <MOSTEC_LED_ON_3+0x14>)
 80006c6:	f004 faa1 	bl	8004c0c <HAL_GPIO_WritePin>
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40021800 	.word	0x40021800

080006d4 <MOSTEC_LED_OFF_1>:
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_SET);
}


void MOSTEC_LED_OFF_1()
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	2104      	movs	r1, #4
 80006dc:	4802      	ldr	r0, [pc, #8]	; (80006e8 <MOSTEC_LED_OFF_1+0x14>)
 80006de:	f004 fa95 	bl	8004c0c <HAL_GPIO_WritePin>
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40021800 	.word	0x40021800

080006ec <MOSTEC_LED_OFF_2>:

void MOSTEC_LED_OFF_2()
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2108      	movs	r1, #8
 80006f4:	4802      	ldr	r0, [pc, #8]	; (8000700 <MOSTEC_LED_OFF_2+0x14>)
 80006f6:	f004 fa89 	bl	8004c0c <HAL_GPIO_WritePin>
}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40021800 	.word	0x40021800

08000704 <MOSTEC_LED_OFF_3>:

void MOSTEC_LED_OFF_3()
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	2110      	movs	r1, #16
 800070c:	4802      	ldr	r0, [pc, #8]	; (8000718 <MOSTEC_LED_OFF_3+0x14>)
 800070e:	f004 fa7d 	bl	8004c0c <HAL_GPIO_WritePin>
}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40021800 	.word	0x40021800

0800071c <Init_Complite_Led_Offeration>:
void MOSTEC_LED_OFF_4()
{
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_RESET);
}

void Init_Complite_Led_Offeration(){
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
	MOSTEC_LED_ON_1();
 8000720:	f7ff ffb4 	bl	800068c <MOSTEC_LED_ON_1>
	Delay_ms(300);
 8000724:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000728:	f7ff ff54 	bl	80005d4 <Delay_ms>
	MOSTEC_LED_OFF_1();
 800072c:	f7ff ffd2 	bl	80006d4 <MOSTEC_LED_OFF_1>

	MOSTEC_LED_ON_2();
 8000730:	f7ff ffb8 	bl	80006a4 <MOSTEC_LED_ON_2>
	Delay_ms(300);
 8000734:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000738:	f7ff ff4c 	bl	80005d4 <Delay_ms>
	MOSTEC_LED_OFF_2();
 800073c:	f7ff ffd6 	bl	80006ec <MOSTEC_LED_OFF_2>

	MOSTEC_LED_ON_3();
 8000740:	f7ff ffbc 	bl	80006bc <MOSTEC_LED_ON_3>
	Delay_ms(300);
 8000744:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000748:	f7ff ff44 	bl	80005d4 <Delay_ms>
	MOSTEC_LED_OFF_3();
 800074c:	f7ff ffda 	bl	8000704 <MOSTEC_LED_OFF_3>
}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}

08000754 <FlashMemoryWrite>:


short iFlashMemory_SavedCounter;

void FlashMemoryWrite(short _ip1,short _ip2,short _ip3,short _ip4,short _port)
{
 8000754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000756:	b089      	sub	sp, #36	; 0x24
 8000758:	af02      	add	r7, sp, #8
 800075a:	4606      	mov	r6, r0
 800075c:	4608      	mov	r0, r1
 800075e:	4611      	mov	r1, r2
 8000760:	461a      	mov	r2, r3
 8000762:	4633      	mov	r3, r6
 8000764:	80fb      	strh	r3, [r7, #6]
 8000766:	4603      	mov	r3, r0
 8000768:	80bb      	strh	r3, [r7, #4]
 800076a:	460b      	mov	r3, r1
 800076c:	807b      	strh	r3, [r7, #2]
 800076e:	4613      	mov	r3, r2
 8000770:	803b      	strh	r3, [r7, #0]
	 short ip1,ip2,ip3,ip4,port;
	 ip1 =_ip1; ip2=_ip2; ip3=_ip3; ip4=_ip4; port=_port;
 8000772:	88fb      	ldrh	r3, [r7, #6]
 8000774:	827b      	strh	r3, [r7, #18]
 8000776:	88bb      	ldrh	r3, [r7, #4]
 8000778:	823b      	strh	r3, [r7, #16]
 800077a:	887b      	ldrh	r3, [r7, #2]
 800077c:	81fb      	strh	r3, [r7, #14]
 800077e:	883b      	ldrh	r3, [r7, #0]
 8000780:	81bb      	strh	r3, [r7, #12]
 8000782:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000784:	817b      	strh	r3, [r7, #10]
	 Flash_Address = 0x081E0000;  //sector 23  -128KB  쓰기 전 초기화
 8000786:	4b1c      	ldr	r3, [pc, #112]	; (80007f8 <FlashMemoryWrite+0xa4>)
 8000788:	4a1c      	ldr	r2, [pc, #112]	; (80007fc <FlashMemoryWrite+0xa8>)
 800078a:	601a      	str	r2, [r3, #0]
	 MY_FLASH_EraseSector();
 800078c:	f000 f8d4 	bl	8000938 <MY_FLASH_EraseSector>
	 HAL_FLASH_Unlock();
 8000790:	f003 fed0 	bl	8004534 <HAL_FLASH_Unlock>

	  For_FlashMemory_Int_To_Byte(ip1,ip2,ip3,ip4,port);
 8000794:	f9b7 600c 	ldrsh.w	r6, [r7, #12]
 8000798:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800079c:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 80007a0:	f9b7 0012 	ldrsh.w	r0, [r7, #18]
 80007a4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	4633      	mov	r3, r6
 80007ac:	f000 f854 	bl	8000858 <For_FlashMemory_Int_To_Byte>

	  for(int i=0; i<=19; i++)
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
 80007b4:	e016      	b.n	80007e4 <FlashMemoryWrite+0x90>
	  {
		  HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Flash_Address, ((uint8_t*)flash_write_data)[i]);
 80007b6:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <FlashMemoryWrite+0xa4>)
 80007b8:	6819      	ldr	r1, [r3, #0]
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	4a10      	ldr	r2, [pc, #64]	; (8000800 <FlashMemoryWrite+0xac>)
 80007be:	4413      	add	r3, r2
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	2200      	movs	r2, #0
 80007c6:	461c      	mov	r4, r3
 80007c8:	4615      	mov	r5, r2
 80007ca:	4622      	mov	r2, r4
 80007cc:	462b      	mov	r3, r5
 80007ce:	2000      	movs	r0, #0
 80007d0:	f003 fe5c 	bl	800448c <HAL_FLASH_Program>
		  Flash_Address++;
 80007d4:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <FlashMemoryWrite+0xa4>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	3301      	adds	r3, #1
 80007da:	4a07      	ldr	r2, [pc, #28]	; (80007f8 <FlashMemoryWrite+0xa4>)
 80007dc:	6013      	str	r3, [r2, #0]
	  for(int i=0; i<=19; i++)
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	3301      	adds	r3, #1
 80007e2:	617b      	str	r3, [r7, #20]
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	2b13      	cmp	r3, #19
 80007e8:	dde5      	ble.n	80007b6 <FlashMemoryWrite+0x62>
	  }

	  HAL_FLASH_Lock();
 80007ea:	f003 fec5 	bl	8004578 <HAL_FLASH_Lock>


}
 80007ee:	bf00      	nop
 80007f0:	371c      	adds	r7, #28
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000000 	.word	0x20000000
 80007fc:	081e0000 	.word	0x081e0000
 8000800:	200000c0 	.word	0x200000c0

08000804 <FlashMemoryRead>:
void FlashMemoryRead(void){
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
	  //read
	//uint8_t value = 0x081E0000;  //sector 23  -128KB  기 전 초기화
	 // HAL_FLASH_Unlock();
	Flash_Address = 0x081E0000;
 800080a:	4b10      	ldr	r3, [pc, #64]	; (800084c <FlashMemoryRead+0x48>)
 800080c:	4a10      	ldr	r2, [pc, #64]	; (8000850 <FlashMemoryRead+0x4c>)
 800080e:	601a      	str	r2, [r3, #0]
	  for(int i=0; i<=19; i++)
 8000810:	2300      	movs	r3, #0
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	e00f      	b.n	8000836 <FlashMemoryRead+0x32>
	  {

		  *((uint8_t *)flash_read_data + i) = *(uint8_t *)Flash_Address;
 8000816:	4b0d      	ldr	r3, [pc, #52]	; (800084c <FlashMemoryRead+0x48>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4619      	mov	r1, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	4a0d      	ldr	r2, [pc, #52]	; (8000854 <FlashMemoryRead+0x50>)
 8000820:	4413      	add	r3, r2
 8000822:	780a      	ldrb	r2, [r1, #0]
 8000824:	701a      	strb	r2, [r3, #0]

		  Flash_Address++;
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <FlashMemoryRead+0x48>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	3301      	adds	r3, #1
 800082c:	4a07      	ldr	r2, [pc, #28]	; (800084c <FlashMemoryRead+0x48>)
 800082e:	6013      	str	r3, [r2, #0]
	  for(int i=0; i<=19; i++)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	3301      	adds	r3, #1
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2b13      	cmp	r3, #19
 800083a:	ddec      	ble.n	8000816 <FlashMemoryRead+0x12>
	  }
	 // HAL_FLASH_Lock();
}
 800083c:	bf00      	nop
 800083e:	bf00      	nop
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	20000000 	.word	0x20000000
 8000850:	081e0000 	.word	0x081e0000
 8000854:	2000037c 	.word	0x2000037c

08000858 <For_FlashMemory_Int_To_Byte>:
void For_FlashMemory_Int_To_Byte(short _ip1,short _ip2,short _ip3,short _ip4,short _port)
{
 8000858:	b490      	push	{r4, r7}
 800085a:	b086      	sub	sp, #24
 800085c:	af00      	add	r7, sp, #0
 800085e:	4604      	mov	r4, r0
 8000860:	4608      	mov	r0, r1
 8000862:	4611      	mov	r1, r2
 8000864:	461a      	mov	r2, r3
 8000866:	4623      	mov	r3, r4
 8000868:	80fb      	strh	r3, [r7, #6]
 800086a:	4603      	mov	r3, r0
 800086c:	80bb      	strh	r3, [r7, #4]
 800086e:	460b      	mov	r3, r1
 8000870:	807b      	strh	r3, [r7, #2]
 8000872:	4613      	mov	r3, r2
 8000874:	803b      	strh	r3, [r7, #0]

	short ipAdd_1,ipAdd_2,ipAdd_3,ipAdd_4,port;
	ipAdd_1 =_ip1; ipAdd_2=_ip2; ipAdd_3=_ip3; ipAdd_4=_ip4; port=_port;
 8000876:	88fb      	ldrh	r3, [r7, #6]
 8000878:	82fb      	strh	r3, [r7, #22]
 800087a:	88bb      	ldrh	r3, [r7, #4]
 800087c:	82bb      	strh	r3, [r7, #20]
 800087e:	887b      	ldrh	r3, [r7, #2]
 8000880:	827b      	strh	r3, [r7, #18]
 8000882:	883b      	ldrh	r3, [r7, #0]
 8000884:	823b      	strh	r3, [r7, #16]
 8000886:	8c3b      	ldrh	r3, [r7, #32]
 8000888:	81fb      	strh	r3, [r7, #14]
	iFlashMemory_SavedCounter++;
 800088a:	4b29      	ldr	r3, [pc, #164]	; (8000930 <For_FlashMemory_Int_To_Byte+0xd8>)
 800088c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000890:	b29b      	uxth	r3, r3
 8000892:	3301      	adds	r3, #1
 8000894:	b29b      	uxth	r3, r3
 8000896:	b21a      	sxth	r2, r3
 8000898:	4b25      	ldr	r3, [pc, #148]	; (8000930 <For_FlashMemory_Int_To_Byte+0xd8>)
 800089a:	801a      	strh	r2, [r3, #0]
	flash_write_data[0] = iFlashMemory_SavedCounter & 0xFF;
 800089c:	4b24      	ldr	r3, [pc, #144]	; (8000930 <For_FlashMemory_Int_To_Byte+0xd8>)
 800089e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	4b23      	ldr	r3, [pc, #140]	; (8000934 <For_FlashMemory_Int_To_Byte+0xdc>)
 80008a6:	701a      	strb	r2, [r3, #0]
	flash_write_data[1] = (iFlashMemory_SavedCounter>> 8) & 0xff;
 80008a8:	4b21      	ldr	r3, [pc, #132]	; (8000930 <For_FlashMemory_Int_To_Byte+0xd8>)
 80008aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008ae:	121b      	asrs	r3, r3, #8
 80008b0:	b21b      	sxth	r3, r3
 80008b2:	b2da      	uxtb	r2, r3
 80008b4:	4b1f      	ldr	r3, [pc, #124]	; (8000934 <For_FlashMemory_Int_To_Byte+0xdc>)
 80008b6:	705a      	strb	r2, [r3, #1]

	flash_write_data[2] = (ipAdd_1 & 0xff);       //Low Byte
 80008b8:	8afb      	ldrh	r3, [r7, #22]
 80008ba:	b2da      	uxtb	r2, r3
 80008bc:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <For_FlashMemory_Int_To_Byte+0xdc>)
 80008be:	709a      	strb	r2, [r3, #2]
	flash_write_data[3] = (ipAdd_1 >> 8) & 0xFF;  //High Byte
 80008c0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80008c4:	121b      	asrs	r3, r3, #8
 80008c6:	b21b      	sxth	r3, r3
 80008c8:	b2da      	uxtb	r2, r3
 80008ca:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <For_FlashMemory_Int_To_Byte+0xdc>)
 80008cc:	70da      	strb	r2, [r3, #3]

	flash_write_data[4] = (ipAdd_2 & 0xff);       //Low Byte
 80008ce:	8abb      	ldrh	r3, [r7, #20]
 80008d0:	b2da      	uxtb	r2, r3
 80008d2:	4b18      	ldr	r3, [pc, #96]	; (8000934 <For_FlashMemory_Int_To_Byte+0xdc>)
 80008d4:	711a      	strb	r2, [r3, #4]
	flash_write_data[5] = (ipAdd_2 >> 8) & 0xFF;  //High Byte
 80008d6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80008da:	121b      	asrs	r3, r3, #8
 80008dc:	b21b      	sxth	r3, r3
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <For_FlashMemory_Int_To_Byte+0xdc>)
 80008e2:	715a      	strb	r2, [r3, #5]

	flash_write_data[6] = (ipAdd_3 & 0xff);       //Low Byte
 80008e4:	8a7b      	ldrh	r3, [r7, #18]
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <For_FlashMemory_Int_To_Byte+0xdc>)
 80008ea:	719a      	strb	r2, [r3, #6]
	flash_write_data[7] = (ipAdd_3 >> 8) & 0xFF;  //High Byte
 80008ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80008f0:	121b      	asrs	r3, r3, #8
 80008f2:	b21b      	sxth	r3, r3
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <For_FlashMemory_Int_To_Byte+0xdc>)
 80008f8:	71da      	strb	r2, [r3, #7]

	flash_write_data[8] = (ipAdd_4 & 0xff);       //Low Byte
 80008fa:	8a3b      	ldrh	r3, [r7, #16]
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	4b0d      	ldr	r3, [pc, #52]	; (8000934 <For_FlashMemory_Int_To_Byte+0xdc>)
 8000900:	721a      	strb	r2, [r3, #8]
	flash_write_data[9] = (ipAdd_4 >> 8) & 0xFF;  //High Byte
 8000902:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000906:	121b      	asrs	r3, r3, #8
 8000908:	b21b      	sxth	r3, r3
 800090a:	b2da      	uxtb	r2, r3
 800090c:	4b09      	ldr	r3, [pc, #36]	; (8000934 <For_FlashMemory_Int_To_Byte+0xdc>)
 800090e:	725a      	strb	r2, [r3, #9]

	flash_write_data[10] = (port & 0xff);       //Low Byte
 8000910:	89fb      	ldrh	r3, [r7, #14]
 8000912:	b2da      	uxtb	r2, r3
 8000914:	4b07      	ldr	r3, [pc, #28]	; (8000934 <For_FlashMemory_Int_To_Byte+0xdc>)
 8000916:	729a      	strb	r2, [r3, #10]
	flash_write_data[11] = (port >> 8) & 0xFF;  //High Byte
 8000918:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800091c:	121b      	asrs	r3, r3, #8
 800091e:	b21b      	sxth	r3, r3
 8000920:	b2da      	uxtb	r2, r3
 8000922:	4b04      	ldr	r3, [pc, #16]	; (8000934 <For_FlashMemory_Int_To_Byte+0xdc>)
 8000924:	72da      	strb	r2, [r3, #11]

}
 8000926:	bf00      	nop
 8000928:	3718      	adds	r7, #24
 800092a:	46bd      	mov	sp, r7
 800092c:	bc90      	pop	{r4, r7}
 800092e:	4770      	bx	lr
 8000930:	200000d4 	.word	0x200000d4
 8000934:	200000c0 	.word	0x200000c0

08000938 <MY_FLASH_EraseSector>:
static void MY_FLASH_EraseSector(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 800093c:	f003 fdfa 	bl	8004534 <HAL_FLASH_Unlock>
	//Erase the required Flash sector
	FLASH_Erase_Sector(23, FLASH_VOLTAGE_RANGE_3);
 8000940:	2102      	movs	r1, #2
 8000942:	2017      	movs	r0, #23
 8000944:	f003 ff68 	bl	8004818 <FLASH_Erase_Sector>
	HAL_FLASH_Lock();
 8000948:	f003 fe16 	bl	8004578 <HAL_FLASH_Lock>
}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}

08000950 <tcp_echoserver_init>:
  * @brief  Initializes the tcp echo server
  * @param  None
  * @retval None
  */
void tcp_echoserver_init(uint16_t setPort)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	80fb      	strh	r3, [r7, #6]
  /* create new tcp pcb */
  tcp_echoserver_pcb = tcp_new();
 800095a:	f00b fbdf 	bl	800c11c <tcp_new>
 800095e:	4603      	mov	r3, r0
 8000960:	4a16      	ldr	r2, [pc, #88]	; (80009bc <tcp_echoserver_init+0x6c>)
 8000962:	6013      	str	r3, [r2, #0]

  if (tcp_echoserver_pcb != NULL)
 8000964:	4b15      	ldr	r3, [pc, #84]	; (80009bc <tcp_echoserver_init+0x6c>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d022      	beq.n	80009b2 <tcp_echoserver_init+0x62>
  {
    err_t err;

    /* bind echo_pcb to port 7 (ECHO protocol) */
    err = tcp_bind(tcp_echoserver_pcb, IP_ADDR_ANY, setPort);
 800096c:	4b13      	ldr	r3, [pc, #76]	; (80009bc <tcp_echoserver_init+0x6c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	88fa      	ldrh	r2, [r7, #6]
 8000972:	4913      	ldr	r1, [pc, #76]	; (80009c0 <tcp_echoserver_init+0x70>)
 8000974:	4618      	mov	r0, r3
 8000976:	f00a fb2d 	bl	800afd4 <tcp_bind>
 800097a:	4603      	mov	r3, r0
 800097c:	73fb      	strb	r3, [r7, #15]

    if (err == ERR_OK)
 800097e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d10f      	bne.n	80009a6 <tcp_echoserver_init+0x56>
    {
      /* start tcp listening for echo_pcb */
      tcp_echoserver_pcb = tcp_listen(tcp_echoserver_pcb);
 8000986:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <tcp_echoserver_init+0x6c>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	21ff      	movs	r1, #255	; 0xff
 800098c:	4618      	mov	r0, r3
 800098e:	f00a fbd9 	bl	800b144 <tcp_listen_with_backlog>
 8000992:	4603      	mov	r3, r0
 8000994:	4a09      	ldr	r2, [pc, #36]	; (80009bc <tcp_echoserver_init+0x6c>)
 8000996:	6013      	str	r3, [r2, #0]

      /* initialize LwIP tcp_accept callback function */
      tcp_accept(tcp_echoserver_pcb, tcp_echoserver_accept);
 8000998:	4b08      	ldr	r3, [pc, #32]	; (80009bc <tcp_echoserver_init+0x6c>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4909      	ldr	r1, [pc, #36]	; (80009c4 <tcp_echoserver_init+0x74>)
 800099e:	4618      	mov	r0, r3
 80009a0:	f00b fc3c 	bl	800c21c <tcp_accept>
    {
      /* deallocate the pcb */
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
    }
  }
}
 80009a4:	e005      	b.n	80009b2 <tcp_echoserver_init+0x62>
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
 80009a6:	4b05      	ldr	r3, [pc, #20]	; (80009bc <tcp_echoserver_init+0x6c>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4619      	mov	r1, r3
 80009ac:	2001      	movs	r0, #1
 80009ae:	f008 fef7 	bl	80097a0 <memp_free>
}
 80009b2:	bf00      	nop
 80009b4:	3710      	adds	r7, #16
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	200001a8 	.word	0x200001a8
 80009c0:	08017274 	.word	0x08017274
 80009c4:	080009c9 	.word	0x080009c9

080009c8 <tcp_echoserver_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used
  * @retval err_t: error status
  */
static err_t tcp_echoserver_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	4613      	mov	r3, r2
 80009d4:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 80009d6:	2101      	movs	r1, #1
 80009d8:	68b8      	ldr	r0, [r7, #8]
 80009da:	f00b f9ad 	bl	800bd38 <tcp_setprio>

  /* allocate structure es to maintain tcp connection informations */
  es = (struct tcp_echoserver_struct *)mem_malloc(sizeof(struct tcp_echoserver_struct));
 80009de:	200c      	movs	r0, #12
 80009e0:	f008 fcde 	bl	80093a0 <mem_malloc>
 80009e4:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d01f      	beq.n	8000a2c <tcp_echoserver_accept+0x64>
  {
    es->state = ES_ACCEPTED;
 80009ec:	693b      	ldr	r3, [r7, #16]
 80009ee:	2201      	movs	r2, #1
 80009f0:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 80009f2:	693b      	ldr	r3, [r7, #16]
 80009f4:	68ba      	ldr	r2, [r7, #8]
 80009f6:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	2200      	movs	r2, #0
 80009fc:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 80009fe:	693b      	ldr	r3, [r7, #16]
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]

    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 8000a04:	6939      	ldr	r1, [r7, #16]
 8000a06:	68b8      	ldr	r0, [r7, #8]
 8000a08:	f00b fb90 	bl	800c12c <tcp_arg>

    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, tcp_echoserver_recv);
 8000a0c:	490d      	ldr	r1, [pc, #52]	; (8000a44 <tcp_echoserver_accept+0x7c>)
 8000a0e:	68b8      	ldr	r0, [r7, #8]
 8000a10:	f00b fb9e 	bl	800c150 <tcp_recv>

    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_echoserver_error);
 8000a14:	490c      	ldr	r1, [pc, #48]	; (8000a48 <tcp_echoserver_accept+0x80>)
 8000a16:	68b8      	ldr	r0, [r7, #8]
 8000a18:	f00b fbde 	bl	800c1d8 <tcp_err>

    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_echoserver_poll, 0);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	490b      	ldr	r1, [pc, #44]	; (8000a4c <tcp_echoserver_accept+0x84>)
 8000a20:	68b8      	ldr	r0, [r7, #8]
 8000a22:	f00b fc13 	bl	800c24c <tcp_poll>

    ret_err = ERR_OK;
 8000a26:	2300      	movs	r3, #0
 8000a28:	75fb      	strb	r3, [r7, #23]
 8000a2a:	e005      	b.n	8000a38 <tcp_echoserver_accept+0x70>
  }
  else
  {
    /*  close tcp connection */
    tcp_echoserver_connection_close(newpcb, es);
 8000a2c:	6939      	ldr	r1, [r7, #16]
 8000a2e:	68b8      	ldr	r0, [r7, #8]
 8000a30:	f000 fe5b 	bl	80016ea <tcp_echoserver_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 8000a34:	23ff      	movs	r3, #255	; 0xff
 8000a36:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8000a38:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3718      	adds	r7, #24
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	08000a51 	.word	0x08000a51
 8000a48:	08001571 	.word	0x08001571
 8000a4c:	08001595 	.word	0x08001595

08000a50 <tcp_echoserver_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_echoserver_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8000a50:	b590      	push	{r4, r7, lr}
 8000a52:	b091      	sub	sp, #68	; 0x44
 8000a54:	af02      	add	r7, sp, #8
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]
 8000a5c:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d105      	bne.n	8000a70 <tcp_echoserver_recv+0x20>
 8000a64:	4b4a      	ldr	r3, [pc, #296]	; (8000b90 <tcp_echoserver_recv+0x140>)
 8000a66:	229f      	movs	r2, #159	; 0x9f
 8000a68:	494a      	ldr	r1, [pc, #296]	; (8000b94 <tcp_echoserver_recv+0x144>)
 8000a6a:	484b      	ldr	r0, [pc, #300]	; (8000b98 <tcp_echoserver_recv+0x148>)
 8000a6c:	f012 fea8 	bl	80137c0 <iprintf>

  es = (struct tcp_echoserver_struct *)arg;
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	61bb      	str	r3, [r7, #24]

  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d118      	bne.n	8000aac <tcp_echoserver_recv+0x5c>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 8000a7a:	69bb      	ldr	r3, [r7, #24]
 8000a7c:	2203      	movs	r2, #3
 8000a7e:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d104      	bne.n	8000a92 <tcp_echoserver_recv+0x42>
    {
       /* we're done sending, close connection */
       tcp_echoserver_connection_close(tpcb, es);
 8000a88:	69b9      	ldr	r1, [r7, #24]
 8000a8a:	68b8      	ldr	r0, [r7, #8]
 8000a8c:	f000 fe2d 	bl	80016ea <tcp_echoserver_connection_close>
 8000a90:	e007      	b.n	8000aa2 <tcp_echoserver_recv+0x52>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_echoserver_sent);
 8000a92:	4942      	ldr	r1, [pc, #264]	; (8000b9c <tcp_echoserver_recv+0x14c>)
 8000a94:	68b8      	ldr	r0, [r7, #8]
 8000a96:	f00b fb7d 	bl	800c194 <tcp_sent>

      /* send remaining data*/
      tcp_echoserver_send(tpcb, es);
 8000a9a:	69b9      	ldr	r1, [r7, #24]
 8000a9c:	68b8      	ldr	r0, [r7, #8]
 8000a9e:	f000 fdd1 	bl	8001644 <tcp_echoserver_send>
    }
    ret_err = ERR_OK;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000aa8:	f000 bd44 	b.w	8001534 <tcp_echoserver_recv+0xae4>
  }
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8000aac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d00d      	beq.n	8000ad0 <tcp_echoserver_recv+0x80>
  {
    /* free received pbuf*/
    if (p != NULL)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d005      	beq.n	8000ac6 <tcp_echoserver_recv+0x76>
    {
      es->p = NULL;
 8000aba:	69bb      	ldr	r3, [r7, #24]
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f009 fce3 	bl	800a48c <pbuf_free>
    }
    ret_err = err;
 8000ac6:	78fb      	ldrb	r3, [r7, #3]
 8000ac8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000acc:	f000 bd32 	b.w	8001534 <tcp_echoserver_recv+0xae4>
  }
  else if(es->state == ES_ACCEPTED)
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	f040 8270 	bne.w	8000fba <tcp_echoserver_recv+0x56a>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 8000ada:	69bb      	ldr	r3, [r7, #24]
 8000adc:	2202      	movs	r2, #2
 8000ade:	701a      	strb	r2, [r3, #0]

    /* store reference to incoming pbuf (chain) */
    es->p = p;
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
    pbuf_copy_partial(p, &Tcp_rx_buf, p->tot_len, 0) ;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	891a      	ldrh	r2, [r3, #8]
 8000aea:	2300      	movs	r3, #0
 8000aec:	492c      	ldr	r1, [pc, #176]	; (8000ba0 <tcp_echoserver_recv+0x150>)
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f009 fec6 	bl	800a880 <pbuf_copy_partial>
    iReceiveCmmandType = Tcp_rx_buf[3];
 8000af4:	4b2a      	ldr	r3, [pc, #168]	; (8000ba0 <tcp_echoserver_recv+0x150>)
 8000af6:	78db      	ldrb	r3, [r3, #3]
 8000af8:	461a      	mov	r2, r3
 8000afa:	4b2a      	ldr	r3, [pc, #168]	; (8000ba4 <tcp_echoserver_recv+0x154>)
 8000afc:	601a      	str	r2, [r3, #0]


    /* 클라이언트 BnR에서 처음 데이터를 받았을 떄(echo) */
    switch(iReceiveCmmandType)
 8000afe:	4b29      	ldr	r3, [pc, #164]	; (8000ba4 <tcp_echoserver_recv+0x154>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	2b64      	cmp	r3, #100	; 0x64
 8000b04:	f000 81a6 	beq.w	8000e54 <tcp_echoserver_recv+0x404>
 8000b08:	2b64      	cmp	r3, #100	; 0x64
 8000b0a:	f300 8252 	bgt.w	8000fb2 <tcp_echoserver_recv+0x562>
 8000b0e:	2b0a      	cmp	r3, #10
 8000b10:	f000 80e9 	beq.w	8000ce6 <tcp_echoserver_recv+0x296>
 8000b14:	2b0a      	cmp	r3, #10
 8000b16:	f300 824c 	bgt.w	8000fb2 <tcp_echoserver_recv+0x562>
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d002      	beq.n	8000b24 <tcp_echoserver_recv+0xd4>
 8000b1e:	2b02      	cmp	r3, #2
 8000b20:	d046      	beq.n	8000bb0 <tcp_echoserver_recv+0x160>
 8000b22:	e246      	b.n	8000fb2 <tcp_echoserver_recv+0x562>
          {
            case 1: //You Live?
            	sTxCount++;
 8000b24:	4b20      	ldr	r3, [pc, #128]	; (8000ba8 <tcp_echoserver_recv+0x158>)
 8000b26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	b21a      	sxth	r2, r3
 8000b32:	4b1d      	ldr	r3, [pc, #116]	; (8000ba8 <tcp_echoserver_recv+0x158>)
 8000b34:	801a      	strh	r2, [r3, #0]
            	if(sTxCount>100)
 8000b36:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <tcp_echoserver_recv+0x158>)
 8000b38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b3c:	2b64      	cmp	r3, #100	; 0x64
 8000b3e:	dd02      	ble.n	8000b46 <tcp_echoserver_recv+0xf6>
            		sTxCount=0;
 8000b40:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <tcp_echoserver_recv+0x158>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	801a      	strh	r2, [r3, #0]
            	Tcp_tx_buf[0] = 2;				  //start
 8000b46:	4b19      	ldr	r3, [pc, #100]	; (8000bac <tcp_echoserver_recv+0x15c>)
 8000b48:	2202      	movs	r2, #2
 8000b4a:	701a      	strb	r2, [r3, #0]
              	Tcp_tx_buf[1] = Tcp_rx_buf[1];	  //length
 8000b4c:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <tcp_echoserver_recv+0x150>)
 8000b4e:	785a      	ldrb	r2, [r3, #1]
 8000b50:	4b16      	ldr	r3, [pc, #88]	; (8000bac <tcp_echoserver_recv+0x15c>)
 8000b52:	705a      	strb	r2, [r3, #1]
               	Tcp_tx_buf[2] = Tcp_tx_buf[2] +1; //count
 8000b54:	4b15      	ldr	r3, [pc, #84]	; (8000bac <tcp_echoserver_recv+0x15c>)
 8000b56:	789b      	ldrb	r3, [r3, #2]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	4b13      	ldr	r3, [pc, #76]	; (8000bac <tcp_echoserver_recv+0x15c>)
 8000b5e:	709a      	strb	r2, [r3, #2]
               	Tcp_tx_buf[3] = 1;           	  //command ACK
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <tcp_echoserver_recv+0x15c>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	70da      	strb	r2, [r3, #3]
               	Tcp_tx_buf[4] = 3;	  			  //End
 8000b66:	4b11      	ldr	r3, [pc, #68]	; (8000bac <tcp_echoserver_recv+0x15c>)
 8000b68:	2203      	movs	r2, #3
 8000b6a:	711a      	strb	r2, [r3, #4]
            	es->p->payload =&Tcp_tx_buf;
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	4a0e      	ldr	r2, [pc, #56]	; (8000bac <tcp_echoserver_recv+0x15c>)
 8000b72:	605a      	str	r2, [r3, #4]
            	es->p->len= 5;
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	689b      	ldr	r3, [r3, #8]
 8000b78:	2205      	movs	r2, #5
 8000b7a:	815a      	strh	r2, [r3, #10]
            	es->p->tot_len = 5;
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	689b      	ldr	r3, [r3, #8]
 8000b80:	2205      	movs	r2, #5
 8000b82:	811a      	strh	r2, [r3, #8]
            	tcp_echoserver_send(tpcb, es);
 8000b84:	69b9      	ldr	r1, [r7, #24]
 8000b86:	68b8      	ldr	r0, [r7, #8]
 8000b88:	f000 fd5c 	bl	8001644 <tcp_echoserver_send>
            	break;
 8000b8c:	e211      	b.n	8000fb2 <tcp_echoserver_recv+0x562>
 8000b8e:	bf00      	nop
 8000b90:	08014754 	.word	0x08014754
 8000b94:	0801476c 	.word	0x0801476c
 8000b98:	08014778 	.word	0x08014778
 8000b9c:	080015f5 	.word	0x080015f5
 8000ba0:	2000013c 	.word	0x2000013c
 8000ba4:	200001a4 	.word	0x200001a4
 8000ba8:	200001a0 	.word	0x200001a0
 8000bac:	200000d8 	.word	0x200000d8

            case 2: //ip1234 ,port 설정
            	Tcp_tx_buf[0] = 2;				  //start
 8000bb0:	4b82      	ldr	r3, [pc, #520]	; (8000dbc <tcp_echoserver_recv+0x36c>)
 8000bb2:	2202      	movs	r2, #2
 8000bb4:	701a      	strb	r2, [r3, #0]
            	Tcp_tx_buf[1] = Tcp_rx_buf[1];	  //length
 8000bb6:	4b82      	ldr	r3, [pc, #520]	; (8000dc0 <tcp_echoserver_recv+0x370>)
 8000bb8:	785a      	ldrb	r2, [r3, #1]
 8000bba:	4b80      	ldr	r3, [pc, #512]	; (8000dbc <tcp_echoserver_recv+0x36c>)
 8000bbc:	705a      	strb	r2, [r3, #1]
            	Tcp_tx_buf[2] = Tcp_tx_buf[2] +1; //count
 8000bbe:	4b7f      	ldr	r3, [pc, #508]	; (8000dbc <tcp_echoserver_recv+0x36c>)
 8000bc0:	789b      	ldrb	r3, [r3, #2]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4b7d      	ldr	r3, [pc, #500]	; (8000dbc <tcp_echoserver_recv+0x36c>)
 8000bc8:	709a      	strb	r2, [r3, #2]
            	Tcp_tx_buf[3] = 2;           	  //command ACK
 8000bca:	4b7c      	ldr	r3, [pc, #496]	; (8000dbc <tcp_echoserver_recv+0x36c>)
 8000bcc:	2202      	movs	r2, #2
 8000bce:	70da      	strb	r2, [r3, #3]
            	Tcp_tx_buf[4] = Tcp_rx_buf[4];	  //ip1
 8000bd0:	4b7b      	ldr	r3, [pc, #492]	; (8000dc0 <tcp_echoserver_recv+0x370>)
 8000bd2:	791a      	ldrb	r2, [r3, #4]
 8000bd4:	4b79      	ldr	r3, [pc, #484]	; (8000dbc <tcp_echoserver_recv+0x36c>)
 8000bd6:	711a      	strb	r2, [r3, #4]
            	Tcp_tx_buf[5] = Tcp_rx_buf[5];	  //ip1
 8000bd8:	4b79      	ldr	r3, [pc, #484]	; (8000dc0 <tcp_echoserver_recv+0x370>)
 8000bda:	795a      	ldrb	r2, [r3, #5]
 8000bdc:	4b77      	ldr	r3, [pc, #476]	; (8000dbc <tcp_echoserver_recv+0x36c>)
 8000bde:	715a      	strb	r2, [r3, #5]
            	Tcp_tx_buf[6] = Tcp_rx_buf[6];	  //ip2
 8000be0:	4b77      	ldr	r3, [pc, #476]	; (8000dc0 <tcp_echoserver_recv+0x370>)
 8000be2:	799a      	ldrb	r2, [r3, #6]
 8000be4:	4b75      	ldr	r3, [pc, #468]	; (8000dbc <tcp_echoserver_recv+0x36c>)
 8000be6:	719a      	strb	r2, [r3, #6]
            	Tcp_tx_buf[7] = Tcp_rx_buf[7];    //ip2
 8000be8:	4b75      	ldr	r3, [pc, #468]	; (8000dc0 <tcp_echoserver_recv+0x370>)
 8000bea:	79da      	ldrb	r2, [r3, #7]
 8000bec:	4b73      	ldr	r3, [pc, #460]	; (8000dbc <tcp_echoserver_recv+0x36c>)
 8000bee:	71da      	strb	r2, [r3, #7]
            	Tcp_tx_buf[8] = Tcp_rx_buf[8];	  //ip3
 8000bf0:	4b73      	ldr	r3, [pc, #460]	; (8000dc0 <tcp_echoserver_recv+0x370>)
 8000bf2:	7a1a      	ldrb	r2, [r3, #8]
 8000bf4:	4b71      	ldr	r3, [pc, #452]	; (8000dbc <tcp_echoserver_recv+0x36c>)
 8000bf6:	721a      	strb	r2, [r3, #8]
            	Tcp_tx_buf[9] = Tcp_rx_buf[9];    //ip3
 8000bf8:	4b71      	ldr	r3, [pc, #452]	; (8000dc0 <tcp_echoserver_recv+0x370>)
 8000bfa:	7a5a      	ldrb	r2, [r3, #9]
 8000bfc:	4b6f      	ldr	r3, [pc, #444]	; (8000dbc <tcp_echoserver_recv+0x36c>)
 8000bfe:	725a      	strb	r2, [r3, #9]
            	Tcp_tx_buf[10] = Tcp_rx_buf[10];  //ip4
 8000c00:	4b6f      	ldr	r3, [pc, #444]	; (8000dc0 <tcp_echoserver_recv+0x370>)
 8000c02:	7a9a      	ldrb	r2, [r3, #10]
 8000c04:	4b6d      	ldr	r3, [pc, #436]	; (8000dbc <tcp_echoserver_recv+0x36c>)
 8000c06:	729a      	strb	r2, [r3, #10]
            	Tcp_tx_buf[11] = Tcp_rx_buf[11];  //ip4
 8000c08:	4b6d      	ldr	r3, [pc, #436]	; (8000dc0 <tcp_echoserver_recv+0x370>)
 8000c0a:	7ada      	ldrb	r2, [r3, #11]
 8000c0c:	4b6b      	ldr	r3, [pc, #428]	; (8000dbc <tcp_echoserver_recv+0x36c>)
 8000c0e:	72da      	strb	r2, [r3, #11]
            	Tcp_tx_buf[12] = Tcp_rx_buf[12];  //port
 8000c10:	4b6b      	ldr	r3, [pc, #428]	; (8000dc0 <tcp_echoserver_recv+0x370>)
 8000c12:	7b1a      	ldrb	r2, [r3, #12]
 8000c14:	4b69      	ldr	r3, [pc, #420]	; (8000dbc <tcp_echoserver_recv+0x36c>)
 8000c16:	731a      	strb	r2, [r3, #12]
            	Tcp_tx_buf[13] = Tcp_rx_buf[13];  //port
 8000c18:	4b69      	ldr	r3, [pc, #420]	; (8000dc0 <tcp_echoserver_recv+0x370>)
 8000c1a:	7b5a      	ldrb	r2, [r3, #13]
 8000c1c:	4b67      	ldr	r3, [pc, #412]	; (8000dbc <tcp_echoserver_recv+0x36c>)
 8000c1e:	735a      	strb	r2, [r3, #13]
            	Tcp_tx_buf[14] = 3;  			  //end
 8000c20:	4b66      	ldr	r3, [pc, #408]	; (8000dbc <tcp_echoserver_recv+0x36c>)
 8000c22:	2203      	movs	r2, #3
 8000c24:	739a      	strb	r2, [r3, #14]


            	_set_ip1 = (Tcp_rx_buf[5] << 8) + Tcp_rx_buf[4] ;
 8000c26:	4b66      	ldr	r3, [pc, #408]	; (8000dc0 <tcp_echoserver_recv+0x370>)
 8000c28:	795b      	ldrb	r3, [r3, #5]
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	021b      	lsls	r3, r3, #8
 8000c2e:	b29a      	uxth	r2, r3
 8000c30:	4b63      	ldr	r3, [pc, #396]	; (8000dc0 <tcp_echoserver_recv+0x370>)
 8000c32:	791b      	ldrb	r3, [r3, #4]
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	4413      	add	r3, r2
 8000c38:	b29a      	uxth	r2, r3
 8000c3a:	4b62      	ldr	r3, [pc, #392]	; (8000dc4 <tcp_echoserver_recv+0x374>)
 8000c3c:	801a      	strh	r2, [r3, #0]
            	_set_ip2 = (Tcp_rx_buf[7] << 8) + Tcp_rx_buf[6] ;
 8000c3e:	4b60      	ldr	r3, [pc, #384]	; (8000dc0 <tcp_echoserver_recv+0x370>)
 8000c40:	79db      	ldrb	r3, [r3, #7]
 8000c42:	b29b      	uxth	r3, r3
 8000c44:	021b      	lsls	r3, r3, #8
 8000c46:	b29a      	uxth	r2, r3
 8000c48:	4b5d      	ldr	r3, [pc, #372]	; (8000dc0 <tcp_echoserver_recv+0x370>)
 8000c4a:	799b      	ldrb	r3, [r3, #6]
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	4413      	add	r3, r2
 8000c50:	b29a      	uxth	r2, r3
 8000c52:	4b5d      	ldr	r3, [pc, #372]	; (8000dc8 <tcp_echoserver_recv+0x378>)
 8000c54:	801a      	strh	r2, [r3, #0]
            	_set_ip3 = (Tcp_rx_buf[9] << 8) + Tcp_rx_buf[8] ;
 8000c56:	4b5a      	ldr	r3, [pc, #360]	; (8000dc0 <tcp_echoserver_recv+0x370>)
 8000c58:	7a5b      	ldrb	r3, [r3, #9]
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	021b      	lsls	r3, r3, #8
 8000c5e:	b29a      	uxth	r2, r3
 8000c60:	4b57      	ldr	r3, [pc, #348]	; (8000dc0 <tcp_echoserver_recv+0x370>)
 8000c62:	7a1b      	ldrb	r3, [r3, #8]
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	4413      	add	r3, r2
 8000c68:	b29a      	uxth	r2, r3
 8000c6a:	4b58      	ldr	r3, [pc, #352]	; (8000dcc <tcp_echoserver_recv+0x37c>)
 8000c6c:	801a      	strh	r2, [r3, #0]
            	_set_ip4 = (Tcp_rx_buf[11] << 8) + Tcp_rx_buf[10] ;
 8000c6e:	4b54      	ldr	r3, [pc, #336]	; (8000dc0 <tcp_echoserver_recv+0x370>)
 8000c70:	7adb      	ldrb	r3, [r3, #11]
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	021b      	lsls	r3, r3, #8
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	4b51      	ldr	r3, [pc, #324]	; (8000dc0 <tcp_echoserver_recv+0x370>)
 8000c7a:	7a9b      	ldrb	r3, [r3, #10]
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	4413      	add	r3, r2
 8000c80:	b29a      	uxth	r2, r3
 8000c82:	4b53      	ldr	r3, [pc, #332]	; (8000dd0 <tcp_echoserver_recv+0x380>)
 8000c84:	801a      	strh	r2, [r3, #0]
            	//_set_port = (Tcp_rx_buf[13] << 8) + Tcp_rx_buf[12] ;
            	_set_port =9300;
 8000c86:	4b53      	ldr	r3, [pc, #332]	; (8000dd4 <tcp_echoserver_recv+0x384>)
 8000c88:	f242 4254 	movw	r2, #9300	; 0x2454
 8000c8c:	801a      	strh	r2, [r3, #0]
            	FlashMemoryWrite(_set_ip1,_set_ip2,_set_ip3,_set_ip4,_set_port);
 8000c8e:	4b4d      	ldr	r3, [pc, #308]	; (8000dc4 <tcp_echoserver_recv+0x374>)
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	b218      	sxth	r0, r3
 8000c94:	4b4c      	ldr	r3, [pc, #304]	; (8000dc8 <tcp_echoserver_recv+0x378>)
 8000c96:	881b      	ldrh	r3, [r3, #0]
 8000c98:	b219      	sxth	r1, r3
 8000c9a:	4b4c      	ldr	r3, [pc, #304]	; (8000dcc <tcp_echoserver_recv+0x37c>)
 8000c9c:	881b      	ldrh	r3, [r3, #0]
 8000c9e:	b21a      	sxth	r2, r3
 8000ca0:	4b4b      	ldr	r3, [pc, #300]	; (8000dd0 <tcp_echoserver_recv+0x380>)
 8000ca2:	881b      	ldrh	r3, [r3, #0]
 8000ca4:	b21c      	sxth	r4, r3
 8000ca6:	4b4b      	ldr	r3, [pc, #300]	; (8000dd4 <tcp_echoserver_recv+0x384>)
 8000ca8:	881b      	ldrh	r3, [r3, #0]
 8000caa:	b21b      	sxth	r3, r3
 8000cac:	9300      	str	r3, [sp, #0]
 8000cae:	4623      	mov	r3, r4
 8000cb0:	f7ff fd50 	bl	8000754 <FlashMemoryWrite>
            	es->p->payload =&Tcp_tx_buf;
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	4a40      	ldr	r2, [pc, #256]	; (8000dbc <tcp_echoserver_recv+0x36c>)
 8000cba:	605a      	str	r2, [r3, #4]
            	es->p->len= 15;
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	220f      	movs	r2, #15
 8000cc2:	815a      	strh	r2, [r3, #10]
            	es->p->tot_len = 15;
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	220f      	movs	r2, #15
 8000cca:	811a      	strh	r2, [r3, #8]
            	tcp_echoserver_send(tpcb, es);
 8000ccc:	69b9      	ldr	r1, [r7, #24]
 8000cce:	68b8      	ldr	r0, [r7, #8]
 8000cd0:	f000 fcb8 	bl	8001644 <tcp_echoserver_send>
              	iTcpRxCounter++;
 8000cd4:	4b40      	ldr	r3, [pc, #256]	; (8000dd8 <tcp_echoserver_recv+0x388>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	4a3f      	ldr	r2, [pc, #252]	; (8000dd8 <tcp_echoserver_recv+0x388>)
 8000cdc:	6013      	str	r3, [r2, #0]
              	iReceiveCmmandType =0;
 8000cde:	4b3f      	ldr	r3, [pc, #252]	; (8000ddc <tcp_echoserver_recv+0x38c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
            	break;
 8000ce4:	e165      	b.n	8000fb2 <tcp_echoserver_recv+0x562>

            case 10:  //case10이 실제 리모컨 값 주는 경우
           		Tcp_tx_buf[0] = 2;				  //start
 8000ce6:	4b35      	ldr	r3, [pc, #212]	; (8000dbc <tcp_echoserver_recv+0x36c>)
 8000ce8:	2202      	movs	r2, #2
 8000cea:	701a      	strb	r2, [r3, #0]
             	Tcp_tx_buf[1] = Tcp_rx_buf[1];	  //Length
 8000cec:	4b34      	ldr	r3, [pc, #208]	; (8000dc0 <tcp_echoserver_recv+0x370>)
 8000cee:	785a      	ldrb	r2, [r3, #1]
 8000cf0:	4b32      	ldr	r3, [pc, #200]	; (8000dbc <tcp_echoserver_recv+0x36c>)
 8000cf2:	705a      	strb	r2, [r3, #1]
             	Tcp_tx_buf[2] = Tcp_tx_buf[2] +1; //count
 8000cf4:	4b31      	ldr	r3, [pc, #196]	; (8000dbc <tcp_echoserver_recv+0x36c>)
 8000cf6:	789b      	ldrb	r3, [r3, #2]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	4b2f      	ldr	r3, [pc, #188]	; (8000dbc <tcp_echoserver_recv+0x36c>)
 8000cfe:	709a      	strb	r2, [r3, #2]
             	Tcp_tx_buf[3] = 10;				  //command ACK
 8000d00:	4b2e      	ldr	r3, [pc, #184]	; (8000dbc <tcp_echoserver_recv+0x36c>)
 8000d02:	220a      	movs	r2, #10
 8000d04:	70da      	strb	r2, [r3, #3]
             	if(uiPareingState)
 8000d06:	4b36      	ldr	r3, [pc, #216]	; (8000de0 <tcp_echoserver_recv+0x390>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d003      	beq.n	8000d16 <tcp_echoserver_recv+0x2c6>
             	  Tcp_tx_buf[4] =1; //블루투스 페어링 상태
 8000d0e:	4b2b      	ldr	r3, [pc, #172]	; (8000dbc <tcp_echoserver_recv+0x36c>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	711a      	strb	r2, [r3, #4]
 8000d14:	e002      	b.n	8000d1c <tcp_echoserver_recv+0x2cc>
             	else
             	  Tcp_tx_buf[4] =0;
 8000d16:	4b29      	ldr	r3, [pc, #164]	; (8000dbc <tcp_echoserver_recv+0x36c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	711a      	strb	r2, [r3, #4]

             	if(rx_Bluetooth=='4') //up
 8000d1c:	4b31      	ldr	r3, [pc, #196]	; (8000de4 <tcp_echoserver_recv+0x394>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b34      	cmp	r3, #52	; 0x34
 8000d22:	d10f      	bne.n	8000d44 <tcp_echoserver_recv+0x2f4>
             	{
             	Tcp_tx_buf[5]=1;
 8000d24:	4b25      	ldr	r3, [pc, #148]	; (8000dbc <tcp_echoserver_recv+0x36c>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	715a      	strb	r2, [r3, #5]
             	Tcp_tx_buf[6]=0;
 8000d2a:	4b24      	ldr	r3, [pc, #144]	; (8000dbc <tcp_echoserver_recv+0x36c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	719a      	strb	r2, [r3, #6]
             	Tcp_tx_buf[7]=0;
 8000d30:	4b22      	ldr	r3, [pc, #136]	; (8000dbc <tcp_echoserver_recv+0x36c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	71da      	strb	r2, [r3, #7]
             	Tcp_tx_buf[8]=0;
 8000d36:	4b21      	ldr	r3, [pc, #132]	; (8000dbc <tcp_echoserver_recv+0x36c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	721a      	strb	r2, [r3, #8]
             	Tcp_tx_buf[9]=0;
 8000d3c:	4b1f      	ldr	r3, [pc, #124]	; (8000dbc <tcp_echoserver_recv+0x36c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	725a      	strb	r2, [r3, #9]
 8000d42:	e060      	b.n	8000e06 <tcp_echoserver_recv+0x3b6>
             	}
                else if(rx_Bluetooth=='1') //down
 8000d44:	4b27      	ldr	r3, [pc, #156]	; (8000de4 <tcp_echoserver_recv+0x394>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b31      	cmp	r3, #49	; 0x31
 8000d4a:	d10f      	bne.n	8000d6c <tcp_echoserver_recv+0x31c>
      			{
             	Tcp_tx_buf[5]=0;
 8000d4c:	4b1b      	ldr	r3, [pc, #108]	; (8000dbc <tcp_echoserver_recv+0x36c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	715a      	strb	r2, [r3, #5]
             	Tcp_tx_buf[6]=1;
 8000d52:	4b1a      	ldr	r3, [pc, #104]	; (8000dbc <tcp_echoserver_recv+0x36c>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	719a      	strb	r2, [r3, #6]
             	Tcp_tx_buf[7]=0;
 8000d58:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <tcp_echoserver_recv+0x36c>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	71da      	strb	r2, [r3, #7]
             	Tcp_tx_buf[8]=0;
 8000d5e:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <tcp_echoserver_recv+0x36c>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	721a      	strb	r2, [r3, #8]
             	Tcp_tx_buf[9]=0;
 8000d64:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <tcp_echoserver_recv+0x36c>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	725a      	strb	r2, [r3, #9]
 8000d6a:	e04c      	b.n	8000e06 <tcp_echoserver_recv+0x3b6>
      			}
             	else if(rx_Bluetooth=='3') //left
 8000d6c:	4b1d      	ldr	r3, [pc, #116]	; (8000de4 <tcp_echoserver_recv+0x394>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b33      	cmp	r3, #51	; 0x33
 8000d72:	d10f      	bne.n	8000d94 <tcp_echoserver_recv+0x344>
      			{
             	Tcp_tx_buf[5]=0;
 8000d74:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <tcp_echoserver_recv+0x36c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	715a      	strb	r2, [r3, #5]
             	Tcp_tx_buf[6]=0;
 8000d7a:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <tcp_echoserver_recv+0x36c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	719a      	strb	r2, [r3, #6]
             	Tcp_tx_buf[7]=1;
 8000d80:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <tcp_echoserver_recv+0x36c>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	71da      	strb	r2, [r3, #7]
             	Tcp_tx_buf[8]=0;
 8000d86:	4b0d      	ldr	r3, [pc, #52]	; (8000dbc <tcp_echoserver_recv+0x36c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	721a      	strb	r2, [r3, #8]
             	Tcp_tx_buf[9]=0;
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <tcp_echoserver_recv+0x36c>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	725a      	strb	r2, [r3, #9]
 8000d92:	e038      	b.n	8000e06 <tcp_echoserver_recv+0x3b6>
      			}
             	else if(rx_Bluetooth=='2') //right
 8000d94:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <tcp_echoserver_recv+0x394>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b32      	cmp	r3, #50	; 0x32
 8000d9a:	d125      	bne.n	8000de8 <tcp_echoserver_recv+0x398>
      			{
             	Tcp_tx_buf[5]=0;
 8000d9c:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <tcp_echoserver_recv+0x36c>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	715a      	strb	r2, [r3, #5]
             	Tcp_tx_buf[6]=0;
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <tcp_echoserver_recv+0x36c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	719a      	strb	r2, [r3, #6]
             	Tcp_tx_buf[7]=0;
 8000da8:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <tcp_echoserver_recv+0x36c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	71da      	strb	r2, [r3, #7]
             	Tcp_tx_buf[8]=1;
 8000dae:	4b03      	ldr	r3, [pc, #12]	; (8000dbc <tcp_echoserver_recv+0x36c>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	721a      	strb	r2, [r3, #8]
             	Tcp_tx_buf[9]=0;
 8000db4:	4b01      	ldr	r3, [pc, #4]	; (8000dbc <tcp_echoserver_recv+0x36c>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	725a      	strb	r2, [r3, #9]
 8000dba:	e024      	b.n	8000e06 <tcp_echoserver_recv+0x3b6>
 8000dbc:	200000d8 	.word	0x200000d8
 8000dc0:	2000013c 	.word	0x2000013c
 8000dc4:	20000220 	.word	0x20000220
 8000dc8:	20000222 	.word	0x20000222
 8000dcc:	20000224 	.word	0x20000224
 8000dd0:	20000226 	.word	0x20000226
 8000dd4:	20000228 	.word	0x20000228
 8000dd8:	20000218 	.word	0x20000218
 8000ddc:	200001a4 	.word	0x200001a4
 8000de0:	200001ac 	.word	0x200001ac
 8000de4:	200001ad 	.word	0x200001ad
      			}
             	else
             	{
             	Tcp_tx_buf[5]=0;
 8000de8:	4b8c      	ldr	r3, [pc, #560]	; (800101c <tcp_echoserver_recv+0x5cc>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	715a      	strb	r2, [r3, #5]
             	Tcp_tx_buf[6]=0;
 8000dee:	4b8b      	ldr	r3, [pc, #556]	; (800101c <tcp_echoserver_recv+0x5cc>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	719a      	strb	r2, [r3, #6]
             	Tcp_tx_buf[7]=0;
 8000df4:	4b89      	ldr	r3, [pc, #548]	; (800101c <tcp_echoserver_recv+0x5cc>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	71da      	strb	r2, [r3, #7]
             	Tcp_tx_buf[8]=0;
 8000dfa:	4b88      	ldr	r3, [pc, #544]	; (800101c <tcp_echoserver_recv+0x5cc>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	721a      	strb	r2, [r3, #8]
             	Tcp_tx_buf[9]=0;
 8000e00:	4b86      	ldr	r3, [pc, #536]	; (800101c <tcp_echoserver_recv+0x5cc>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	725a      	strb	r2, [r3, #9]
             	}
             	if(!uiPareingState)
 8000e06:	4b86      	ldr	r3, [pc, #536]	; (8001020 <tcp_echoserver_recv+0x5d0>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d10e      	bne.n	8000e2c <tcp_echoserver_recv+0x3dc>
             	{
             	Tcp_tx_buf[5]=0;
 8000e0e:	4b83      	ldr	r3, [pc, #524]	; (800101c <tcp_echoserver_recv+0x5cc>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	715a      	strb	r2, [r3, #5]
             	Tcp_tx_buf[6]=0;
 8000e14:	4b81      	ldr	r3, [pc, #516]	; (800101c <tcp_echoserver_recv+0x5cc>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	719a      	strb	r2, [r3, #6]
             	Tcp_tx_buf[7]=0;
 8000e1a:	4b80      	ldr	r3, [pc, #512]	; (800101c <tcp_echoserver_recv+0x5cc>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	71da      	strb	r2, [r3, #7]
             	Tcp_tx_buf[8]=0;
 8000e20:	4b7e      	ldr	r3, [pc, #504]	; (800101c <tcp_echoserver_recv+0x5cc>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	721a      	strb	r2, [r3, #8]
             	Tcp_tx_buf[9]=0;
 8000e26:	4b7d      	ldr	r3, [pc, #500]	; (800101c <tcp_echoserver_recv+0x5cc>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	725a      	strb	r2, [r3, #9]
             	}
             	Tcp_tx_buf[10]=3; //end
 8000e2c:	4b7b      	ldr	r3, [pc, #492]	; (800101c <tcp_echoserver_recv+0x5cc>)
 8000e2e:	2203      	movs	r2, #3
 8000e30:	729a      	strb	r2, [r3, #10]
             	es->p->payload =&Tcp_tx_buf;
 8000e32:	69bb      	ldr	r3, [r7, #24]
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	4a79      	ldr	r2, [pc, #484]	; (800101c <tcp_echoserver_recv+0x5cc>)
 8000e38:	605a      	str	r2, [r3, #4]
             	es->p->len= 11;
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	220b      	movs	r2, #11
 8000e40:	815a      	strh	r2, [r3, #10]
             	es->p->tot_len = 11;
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	220b      	movs	r2, #11
 8000e48:	811a      	strh	r2, [r3, #8]
             	tcp_echoserver_send(tpcb, es);
 8000e4a:	69b9      	ldr	r1, [r7, #24]
 8000e4c:	68b8      	ldr	r0, [r7, #8]
 8000e4e:	f000 fbf9 	bl	8001644 <tcp_echoserver_send>
             	break;
 8000e52:	e0ae      	b.n	8000fb2 <tcp_echoserver_recv+0x562>

            case 100: //AT 살아있니?

            	//Rs232_str = "AT\r\n";
            	iTcpRs232Debug =0;
 8000e54:	4b73      	ldr	r3, [pc, #460]	; (8001024 <tcp_echoserver_recv+0x5d4>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
            	for(int i=0; i<99; i++)
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	633b      	str	r3, [r7, #48]	; 0x30
 8000e5e:	e011      	b.n	8000e84 <tcp_echoserver_recv+0x434>
            	{
            		Tcp_tx_buf[i] = '\0';
 8000e60:	4a6e      	ldr	r2, [pc, #440]	; (800101c <tcp_echoserver_recv+0x5cc>)
 8000e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e64:	4413      	add	r3, r2
 8000e66:	2200      	movs	r2, #0
 8000e68:	701a      	strb	r2, [r3, #0]

            		Rs232_receive_buffer[i] = '\0';
 8000e6a:	4a6f      	ldr	r2, [pc, #444]	; (8001028 <tcp_echoserver_recv+0x5d8>)
 8000e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e6e:	4413      	add	r3, r2
 8000e70:	2200      	movs	r2, #0
 8000e72:	701a      	strb	r2, [r3, #0]
            		Send_BT_STR[i] = '\0';
 8000e74:	4a6d      	ldr	r2, [pc, #436]	; (800102c <tcp_echoserver_recv+0x5dc>)
 8000e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e78:	4413      	add	r3, r2
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	701a      	strb	r2, [r3, #0]
            	for(int i=0; i<99; i++)
 8000e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e80:	3301      	adds	r3, #1
 8000e82:	633b      	str	r3, [r7, #48]	; 0x30
 8000e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e86:	2b62      	cmp	r3, #98	; 0x62
 8000e88:	ddea      	ble.n	8000e60 <tcp_echoserver_recv+0x410>
            	}

            	for(int i=0; i<Tcp_rx_buf[1]-5; i++)
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e8e:	e00b      	b.n	8000ea8 <tcp_echoserver_recv+0x458>
            	{
            		Send_BT_STR[i] = Tcp_rx_buf[i+4];
 8000e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e92:	3304      	adds	r3, #4
 8000e94:	4a66      	ldr	r2, [pc, #408]	; (8001030 <tcp_echoserver_recv+0x5e0>)
 8000e96:	5cd1      	ldrb	r1, [r2, r3]
 8000e98:	4a64      	ldr	r2, [pc, #400]	; (800102c <tcp_echoserver_recv+0x5dc>)
 8000e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e9c:	4413      	add	r3, r2
 8000e9e:	460a      	mov	r2, r1
 8000ea0:	701a      	strb	r2, [r3, #0]
            	for(int i=0; i<Tcp_rx_buf[1]-5; i++)
 8000ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ea8:	4b61      	ldr	r3, [pc, #388]	; (8001030 <tcp_echoserver_recv+0x5e0>)
 8000eaa:	785b      	ldrb	r3, [r3, #1]
 8000eac:	3b05      	subs	r3, #5
 8000eae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	dbed      	blt.n	8000e90 <tcp_echoserver_recv+0x440>
            	}
            	iTcpRs232Debug =2;
 8000eb4:	4b5b      	ldr	r3, [pc, #364]	; (8001024 <tcp_echoserver_recv+0x5d4>)
 8000eb6:	2202      	movs	r2, #2
 8000eb8:	601a      	str	r2, [r3, #0]
            	if(Tcp_rx_buf[1]-5<1)
 8000eba:	4b5d      	ldr	r3, [pc, #372]	; (8001030 <tcp_echoserver_recv+0x5e0>)
 8000ebc:	785b      	ldrb	r3, [r3, #1]
 8000ebe:	2b05      	cmp	r3, #5
 8000ec0:	d806      	bhi.n	8000ed0 <tcp_echoserver_recv+0x480>
            	{
            		HAL_UART_Transmit(&huart3,Send_BT_STR,sizeof(Send_BT_STR),10);   //RS232 송신
 8000ec2:	230a      	movs	r3, #10
 8000ec4:	2264      	movs	r2, #100	; 0x64
 8000ec6:	4959      	ldr	r1, [pc, #356]	; (800102c <tcp_echoserver_recv+0x5dc>)
 8000ec8:	485a      	ldr	r0, [pc, #360]	; (8001034 <tcp_echoserver_recv+0x5e4>)
 8000eca:	f006 fa50 	bl	800736e <HAL_UART_Transmit>
 8000ece:	e009      	b.n	8000ee4 <tcp_echoserver_recv+0x494>
            	}
               	else
               	{
               		HAL_UART_Transmit(&huart3,Send_BT_STR,Tcp_rx_buf[1]-5,10);   //RS232 송신
 8000ed0:	4b57      	ldr	r3, [pc, #348]	; (8001030 <tcp_echoserver_recv+0x5e0>)
 8000ed2:	785b      	ldrb	r3, [r3, #1]
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	3b05      	subs	r3, #5
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	230a      	movs	r3, #10
 8000edc:	4953      	ldr	r1, [pc, #332]	; (800102c <tcp_echoserver_recv+0x5dc>)
 8000ede:	4855      	ldr	r0, [pc, #340]	; (8001034 <tcp_echoserver_recv+0x5e4>)
 8000ee0:	f006 fa45 	bl	800736e <HAL_UART_Transmit>
               	}
            	iTcpRs232Debug =3;
 8000ee4:	4b4f      	ldr	r3, [pc, #316]	; (8001024 <tcp_echoserver_recv+0x5d4>)
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	601a      	str	r2, [r3, #0]
            	Delay_ms(300);
 8000eea:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000eee:	f7ff fb71 	bl	80005d4 <Delay_ms>
            	iTcpRs232Debug =4;
 8000ef2:	4b4c      	ldr	r3, [pc, #304]	; (8001024 <tcp_echoserver_recv+0x5d4>)
 8000ef4:	2204      	movs	r2, #4
 8000ef6:	601a      	str	r2, [r3, #0]
               	Tcp_tx_buf[0] = 2;				  //telegram start
 8000ef8:	4b48      	ldr	r3, [pc, #288]	; (800101c <tcp_echoserver_recv+0x5cc>)
 8000efa:	2202      	movs	r2, #2
 8000efc:	701a      	strb	r2, [r3, #0]
              	Tcp_tx_buf[1] = iRs232_count_CallBack+5;  //telegram length
 8000efe:	4b4e      	ldr	r3, [pc, #312]	; (8001038 <tcp_echoserver_recv+0x5e8>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	3305      	adds	r3, #5
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	4b44      	ldr	r3, [pc, #272]	; (800101c <tcp_echoserver_recv+0x5cc>)
 8000f0a:	705a      	strb	r2, [r3, #1]
               	Tcp_tx_buf[2] = Tcp_tx_buf[2] +1; //count
 8000f0c:	4b43      	ldr	r3, [pc, #268]	; (800101c <tcp_echoserver_recv+0x5cc>)
 8000f0e:	789b      	ldrb	r3, [r3, #2]
 8000f10:	3301      	adds	r3, #1
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	4b41      	ldr	r3, [pc, #260]	; (800101c <tcp_echoserver_recv+0x5cc>)
 8000f16:	709a      	strb	r2, [r3, #2]
               	Tcp_tx_buf[3] = 100;           	  //command ACK
 8000f18:	4b40      	ldr	r3, [pc, #256]	; (800101c <tcp_echoserver_recv+0x5cc>)
 8000f1a:	2264      	movs	r2, #100	; 0x64
 8000f1c:	70da      	strb	r2, [r3, #3]
               	iTcpRs232Debug =5;
 8000f1e:	4b41      	ldr	r3, [pc, #260]	; (8001024 <tcp_echoserver_recv+0x5d4>)
 8000f20:	2205      	movs	r2, #5
 8000f22:	601a      	str	r2, [r3, #0]
            	for(int i=0; i<iRs232_count_CallBack; i++)  //Rs232 인터럽트 갯수 리턴 받아 i값 적용
 8000f24:	2300      	movs	r3, #0
 8000f26:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f28:	e00b      	b.n	8000f42 <tcp_echoserver_recv+0x4f2>
            	{
            		Tcp_tx_buf[i+4] = Rs232_receive_buffer[i];
 8000f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	493e      	ldr	r1, [pc, #248]	; (8001028 <tcp_echoserver_recv+0x5d8>)
 8000f30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f32:	440a      	add	r2, r1
 8000f34:	7812      	ldrb	r2, [r2, #0]
 8000f36:	b2d1      	uxtb	r1, r2
 8000f38:	4a38      	ldr	r2, [pc, #224]	; (800101c <tcp_echoserver_recv+0x5cc>)
 8000f3a:	54d1      	strb	r1, [r2, r3]
            	for(int i=0; i<iRs232_count_CallBack; i++)  //Rs232 인터럽트 갯수 리턴 받아 i값 적용
 8000f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f3e:	3301      	adds	r3, #1
 8000f40:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f42:	4b3d      	ldr	r3, [pc, #244]	; (8001038 <tcp_echoserver_recv+0x5e8>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	dbee      	blt.n	8000f2a <tcp_echoserver_recv+0x4da>
            	}

               	Tcp_tx_buf[iRs232_count_CallBack+4] = 3;	//telegram  end
 8000f4c:	4b3a      	ldr	r3, [pc, #232]	; (8001038 <tcp_echoserver_recv+0x5e8>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	3304      	adds	r3, #4
 8000f52:	4a32      	ldr	r2, [pc, #200]	; (800101c <tcp_echoserver_recv+0x5cc>)
 8000f54:	2103      	movs	r1, #3
 8000f56:	54d1      	strb	r1, [r2, r3]

               	es->p->payload =&Tcp_tx_buf;
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	4a2f      	ldr	r2, [pc, #188]	; (800101c <tcp_echoserver_recv+0x5cc>)
 8000f5e:	605a      	str	r2, [r3, #4]
              	es->p->len= iRs232_count_CallBack+5;
 8000f60:	4b35      	ldr	r3, [pc, #212]	; (8001038 <tcp_echoserver_recv+0x5e8>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	b29a      	uxth	r2, r3
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	3205      	adds	r2, #5
 8000f6c:	b292      	uxth	r2, r2
 8000f6e:	815a      	strh	r2, [r3, #10]
              	es->p->tot_len = iRs232_count_CallBack+5;
 8000f70:	4b31      	ldr	r3, [pc, #196]	; (8001038 <tcp_echoserver_recv+0x5e8>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	b29a      	uxth	r2, r3
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	3205      	adds	r2, #5
 8000f7c:	b292      	uxth	r2, r2
 8000f7e:	811a      	strh	r2, [r3, #8]
              	iTcpRs232Debug =10;
 8000f80:	4b28      	ldr	r3, [pc, #160]	; (8001024 <tcp_echoserver_recv+0x5d4>)
 8000f82:	220a      	movs	r2, #10
 8000f84:	601a      	str	r2, [r3, #0]
              	tcp_echoserver_send(tpcb, es);    //TCP 송신
 8000f86:	69b9      	ldr	r1, [r7, #24]
 8000f88:	68b8      	ldr	r0, [r7, #8]
 8000f8a:	f000 fb5b 	bl	8001644 <tcp_echoserver_send>
              	iRs232_count_CallBack =0;
 8000f8e:	4b2a      	ldr	r3, [pc, #168]	; (8001038 <tcp_echoserver_recv+0x5e8>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
              	iRs232_count =0;
 8000f94:	4b29      	ldr	r3, [pc, #164]	; (800103c <tcp_echoserver_recv+0x5ec>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
              	iTcpRs232Debug =20;
 8000f9a:	4b22      	ldr	r3, [pc, #136]	; (8001024 <tcp_echoserver_recv+0x5d4>)
 8000f9c:	2214      	movs	r2, #20
 8000f9e:	601a      	str	r2, [r3, #0]
              	iTcpRxCounter++;
 8000fa0:	4b27      	ldr	r3, [pc, #156]	; (8001040 <tcp_echoserver_recv+0x5f0>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	4a26      	ldr	r2, [pc, #152]	; (8001040 <tcp_echoserver_recv+0x5f0>)
 8000fa8:	6013      	str	r3, [r2, #0]
              	iReceiveCmmandType =0;
 8000faa:	4b26      	ldr	r3, [pc, #152]	; (8001044 <tcp_echoserver_recv+0x5f4>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
              	break;
 8000fb0:	bf00      	nop

          }

    ret_err = ERR_OK;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000fb8:	e2bc      	b.n	8001534 <tcp_echoserver_recv+0xae4>
  }
  else if (es->state == ES_RECEIVED)
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	f040 8295 	bne.w	80014ee <tcp_echoserver_recv+0xa9e>
  {
	/* 클라이언트에서 두번째부터 데이터를 받았을 떄 */
    if(es->p == NULL)
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	f040 8285 	bne.w	80014d8 <tcp_echoserver_recv+0xa88>
    {
      iReceiveCounter++;
 8000fce:	4b1e      	ldr	r3, [pc, #120]	; (8001048 <tcp_echoserver_recv+0x5f8>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	4a1c      	ldr	r2, [pc, #112]	; (8001048 <tcp_echoserver_recv+0x5f8>)
 8000fd6:	6013      	str	r3, [r2, #0]
      es->p = p;
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
      pbuf_copy_partial(p, &Tcp_rx_buf, p->tot_len, 0) ;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	891a      	ldrh	r2, [r3, #8]
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	4912      	ldr	r1, [pc, #72]	; (8001030 <tcp_echoserver_recv+0x5e0>)
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f009 fc4a 	bl	800a880 <pbuf_copy_partial>
      iReceiveCmmandType = Tcp_rx_buf[3];
 8000fec:	4b10      	ldr	r3, [pc, #64]	; (8001030 <tcp_echoserver_recv+0x5e0>)
 8000fee:	78db      	ldrb	r3, [r3, #3]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b14      	ldr	r3, [pc, #80]	; (8001044 <tcp_echoserver_recv+0x5f4>)
 8000ff4:	601a      	str	r2, [r3, #0]
      /* send back received data */


      switch(iReceiveCmmandType)
 8000ff6:	4b13      	ldr	r3, [pc, #76]	; (8001044 <tcp_echoserver_recv+0x5f4>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2b64      	cmp	r3, #100	; 0x64
 8000ffc:	f000 81bd 	beq.w	800137a <tcp_echoserver_recv+0x92a>
 8001000:	2b64      	cmp	r3, #100	; 0x64
 8001002:	f300 8270 	bgt.w	80014e6 <tcp_echoserver_recv+0xa96>
 8001006:	2b0a      	cmp	r3, #10
 8001008:	f000 80f8 	beq.w	80011fc <tcp_echoserver_recv+0x7ac>
 800100c:	2b0a      	cmp	r3, #10
 800100e:	f300 826a 	bgt.w	80014e6 <tcp_echoserver_recv+0xa96>
 8001012:	2b01      	cmp	r3, #1
 8001014:	d01a      	beq.n	800104c <tcp_echoserver_recv+0x5fc>
 8001016:	2b02      	cmp	r3, #2
 8001018:	d04d      	beq.n	80010b6 <tcp_echoserver_recv+0x666>
 800101a:	e264      	b.n	80014e6 <tcp_echoserver_recv+0xa96>
 800101c:	200000d8 	.word	0x200000d8
 8001020:	200001ac 	.word	0x200001ac
 8001024:	2000021c 	.word	0x2000021c
 8001028:	20000304 	.word	0x20000304
 800102c:	200001b4 	.word	0x200001b4
 8001030:	2000013c 	.word	0x2000013c
 8001034:	200002a8 	.word	0x200002a8
 8001038:	20000300 	.word	0x20000300
 800103c:	200002fc 	.word	0x200002fc
 8001040:	20000218 	.word	0x20000218
 8001044:	200001a4 	.word	0x200001a4
 8001048:	200001b0 	.word	0x200001b0
      {
        case 1: //You Live?
        	sTxCount++;
 800104c:	4b97      	ldr	r3, [pc, #604]	; (80012ac <tcp_echoserver_recv+0x85c>)
 800104e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001052:	b29b      	uxth	r3, r3
 8001054:	3301      	adds	r3, #1
 8001056:	b29b      	uxth	r3, r3
 8001058:	b21a      	sxth	r2, r3
 800105a:	4b94      	ldr	r3, [pc, #592]	; (80012ac <tcp_echoserver_recv+0x85c>)
 800105c:	801a      	strh	r2, [r3, #0]
        	if(sTxCount>100)
 800105e:	4b93      	ldr	r3, [pc, #588]	; (80012ac <tcp_echoserver_recv+0x85c>)
 8001060:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001064:	2b64      	cmp	r3, #100	; 0x64
 8001066:	dd02      	ble.n	800106e <tcp_echoserver_recv+0x61e>
        		sTxCount=0;
 8001068:	4b90      	ldr	r3, [pc, #576]	; (80012ac <tcp_echoserver_recv+0x85c>)
 800106a:	2200      	movs	r2, #0
 800106c:	801a      	strh	r2, [r3, #0]
        	Tcp_tx_buf[0] = 2;				  //start
 800106e:	4b90      	ldr	r3, [pc, #576]	; (80012b0 <tcp_echoserver_recv+0x860>)
 8001070:	2202      	movs	r2, #2
 8001072:	701a      	strb	r2, [r3, #0]
          	Tcp_tx_buf[1] = Tcp_rx_buf[1];	  //length
 8001074:	4b8f      	ldr	r3, [pc, #572]	; (80012b4 <tcp_echoserver_recv+0x864>)
 8001076:	785a      	ldrb	r2, [r3, #1]
 8001078:	4b8d      	ldr	r3, [pc, #564]	; (80012b0 <tcp_echoserver_recv+0x860>)
 800107a:	705a      	strb	r2, [r3, #1]
           	Tcp_tx_buf[2] = Tcp_tx_buf[2] +1; //count
 800107c:	4b8c      	ldr	r3, [pc, #560]	; (80012b0 <tcp_echoserver_recv+0x860>)
 800107e:	789b      	ldrb	r3, [r3, #2]
 8001080:	3301      	adds	r3, #1
 8001082:	b2da      	uxtb	r2, r3
 8001084:	4b8a      	ldr	r3, [pc, #552]	; (80012b0 <tcp_echoserver_recv+0x860>)
 8001086:	709a      	strb	r2, [r3, #2]
           	Tcp_tx_buf[3] = 1;           	  //command ACK
 8001088:	4b89      	ldr	r3, [pc, #548]	; (80012b0 <tcp_echoserver_recv+0x860>)
 800108a:	2201      	movs	r2, #1
 800108c:	70da      	strb	r2, [r3, #3]
           	Tcp_tx_buf[4] = 3;	  			  //End
 800108e:	4b88      	ldr	r3, [pc, #544]	; (80012b0 <tcp_echoserver_recv+0x860>)
 8001090:	2203      	movs	r2, #3
 8001092:	711a      	strb	r2, [r3, #4]
        	es->p->payload =&Tcp_tx_buf;
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	4a85      	ldr	r2, [pc, #532]	; (80012b0 <tcp_echoserver_recv+0x860>)
 800109a:	605a      	str	r2, [r3, #4]
        	es->p->len= 5;
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	2205      	movs	r2, #5
 80010a2:	815a      	strh	r2, [r3, #10]
        	es->p->tot_len = 5;
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	2205      	movs	r2, #5
 80010aa:	811a      	strh	r2, [r3, #8]
        	tcp_echoserver_send(tpcb, es);
 80010ac:	69b9      	ldr	r1, [r7, #24]
 80010ae:	68b8      	ldr	r0, [r7, #8]
 80010b0:	f000 fac8 	bl	8001644 <tcp_echoserver_send>
        	break;
 80010b4:	e217      	b.n	80014e6 <tcp_echoserver_recv+0xa96>

        case 2: //ip1234 ,port 설정
        	Tcp_tx_buf[0] = 2;				  //start
 80010b6:	4b7e      	ldr	r3, [pc, #504]	; (80012b0 <tcp_echoserver_recv+0x860>)
 80010b8:	2202      	movs	r2, #2
 80010ba:	701a      	strb	r2, [r3, #0]
        	Tcp_tx_buf[1] = Tcp_rx_buf[1];	  //length
 80010bc:	4b7d      	ldr	r3, [pc, #500]	; (80012b4 <tcp_echoserver_recv+0x864>)
 80010be:	785a      	ldrb	r2, [r3, #1]
 80010c0:	4b7b      	ldr	r3, [pc, #492]	; (80012b0 <tcp_echoserver_recv+0x860>)
 80010c2:	705a      	strb	r2, [r3, #1]
        	Tcp_tx_buf[2] = Tcp_tx_buf[2] +1; //count
 80010c4:	4b7a      	ldr	r3, [pc, #488]	; (80012b0 <tcp_echoserver_recv+0x860>)
 80010c6:	789b      	ldrb	r3, [r3, #2]
 80010c8:	3301      	adds	r3, #1
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	4b78      	ldr	r3, [pc, #480]	; (80012b0 <tcp_echoserver_recv+0x860>)
 80010ce:	709a      	strb	r2, [r3, #2]
        	Tcp_tx_buf[3] = 2;           	  //command ACK
 80010d0:	4b77      	ldr	r3, [pc, #476]	; (80012b0 <tcp_echoserver_recv+0x860>)
 80010d2:	2202      	movs	r2, #2
 80010d4:	70da      	strb	r2, [r3, #3]
        	Tcp_tx_buf[4] = Tcp_rx_buf[4];	  //ip1
 80010d6:	4b77      	ldr	r3, [pc, #476]	; (80012b4 <tcp_echoserver_recv+0x864>)
 80010d8:	791a      	ldrb	r2, [r3, #4]
 80010da:	4b75      	ldr	r3, [pc, #468]	; (80012b0 <tcp_echoserver_recv+0x860>)
 80010dc:	711a      	strb	r2, [r3, #4]
        	Tcp_tx_buf[5] = Tcp_rx_buf[5];	  //ip1
 80010de:	4b75      	ldr	r3, [pc, #468]	; (80012b4 <tcp_echoserver_recv+0x864>)
 80010e0:	795a      	ldrb	r2, [r3, #5]
 80010e2:	4b73      	ldr	r3, [pc, #460]	; (80012b0 <tcp_echoserver_recv+0x860>)
 80010e4:	715a      	strb	r2, [r3, #5]
        	Tcp_tx_buf[6] = Tcp_rx_buf[6];	  //ip2
 80010e6:	4b73      	ldr	r3, [pc, #460]	; (80012b4 <tcp_echoserver_recv+0x864>)
 80010e8:	799a      	ldrb	r2, [r3, #6]
 80010ea:	4b71      	ldr	r3, [pc, #452]	; (80012b0 <tcp_echoserver_recv+0x860>)
 80010ec:	719a      	strb	r2, [r3, #6]
        	Tcp_tx_buf[7] = Tcp_rx_buf[7];    //ip2
 80010ee:	4b71      	ldr	r3, [pc, #452]	; (80012b4 <tcp_echoserver_recv+0x864>)
 80010f0:	79da      	ldrb	r2, [r3, #7]
 80010f2:	4b6f      	ldr	r3, [pc, #444]	; (80012b0 <tcp_echoserver_recv+0x860>)
 80010f4:	71da      	strb	r2, [r3, #7]
        	Tcp_tx_buf[8] = Tcp_rx_buf[8];	  //ip3
 80010f6:	4b6f      	ldr	r3, [pc, #444]	; (80012b4 <tcp_echoserver_recv+0x864>)
 80010f8:	7a1a      	ldrb	r2, [r3, #8]
 80010fa:	4b6d      	ldr	r3, [pc, #436]	; (80012b0 <tcp_echoserver_recv+0x860>)
 80010fc:	721a      	strb	r2, [r3, #8]
        	Tcp_tx_buf[9] = Tcp_rx_buf[9];    //ip3
 80010fe:	4b6d      	ldr	r3, [pc, #436]	; (80012b4 <tcp_echoserver_recv+0x864>)
 8001100:	7a5a      	ldrb	r2, [r3, #9]
 8001102:	4b6b      	ldr	r3, [pc, #428]	; (80012b0 <tcp_echoserver_recv+0x860>)
 8001104:	725a      	strb	r2, [r3, #9]
        	Tcp_tx_buf[10] = Tcp_rx_buf[10];  //ip4
 8001106:	4b6b      	ldr	r3, [pc, #428]	; (80012b4 <tcp_echoserver_recv+0x864>)
 8001108:	7a9a      	ldrb	r2, [r3, #10]
 800110a:	4b69      	ldr	r3, [pc, #420]	; (80012b0 <tcp_echoserver_recv+0x860>)
 800110c:	729a      	strb	r2, [r3, #10]
        	Tcp_tx_buf[11] = Tcp_rx_buf[11];  //ip4
 800110e:	4b69      	ldr	r3, [pc, #420]	; (80012b4 <tcp_echoserver_recv+0x864>)
 8001110:	7ada      	ldrb	r2, [r3, #11]
 8001112:	4b67      	ldr	r3, [pc, #412]	; (80012b0 <tcp_echoserver_recv+0x860>)
 8001114:	72da      	strb	r2, [r3, #11]
        	Tcp_tx_buf[12] = Tcp_rx_buf[12];  //port
 8001116:	4b67      	ldr	r3, [pc, #412]	; (80012b4 <tcp_echoserver_recv+0x864>)
 8001118:	7b1a      	ldrb	r2, [r3, #12]
 800111a:	4b65      	ldr	r3, [pc, #404]	; (80012b0 <tcp_echoserver_recv+0x860>)
 800111c:	731a      	strb	r2, [r3, #12]
        	Tcp_tx_buf[13] = Tcp_rx_buf[13];  //port
 800111e:	4b65      	ldr	r3, [pc, #404]	; (80012b4 <tcp_echoserver_recv+0x864>)
 8001120:	7b5a      	ldrb	r2, [r3, #13]
 8001122:	4b63      	ldr	r3, [pc, #396]	; (80012b0 <tcp_echoserver_recv+0x860>)
 8001124:	735a      	strb	r2, [r3, #13]
        	Tcp_tx_buf[14] = 3;  			  //end
 8001126:	4b62      	ldr	r3, [pc, #392]	; (80012b0 <tcp_echoserver_recv+0x860>)
 8001128:	2203      	movs	r2, #3
 800112a:	739a      	strb	r2, [r3, #14]


        	_set_ip1 = (Tcp_rx_buf[5] << 8) + Tcp_rx_buf[4] ;
 800112c:	4b61      	ldr	r3, [pc, #388]	; (80012b4 <tcp_echoserver_recv+0x864>)
 800112e:	795b      	ldrb	r3, [r3, #5]
 8001130:	b29b      	uxth	r3, r3
 8001132:	021b      	lsls	r3, r3, #8
 8001134:	b29a      	uxth	r2, r3
 8001136:	4b5f      	ldr	r3, [pc, #380]	; (80012b4 <tcp_echoserver_recv+0x864>)
 8001138:	791b      	ldrb	r3, [r3, #4]
 800113a:	b29b      	uxth	r3, r3
 800113c:	4413      	add	r3, r2
 800113e:	b29a      	uxth	r2, r3
 8001140:	4b5d      	ldr	r3, [pc, #372]	; (80012b8 <tcp_echoserver_recv+0x868>)
 8001142:	801a      	strh	r2, [r3, #0]
        	_set_ip2 = (Tcp_rx_buf[7] << 8) + Tcp_rx_buf[6] ;
 8001144:	4b5b      	ldr	r3, [pc, #364]	; (80012b4 <tcp_echoserver_recv+0x864>)
 8001146:	79db      	ldrb	r3, [r3, #7]
 8001148:	b29b      	uxth	r3, r3
 800114a:	021b      	lsls	r3, r3, #8
 800114c:	b29a      	uxth	r2, r3
 800114e:	4b59      	ldr	r3, [pc, #356]	; (80012b4 <tcp_echoserver_recv+0x864>)
 8001150:	799b      	ldrb	r3, [r3, #6]
 8001152:	b29b      	uxth	r3, r3
 8001154:	4413      	add	r3, r2
 8001156:	b29a      	uxth	r2, r3
 8001158:	4b58      	ldr	r3, [pc, #352]	; (80012bc <tcp_echoserver_recv+0x86c>)
 800115a:	801a      	strh	r2, [r3, #0]
        	_set_ip3 = (Tcp_rx_buf[9] << 8) + Tcp_rx_buf[8] ;
 800115c:	4b55      	ldr	r3, [pc, #340]	; (80012b4 <tcp_echoserver_recv+0x864>)
 800115e:	7a5b      	ldrb	r3, [r3, #9]
 8001160:	b29b      	uxth	r3, r3
 8001162:	021b      	lsls	r3, r3, #8
 8001164:	b29a      	uxth	r2, r3
 8001166:	4b53      	ldr	r3, [pc, #332]	; (80012b4 <tcp_echoserver_recv+0x864>)
 8001168:	7a1b      	ldrb	r3, [r3, #8]
 800116a:	b29b      	uxth	r3, r3
 800116c:	4413      	add	r3, r2
 800116e:	b29a      	uxth	r2, r3
 8001170:	4b53      	ldr	r3, [pc, #332]	; (80012c0 <tcp_echoserver_recv+0x870>)
 8001172:	801a      	strh	r2, [r3, #0]
        	_set_ip4 = (Tcp_rx_buf[11] << 8) + Tcp_rx_buf[10] ;
 8001174:	4b4f      	ldr	r3, [pc, #316]	; (80012b4 <tcp_echoserver_recv+0x864>)
 8001176:	7adb      	ldrb	r3, [r3, #11]
 8001178:	b29b      	uxth	r3, r3
 800117a:	021b      	lsls	r3, r3, #8
 800117c:	b29a      	uxth	r2, r3
 800117e:	4b4d      	ldr	r3, [pc, #308]	; (80012b4 <tcp_echoserver_recv+0x864>)
 8001180:	7a9b      	ldrb	r3, [r3, #10]
 8001182:	b29b      	uxth	r3, r3
 8001184:	4413      	add	r3, r2
 8001186:	b29a      	uxth	r2, r3
 8001188:	4b4e      	ldr	r3, [pc, #312]	; (80012c4 <tcp_echoserver_recv+0x874>)
 800118a:	801a      	strh	r2, [r3, #0]
        	_set_port = (Tcp_rx_buf[13] << 8) + Tcp_rx_buf[12] ;
 800118c:	4b49      	ldr	r3, [pc, #292]	; (80012b4 <tcp_echoserver_recv+0x864>)
 800118e:	7b5b      	ldrb	r3, [r3, #13]
 8001190:	b29b      	uxth	r3, r3
 8001192:	021b      	lsls	r3, r3, #8
 8001194:	b29a      	uxth	r2, r3
 8001196:	4b47      	ldr	r3, [pc, #284]	; (80012b4 <tcp_echoserver_recv+0x864>)
 8001198:	7b1b      	ldrb	r3, [r3, #12]
 800119a:	b29b      	uxth	r3, r3
 800119c:	4413      	add	r3, r2
 800119e:	b29a      	uxth	r2, r3
 80011a0:	4b49      	ldr	r3, [pc, #292]	; (80012c8 <tcp_echoserver_recv+0x878>)
 80011a2:	801a      	strh	r2, [r3, #0]
        	FlashMemoryWrite(_set_ip1,_set_ip2,_set_ip3,_set_ip4,_set_port);
 80011a4:	4b44      	ldr	r3, [pc, #272]	; (80012b8 <tcp_echoserver_recv+0x868>)
 80011a6:	881b      	ldrh	r3, [r3, #0]
 80011a8:	b218      	sxth	r0, r3
 80011aa:	4b44      	ldr	r3, [pc, #272]	; (80012bc <tcp_echoserver_recv+0x86c>)
 80011ac:	881b      	ldrh	r3, [r3, #0]
 80011ae:	b219      	sxth	r1, r3
 80011b0:	4b43      	ldr	r3, [pc, #268]	; (80012c0 <tcp_echoserver_recv+0x870>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	b21a      	sxth	r2, r3
 80011b6:	4b43      	ldr	r3, [pc, #268]	; (80012c4 <tcp_echoserver_recv+0x874>)
 80011b8:	881b      	ldrh	r3, [r3, #0]
 80011ba:	b21c      	sxth	r4, r3
 80011bc:	4b42      	ldr	r3, [pc, #264]	; (80012c8 <tcp_echoserver_recv+0x878>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	b21b      	sxth	r3, r3
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	4623      	mov	r3, r4
 80011c6:	f7ff fac5 	bl	8000754 <FlashMemoryWrite>
        	es->p->payload =&Tcp_tx_buf;
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	4a38      	ldr	r2, [pc, #224]	; (80012b0 <tcp_echoserver_recv+0x860>)
 80011d0:	605a      	str	r2, [r3, #4]
        	es->p->len= 15;
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	220f      	movs	r2, #15
 80011d8:	815a      	strh	r2, [r3, #10]
        	es->p->tot_len = 15;
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	220f      	movs	r2, #15
 80011e0:	811a      	strh	r2, [r3, #8]
        	tcp_echoserver_send(tpcb, es);
 80011e2:	69b9      	ldr	r1, [r7, #24]
 80011e4:	68b8      	ldr	r0, [r7, #8]
 80011e6:	f000 fa2d 	bl	8001644 <tcp_echoserver_send>
          	iTcpRxCounter++;
 80011ea:	4b38      	ldr	r3, [pc, #224]	; (80012cc <tcp_echoserver_recv+0x87c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	3301      	adds	r3, #1
 80011f0:	4a36      	ldr	r2, [pc, #216]	; (80012cc <tcp_echoserver_recv+0x87c>)
 80011f2:	6013      	str	r3, [r2, #0]
          	iReceiveCmmandType =0;
 80011f4:	4b36      	ldr	r3, [pc, #216]	; (80012d0 <tcp_echoserver_recv+0x880>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
        	break;
 80011fa:	e174      	b.n	80014e6 <tcp_echoserver_recv+0xa96>

        case 10:  //case10이 실제 리모컨 값 주는 경우
       		Tcp_tx_buf[0] = 2;				  //start
 80011fc:	4b2c      	ldr	r3, [pc, #176]	; (80012b0 <tcp_echoserver_recv+0x860>)
 80011fe:	2202      	movs	r2, #2
 8001200:	701a      	strb	r2, [r3, #0]
         	Tcp_tx_buf[1] = Tcp_rx_buf[1];	  //Length
 8001202:	4b2c      	ldr	r3, [pc, #176]	; (80012b4 <tcp_echoserver_recv+0x864>)
 8001204:	785a      	ldrb	r2, [r3, #1]
 8001206:	4b2a      	ldr	r3, [pc, #168]	; (80012b0 <tcp_echoserver_recv+0x860>)
 8001208:	705a      	strb	r2, [r3, #1]
         	Tcp_tx_buf[2] = Tcp_tx_buf[2] +1; //count
 800120a:	4b29      	ldr	r3, [pc, #164]	; (80012b0 <tcp_echoserver_recv+0x860>)
 800120c:	789b      	ldrb	r3, [r3, #2]
 800120e:	3301      	adds	r3, #1
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4b27      	ldr	r3, [pc, #156]	; (80012b0 <tcp_echoserver_recv+0x860>)
 8001214:	709a      	strb	r2, [r3, #2]
         	Tcp_tx_buf[3] = 10;				  //command ACK
 8001216:	4b26      	ldr	r3, [pc, #152]	; (80012b0 <tcp_echoserver_recv+0x860>)
 8001218:	220a      	movs	r2, #10
 800121a:	70da      	strb	r2, [r3, #3]
         	if(uiPareingState)
 800121c:	4b2d      	ldr	r3, [pc, #180]	; (80012d4 <tcp_echoserver_recv+0x884>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d003      	beq.n	800122c <tcp_echoserver_recv+0x7dc>
         	  Tcp_tx_buf[4] =1; //블루투스 페어링 상태
 8001224:	4b22      	ldr	r3, [pc, #136]	; (80012b0 <tcp_echoserver_recv+0x860>)
 8001226:	2201      	movs	r2, #1
 8001228:	711a      	strb	r2, [r3, #4]
 800122a:	e002      	b.n	8001232 <tcp_echoserver_recv+0x7e2>
         	else
         	  Tcp_tx_buf[4] =0;
 800122c:	4b20      	ldr	r3, [pc, #128]	; (80012b0 <tcp_echoserver_recv+0x860>)
 800122e:	2200      	movs	r2, #0
 8001230:	711a      	strb	r2, [r3, #4]

         	if(rx_Bluetooth=='4') //up
 8001232:	4b29      	ldr	r3, [pc, #164]	; (80012d8 <tcp_echoserver_recv+0x888>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b34      	cmp	r3, #52	; 0x34
 8001238:	d10f      	bne.n	800125a <tcp_echoserver_recv+0x80a>
         	{
         	Tcp_tx_buf[5]=1;
 800123a:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <tcp_echoserver_recv+0x860>)
 800123c:	2201      	movs	r2, #1
 800123e:	715a      	strb	r2, [r3, #5]
         	Tcp_tx_buf[6]=0;
 8001240:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <tcp_echoserver_recv+0x860>)
 8001242:	2200      	movs	r2, #0
 8001244:	719a      	strb	r2, [r3, #6]
         	Tcp_tx_buf[7]=0;
 8001246:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <tcp_echoserver_recv+0x860>)
 8001248:	2200      	movs	r2, #0
 800124a:	71da      	strb	r2, [r3, #7]
         	Tcp_tx_buf[8]=0;
 800124c:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <tcp_echoserver_recv+0x860>)
 800124e:	2200      	movs	r2, #0
 8001250:	721a      	strb	r2, [r3, #8]
         	Tcp_tx_buf[9]=0;
 8001252:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <tcp_echoserver_recv+0x860>)
 8001254:	2200      	movs	r2, #0
 8001256:	725a      	strb	r2, [r3, #9]
 8001258:	e063      	b.n	8001322 <tcp_echoserver_recv+0x8d2>
         	}
            else if(rx_Bluetooth=='1') //down
 800125a:	4b1f      	ldr	r3, [pc, #124]	; (80012d8 <tcp_echoserver_recv+0x888>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b31      	cmp	r3, #49	; 0x31
 8001260:	d10f      	bne.n	8001282 <tcp_echoserver_recv+0x832>
  			{
         	Tcp_tx_buf[5]=0;
 8001262:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <tcp_echoserver_recv+0x860>)
 8001264:	2200      	movs	r2, #0
 8001266:	715a      	strb	r2, [r3, #5]
         	Tcp_tx_buf[6]=1;
 8001268:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <tcp_echoserver_recv+0x860>)
 800126a:	2201      	movs	r2, #1
 800126c:	719a      	strb	r2, [r3, #6]
         	Tcp_tx_buf[7]=0;
 800126e:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <tcp_echoserver_recv+0x860>)
 8001270:	2200      	movs	r2, #0
 8001272:	71da      	strb	r2, [r3, #7]
         	Tcp_tx_buf[8]=0;
 8001274:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <tcp_echoserver_recv+0x860>)
 8001276:	2200      	movs	r2, #0
 8001278:	721a      	strb	r2, [r3, #8]
         	Tcp_tx_buf[9]=0;
 800127a:	4b0d      	ldr	r3, [pc, #52]	; (80012b0 <tcp_echoserver_recv+0x860>)
 800127c:	2200      	movs	r2, #0
 800127e:	725a      	strb	r2, [r3, #9]
 8001280:	e04f      	b.n	8001322 <tcp_echoserver_recv+0x8d2>
  			}
         	else if(rx_Bluetooth=='3') //left
 8001282:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <tcp_echoserver_recv+0x888>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b33      	cmp	r3, #51	; 0x33
 8001288:	d128      	bne.n	80012dc <tcp_echoserver_recv+0x88c>
  			{
         	Tcp_tx_buf[5]=0;
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <tcp_echoserver_recv+0x860>)
 800128c:	2200      	movs	r2, #0
 800128e:	715a      	strb	r2, [r3, #5]
         	Tcp_tx_buf[6]=0;
 8001290:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <tcp_echoserver_recv+0x860>)
 8001292:	2200      	movs	r2, #0
 8001294:	719a      	strb	r2, [r3, #6]
         	Tcp_tx_buf[7]=1;
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <tcp_echoserver_recv+0x860>)
 8001298:	2201      	movs	r2, #1
 800129a:	71da      	strb	r2, [r3, #7]
         	Tcp_tx_buf[8]=0;
 800129c:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <tcp_echoserver_recv+0x860>)
 800129e:	2200      	movs	r2, #0
 80012a0:	721a      	strb	r2, [r3, #8]
         	Tcp_tx_buf[9]=0;
 80012a2:	4b03      	ldr	r3, [pc, #12]	; (80012b0 <tcp_echoserver_recv+0x860>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	725a      	strb	r2, [r3, #9]
 80012a8:	e03b      	b.n	8001322 <tcp_echoserver_recv+0x8d2>
 80012aa:	bf00      	nop
 80012ac:	200001a0 	.word	0x200001a0
 80012b0:	200000d8 	.word	0x200000d8
 80012b4:	2000013c 	.word	0x2000013c
 80012b8:	20000220 	.word	0x20000220
 80012bc:	20000222 	.word	0x20000222
 80012c0:	20000224 	.word	0x20000224
 80012c4:	20000226 	.word	0x20000226
 80012c8:	20000228 	.word	0x20000228
 80012cc:	20000218 	.word	0x20000218
 80012d0:	200001a4 	.word	0x200001a4
 80012d4:	200001ac 	.word	0x200001ac
 80012d8:	200001ad 	.word	0x200001ad
  			}
         	else if(rx_Bluetooth=='2') //right
 80012dc:	4b98      	ldr	r3, [pc, #608]	; (8001540 <tcp_echoserver_recv+0xaf0>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b32      	cmp	r3, #50	; 0x32
 80012e2:	d10f      	bne.n	8001304 <tcp_echoserver_recv+0x8b4>
  			{
         	Tcp_tx_buf[5]=0;
 80012e4:	4b97      	ldr	r3, [pc, #604]	; (8001544 <tcp_echoserver_recv+0xaf4>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	715a      	strb	r2, [r3, #5]
         	Tcp_tx_buf[6]=0;
 80012ea:	4b96      	ldr	r3, [pc, #600]	; (8001544 <tcp_echoserver_recv+0xaf4>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	719a      	strb	r2, [r3, #6]
         	Tcp_tx_buf[7]=0;
 80012f0:	4b94      	ldr	r3, [pc, #592]	; (8001544 <tcp_echoserver_recv+0xaf4>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	71da      	strb	r2, [r3, #7]
         	Tcp_tx_buf[8]=1;
 80012f6:	4b93      	ldr	r3, [pc, #588]	; (8001544 <tcp_echoserver_recv+0xaf4>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	721a      	strb	r2, [r3, #8]
         	Tcp_tx_buf[9]=0;
 80012fc:	4b91      	ldr	r3, [pc, #580]	; (8001544 <tcp_echoserver_recv+0xaf4>)
 80012fe:	2200      	movs	r2, #0
 8001300:	725a      	strb	r2, [r3, #9]
 8001302:	e00e      	b.n	8001322 <tcp_echoserver_recv+0x8d2>
  			}
         	else
         	{
         	Tcp_tx_buf[5]=0;
 8001304:	4b8f      	ldr	r3, [pc, #572]	; (8001544 <tcp_echoserver_recv+0xaf4>)
 8001306:	2200      	movs	r2, #0
 8001308:	715a      	strb	r2, [r3, #5]
         	Tcp_tx_buf[6]=0;
 800130a:	4b8e      	ldr	r3, [pc, #568]	; (8001544 <tcp_echoserver_recv+0xaf4>)
 800130c:	2200      	movs	r2, #0
 800130e:	719a      	strb	r2, [r3, #6]
         	Tcp_tx_buf[7]=0;
 8001310:	4b8c      	ldr	r3, [pc, #560]	; (8001544 <tcp_echoserver_recv+0xaf4>)
 8001312:	2200      	movs	r2, #0
 8001314:	71da      	strb	r2, [r3, #7]
         	Tcp_tx_buf[8]=0;
 8001316:	4b8b      	ldr	r3, [pc, #556]	; (8001544 <tcp_echoserver_recv+0xaf4>)
 8001318:	2200      	movs	r2, #0
 800131a:	721a      	strb	r2, [r3, #8]
         	Tcp_tx_buf[9]=0;
 800131c:	4b89      	ldr	r3, [pc, #548]	; (8001544 <tcp_echoserver_recv+0xaf4>)
 800131e:	2200      	movs	r2, #0
 8001320:	725a      	strb	r2, [r3, #9]
         	}
         	if(!uiPareingState)
 8001322:	4b89      	ldr	r3, [pc, #548]	; (8001548 <tcp_echoserver_recv+0xaf8>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d10e      	bne.n	8001348 <tcp_echoserver_recv+0x8f8>
         	{
         	Tcp_tx_buf[5]=0;
 800132a:	4b86      	ldr	r3, [pc, #536]	; (8001544 <tcp_echoserver_recv+0xaf4>)
 800132c:	2200      	movs	r2, #0
 800132e:	715a      	strb	r2, [r3, #5]
         	Tcp_tx_buf[6]=0;
 8001330:	4b84      	ldr	r3, [pc, #528]	; (8001544 <tcp_echoserver_recv+0xaf4>)
 8001332:	2200      	movs	r2, #0
 8001334:	719a      	strb	r2, [r3, #6]
         	Tcp_tx_buf[7]=0;
 8001336:	4b83      	ldr	r3, [pc, #524]	; (8001544 <tcp_echoserver_recv+0xaf4>)
 8001338:	2200      	movs	r2, #0
 800133a:	71da      	strb	r2, [r3, #7]
         	Tcp_tx_buf[8]=0;
 800133c:	4b81      	ldr	r3, [pc, #516]	; (8001544 <tcp_echoserver_recv+0xaf4>)
 800133e:	2200      	movs	r2, #0
 8001340:	721a      	strb	r2, [r3, #8]
         	Tcp_tx_buf[9]=0;
 8001342:	4b80      	ldr	r3, [pc, #512]	; (8001544 <tcp_echoserver_recv+0xaf4>)
 8001344:	2200      	movs	r2, #0
 8001346:	725a      	strb	r2, [r3, #9]
         	}
         	Tcp_tx_buf[10]=3; //end
 8001348:	4b7e      	ldr	r3, [pc, #504]	; (8001544 <tcp_echoserver_recv+0xaf4>)
 800134a:	2203      	movs	r2, #3
 800134c:	729a      	strb	r2, [r3, #10]
         	es->p->payload =&Tcp_tx_buf;
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	4a7c      	ldr	r2, [pc, #496]	; (8001544 <tcp_echoserver_recv+0xaf4>)
 8001354:	605a      	str	r2, [r3, #4]
         	es->p->len= 11;
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	220b      	movs	r2, #11
 800135c:	815a      	strh	r2, [r3, #10]
         	es->p->tot_len = 11;
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	220b      	movs	r2, #11
 8001364:	811a      	strh	r2, [r3, #8]
         	tcp_echoserver_send(tpcb, es);
 8001366:	69b9      	ldr	r1, [r7, #24]
 8001368:	68b8      	ldr	r0, [r7, #8]
 800136a:	f000 f96b 	bl	8001644 <tcp_echoserver_send>
         	iTcpRxCounter++;
 800136e:	4b77      	ldr	r3, [pc, #476]	; (800154c <tcp_echoserver_recv+0xafc>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	3301      	adds	r3, #1
 8001374:	4a75      	ldr	r2, [pc, #468]	; (800154c <tcp_echoserver_recv+0xafc>)
 8001376:	6013      	str	r3, [r2, #0]
         	break;
 8001378:	e0b5      	b.n	80014e6 <tcp_echoserver_recv+0xa96>

        case 100: //AT 살아있니?

        	//Rs232_str = "AT\r\n";
        	iTcpRs232Debug =0;
 800137a:	4b75      	ldr	r3, [pc, #468]	; (8001550 <tcp_echoserver_recv+0xb00>)
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
        	for(int i=0; i<99; i++)
 8001380:	2300      	movs	r3, #0
 8001382:	627b      	str	r3, [r7, #36]	; 0x24
 8001384:	e011      	b.n	80013aa <tcp_echoserver_recv+0x95a>
        	{
        		Tcp_tx_buf[i] = '\0';
 8001386:	4a6f      	ldr	r2, [pc, #444]	; (8001544 <tcp_echoserver_recv+0xaf4>)
 8001388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138a:	4413      	add	r3, r2
 800138c:	2200      	movs	r2, #0
 800138e:	701a      	strb	r2, [r3, #0]

        		Rs232_receive_buffer[i] = '\0';
 8001390:	4a70      	ldr	r2, [pc, #448]	; (8001554 <tcp_echoserver_recv+0xb04>)
 8001392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001394:	4413      	add	r3, r2
 8001396:	2200      	movs	r2, #0
 8001398:	701a      	strb	r2, [r3, #0]
        		Send_BT_STR[i] = '\0';
 800139a:	4a6f      	ldr	r2, [pc, #444]	; (8001558 <tcp_echoserver_recv+0xb08>)
 800139c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139e:	4413      	add	r3, r2
 80013a0:	2200      	movs	r2, #0
 80013a2:	701a      	strb	r2, [r3, #0]
        	for(int i=0; i<99; i++)
 80013a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a6:	3301      	adds	r3, #1
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
 80013aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ac:	2b62      	cmp	r3, #98	; 0x62
 80013ae:	ddea      	ble.n	8001386 <tcp_echoserver_recv+0x936>
        	}

        	for(int i=0; i<Tcp_rx_buf[1]-5; i++)
 80013b0:	2300      	movs	r3, #0
 80013b2:	623b      	str	r3, [r7, #32]
 80013b4:	e00b      	b.n	80013ce <tcp_echoserver_recv+0x97e>
        	{
        		Send_BT_STR[i] = Tcp_rx_buf[i+4];
 80013b6:	6a3b      	ldr	r3, [r7, #32]
 80013b8:	3304      	adds	r3, #4
 80013ba:	4a68      	ldr	r2, [pc, #416]	; (800155c <tcp_echoserver_recv+0xb0c>)
 80013bc:	5cd1      	ldrb	r1, [r2, r3]
 80013be:	4a66      	ldr	r2, [pc, #408]	; (8001558 <tcp_echoserver_recv+0xb08>)
 80013c0:	6a3b      	ldr	r3, [r7, #32]
 80013c2:	4413      	add	r3, r2
 80013c4:	460a      	mov	r2, r1
 80013c6:	701a      	strb	r2, [r3, #0]
        	for(int i=0; i<Tcp_rx_buf[1]-5; i++)
 80013c8:	6a3b      	ldr	r3, [r7, #32]
 80013ca:	3301      	adds	r3, #1
 80013cc:	623b      	str	r3, [r7, #32]
 80013ce:	4b63      	ldr	r3, [pc, #396]	; (800155c <tcp_echoserver_recv+0xb0c>)
 80013d0:	785b      	ldrb	r3, [r3, #1]
 80013d2:	3b05      	subs	r3, #5
 80013d4:	6a3a      	ldr	r2, [r7, #32]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	dbed      	blt.n	80013b6 <tcp_echoserver_recv+0x966>
        	}
        	iTcpRs232Debug =2;
 80013da:	4b5d      	ldr	r3, [pc, #372]	; (8001550 <tcp_echoserver_recv+0xb00>)
 80013dc:	2202      	movs	r2, #2
 80013de:	601a      	str	r2, [r3, #0]
        	if(Tcp_rx_buf[1]-5<1)
 80013e0:	4b5e      	ldr	r3, [pc, #376]	; (800155c <tcp_echoserver_recv+0xb0c>)
 80013e2:	785b      	ldrb	r3, [r3, #1]
 80013e4:	2b05      	cmp	r3, #5
 80013e6:	d806      	bhi.n	80013f6 <tcp_echoserver_recv+0x9a6>
        	{
        		HAL_UART_Transmit(&huart3,Send_BT_STR,sizeof(Send_BT_STR),10);   //RS232 송신
 80013e8:	230a      	movs	r3, #10
 80013ea:	2264      	movs	r2, #100	; 0x64
 80013ec:	495a      	ldr	r1, [pc, #360]	; (8001558 <tcp_echoserver_recv+0xb08>)
 80013ee:	485c      	ldr	r0, [pc, #368]	; (8001560 <tcp_echoserver_recv+0xb10>)
 80013f0:	f005 ffbd 	bl	800736e <HAL_UART_Transmit>
 80013f4:	e009      	b.n	800140a <tcp_echoserver_recv+0x9ba>
        	}
        	else
        	{
        		HAL_UART_Transmit(&huart3,Send_BT_STR,Tcp_rx_buf[1]-5,10);   //RS232 송신
 80013f6:	4b59      	ldr	r3, [pc, #356]	; (800155c <tcp_echoserver_recv+0xb0c>)
 80013f8:	785b      	ldrb	r3, [r3, #1]
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	3b05      	subs	r3, #5
 80013fe:	b29a      	uxth	r2, r3
 8001400:	230a      	movs	r3, #10
 8001402:	4955      	ldr	r1, [pc, #340]	; (8001558 <tcp_echoserver_recv+0xb08>)
 8001404:	4856      	ldr	r0, [pc, #344]	; (8001560 <tcp_echoserver_recv+0xb10>)
 8001406:	f005 ffb2 	bl	800736e <HAL_UART_Transmit>
        	}


        	iTcpRs232Debug =3;
 800140a:	4b51      	ldr	r3, [pc, #324]	; (8001550 <tcp_echoserver_recv+0xb00>)
 800140c:	2203      	movs	r2, #3
 800140e:	601a      	str	r2, [r3, #0]
        	Delay_ms(300);
 8001410:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001414:	f7ff f8de 	bl	80005d4 <Delay_ms>
        	iTcpRs232Debug =4;
 8001418:	4b4d      	ldr	r3, [pc, #308]	; (8001550 <tcp_echoserver_recv+0xb00>)
 800141a:	2204      	movs	r2, #4
 800141c:	601a      	str	r2, [r3, #0]
           	Tcp_tx_buf[0] = 2;				  //telegram start
 800141e:	4b49      	ldr	r3, [pc, #292]	; (8001544 <tcp_echoserver_recv+0xaf4>)
 8001420:	2202      	movs	r2, #2
 8001422:	701a      	strb	r2, [r3, #0]
          	Tcp_tx_buf[1] = iRs232_count_CallBack+5;  //telegram length
 8001424:	4b4f      	ldr	r3, [pc, #316]	; (8001564 <tcp_echoserver_recv+0xb14>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	b2db      	uxtb	r3, r3
 800142a:	3305      	adds	r3, #5
 800142c:	b2da      	uxtb	r2, r3
 800142e:	4b45      	ldr	r3, [pc, #276]	; (8001544 <tcp_echoserver_recv+0xaf4>)
 8001430:	705a      	strb	r2, [r3, #1]
           	Tcp_tx_buf[2] = Tcp_tx_buf[2] +1; //count
 8001432:	4b44      	ldr	r3, [pc, #272]	; (8001544 <tcp_echoserver_recv+0xaf4>)
 8001434:	789b      	ldrb	r3, [r3, #2]
 8001436:	3301      	adds	r3, #1
 8001438:	b2da      	uxtb	r2, r3
 800143a:	4b42      	ldr	r3, [pc, #264]	; (8001544 <tcp_echoserver_recv+0xaf4>)
 800143c:	709a      	strb	r2, [r3, #2]
           	Tcp_tx_buf[3] = 100;           	  //command ACK
 800143e:	4b41      	ldr	r3, [pc, #260]	; (8001544 <tcp_echoserver_recv+0xaf4>)
 8001440:	2264      	movs	r2, #100	; 0x64
 8001442:	70da      	strb	r2, [r3, #3]
           	iTcpRs232Debug =5;
 8001444:	4b42      	ldr	r3, [pc, #264]	; (8001550 <tcp_echoserver_recv+0xb00>)
 8001446:	2205      	movs	r2, #5
 8001448:	601a      	str	r2, [r3, #0]
        	for(int i=0; i<iRs232_count_CallBack; i++)  //Rs232 인터럽트 갯수 리턴 받아 i값 적용
 800144a:	2300      	movs	r3, #0
 800144c:	61fb      	str	r3, [r7, #28]
 800144e:	e00b      	b.n	8001468 <tcp_echoserver_recv+0xa18>
        	{
        		Tcp_tx_buf[i+4] = Rs232_receive_buffer[i];
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	3304      	adds	r3, #4
 8001454:	493f      	ldr	r1, [pc, #252]	; (8001554 <tcp_echoserver_recv+0xb04>)
 8001456:	69fa      	ldr	r2, [r7, #28]
 8001458:	440a      	add	r2, r1
 800145a:	7812      	ldrb	r2, [r2, #0]
 800145c:	b2d1      	uxtb	r1, r2
 800145e:	4a39      	ldr	r2, [pc, #228]	; (8001544 <tcp_echoserver_recv+0xaf4>)
 8001460:	54d1      	strb	r1, [r2, r3]
        	for(int i=0; i<iRs232_count_CallBack; i++)  //Rs232 인터럽트 갯수 리턴 받아 i값 적용
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	3301      	adds	r3, #1
 8001466:	61fb      	str	r3, [r7, #28]
 8001468:	4b3e      	ldr	r3, [pc, #248]	; (8001564 <tcp_echoserver_recv+0xb14>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	69fa      	ldr	r2, [r7, #28]
 800146e:	429a      	cmp	r2, r3
 8001470:	dbee      	blt.n	8001450 <tcp_echoserver_recv+0xa00>
        	}

           	Tcp_tx_buf[iRs232_count_CallBack+4] = 3;	//telegram  end
 8001472:	4b3c      	ldr	r3, [pc, #240]	; (8001564 <tcp_echoserver_recv+0xb14>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	3304      	adds	r3, #4
 8001478:	4a32      	ldr	r2, [pc, #200]	; (8001544 <tcp_echoserver_recv+0xaf4>)
 800147a:	2103      	movs	r1, #3
 800147c:	54d1      	strb	r1, [r2, r3]

           	es->p->payload =&Tcp_tx_buf;
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	4a30      	ldr	r2, [pc, #192]	; (8001544 <tcp_echoserver_recv+0xaf4>)
 8001484:	605a      	str	r2, [r3, #4]
          	es->p->len= iRs232_count_CallBack+5;
 8001486:	4b37      	ldr	r3, [pc, #220]	; (8001564 <tcp_echoserver_recv+0xb14>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	b29a      	uxth	r2, r3
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	3205      	adds	r2, #5
 8001492:	b292      	uxth	r2, r2
 8001494:	815a      	strh	r2, [r3, #10]
          	es->p->tot_len = iRs232_count_CallBack+5;
 8001496:	4b33      	ldr	r3, [pc, #204]	; (8001564 <tcp_echoserver_recv+0xb14>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	b29a      	uxth	r2, r3
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	3205      	adds	r2, #5
 80014a2:	b292      	uxth	r2, r2
 80014a4:	811a      	strh	r2, [r3, #8]
          	iTcpRs232Debug =10;
 80014a6:	4b2a      	ldr	r3, [pc, #168]	; (8001550 <tcp_echoserver_recv+0xb00>)
 80014a8:	220a      	movs	r2, #10
 80014aa:	601a      	str	r2, [r3, #0]
          	tcp_echoserver_send(tpcb, es);    //TCP 송신
 80014ac:	69b9      	ldr	r1, [r7, #24]
 80014ae:	68b8      	ldr	r0, [r7, #8]
 80014b0:	f000 f8c8 	bl	8001644 <tcp_echoserver_send>
          	iRs232_count_CallBack =0;
 80014b4:	4b2b      	ldr	r3, [pc, #172]	; (8001564 <tcp_echoserver_recv+0xb14>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
          	iRs232_count =0;
 80014ba:	4b2b      	ldr	r3, [pc, #172]	; (8001568 <tcp_echoserver_recv+0xb18>)
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
          	iTcpRs232Debug =20;
 80014c0:	4b23      	ldr	r3, [pc, #140]	; (8001550 <tcp_echoserver_recv+0xb00>)
 80014c2:	2214      	movs	r2, #20
 80014c4:	601a      	str	r2, [r3, #0]
          	iTcpRxCounter++;
 80014c6:	4b21      	ldr	r3, [pc, #132]	; (800154c <tcp_echoserver_recv+0xafc>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	3301      	adds	r3, #1
 80014cc:	4a1f      	ldr	r2, [pc, #124]	; (800154c <tcp_echoserver_recv+0xafc>)
 80014ce:	6013      	str	r3, [r2, #0]
          	iReceiveCmmandType =0;
 80014d0:	4b26      	ldr	r3, [pc, #152]	; (800156c <tcp_echoserver_recv+0xb1c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
          	break;
 80014d6:	e006      	b.n	80014e6 <tcp_echoserver_recv+0xa96>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	6978      	ldr	r0, [r7, #20]
 80014e2:	f009 f8eb 	bl	800a6bc <pbuf_chain>
    }
    ret_err = ERR_OK;
 80014e6:	2300      	movs	r3, #0
 80014e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80014ec:	e022      	b.n	8001534 <tcp_echoserver_recv+0xae4>
  }
  else if(es->state == ES_CLOSING)
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b03      	cmp	r3, #3
 80014f4:	d10f      	bne.n	8001516 <tcp_echoserver_recv+0xac6>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	891b      	ldrh	r3, [r3, #8]
 80014fa:	4619      	mov	r1, r3
 80014fc:	68b8      	ldr	r0, [r7, #8]
 80014fe:	f009 ff37 	bl	800b370 <tcp_recved>
    es->p = NULL;
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f008 ffbf 	bl	800a48c <pbuf_free>
    ret_err = ERR_OK;
 800150e:	2300      	movs	r3, #0
 8001510:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001514:	e00e      	b.n	8001534 <tcp_echoserver_recv+0xae4>
  }
  else
  {
    /* unknown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	891b      	ldrh	r3, [r3, #8]
 800151a:	4619      	mov	r1, r3
 800151c:	68b8      	ldr	r0, [r7, #8]
 800151e:	f009 ff27 	bl	800b370 <tcp_recved>
    es->p = NULL;
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f008 ffaf 	bl	800a48c <pbuf_free>
    ret_err = ERR_OK;
 800152e:	2300      	movs	r3, #0
 8001530:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  return ret_err;
 8001534:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8001538:	4618      	mov	r0, r3
 800153a:	373c      	adds	r7, #60	; 0x3c
 800153c:	46bd      	mov	sp, r7
 800153e:	bd90      	pop	{r4, r7, pc}
 8001540:	200001ad 	.word	0x200001ad
 8001544:	200000d8 	.word	0x200000d8
 8001548:	200001ac 	.word	0x200001ac
 800154c:	20000218 	.word	0x20000218
 8001550:	2000021c 	.word	0x2000021c
 8001554:	20000304 	.word	0x20000304
 8001558:	200001b4 	.word	0x200001b4
 800155c:	2000013c 	.word	0x2000013c
 8001560:	200002a8 	.word	0x200002a8
 8001564:	20000300 	.word	0x20000300
 8001568:	200002fc 	.word	0x200002fc
 800156c:	200001a4 	.word	0x200001a4

08001570 <tcp_echoserver_error>:
  * @param  arg: pointer on argument parameter
  * @param  err: not used
  * @retval None
  */
static void tcp_echoserver_error(void *arg, err_t err)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	460b      	mov	r3, r1
 800157a:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_echoserver_struct *)arg;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d002      	beq.n	800158c <tcp_echoserver_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f007 fda4 	bl	80090d4 <mem_free>
  }
}
 800158c:	bf00      	nop
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <tcp_echoserver_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_echoserver_poll(void *arg, struct tcp_pcb *tpcb)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_echoserver_struct *es;

  es = (struct tcp_echoserver_struct *)arg;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d017      	beq.n	80015d8 <tcp_echoserver_poll+0x44>
  {
    if (es->p != NULL)
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d008      	beq.n	80015c2 <tcp_echoserver_poll+0x2e>
    {
      tcp_sent(tpcb, tcp_echoserver_sent);
 80015b0:	490f      	ldr	r1, [pc, #60]	; (80015f0 <tcp_echoserver_poll+0x5c>)
 80015b2:	6838      	ldr	r0, [r7, #0]
 80015b4:	f00a fdee 	bl	800c194 <tcp_sent>
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_echoserver_send(tpcb, es);
 80015b8:	68b9      	ldr	r1, [r7, #8]
 80015ba:	6838      	ldr	r0, [r7, #0]
 80015bc:	f000 f842 	bl	8001644 <tcp_echoserver_send>
 80015c0:	e007      	b.n	80015d2 <tcp_echoserver_poll+0x3e>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b03      	cmp	r3, #3
 80015c8:	d103      	bne.n	80015d2 <tcp_echoserver_poll+0x3e>
      {
        /*  close tcp connection */
        tcp_echoserver_connection_close(tpcb, es);
 80015ca:	68b9      	ldr	r1, [r7, #8]
 80015cc:	6838      	ldr	r0, [r7, #0]
 80015ce:	f000 f88c 	bl	80016ea <tcp_echoserver_connection_close>
      }
    }
    ret_err = ERR_OK;
 80015d2:	2300      	movs	r3, #0
 80015d4:	73fb      	strb	r3, [r7, #15]
 80015d6:	e004      	b.n	80015e2 <tcp_echoserver_poll+0x4e>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 80015d8:	6838      	ldr	r0, [r7, #0]
 80015da:	f009 fcef 	bl	800afbc <tcp_abort>
    ret_err = ERR_ABRT;
 80015de:	23f3      	movs	r3, #243	; 0xf3
 80015e0:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 80015e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	080015f5 	.word	0x080015f5

080015f4 <tcp_echoserver_sent>:
  *         is received from remote host for sent data)
  * @param  None
  * @retval None
  */
static err_t tcp_echoserver_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	4613      	mov	r3, r2
 8001600:	80fb      	strh	r3, [r7, #6]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_echoserver_struct *)arg;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	2200      	movs	r2, #0
 800160a:	705a      	strb	r2, [r3, #1]

  if(es->p != NULL)
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d008      	beq.n	8001626 <tcp_echoserver_sent+0x32>
  {
    /* still got pbufs to send */
    tcp_sent(tpcb, tcp_echoserver_sent);
 8001614:	490a      	ldr	r1, [pc, #40]	; (8001640 <tcp_echoserver_sent+0x4c>)
 8001616:	68b8      	ldr	r0, [r7, #8]
 8001618:	f00a fdbc 	bl	800c194 <tcp_sent>
    tcp_echoserver_send(tpcb, es);
 800161c:	6979      	ldr	r1, [r7, #20]
 800161e:	68b8      	ldr	r0, [r7, #8]
 8001620:	f000 f810 	bl	8001644 <tcp_echoserver_send>
 8001624:	e007      	b.n	8001636 <tcp_echoserver_sent+0x42>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b03      	cmp	r3, #3
 800162c:	d103      	bne.n	8001636 <tcp_echoserver_sent+0x42>
      tcp_echoserver_connection_close(tpcb, es);
 800162e:	6979      	ldr	r1, [r7, #20]
 8001630:	68b8      	ldr	r0, [r7, #8]
 8001632:	f000 f85a 	bl	80016ea <tcp_echoserver_connection_close>
  }
  return ERR_OK;
 8001636:	2300      	movs	r3, #0
}
 8001638:	4618      	mov	r0, r3
 800163a:	3718      	adds	r7, #24
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	080015f5 	.word	0x080015f5

08001644 <tcp_echoserver_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_echoserver_send(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 800164e:	2300      	movs	r3, #0
 8001650:	75fb      	strb	r3, [r7, #23]

  while ((wr_err == ERR_OK) &&
 8001652:	e036      	b.n	80016c2 <tcp_echoserver_send+0x7e>
         (es->p != NULL) &&
         (es->p->len <= tcp_sndbuf(tpcb)))
  {

    /* get pointer on pbuf from es structure */
    ptr = es->p;
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	6859      	ldr	r1, [r3, #4]
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	895a      	ldrh	r2, [r3, #10]
 8001662:	2301      	movs	r3, #1
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f00d fca3 	bl	800efb0 <tcp_write>
 800166a:	4603      	mov	r3, r0
 800166c:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
 800166e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d11d      	bne.n	80016b2 <tcp_echoserver_send+0x6e>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	895b      	ldrh	r3, [r3, #10]
 800167a:	81fb      	strh	r3, [r7, #14]

      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	609a      	str	r2, [r3, #8]

      if(es->p != NULL)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d004      	beq.n	8001696 <tcp_echoserver_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	4618      	mov	r0, r3
 8001692:	f008 ff9b 	bl	800a5cc <pbuf_ref>

     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 8001696:	6938      	ldr	r0, [r7, #16]
 8001698:	f008 fef8 	bl	800a48c <pbuf_free>
 800169c:	4603      	mov	r3, r0
 800169e:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 80016a0:	7b7b      	ldrb	r3, [r7, #13]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d0f7      	beq.n	8001696 <tcp_echoserver_send+0x52>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 80016a6:	89fb      	ldrh	r3, [r7, #14]
 80016a8:	4619      	mov	r1, r3
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f009 fe60 	bl	800b370 <tcp_recved>
 80016b0:	e007      	b.n	80016c2 <tcp_echoserver_send+0x7e>
   }
   else if(wr_err == ERR_MEM)
 80016b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ba:	d102      	bne.n	80016c2 <tcp_echoserver_send+0x7e>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 80016c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d10b      	bne.n	80016e2 <tcp_echoserver_send+0x9e>
         (es->p != NULL) &&
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d007      	beq.n	80016e2 <tcp_echoserver_send+0x9e>
         (es->p->len <= tcp_sndbuf(tpcb)))
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	895a      	ldrh	r2, [r3, #10]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) &&
 80016de:	429a      	cmp	r2, r3
 80016e0:	d9b8      	bls.n	8001654 <tcp_echoserver_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 80016e2:	bf00      	nop
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <tcp_echoserver_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_echoserver_connection_close(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
 80016f2:	6039      	str	r1, [r7, #0]

  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 80016f4:	2100      	movs	r1, #0
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f00a fd18 	bl	800c12c <tcp_arg>
  tcp_sent(tpcb, NULL);
 80016fc:	2100      	movs	r1, #0
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f00a fd48 	bl	800c194 <tcp_sent>
  tcp_recv(tpcb, NULL);
 8001704:	2100      	movs	r1, #0
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f00a fd22 	bl	800c150 <tcp_recv>
  tcp_err(tpcb, NULL);
 800170c:	2100      	movs	r1, #0
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f00a fd62 	bl	800c1d8 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8001714:	2200      	movs	r2, #0
 8001716:	2100      	movs	r1, #0
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f00a fd97 	bl	800c24c <tcp_poll>

  /* delete es structure */
  if (es != NULL)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d002      	beq.n	800172a <tcp_echoserver_connection_close+0x40>
  {
    mem_free(es);
 8001724:	6838      	ldr	r0, [r7, #0]
 8001726:	f007 fcd5 	bl	80090d4 <mem_free>
  }

  /* close tcp connection */
  tcp_close(tpcb);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f009 fb5c 	bl	800ade8 <tcp_close>
}
 8001730:	bf00      	nop
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <TcpCounterCallBack>:
//kyd 정의
int TcpCounterCallBack(uint16_t a,uint16_t b){
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	460a      	mov	r2, r1
 8001742:	80fb      	strh	r3, [r7, #6]
 8001744:	4613      	mov	r3, r2
 8001746:	80bb      	strh	r3, [r7, #4]
	return iReceiveCounter;
 8001748:	4b03      	ldr	r3, [pc, #12]	; (8001758 <TcpCounterCallBack+0x20>)
 800174a:	681b      	ldr	r3, [r3, #0]
}
 800174c:	4618      	mov	r0, r3
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	200001b0 	.word	0x200001b0

0800175c <Set_TcpVariable_BOOL>:
TcpGetBool Set_TcpVariable_BOOL(bool a1,bool b1, bool c1)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	71fb      	strb	r3, [r7, #7]
 8001766:	460b      	mov	r3, r1
 8001768:	71bb      	strb	r3, [r7, #6]
 800176a:	4613      	mov	r3, r2
 800176c:	717b      	strb	r3, [r7, #5]
	TcpGetBool TcpGetBool_0;

	TcpGetBool_0.a1 = a1;
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	723b      	strb	r3, [r7, #8]
	TcpGetBool_0.b1 = b1;
 8001772:	79bb      	ldrb	r3, [r7, #6]
 8001774:	727b      	strb	r3, [r7, #9]
	TcpGetBool_0.c1 = c1;
 8001776:	797b      	ldrb	r3, [r7, #5]
 8001778:	72bb      	strb	r3, [r7, #10]

	return TcpGetBool_0;
 800177a:	f107 030c 	add.w	r3, r7, #12
 800177e:	f107 0208 	add.w	r2, r7, #8
 8001782:	6812      	ldr	r2, [r2, #0]
 8001784:	4611      	mov	r1, r2
 8001786:	8019      	strh	r1, [r3, #0]
 8001788:	3302      	adds	r3, #2
 800178a:	0c12      	lsrs	r2, r2, #16
 800178c:	701a      	strb	r2, [r3, #0]
 800178e:	2300      	movs	r3, #0
 8001790:	7b3a      	ldrb	r2, [r7, #12]
 8001792:	f362 0307 	bfi	r3, r2, #0, #8
 8001796:	7b7a      	ldrb	r2, [r7, #13]
 8001798:	f362 230f 	bfi	r3, r2, #8, #8
 800179c:	7bba      	ldrb	r2, [r7, #14]
 800179e:	f362 4317 	bfi	r3, r2, #16, #8
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
	...

080017b0 <main>:
HAL_I2C_StateTypeDef stateI2C_2;	// state of the I2C bus too
HAL_StatusTypeDef retI2C;			// value returned by I2C transmit
void checkQuadrant();

int main(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017b6:	f001 fa4b 	bl	8002c50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017ba:	f000 fbab 	bl	8001f14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017be:	f000 fcdd 	bl	800217c <MX_GPIO_Init>


  MX_UART4_Init();
 80017c2:	f000 fc87 	bl	80020d4 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  ST_LED_ON_1();
 80017c6:	f7fe ff25 	bl	8000614 <ST_LED_ON_1>
  ST_LED_ON_2();
 80017ca:	f7fe ff2f 	bl	800062c <ST_LED_ON_2>
  ST_LED_ON_3();
 80017ce:	f7fe ff39 	bl	8000644 <ST_LED_ON_3>
  /* USER CODE END 2 */

  /* Infinite loop */


  Delay_ms(50);
 80017d2:	2032      	movs	r0, #50	; 0x32
 80017d4:	f7fe fefe 	bl	80005d4 <Delay_ms>
  MX_USART3_UART_Init();
 80017d8:	f000 fca6 	bl	8002128 <MX_USART3_UART_Init>
  HAL_UART_Receive_IT(&huart3, &Rs232_receive_data, 1);  //AT Mode 아닌경우
 80017dc:	2201      	movs	r2, #1
 80017de:	49ab      	ldr	r1, [pc, #684]	; (8001a8c <main+0x2dc>)
 80017e0:	48ab      	ldr	r0, [pc, #684]	; (8001a90 <main+0x2e0>)
 80017e2:	f005 fe56 	bl	8007492 <HAL_UART_Receive_IT>
  //HAL_UART_Transmit(&huart3,test_BT,sizeof(test_BT),10);
  iInterruptCnt =0;
 80017e6:	4bab      	ldr	r3, [pc, #684]	; (8001a94 <main+0x2e4>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	701a      	strb	r2, [r3, #0]
  iInterrupt_TotalCnt =0;
 80017ec:	4baa      	ldr	r3, [pc, #680]	; (8001a98 <main+0x2e8>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	701a      	strb	r2, [r3, #0]


  //Flash Memory -> Ip Set
  GetFlashMemory();
 80017f2:	f000 fab5 	bl	8001d60 <GetFlashMemory>
  if(GetFlashMemory_SavedCounter <=0){  //한번도 저장을 안한 초기 상태라면 디폴트 IP,PORT설정
 80017f6:	4ba9      	ldr	r3, [pc, #676]	; (8001a9c <main+0x2ec>)
 80017f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	dc0f      	bgt.n	8001820 <main+0x70>
	  MX_LWIP_Init(ipDefaultSet_1,ipDefaultSet_2,ipDefaultSet_3,ipDefaultSet_4);
 8001800:	4ba7      	ldr	r3, [pc, #668]	; (8001aa0 <main+0x2f0>)
 8001802:	7818      	ldrb	r0, [r3, #0]
 8001804:	4ba7      	ldr	r3, [pc, #668]	; (8001aa4 <main+0x2f4>)
 8001806:	7819      	ldrb	r1, [r3, #0]
 8001808:	4ba7      	ldr	r3, [pc, #668]	; (8001aa8 <main+0x2f8>)
 800180a:	781a      	ldrb	r2, [r3, #0]
 800180c:	4ba7      	ldr	r3, [pc, #668]	; (8001aac <main+0x2fc>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	f006 fdd8 	bl	80083c4 <MX_LWIP_Init>
	  tcp_echoserver_init(iDefaultPort);
 8001814:	4ba6      	ldr	r3, [pc, #664]	; (8001ab0 <main+0x300>)
 8001816:	881b      	ldrh	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff f899 	bl	8000950 <tcp_echoserver_init>
 800181e:	e00e      	b.n	800183e <main+0x8e>
  }
  else   //한번이라도 저장한 적이 있다면 플레시 메모리 값으로 IP,PORT설정
  {
	  MX_LWIP_Init(ipDefaultSet_1,ipDefaultSet_2,ipDefaultSet_3,ipDefaultSet_4);
 8001820:	4b9f      	ldr	r3, [pc, #636]	; (8001aa0 <main+0x2f0>)
 8001822:	7818      	ldrb	r0, [r3, #0]
 8001824:	4b9f      	ldr	r3, [pc, #636]	; (8001aa4 <main+0x2f4>)
 8001826:	7819      	ldrb	r1, [r3, #0]
 8001828:	4b9f      	ldr	r3, [pc, #636]	; (8001aa8 <main+0x2f8>)
 800182a:	781a      	ldrb	r2, [r3, #0]
 800182c:	4b9f      	ldr	r3, [pc, #636]	; (8001aac <main+0x2fc>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	f006 fdc8 	bl	80083c4 <MX_LWIP_Init>
	 	  tcp_echoserver_init(iDefaultPort);
 8001834:	4b9e      	ldr	r3, [pc, #632]	; (8001ab0 <main+0x300>)
 8001836:	881b      	ldrh	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff f889 	bl	8000950 <tcp_echoserver_init>
	  //MX_LWIP_Init(get_ip1,get_ip2,get_ip3,get_ip4);
	  //tcp_echoserver_init(get_port);
  }

	/*-------------------------  Wire Draw AS5600 -2022 09.05 -kyd ----------------------*/
  MX_I2C1_Init();
 800183e:	f000 fbc9 	bl	8001fd4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001842:	f000 fc07 	bl	8002054 <MX_I2C2_Init>
  Delay_ms(30);
 8001846:	201e      	movs	r0, #30
 8001848:	f7fe fec4 	bl	80005d4 <Delay_ms>
  //degAngle = -1*output* 0.087890625;
  //startAngle = degAngle;
  //lastOutput = output;
  //position = output;
  //Init Complite
  Init_Complite_Led_Offeration();
 800184c:	f7fe ff66 	bl	800071c <Init_Complite_Led_Offeration>
  /* USER CODE BEGIN WHILE */

  bATMODE_ON = true;
 8001850:	4b98      	ldr	r3, [pc, #608]	; (8001ab4 <main+0x304>)
 8001852:	2201      	movs	r2, #1
 8001854:	701a      	strb	r2, [r3, #0]
	WireLength = position*0.038-80;   // -80은 오프셋 -> 향후 파라미터로 조정 가능하게
	 lastOutput = output;
	 */

    //MX_LWIP_Process();
	  ethernetif_input(&gnetif);
 8001856:	4898      	ldr	r0, [pc, #608]	; (8001ab8 <main+0x308>)
 8001858:	f007 f832 	bl	80088c0 <ethernetif_input>

	  sys_check_timeouts();
 800185c:	f00f fa10 	bl	8010c80 <sys_check_timeouts>

	iTcpIpCallbackCounter = TcpCounterCallBack(1,2);
 8001860:	2102      	movs	r1, #2
 8001862:	2001      	movs	r0, #1
 8001864:	f7ff ff68 	bl	8001738 <TcpCounterCallBack>
 8001868:	4603      	mov	r3, r0
 800186a:	4a94      	ldr	r2, [pc, #592]	; (8001abc <main+0x30c>)
 800186c:	6013      	str	r3, [r2, #0]
	Set_TcpVariable_BOOL(bPairingMODE_ON,bATMODE_ON, bATMODE_ON);
 800186e:	4b94      	ldr	r3, [pc, #592]	; (8001ac0 <main+0x310>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	4a90      	ldr	r2, [pc, #576]	; (8001ab4 <main+0x304>)
 8001874:	7811      	ldrb	r1, [r2, #0]
 8001876:	4a8f      	ldr	r2, [pc, #572]	; (8001ab4 <main+0x304>)
 8001878:	7812      	ldrb	r2, [r2, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff ff6e 	bl	800175c <Set_TcpVariable_BOOL>
    switch(iBluetoothStep)
 8001880:	4b90      	ldr	r3, [pc, #576]	; (8001ac4 <main+0x314>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b3c      	cmp	r3, #60	; 0x3c
 8001886:	f200 819c 	bhi.w	8001bc2 <main+0x412>
 800188a:	a201      	add	r2, pc, #4	; (adr r2, 8001890 <main+0xe0>)
 800188c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001890:	08001985 	.word	0x08001985
 8001894:	08001bc3 	.word	0x08001bc3
 8001898:	08001bc3 	.word	0x08001bc3
 800189c:	08001bc3 	.word	0x08001bc3
 80018a0:	08001bc3 	.word	0x08001bc3
 80018a4:	08001bc3 	.word	0x08001bc3
 80018a8:	08001bc3 	.word	0x08001bc3
 80018ac:	08001bc3 	.word	0x08001bc3
 80018b0:	08001bc3 	.word	0x08001bc3
 80018b4:	08001bc3 	.word	0x08001bc3
 80018b8:	08001a0f 	.word	0x08001a0f
 80018bc:	08001a71 	.word	0x08001a71
 80018c0:	08001bc3 	.word	0x08001bc3
 80018c4:	08001bc3 	.word	0x08001bc3
 80018c8:	08001bc3 	.word	0x08001bc3
 80018cc:	08001a85 	.word	0x08001a85
 80018d0:	08001bc3 	.word	0x08001bc3
 80018d4:	08001bc3 	.word	0x08001bc3
 80018d8:	08001bc3 	.word	0x08001bc3
 80018dc:	08001bc3 	.word	0x08001bc3
 80018e0:	08001ad1 	.word	0x08001ad1
 80018e4:	08001b57 	.word	0x08001b57
 80018e8:	08001bc3 	.word	0x08001bc3
 80018ec:	08001bc3 	.word	0x08001bc3
 80018f0:	08001bc3 	.word	0x08001bc3
 80018f4:	08001b69 	.word	0x08001b69
 80018f8:	08001bc3 	.word	0x08001bc3
 80018fc:	08001bc3 	.word	0x08001bc3
 8001900:	08001bc3 	.word	0x08001bc3
 8001904:	08001bc3 	.word	0x08001bc3
 8001908:	08001b87 	.word	0x08001b87
 800190c:	08001bc3 	.word	0x08001bc3
 8001910:	08001bc3 	.word	0x08001bc3
 8001914:	08001bc3 	.word	0x08001bc3
 8001918:	08001bc3 	.word	0x08001bc3
 800191c:	08001b8f 	.word	0x08001b8f
 8001920:	08001bc3 	.word	0x08001bc3
 8001924:	08001bc3 	.word	0x08001bc3
 8001928:	08001bc3 	.word	0x08001bc3
 800192c:	08001bc3 	.word	0x08001bc3
 8001930:	08001bc3 	.word	0x08001bc3
 8001934:	08001bc3 	.word	0x08001bc3
 8001938:	08001bc3 	.word	0x08001bc3
 800193c:	08001bc3 	.word	0x08001bc3
 8001940:	08001bc3 	.word	0x08001bc3
 8001944:	08001bc3 	.word	0x08001bc3
 8001948:	08001bc3 	.word	0x08001bc3
 800194c:	08001bc3 	.word	0x08001bc3
 8001950:	08001bc3 	.word	0x08001bc3
 8001954:	08001bc3 	.word	0x08001bc3
 8001958:	08001b9f 	.word	0x08001b9f
 800195c:	08001bc3 	.word	0x08001bc3
 8001960:	08001bc3 	.word	0x08001bc3
 8001964:	08001bc3 	.word	0x08001bc3
 8001968:	08001bc3 	.word	0x08001bc3
 800196c:	08001bc3 	.word	0x08001bc3
 8001970:	08001bc3 	.word	0x08001bc3
 8001974:	08001bc3 	.word	0x08001bc3
 8001978:	08001bc3 	.word	0x08001bc3
 800197c:	08001bc3 	.word	0x08001bc3
 8001980:	08001bb9 	.word	0x08001bb9
    {
    	case 0:
    		if(iInterruptCnt==1)	   //AT 모드 진입
 8001984:	4b43      	ldr	r3, [pc, #268]	; (8001a94 <main+0x2e4>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d10c      	bne.n	80019a6 <main+0x1f6>
    		{
    			iInterruptCnt =0;
 800198c:	4b41      	ldr	r3, [pc, #260]	; (8001a94 <main+0x2e4>)
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]
    			iInterrupt_TotalCnt++;
 8001992:	4b41      	ldr	r3, [pc, #260]	; (8001a98 <main+0x2e8>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	3301      	adds	r3, #1
 8001998:	b2da      	uxtb	r2, r3
 800199a:	4b3f      	ldr	r3, [pc, #252]	; (8001a98 <main+0x2e8>)
 800199c:	701a      	strb	r2, [r3, #0]
    			iBluetoothStep = 10;
 800199e:	4b49      	ldr	r3, [pc, #292]	; (8001ac4 <main+0x314>)
 80019a0:	220a      	movs	r2, #10
 80019a2:	701a      	strb	r2, [r3, #0]
    		{
    			iInterruptCnt =0;
    			iInterrupt_TotalCnt++;
    		  	iBluetoothStep = 60;
    		}
    		break;
 80019a4:	e10f      	b.n	8001bc6 <main+0x416>
    		else if(iInterruptCnt==2)  //페어링 모드 진입
 80019a6:	4b3b      	ldr	r3, [pc, #236]	; (8001a94 <main+0x2e4>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d10c      	bne.n	80019c8 <main+0x218>
    			iInterruptCnt =0;
 80019ae:	4b39      	ldr	r3, [pc, #228]	; (8001a94 <main+0x2e4>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	701a      	strb	r2, [r3, #0]
    			iInterrupt_TotalCnt++;
 80019b4:	4b38      	ldr	r3, [pc, #224]	; (8001a98 <main+0x2e8>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	3301      	adds	r3, #1
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	4b36      	ldr	r3, [pc, #216]	; (8001a98 <main+0x2e8>)
 80019be:	701a      	strb	r2, [r3, #0]
    		  	iBluetoothStep = 20;
 80019c0:	4b40      	ldr	r3, [pc, #256]	; (8001ac4 <main+0x314>)
 80019c2:	2214      	movs	r2, #20
 80019c4:	701a      	strb	r2, [r3, #0]
    		break;
 80019c6:	e0fe      	b.n	8001bc6 <main+0x416>
    		else if(iInterruptCnt==3)  //TEST STRING
 80019c8:	4b32      	ldr	r3, [pc, #200]	; (8001a94 <main+0x2e4>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b03      	cmp	r3, #3
 80019ce:	d10c      	bne.n	80019ea <main+0x23a>
    			iInterruptCnt =0;
 80019d0:	4b30      	ldr	r3, [pc, #192]	; (8001a94 <main+0x2e4>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	701a      	strb	r2, [r3, #0]
    			iInterrupt_TotalCnt++;
 80019d6:	4b30      	ldr	r3, [pc, #192]	; (8001a98 <main+0x2e8>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	3301      	adds	r3, #1
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	4b2e      	ldr	r3, [pc, #184]	; (8001a98 <main+0x2e8>)
 80019e0:	701a      	strb	r2, [r3, #0]
    		  	iBluetoothStep = 50;
 80019e2:	4b38      	ldr	r3, [pc, #224]	; (8001ac4 <main+0x314>)
 80019e4:	2232      	movs	r2, #50	; 0x32
 80019e6:	701a      	strb	r2, [r3, #0]
    		break;
 80019e8:	e0ed      	b.n	8001bc6 <main+0x416>
    		else if(iInterruptCnt==4)  //TEST STRING
 80019ea:	4b2a      	ldr	r3, [pc, #168]	; (8001a94 <main+0x2e4>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	f040 80e9 	bne.w	8001bc6 <main+0x416>
    			iInterruptCnt =0;
 80019f4:	4b27      	ldr	r3, [pc, #156]	; (8001a94 <main+0x2e4>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	701a      	strb	r2, [r3, #0]
    			iInterrupt_TotalCnt++;
 80019fa:	4b27      	ldr	r3, [pc, #156]	; (8001a98 <main+0x2e8>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	3301      	adds	r3, #1
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	4b25      	ldr	r3, [pc, #148]	; (8001a98 <main+0x2e8>)
 8001a04:	701a      	strb	r2, [r3, #0]
    		  	iBluetoothStep = 60;
 8001a06:	4b2f      	ldr	r3, [pc, #188]	; (8001ac4 <main+0x314>)
 8001a08:	223c      	movs	r2, #60	; 0x3c
 8001a0a:	701a      	strb	r2, [r3, #0]
    		break;
 8001a0c:	e0db      	b.n	8001bc6 <main+0x416>

    		//Bluetooth_PowerOff();
    		//Delay_ms(500);
    		//Bluetooth_ATMode();
    		//Delay_ms(200);
    		iRs232_count =0;
 8001a0e:	4b2e      	ldr	r3, [pc, #184]	; (8001ac8 <main+0x318>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
    		Rs232_manualSend[0] = '\0';
 8001a14:	4b2d      	ldr	r3, [pc, #180]	; (8001acc <main+0x31c>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	701a      	strb	r2, [r3, #0]
    		Rs232_manualSend[1] = '\0';
 8001a1a:	4b2c      	ldr	r3, [pc, #176]	; (8001acc <main+0x31c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	705a      	strb	r2, [r3, #1]
    		Rs232_manualSend[2] = '\0';
 8001a20:	4b2a      	ldr	r3, [pc, #168]	; (8001acc <main+0x31c>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	709a      	strb	r2, [r3, #2]
    		Rs232_manualSend[3] = '\0';
 8001a26:	4b29      	ldr	r3, [pc, #164]	; (8001acc <main+0x31c>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	70da      	strb	r2, [r3, #3]
    		Rs232_manualSend[4] = '\0';
 8001a2c:	4b27      	ldr	r3, [pc, #156]	; (8001acc <main+0x31c>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	711a      	strb	r2, [r3, #4]
    		Rs232_manualSend[5] = '\0';
 8001a32:	4b26      	ldr	r3, [pc, #152]	; (8001acc <main+0x31c>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	715a      	strb	r2, [r3, #5]
    		Rs232_manualSend[6] = '\0';
 8001a38:	4b24      	ldr	r3, [pc, #144]	; (8001acc <main+0x31c>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	719a      	strb	r2, [r3, #6]
    		Rs232_manualSend[7] = '\0';
 8001a3e:	4b23      	ldr	r3, [pc, #140]	; (8001acc <main+0x31c>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	71da      	strb	r2, [r3, #7]
    		Rs232_manualSend[8] = '\0';
 8001a44:	4b21      	ldr	r3, [pc, #132]	; (8001acc <main+0x31c>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	721a      	strb	r2, [r3, #8]
    		Rs232_manualSend[9] = '\0';
 8001a4a:	4b20      	ldr	r3, [pc, #128]	; (8001acc <main+0x31c>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	725a      	strb	r2, [r3, #9]

    		Rs232_manualSend[0]='A';
 8001a50:	4b1e      	ldr	r3, [pc, #120]	; (8001acc <main+0x31c>)
 8001a52:	2241      	movs	r2, #65	; 0x41
 8001a54:	701a      	strb	r2, [r3, #0]
    		Rs232_manualSend[1]='T';
 8001a56:	4b1d      	ldr	r3, [pc, #116]	; (8001acc <main+0x31c>)
 8001a58:	2254      	movs	r2, #84	; 0x54
 8001a5a:	705a      	strb	r2, [r3, #1]
    		Rs232_manualSend[2]='\r';
 8001a5c:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <main+0x31c>)
 8001a5e:	220d      	movs	r2, #13
 8001a60:	709a      	strb	r2, [r3, #2]
    		Delay_ms(30);
 8001a62:	201e      	movs	r0, #30
 8001a64:	f7fe fdb6 	bl	80005d4 <Delay_ms>
    		iBluetoothStep = 11;
 8001a68:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <main+0x314>)
 8001a6a:	220b      	movs	r2, #11
 8001a6c:	701a      	strb	r2, [r3, #0]


    		break;
 8001a6e:	e0ab      	b.n	8001bc8 <main+0x418>
    	case 11:
    		HAL_UART_Transmit(&huart3,&Rs232_manualSend,3,50);
 8001a70:	2332      	movs	r3, #50	; 0x32
 8001a72:	2203      	movs	r2, #3
 8001a74:	4915      	ldr	r1, [pc, #84]	; (8001acc <main+0x31c>)
 8001a76:	4806      	ldr	r0, [pc, #24]	; (8001a90 <main+0x2e0>)
 8001a78:	f005 fc79 	bl	800736e <HAL_UART_Transmit>
    		iBluetoothStep = 0;
 8001a7c:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <main+0x314>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	701a      	strb	r2, [r3, #0]
    		break;
 8001a82:	e0a1      	b.n	8001bc8 <main+0x418>
    	case 15:


    		iBluetoothStep = 0;
 8001a84:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <main+0x314>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	701a      	strb	r2, [r3, #0]
    		break;
 8001a8a:	e09d      	b.n	8001bc8 <main+0x418>
 8001a8c:	200002f4 	.word	0x200002f4
 8001a90:	200002a8 	.word	0x200002a8
 8001a94:	200002ed 	.word	0x200002ed
 8001a98:	200002ee 	.word	0x200002ee
 8001a9c:	20000390 	.word	0x20000390
 8001aa0:	2000000e 	.word	0x2000000e
 8001aa4:	2000000f 	.word	0x2000000f
 8001aa8:	2000039c 	.word	0x2000039c
 8001aac:	20000010 	.word	0x20000010
 8001ab0:	20000012 	.word	0x20000012
 8001ab4:	200002f7 	.word	0x200002f7
 8001ab8:	2000022c 	.word	0x2000022c
 8001abc:	20000260 	.word	0x20000260
 8001ac0:	200002f8 	.word	0x200002f8
 8001ac4:	200002ec 	.word	0x200002ec
 8001ac8:	200002fc 	.word	0x200002fc
 8001acc:	20000004 	.word	0x20000004

    	case 20: //Pairing MODE 시작
    		iRs232_count =0;
 8001ad0:	4b70      	ldr	r3, [pc, #448]	; (8001c94 <main+0x4e4>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]

    		Rs232_manualSend[0] = '\0';
 8001ad6:	4b70      	ldr	r3, [pc, #448]	; (8001c98 <main+0x4e8>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]
    		Rs232_manualSend[1] = '\0';
 8001adc:	4b6e      	ldr	r3, [pc, #440]	; (8001c98 <main+0x4e8>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	705a      	strb	r2, [r3, #1]
    		Rs232_manualSend[2] = '\0';
 8001ae2:	4b6d      	ldr	r3, [pc, #436]	; (8001c98 <main+0x4e8>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	709a      	strb	r2, [r3, #2]
    		Rs232_manualSend[3] = '\0';
 8001ae8:	4b6b      	ldr	r3, [pc, #428]	; (8001c98 <main+0x4e8>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	70da      	strb	r2, [r3, #3]
    		Rs232_manualSend[4] = '\0';
 8001aee:	4b6a      	ldr	r3, [pc, #424]	; (8001c98 <main+0x4e8>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	711a      	strb	r2, [r3, #4]
    		Rs232_manualSend[5] = '\0';
 8001af4:	4b68      	ldr	r3, [pc, #416]	; (8001c98 <main+0x4e8>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	715a      	strb	r2, [r3, #5]
    		Rs232_manualSend[6] = '\0';
 8001afa:	4b67      	ldr	r3, [pc, #412]	; (8001c98 <main+0x4e8>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	719a      	strb	r2, [r3, #6]
    		Rs232_manualSend[7] = '\0';
 8001b00:	4b65      	ldr	r3, [pc, #404]	; (8001c98 <main+0x4e8>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	71da      	strb	r2, [r3, #7]
    		Rs232_manualSend[8] = '\0';
 8001b06:	4b64      	ldr	r3, [pc, #400]	; (8001c98 <main+0x4e8>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	721a      	strb	r2, [r3, #8]
    		Rs232_manualSend[9] = '\0';
 8001b0c:	4b62      	ldr	r3, [pc, #392]	; (8001c98 <main+0x4e8>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	725a      	strb	r2, [r3, #9]


    		Rs232_manualSend[0]='A';
 8001b12:	4b61      	ldr	r3, [pc, #388]	; (8001c98 <main+0x4e8>)
 8001b14:	2241      	movs	r2, #65	; 0x41
 8001b16:	701a      	strb	r2, [r3, #0]
    		Rs232_manualSend[1]='T';
 8001b18:	4b5f      	ldr	r3, [pc, #380]	; (8001c98 <main+0x4e8>)
 8001b1a:	2254      	movs	r2, #84	; 0x54
 8001b1c:	705a      	strb	r2, [r3, #1]
    		Rs232_manualSend[2]='+';
 8001b1e:	4b5e      	ldr	r3, [pc, #376]	; (8001c98 <main+0x4e8>)
 8001b20:	222b      	movs	r2, #43	; 0x2b
 8001b22:	709a      	strb	r2, [r3, #2]
    		Rs232_manualSend[3]='R';
 8001b24:	4b5c      	ldr	r3, [pc, #368]	; (8001c98 <main+0x4e8>)
 8001b26:	2252      	movs	r2, #82	; 0x52
 8001b28:	70da      	strb	r2, [r3, #3]
    		Rs232_manualSend[4]='O';
 8001b2a:	4b5b      	ldr	r3, [pc, #364]	; (8001c98 <main+0x4e8>)
 8001b2c:	224f      	movs	r2, #79	; 0x4f
 8001b2e:	711a      	strb	r2, [r3, #4]
    		Rs232_manualSend[5]='L';
 8001b30:	4b59      	ldr	r3, [pc, #356]	; (8001c98 <main+0x4e8>)
 8001b32:	224c      	movs	r2, #76	; 0x4c
 8001b34:	715a      	strb	r2, [r3, #5]
    		Rs232_manualSend[6]='E';
 8001b36:	4b58      	ldr	r3, [pc, #352]	; (8001c98 <main+0x4e8>)
 8001b38:	2245      	movs	r2, #69	; 0x45
 8001b3a:	719a      	strb	r2, [r3, #6]
    		Rs232_manualSend[7]='?';
 8001b3c:	4b56      	ldr	r3, [pc, #344]	; (8001c98 <main+0x4e8>)
 8001b3e:	223f      	movs	r2, #63	; 0x3f
 8001b40:	71da      	strb	r2, [r3, #7]
    		Rs232_manualSend[8]='\r';
 8001b42:	4b55      	ldr	r3, [pc, #340]	; (8001c98 <main+0x4e8>)
 8001b44:	220d      	movs	r2, #13
 8001b46:	721a      	strb	r2, [r3, #8]
    		Delay_ms(30);
 8001b48:	201e      	movs	r0, #30
 8001b4a:	f7fe fd43 	bl	80005d4 <Delay_ms>
    		iBluetoothStep = 21;
 8001b4e:	4b53      	ldr	r3, [pc, #332]	; (8001c9c <main+0x4ec>)
 8001b50:	2215      	movs	r2, #21
 8001b52:	701a      	strb	r2, [r3, #0]



    		break;
 8001b54:	e038      	b.n	8001bc8 <main+0x418>
    	case 21:
    		HAL_UART_Transmit(&huart3,&Rs232_manualSend,9,50);
 8001b56:	2332      	movs	r3, #50	; 0x32
 8001b58:	2209      	movs	r2, #9
 8001b5a:	494f      	ldr	r1, [pc, #316]	; (8001c98 <main+0x4e8>)
 8001b5c:	4850      	ldr	r0, [pc, #320]	; (8001ca0 <main+0x4f0>)
 8001b5e:	f005 fc06 	bl	800736e <HAL_UART_Transmit>
    		iBluetoothStep =0;
 8001b62:	4b4e      	ldr	r3, [pc, #312]	; (8001c9c <main+0x4ec>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	701a      	strb	r2, [r3, #0]
    	case 25:
    		Bluetooth_PowerOn();
 8001b68:	f7fe fd48 	bl	80005fc <Bluetooth_PowerOn>
    		Delay_ms(200);
 8001b6c:	20c8      	movs	r0, #200	; 0xc8
 8001b6e:	f7fe fd31 	bl	80005d4 <Delay_ms>
    		bATMODE_ON = false;
 8001b72:	4b4c      	ldr	r3, [pc, #304]	; (8001ca4 <main+0x4f4>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	701a      	strb	r2, [r3, #0]
    		bPairingMODE_ON = true;
 8001b78:	4b4b      	ldr	r3, [pc, #300]	; (8001ca8 <main+0x4f8>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	701a      	strb	r2, [r3, #0]
    		iBluetoothStep = 0;
 8001b7e:	4b47      	ldr	r3, [pc, #284]	; (8001c9c <main+0x4ec>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	701a      	strb	r2, [r3, #0]
    		break;
 8001b84:	e020      	b.n	8001bc8 <main+0x418>
    	case 30:
    		//HAL_UART_Transmit(&huart3,ManualRs232_str,sizeof(ManualRs232_str),10);   //RS232 송신
    		iBluetoothStep = 35;
 8001b86:	4b45      	ldr	r3, [pc, #276]	; (8001c9c <main+0x4ec>)
 8001b88:	2223      	movs	r2, #35	; 0x23
 8001b8a:	701a      	strb	r2, [r3, #0]
    		break;
 8001b8c:	e01c      	b.n	8001bc8 <main+0x418>
    	case 35:
    		Delay_ms(500);
 8001b8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b92:	f7fe fd1f 	bl	80005d4 <Delay_ms>
    		iBluetoothStep = 0;
 8001b96:	4b41      	ldr	r3, [pc, #260]	; (8001c9c <main+0x4ec>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	701a      	strb	r2, [r3, #0]
    		break;
 8001b9c:	e014      	b.n	8001bc8 <main+0x418>
    	case 50:
    		FlashMemoryWrite(192,168,0,18,9301);
 8001b9e:	f242 4355 	movw	r3, #9301	; 0x2455
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	2312      	movs	r3, #18
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	21a8      	movs	r1, #168	; 0xa8
 8001baa:	20c0      	movs	r0, #192	; 0xc0
 8001bac:	f7fe fdd2 	bl	8000754 <FlashMemoryWrite>
    		iBluetoothStep = 0;
 8001bb0:	4b3a      	ldr	r3, [pc, #232]	; (8001c9c <main+0x4ec>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	701a      	strb	r2, [r3, #0]
    		break;
 8001bb6:	e007      	b.n	8001bc8 <main+0x418>
    	case 60:
    		GetFlashMemory();
 8001bb8:	f000 f8d2 	bl	8001d60 <GetFlashMemory>
    		iBluetoothStep = 0;
 8001bbc:	4b37      	ldr	r3, [pc, #220]	; (8001c9c <main+0x4ec>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	701a      	strb	r2, [r3, #0]
    	default:
    		break;
 8001bc2:	bf00      	nop
 8001bc4:	e000      	b.n	8001bc8 <main+0x418>
    		break;
 8001bc6:	bf00      	nop
    }

    switch(istepPareingCheck)
 8001bc8:	4b38      	ldr	r3, [pc, #224]	; (8001cac <main+0x4fc>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b04      	cmp	r3, #4
 8001bce:	f63f ae42 	bhi.w	8001856 <main+0xa6>
 8001bd2:	a201      	add	r2, pc, #4	; (adr r2, 8001bd8 <main+0x428>)
 8001bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bd8:	08001bed 	.word	0x08001bed
 8001bdc:	08001c05 	.word	0x08001c05
 8001be0:	08001c4b 	.word	0x08001c4b
 8001be4:	08001c53 	.word	0x08001c53
 8001be8:	08001c6b 	.word	0x08001c6b
    	 {
    	 	 case 0:
    	 		gbPareingState =false;
 8001bec:	4b30      	ldr	r3, [pc, #192]	; (8001cb0 <main+0x500>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	701a      	strb	r2, [r3, #0]
    	 		 if(gbRs232_Flag)
 8001bf2:	4b30      	ldr	r3, [pc, #192]	; (8001cb4 <main+0x504>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d045      	beq.n	8001c88 <main+0x4d8>
    	 			istepPareingCheck =1;
 8001bfc:	4b2b      	ldr	r3, [pc, #172]	; (8001cac <main+0x4fc>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	601a      	str	r2, [r3, #0]
    	 		 	 //if(istepPareingCheck_TimeOut>30000)
    	 	 	break;
 8001c02:	e041      	b.n	8001c88 <main+0x4d8>
    	 	 case 1:

    	 		 if(gbRs232_Flag)
 8001c04:	4b2b      	ldr	r3, [pc, #172]	; (8001cb4 <main+0x504>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00c      	beq.n	8001c28 <main+0x478>
    	 		 {
    	 			gbRs232_Flag=false;
 8001c0e:	4b29      	ldr	r3, [pc, #164]	; (8001cb4 <main+0x504>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	701a      	strb	r2, [r3, #0]
    	 			istepPareingCheck_TimeOut =0;
 8001c14:	4b28      	ldr	r3, [pc, #160]	; (8001cb8 <main+0x508>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
    	 			gbPareingState =true;
 8001c1a:	4b25      	ldr	r3, [pc, #148]	; (8001cb0 <main+0x500>)
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	701a      	strb	r2, [r3, #0]
    	 			istepPareingCheck=2;
 8001c20:	4b22      	ldr	r3, [pc, #136]	; (8001cac <main+0x4fc>)
 8001c22:	2202      	movs	r2, #2
 8001c24:	601a      	str	r2, [r3, #0]

    	 			 }


    	 		 }
    	 		break;
 8001c26:	e031      	b.n	8001c8c <main+0x4dc>
    	 			istepPareingCheck_TimeOut++;
 8001c28:	4b23      	ldr	r3, [pc, #140]	; (8001cb8 <main+0x508>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	4a22      	ldr	r2, [pc, #136]	; (8001cb8 <main+0x508>)
 8001c30:	6013      	str	r3, [r2, #0]
    	 			 if(istepPareingCheck_TimeOut>100000)
 8001c32:	4b21      	ldr	r3, [pc, #132]	; (8001cb8 <main+0x508>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a21      	ldr	r2, [pc, #132]	; (8001cbc <main+0x50c>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	dd27      	ble.n	8001c8c <main+0x4dc>
    	 				gbPareingState =false;
 8001c3c:	4b1c      	ldr	r3, [pc, #112]	; (8001cb0 <main+0x500>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	701a      	strb	r2, [r3, #0]
    	 				istepPareingCheck=3;
 8001c42:	4b1a      	ldr	r3, [pc, #104]	; (8001cac <main+0x4fc>)
 8001c44:	2203      	movs	r2, #3
 8001c46:	601a      	str	r2, [r3, #0]
    	 		break;
 8001c48:	e020      	b.n	8001c8c <main+0x4dc>

    	 	 case 2:
    	 		istepPareingCheck=1;
 8001c4a:	4b18      	ldr	r3, [pc, #96]	; (8001cac <main+0x4fc>)
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]
    	 		break;
 8001c50:	e01f      	b.n	8001c92 <main+0x4e2>
    	 	 case 3:
    	 		gbPareingState =false;
 8001c52:	4b17      	ldr	r3, [pc, #92]	; (8001cb0 <main+0x500>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	701a      	strb	r2, [r3, #0]
    	 		iPareingFail_Flag_Cnt++;
 8001c58:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <main+0x510>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	4a18      	ldr	r2, [pc, #96]	; (8001cc0 <main+0x510>)
 8001c60:	6013      	str	r3, [r2, #0]
    	 		istepPareingCheck=4;
 8001c62:	4b12      	ldr	r3, [pc, #72]	; (8001cac <main+0x4fc>)
 8001c64:	2204      	movs	r2, #4
 8001c66:	601a      	str	r2, [r3, #0]
    	 		break;
 8001c68:	e013      	b.n	8001c92 <main+0x4e2>
    	 	 case 4:
    	 		 if(gbRs232_Flag)
 8001c6a:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <main+0x504>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d00d      	beq.n	8001c90 <main+0x4e0>
    	 		 {

    	 			istepPareingCheck_TimeOut =0;
 8001c74:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <main+0x508>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
    	 			gbPareingState =true;
 8001c7a:	4b0d      	ldr	r3, [pc, #52]	; (8001cb0 <main+0x500>)
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	701a      	strb	r2, [r3, #0]
    	 			istepPareingCheck=1;
 8001c80:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <main+0x4fc>)
 8001c82:	2201      	movs	r2, #1
 8001c84:	601a      	str	r2, [r3, #0]
    	 		 }
    	 		break;
 8001c86:	e003      	b.n	8001c90 <main+0x4e0>
    	 	 	break;
 8001c88:	bf00      	nop
 8001c8a:	e5e4      	b.n	8001856 <main+0xa6>
    	 		break;
 8001c8c:	bf00      	nop
 8001c8e:	e5e2      	b.n	8001856 <main+0xa6>
    	 		break;
 8001c90:	bf00      	nop
	  ethernetif_input(&gnetif);
 8001c92:	e5e0      	b.n	8001856 <main+0xa6>
 8001c94:	200002fc 	.word	0x200002fc
 8001c98:	20000004 	.word	0x20000004
 8001c9c:	200002ec 	.word	0x200002ec
 8001ca0:	200002a8 	.word	0x200002a8
 8001ca4:	200002f7 	.word	0x200002f7
 8001ca8:	200002f8 	.word	0x200002f8
 8001cac:	2000036c 	.word	0x2000036c
 8001cb0:	20000374 	.word	0x20000374
 8001cb4:	200002f6 	.word	0x200002f6
 8001cb8:	20000370 	.word	0x20000370
 8001cbc:	000186a0 	.word	0x000186a0
 8001cc0:	20000378 	.word	0x20000378

08001cc4 <HAL_UART_RxCpltCallback>:
	  }
	  totalAngle = (numberofTurns*360) + correctedAngle;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]


	 if(huart->Instance == huart3.Instance)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4b1a      	ldr	r3, [pc, #104]	; (8001d3c <HAL_UART_RxCpltCallback+0x78>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d12d      	bne.n	8001d34 <HAL_UART_RxCpltCallback+0x70>
	  {
		 iUART_InterruptCount++;
 8001cd8:	4b19      	ldr	r3, [pc, #100]	; (8001d40 <HAL_UART_RxCpltCallback+0x7c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	4a18      	ldr	r2, [pc, #96]	; (8001d40 <HAL_UART_RxCpltCallback+0x7c>)
 8001ce0:	6013      	str	r3, [r2, #0]
		 if(iUART_InterruptCount>1000)
 8001ce2:	4b17      	ldr	r3, [pc, #92]	; (8001d40 <HAL_UART_RxCpltCallback+0x7c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cea:	dd02      	ble.n	8001cf2 <HAL_UART_RxCpltCallback+0x2e>
		 {
			 iUART_InterruptCount=0;
 8001cec:	4b14      	ldr	r3, [pc, #80]	; (8001d40 <HAL_UART_RxCpltCallback+0x7c>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
		//	 iRs232_count =0;

		// }
		// else //마지막 문자가 오기 전까지 버퍼에 저장
		// {
		 if(bATMODE_ON)
 8001cf2:	4b14      	ldr	r3, [pc, #80]	; (8001d44 <HAL_UART_RxCpltCallback+0x80>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d010      	beq.n	8001d1c <HAL_UART_RxCpltCallback+0x58>
		 {
			 Rs232_receive_buffer[iRs232_count] = Rs232_receive_data;
 8001cfa:	4b13      	ldr	r3, [pc, #76]	; (8001d48 <HAL_UART_RxCpltCallback+0x84>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a13      	ldr	r2, [pc, #76]	; (8001d4c <HAL_UART_RxCpltCallback+0x88>)
 8001d00:	7811      	ldrb	r1, [r2, #0]
 8001d02:	4a13      	ldr	r2, [pc, #76]	; (8001d50 <HAL_UART_RxCpltCallback+0x8c>)
 8001d04:	54d1      	strb	r1, [r2, r3]
			 iRs232_count++;
 8001d06:	4b10      	ldr	r3, [pc, #64]	; (8001d48 <HAL_UART_RxCpltCallback+0x84>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	4a0e      	ldr	r2, [pc, #56]	; (8001d48 <HAL_UART_RxCpltCallback+0x84>)
 8001d0e:	6013      	str	r3, [r2, #0]
			 iRs232_count_CallBack++;   //TCP함수로 넘기기 위한 카운트
 8001d10:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <HAL_UART_RxCpltCallback+0x90>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	3301      	adds	r3, #1
 8001d16:	4a0f      	ldr	r2, [pc, #60]	; (8001d54 <HAL_UART_RxCpltCallback+0x90>)
 8001d18:	6013      	str	r3, [r2, #0]
 8001d1a:	e006      	b.n	8001d2a <HAL_UART_RxCpltCallback+0x66>
		 }
		 else //페어링 모드
		 {
			 gbRs232_Flag =true;
 8001d1c:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <HAL_UART_RxCpltCallback+0x94>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	701a      	strb	r2, [r3, #0]
			 rx_Bluetooth = Rs232_receive_data;
 8001d22:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <HAL_UART_RxCpltCallback+0x88>)
 8001d24:	781a      	ldrb	r2, [r3, #0]
 8001d26:	4b0d      	ldr	r3, [pc, #52]	; (8001d5c <HAL_UART_RxCpltCallback+0x98>)
 8001d28:	701a      	strb	r2, [r3, #0]
		 }


		 HAL_UART_Receive_IT(&huart3, &Rs232_receive_data, 1);  //인터럽트 정의
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	4907      	ldr	r1, [pc, #28]	; (8001d4c <HAL_UART_RxCpltCallback+0x88>)
 8001d2e:	4803      	ldr	r0, [pc, #12]	; (8001d3c <HAL_UART_RxCpltCallback+0x78>)
 8001d30:	f005 fbaf 	bl	8007492 <HAL_UART_Receive_IT>


	  }
}
 8001d34:	bf00      	nop
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	200002a8 	.word	0x200002a8
 8001d40:	20000368 	.word	0x20000368
 8001d44:	200002f7 	.word	0x200002f7
 8001d48:	200002fc 	.word	0x200002fc
 8001d4c:	200002f4 	.word	0x200002f4
 8001d50:	20000304 	.word	0x20000304
 8001d54:	20000300 	.word	0x20000300
 8001d58:	200002f6 	.word	0x200002f6
 8001d5c:	200002f5 	.word	0x200002f5

08001d60 <GetFlashMemory>:
void GetFlashMemory(void){
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
	FlashMemoryRead();
 8001d64:	f7fe fd4e 	bl	8000804 <FlashMemoryRead>
	GetFlashMemory_SavedCounter = (flash_read_data[1] << 8) + flash_read_data[0] ;
 8001d68:	4b27      	ldr	r3, [pc, #156]	; (8001e08 <GetFlashMemory+0xa8>)
 8001d6a:	785b      	ldrb	r3, [r3, #1]
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	021b      	lsls	r3, r3, #8
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	4b25      	ldr	r3, [pc, #148]	; (8001e08 <GetFlashMemory+0xa8>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	4413      	add	r3, r2
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	b21a      	sxth	r2, r3
 8001d7e:	4b23      	ldr	r3, [pc, #140]	; (8001e0c <GetFlashMemory+0xac>)
 8001d80:	801a      	strh	r2, [r3, #0]
	get_ip1 = (flash_read_data[3] << 8) + flash_read_data[2] ;
 8001d82:	4b21      	ldr	r3, [pc, #132]	; (8001e08 <GetFlashMemory+0xa8>)
 8001d84:	78db      	ldrb	r3, [r3, #3]
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	021b      	lsls	r3, r3, #8
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	4b1e      	ldr	r3, [pc, #120]	; (8001e08 <GetFlashMemory+0xa8>)
 8001d8e:	789b      	ldrb	r3, [r3, #2]
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	4413      	add	r3, r2
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	b21a      	sxth	r2, r3
 8001d98:	4b1d      	ldr	r3, [pc, #116]	; (8001e10 <GetFlashMemory+0xb0>)
 8001d9a:	801a      	strh	r2, [r3, #0]
	get_ip2 = (flash_read_data[5] << 8) + flash_read_data[4] ;
 8001d9c:	4b1a      	ldr	r3, [pc, #104]	; (8001e08 <GetFlashMemory+0xa8>)
 8001d9e:	795b      	ldrb	r3, [r3, #5]
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	021b      	lsls	r3, r3, #8
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	4b18      	ldr	r3, [pc, #96]	; (8001e08 <GetFlashMemory+0xa8>)
 8001da8:	791b      	ldrb	r3, [r3, #4]
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	4413      	add	r3, r2
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	b21a      	sxth	r2, r3
 8001db2:	4b18      	ldr	r3, [pc, #96]	; (8001e14 <GetFlashMemory+0xb4>)
 8001db4:	801a      	strh	r2, [r3, #0]
	get_ip3 = (flash_read_data[7] << 8) + flash_read_data[6] ;
 8001db6:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <GetFlashMemory+0xa8>)
 8001db8:	79db      	ldrb	r3, [r3, #7]
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	021b      	lsls	r3, r3, #8
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <GetFlashMemory+0xa8>)
 8001dc2:	799b      	ldrb	r3, [r3, #6]
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	4413      	add	r3, r2
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	b21a      	sxth	r2, r3
 8001dcc:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <GetFlashMemory+0xb8>)
 8001dce:	801a      	strh	r2, [r3, #0]
	get_ip4 = (flash_read_data[9] << 8) + flash_read_data[8] ;
 8001dd0:	4b0d      	ldr	r3, [pc, #52]	; (8001e08 <GetFlashMemory+0xa8>)
 8001dd2:	7a5b      	ldrb	r3, [r3, #9]
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	021b      	lsls	r3, r3, #8
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <GetFlashMemory+0xa8>)
 8001ddc:	7a1b      	ldrb	r3, [r3, #8]
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	4413      	add	r3, r2
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	b21a      	sxth	r2, r3
 8001de6:	4b0d      	ldr	r3, [pc, #52]	; (8001e1c <GetFlashMemory+0xbc>)
 8001de8:	801a      	strh	r2, [r3, #0]
	get_port = (flash_read_data[11] << 8) + flash_read_data[10] ;
 8001dea:	4b07      	ldr	r3, [pc, #28]	; (8001e08 <GetFlashMemory+0xa8>)
 8001dec:	7adb      	ldrb	r3, [r3, #11]
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	021b      	lsls	r3, r3, #8
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	4b04      	ldr	r3, [pc, #16]	; (8001e08 <GetFlashMemory+0xa8>)
 8001df6:	7a9b      	ldrb	r3, [r3, #10]
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	4413      	add	r3, r2
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	b21a      	sxth	r2, r3
 8001e00:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <GetFlashMemory+0xc0>)
 8001e02:	801a      	strh	r2, [r3, #0]
}
 8001e04:	bf00      	nop
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	2000037c 	.word	0x2000037c
 8001e0c:	20000390 	.word	0x20000390
 8001e10:	20000392 	.word	0x20000392
 8001e14:	20000394 	.word	0x20000394
 8001e18:	20000396 	.word	0x20000396
 8001e1c:	20000398 	.word	0x20000398
 8001e20:	2000039a 	.word	0x2000039a

08001e24 <HAL_IncTick>:
 void HAL_IncTick(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  iSystemTick++;
 8001e28:	4b22      	ldr	r3, [pc, #136]	; (8001eb4 <HAL_IncTick+0x90>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	4a21      	ldr	r2, [pc, #132]	; (8001eb4 <HAL_IncTick+0x90>)
 8001e30:	6013      	str	r3, [r2, #0]
  if(iSystemTick>300)
 8001e32:	4b20      	ldr	r3, [pc, #128]	; (8001eb4 <HAL_IncTick+0x90>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001e3a:	d902      	bls.n	8001e42 <HAL_IncTick+0x1e>
	  iSystemTick=0;
 8001e3c:	4b1d      	ldr	r3, [pc, #116]	; (8001eb4 <HAL_IncTick+0x90>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
  uwTick += uwTickFreq;
 8001e42:	4b1d      	ldr	r3, [pc, #116]	; (8001eb8 <HAL_IncTick+0x94>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	461a      	mov	r2, r3
 8001e48:	4b1c      	ldr	r3, [pc, #112]	; (8001ebc <HAL_IncTick+0x98>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	4a1b      	ldr	r2, [pc, #108]	; (8001ebc <HAL_IncTick+0x98>)
 8001e50:	6013      	str	r3, [r2, #0]
  if(iSystemTick < 100)
 8001e52:	4b18      	ldr	r3, [pc, #96]	; (8001eb4 <HAL_IncTick+0x90>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2b63      	cmp	r3, #99	; 0x63
 8001e58:	d809      	bhi.n	8001e6e <HAL_IncTick+0x4a>
  {
	  ST_LED_ON_1();
 8001e5a:	f7fe fbdb 	bl	8000614 <ST_LED_ON_1>
	  if(gbPareingState)
 8001e5e:	4b18      	ldr	r3, [pc, #96]	; (8001ec0 <HAL_IncTick+0x9c>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d022      	beq.n	8001eae <HAL_IncTick+0x8a>
	  {
		  ST_LED_OFF_3();
 8001e68:	f7fe fc04 	bl	8000674 <ST_LED_OFF_3>
	  //ST_LED_ON_3();
	  ST_LED_OFF_1();
	  //ST_LED_OFF_2();
  }

}
 8001e6c:	e01f      	b.n	8001eae <HAL_IncTick+0x8a>
  else if(iSystemTick > 100 && iSystemTick<200)
 8001e6e:	4b11      	ldr	r3, [pc, #68]	; (8001eb4 <HAL_IncTick+0x90>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2b64      	cmp	r3, #100	; 0x64
 8001e74:	d910      	bls.n	8001e98 <HAL_IncTick+0x74>
 8001e76:	4b0f      	ldr	r3, [pc, #60]	; (8001eb4 <HAL_IncTick+0x90>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2bc7      	cmp	r3, #199	; 0xc7
 8001e7c:	d80c      	bhi.n	8001e98 <HAL_IncTick+0x74>
	  if(gbPareingState)
 8001e7e:	4b10      	ldr	r3, [pc, #64]	; (8001ec0 <HAL_IncTick+0x9c>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d002      	beq.n	8001e8e <HAL_IncTick+0x6a>
		  ST_LED_ON_3();
 8001e88:	f7fe fbdc 	bl	8000644 <ST_LED_ON_3>
 8001e8c:	e001      	b.n	8001e92 <HAL_IncTick+0x6e>
		  ST_LED_OFF_3();
 8001e8e:	f7fe fbf1 	bl	8000674 <ST_LED_OFF_3>
	  ST_LED_OFF_1();
 8001e92:	f7fe fbe3 	bl	800065c <ST_LED_OFF_1>
}
 8001e96:	e00a      	b.n	8001eae <HAL_IncTick+0x8a>
  else if(iSystemTick > 200 && iSystemTick<300)
 8001e98:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <HAL_IncTick+0x90>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2bc8      	cmp	r3, #200	; 0xc8
 8001e9e:	d906      	bls.n	8001eae <HAL_IncTick+0x8a>
 8001ea0:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <HAL_IncTick+0x90>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001ea8:	d201      	bcs.n	8001eae <HAL_IncTick+0x8a>
	  ST_LED_OFF_1();
 8001eaa:	f7fe fbd7 	bl	800065c <ST_LED_OFF_1>
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	200002f0 	.word	0x200002f0
 8001eb8:	2000001c 	.word	0x2000001c
 8001ebc:	2000044c 	.word	0x2000044c
 8001ec0:	20000374 	.word	0x20000374

08001ec4 <HAL_GPIO_EXTI_Callback>:

 void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_2)
 8001ece:	88fb      	ldrh	r3, [r7, #6]
 8001ed0:	2b04      	cmp	r3, #4
 8001ed2:	d103      	bne.n	8001edc <HAL_GPIO_EXTI_Callback+0x18>
  {
	  iInterruptCnt=1;
 8001ed4:	4b0e      	ldr	r3, [pc, #56]	; (8001f10 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	701a      	strb	r2, [r3, #0]
  }
  else if(GPIO_Pin == GPIO_PIN_5)
  {
	  iInterruptCnt = 4;
  }
}
 8001eda:	e013      	b.n	8001f04 <HAL_GPIO_EXTI_Callback+0x40>
  else if(GPIO_Pin == GPIO_PIN_3)
 8001edc:	88fb      	ldrh	r3, [r7, #6]
 8001ede:	2b08      	cmp	r3, #8
 8001ee0:	d103      	bne.n	8001eea <HAL_GPIO_EXTI_Callback+0x26>
	  iInterruptCnt = 2;
 8001ee2:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	701a      	strb	r2, [r3, #0]
}
 8001ee8:	e00c      	b.n	8001f04 <HAL_GPIO_EXTI_Callback+0x40>
  else if(GPIO_Pin == GPIO_PIN_4)
 8001eea:	88fb      	ldrh	r3, [r7, #6]
 8001eec:	2b10      	cmp	r3, #16
 8001eee:	d103      	bne.n	8001ef8 <HAL_GPIO_EXTI_Callback+0x34>
	  iInterruptCnt = 3;
 8001ef0:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001ef2:	2203      	movs	r2, #3
 8001ef4:	701a      	strb	r2, [r3, #0]
}
 8001ef6:	e005      	b.n	8001f04 <HAL_GPIO_EXTI_Callback+0x40>
  else if(GPIO_Pin == GPIO_PIN_5)
 8001ef8:	88fb      	ldrh	r3, [r7, #6]
 8001efa:	2b20      	cmp	r3, #32
 8001efc:	d102      	bne.n	8001f04 <HAL_GPIO_EXTI_Callback+0x40>
	  iInterruptCnt = 4;
 8001efe:	4b04      	ldr	r3, [pc, #16]	; (8001f10 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001f00:	2204      	movs	r2, #4
 8001f02:	701a      	strb	r2, [r3, #0]
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	200002ed 	.word	0x200002ed

08001f14 <SystemClock_Config>:
void SystemClock_Config(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b094      	sub	sp, #80	; 0x50
 8001f18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f1a:	f107 0320 	add.w	r3, r7, #32
 8001f1e:	2230      	movs	r2, #48	; 0x30
 8001f20:	2100      	movs	r1, #0
 8001f22:	4618      	mov	r0, r3
 8001f24:	f011 fbb0 	bl	8013688 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f28:	f107 030c 	add.w	r3, r7, #12
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60bb      	str	r3, [r7, #8]
 8001f3c:	4b23      	ldr	r3, [pc, #140]	; (8001fcc <SystemClock_Config+0xb8>)
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f40:	4a22      	ldr	r2, [pc, #136]	; (8001fcc <SystemClock_Config+0xb8>)
 8001f42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f46:	6413      	str	r3, [r2, #64]	; 0x40
 8001f48:	4b20      	ldr	r3, [pc, #128]	; (8001fcc <SystemClock_Config+0xb8>)
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f50:	60bb      	str	r3, [r7, #8]
 8001f52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001f54:	2300      	movs	r3, #0
 8001f56:	607b      	str	r3, [r7, #4]
 8001f58:	4b1d      	ldr	r3, [pc, #116]	; (8001fd0 <SystemClock_Config+0xbc>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f60:	4a1b      	ldr	r2, [pc, #108]	; (8001fd0 <SystemClock_Config+0xbc>)
 8001f62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f66:	6013      	str	r3, [r2, #0]
 8001f68:	4b19      	ldr	r3, [pc, #100]	; (8001fd0 <SystemClock_Config+0xbc>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f70:	607b      	str	r3, [r7, #4]
 8001f72:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f74:	2302      	movs	r3, #2
 8001f76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f7c:	2310      	movs	r3, #16
 8001f7e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001f80:	2300      	movs	r3, #0
 8001f82:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f84:	f107 0320 	add.w	r3, r7, #32
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f004 fd0b 	bl	80069a4 <HAL_RCC_OscConfig>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001f94:	f000 f9ee 	bl	8002374 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f98:	230f      	movs	r3, #15
 8001f9a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fa8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001faa:	2300      	movs	r3, #0
 8001fac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001fae:	f107 030c 	add.w	r3, r7, #12
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f004 ff6d 	bl	8006e94 <HAL_RCC_ClockConfig>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001fc0:	f000 f9d8 	bl	8002374 <Error_Handler>
  }
}
 8001fc4:	bf00      	nop
 8001fc6:	3750      	adds	r7, #80	; 0x50
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	40007000 	.word	0x40007000

08001fd4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fd8:	4b1b      	ldr	r3, [pc, #108]	; (8002048 <MX_I2C1_Init+0x74>)
 8001fda:	4a1c      	ldr	r2, [pc, #112]	; (800204c <MX_I2C1_Init+0x78>)
 8001fdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001fde:	4b1a      	ldr	r3, [pc, #104]	; (8002048 <MX_I2C1_Init+0x74>)
 8001fe0:	4a1b      	ldr	r2, [pc, #108]	; (8002050 <MX_I2C1_Init+0x7c>)
 8001fe2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fe4:	4b18      	ldr	r3, [pc, #96]	; (8002048 <MX_I2C1_Init+0x74>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001fea:	4b17      	ldr	r3, [pc, #92]	; (8002048 <MX_I2C1_Init+0x74>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ff0:	4b15      	ldr	r3, [pc, #84]	; (8002048 <MX_I2C1_Init+0x74>)
 8001ff2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ff6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ff8:	4b13      	ldr	r3, [pc, #76]	; (8002048 <MX_I2C1_Init+0x74>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ffe:	4b12      	ldr	r3, [pc, #72]	; (8002048 <MX_I2C1_Init+0x74>)
 8002000:	2200      	movs	r2, #0
 8002002:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002004:	4b10      	ldr	r3, [pc, #64]	; (8002048 <MX_I2C1_Init+0x74>)
 8002006:	2200      	movs	r2, #0
 8002008:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800200a:	4b0f      	ldr	r3, [pc, #60]	; (8002048 <MX_I2C1_Init+0x74>)
 800200c:	2200      	movs	r2, #0
 800200e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002010:	480d      	ldr	r0, [pc, #52]	; (8002048 <MX_I2C1_Init+0x74>)
 8002012:	f002 fe2d 	bl	8004c70 <HAL_I2C_Init>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800201c:	f000 f9aa 	bl	8002374 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002020:	2100      	movs	r1, #0
 8002022:	4809      	ldr	r0, [pc, #36]	; (8002048 <MX_I2C1_Init+0x74>)
 8002024:	f004 fc43 	bl	80068ae <HAL_I2CEx_ConfigAnalogFilter>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800202e:	f000 f9a1 	bl	8002374 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002032:	2100      	movs	r1, #0
 8002034:	4804      	ldr	r0, [pc, #16]	; (8002048 <MX_I2C1_Init+0x74>)
 8002036:	f004 fc76 	bl	8006926 <HAL_I2CEx_ConfigDigitalFilter>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002040:	f000 f998 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002044:	bf00      	nop
 8002046:	bd80      	pop	{r7, pc}
 8002048:	200003a0 	.word	0x200003a0
 800204c:	40005400 	.word	0x40005400
 8002050:	000186a0 	.word	0x000186a0

08002054 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002058:	4b1b      	ldr	r3, [pc, #108]	; (80020c8 <MX_I2C2_Init+0x74>)
 800205a:	4a1c      	ldr	r2, [pc, #112]	; (80020cc <MX_I2C2_Init+0x78>)
 800205c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800205e:	4b1a      	ldr	r3, [pc, #104]	; (80020c8 <MX_I2C2_Init+0x74>)
 8002060:	4a1b      	ldr	r2, [pc, #108]	; (80020d0 <MX_I2C2_Init+0x7c>)
 8002062:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002064:	4b18      	ldr	r3, [pc, #96]	; (80020c8 <MX_I2C2_Init+0x74>)
 8002066:	2200      	movs	r2, #0
 8002068:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800206a:	4b17      	ldr	r3, [pc, #92]	; (80020c8 <MX_I2C2_Init+0x74>)
 800206c:	2200      	movs	r2, #0
 800206e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002070:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <MX_I2C2_Init+0x74>)
 8002072:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002076:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002078:	4b13      	ldr	r3, [pc, #76]	; (80020c8 <MX_I2C2_Init+0x74>)
 800207a:	2200      	movs	r2, #0
 800207c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800207e:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <MX_I2C2_Init+0x74>)
 8002080:	2200      	movs	r2, #0
 8002082:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002084:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <MX_I2C2_Init+0x74>)
 8002086:	2200      	movs	r2, #0
 8002088:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800208a:	4b0f      	ldr	r3, [pc, #60]	; (80020c8 <MX_I2C2_Init+0x74>)
 800208c:	2200      	movs	r2, #0
 800208e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002090:	480d      	ldr	r0, [pc, #52]	; (80020c8 <MX_I2C2_Init+0x74>)
 8002092:	f002 fded 	bl	8004c70 <HAL_I2C_Init>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800209c:	f000 f96a 	bl	8002374 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80020a0:	2100      	movs	r1, #0
 80020a2:	4809      	ldr	r0, [pc, #36]	; (80020c8 <MX_I2C2_Init+0x74>)
 80020a4:	f004 fc03 	bl	80068ae <HAL_I2CEx_ConfigAnalogFilter>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80020ae:	f000 f961 	bl	8002374 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80020b2:	2100      	movs	r1, #0
 80020b4:	4804      	ldr	r0, [pc, #16]	; (80020c8 <MX_I2C2_Init+0x74>)
 80020b6:	f004 fc36 	bl	8006926 <HAL_I2CEx_ConfigDigitalFilter>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80020c0:	f000 f958 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80020c4:	bf00      	nop
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	200003f4 	.word	0x200003f4
 80020cc:	40005800 	.word	0x40005800
 80020d0:	000186a0 	.word	0x000186a0

080020d4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80020d8:	4b11      	ldr	r3, [pc, #68]	; (8002120 <MX_UART4_Init+0x4c>)
 80020da:	4a12      	ldr	r2, [pc, #72]	; (8002124 <MX_UART4_Init+0x50>)
 80020dc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80020de:	4b10      	ldr	r3, [pc, #64]	; (8002120 <MX_UART4_Init+0x4c>)
 80020e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020e4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80020e6:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <MX_UART4_Init+0x4c>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80020ec:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <MX_UART4_Init+0x4c>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80020f2:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <MX_UART4_Init+0x4c>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80020f8:	4b09      	ldr	r3, [pc, #36]	; (8002120 <MX_UART4_Init+0x4c>)
 80020fa:	220c      	movs	r2, #12
 80020fc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020fe:	4b08      	ldr	r3, [pc, #32]	; (8002120 <MX_UART4_Init+0x4c>)
 8002100:	2200      	movs	r2, #0
 8002102:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002104:	4b06      	ldr	r3, [pc, #24]	; (8002120 <MX_UART4_Init+0x4c>)
 8002106:	2200      	movs	r2, #0
 8002108:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800210a:	4805      	ldr	r0, [pc, #20]	; (8002120 <MX_UART4_Init+0x4c>)
 800210c:	f005 f8e2 	bl	80072d4 <HAL_UART_Init>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002116:	f000 f92d 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	20000264 	.word	0x20000264
 8002124:	40004c00 	.word	0x40004c00

08002128 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800212c:	4b11      	ldr	r3, [pc, #68]	; (8002174 <MX_USART3_UART_Init+0x4c>)
 800212e:	4a12      	ldr	r2, [pc, #72]	; (8002178 <MX_USART3_UART_Init+0x50>)
 8002130:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002132:	4b10      	ldr	r3, [pc, #64]	; (8002174 <MX_USART3_UART_Init+0x4c>)
 8002134:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002138:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800213a:	4b0e      	ldr	r3, [pc, #56]	; (8002174 <MX_USART3_UART_Init+0x4c>)
 800213c:	2200      	movs	r2, #0
 800213e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002140:	4b0c      	ldr	r3, [pc, #48]	; (8002174 <MX_USART3_UART_Init+0x4c>)
 8002142:	2200      	movs	r2, #0
 8002144:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002146:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <MX_USART3_UART_Init+0x4c>)
 8002148:	2200      	movs	r2, #0
 800214a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800214c:	4b09      	ldr	r3, [pc, #36]	; (8002174 <MX_USART3_UART_Init+0x4c>)
 800214e:	220c      	movs	r2, #12
 8002150:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002152:	4b08      	ldr	r3, [pc, #32]	; (8002174 <MX_USART3_UART_Init+0x4c>)
 8002154:	2200      	movs	r2, #0
 8002156:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002158:	4b06      	ldr	r3, [pc, #24]	; (8002174 <MX_USART3_UART_Init+0x4c>)
 800215a:	2200      	movs	r2, #0
 800215c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800215e:	4805      	ldr	r0, [pc, #20]	; (8002174 <MX_USART3_UART_Init+0x4c>)
 8002160:	f005 f8b8 	bl	80072d4 <HAL_UART_Init>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800216a:	f000 f903 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	200002a8 	.word	0x200002a8
 8002178:	40004800 	.word	0x40004800

0800217c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b08c      	sub	sp, #48	; 0x30
 8002180:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002182:	f107 031c 	add.w	r3, r7, #28
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	605a      	str	r2, [r3, #4]
 800218c:	609a      	str	r2, [r3, #8]
 800218e:	60da      	str	r2, [r3, #12]
 8002190:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	61bb      	str	r3, [r7, #24]
 8002196:	4b71      	ldr	r3, [pc, #452]	; (800235c <MX_GPIO_Init+0x1e0>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	4a70      	ldr	r2, [pc, #448]	; (800235c <MX_GPIO_Init+0x1e0>)
 800219c:	f043 0304 	orr.w	r3, r3, #4
 80021a0:	6313      	str	r3, [r2, #48]	; 0x30
 80021a2:	4b6e      	ldr	r3, [pc, #440]	; (800235c <MX_GPIO_Init+0x1e0>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	f003 0304 	and.w	r3, r3, #4
 80021aa:	61bb      	str	r3, [r7, #24]
 80021ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	617b      	str	r3, [r7, #20]
 80021b2:	4b6a      	ldr	r3, [pc, #424]	; (800235c <MX_GPIO_Init+0x1e0>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	4a69      	ldr	r2, [pc, #420]	; (800235c <MX_GPIO_Init+0x1e0>)
 80021b8:	f043 0320 	orr.w	r3, r3, #32
 80021bc:	6313      	str	r3, [r2, #48]	; 0x30
 80021be:	4b67      	ldr	r3, [pc, #412]	; (800235c <MX_GPIO_Init+0x1e0>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	f003 0320 	and.w	r3, r3, #32
 80021c6:	617b      	str	r3, [r7, #20]
 80021c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	613b      	str	r3, [r7, #16]
 80021ce:	4b63      	ldr	r3, [pc, #396]	; (800235c <MX_GPIO_Init+0x1e0>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	4a62      	ldr	r2, [pc, #392]	; (800235c <MX_GPIO_Init+0x1e0>)
 80021d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021d8:	6313      	str	r3, [r2, #48]	; 0x30
 80021da:	4b60      	ldr	r3, [pc, #384]	; (800235c <MX_GPIO_Init+0x1e0>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e2:	613b      	str	r3, [r7, #16]
 80021e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	4b5c      	ldr	r3, [pc, #368]	; (800235c <MX_GPIO_Init+0x1e0>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	4a5b      	ldr	r2, [pc, #364]	; (800235c <MX_GPIO_Init+0x1e0>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	6313      	str	r3, [r2, #48]	; 0x30
 80021f6:	4b59      	ldr	r3, [pc, #356]	; (800235c <MX_GPIO_Init+0x1e0>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	60bb      	str	r3, [r7, #8]
 8002206:	4b55      	ldr	r3, [pc, #340]	; (800235c <MX_GPIO_Init+0x1e0>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	4a54      	ldr	r2, [pc, #336]	; (800235c <MX_GPIO_Init+0x1e0>)
 800220c:	f043 0302 	orr.w	r3, r3, #2
 8002210:	6313      	str	r3, [r2, #48]	; 0x30
 8002212:	4b52      	ldr	r3, [pc, #328]	; (800235c <MX_GPIO_Init+0x1e0>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	60bb      	str	r3, [r7, #8]
 800221c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	607b      	str	r3, [r7, #4]
 8002222:	4b4e      	ldr	r3, [pc, #312]	; (800235c <MX_GPIO_Init+0x1e0>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	4a4d      	ldr	r2, [pc, #308]	; (800235c <MX_GPIO_Init+0x1e0>)
 8002228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800222c:	6313      	str	r3, [r2, #48]	; 0x30
 800222e:	4b4b      	ldr	r3, [pc, #300]	; (800235c <MX_GPIO_Init+0x1e0>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002236:	607b      	str	r3, [r7, #4]
 8002238:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800223a:	2200      	movs	r2, #0
 800223c:	f244 0181 	movw	r1, #16513	; 0x4081
 8002240:	4847      	ldr	r0, [pc, #284]	; (8002360 <MX_GPIO_Init+0x1e4>)
 8002242:	f002 fce3 	bl	8004c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002246:	2200      	movs	r2, #0
 8002248:	217f      	movs	r1, #127	; 0x7f
 800224a:	4846      	ldr	r0, [pc, #280]	; (8002364 <MX_GPIO_Init+0x1e8>)
 800224c:	f002 fcde 	bl	8004c0c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002250:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002254:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002256:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800225a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002260:	f107 031c 	add.w	r3, r7, #28
 8002264:	4619      	mov	r1, r3
 8002266:	4840      	ldr	r0, [pc, #256]	; (8002368 <MX_GPIO_Init+0x1ec>)
 8002268:	f002 fb24 	bl	80048b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF2 PF3 PF4 PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800226c:	233c      	movs	r3, #60	; 0x3c
 800226e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002270:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002274:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	2300      	movs	r3, #0
 8002278:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800227a:	f107 031c 	add.w	r3, r7, #28
 800227e:	4619      	mov	r1, r3
 8002280:	483a      	ldr	r0, [pc, #232]	; (800236c <MX_GPIO_Init+0x1f0>)
 8002282:	f002 fb17 	bl	80048b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002286:	f244 0381 	movw	r3, #16513	; 0x4081
 800228a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800228c:	2301      	movs	r3, #1
 800228e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002294:	2300      	movs	r3, #0
 8002296:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002298:	f107 031c 	add.w	r3, r7, #28
 800229c:	4619      	mov	r1, r3
 800229e:	4830      	ldr	r0, [pc, #192]	; (8002360 <MX_GPIO_Init+0x1e4>)
 80022a0:	f002 fb08 	bl	80048b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80022a4:	237f      	movs	r3, #127	; 0x7f
 80022a6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|USB_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022a8:	2301      	movs	r3, #1
 80022aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ac:	2300      	movs	r3, #0
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b0:	2300      	movs	r3, #0
 80022b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022b4:	f107 031c 	add.w	r3, r7, #28
 80022b8:	4619      	mov	r1, r3
 80022ba:	482a      	ldr	r0, [pc, #168]	; (8002364 <MX_GPIO_Init+0x1e8>)
 80022bc:	f002 fafa 	bl	80048b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80022c0:	2380      	movs	r3, #128	; 0x80
 80022c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022c4:	2300      	movs	r3, #0
 80022c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80022cc:	f107 031c 	add.w	r3, r7, #28
 80022d0:	4619      	mov	r1, r3
 80022d2:	4824      	ldr	r0, [pc, #144]	; (8002364 <MX_GPIO_Init+0x1e8>)
 80022d4:	f002 faee 	bl	80048b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80022d8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80022dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022de:	2302      	movs	r3, #2
 80022e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e2:	2300      	movs	r3, #0
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e6:	2303      	movs	r3, #3
 80022e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80022ea:	230a      	movs	r3, #10
 80022ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ee:	f107 031c 	add.w	r3, r7, #28
 80022f2:	4619      	mov	r1, r3
 80022f4:	481e      	ldr	r0, [pc, #120]	; (8002370 <MX_GPIO_Init+0x1f4>)
 80022f6:	f002 fadd 	bl	80048b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80022fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002300:	2300      	movs	r3, #0
 8002302:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002304:	2300      	movs	r3, #0
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002308:	f107 031c 	add.w	r3, r7, #28
 800230c:	4619      	mov	r1, r3
 800230e:	4818      	ldr	r0, [pc, #96]	; (8002370 <MX_GPIO_Init+0x1f4>)
 8002310:	f002 fad0 	bl	80048b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002314:	2200      	movs	r2, #0
 8002316:	2100      	movs	r1, #0
 8002318:	2008      	movs	r0, #8
 800231a:	f000 fdf6 	bl	8002f0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800231e:	2008      	movs	r0, #8
 8002320:	f000 fe0f 	bl	8002f42 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002324:	2200      	movs	r2, #0
 8002326:	2100      	movs	r1, #0
 8002328:	2009      	movs	r0, #9
 800232a:	f000 fdee 	bl	8002f0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800232e:	2009      	movs	r0, #9
 8002330:	f000 fe07 	bl	8002f42 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002334:	2200      	movs	r2, #0
 8002336:	2100      	movs	r1, #0
 8002338:	200a      	movs	r0, #10
 800233a:	f000 fde6 	bl	8002f0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800233e:	200a      	movs	r0, #10
 8002340:	f000 fdff 	bl	8002f42 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002344:	2200      	movs	r2, #0
 8002346:	2100      	movs	r1, #0
 8002348:	2017      	movs	r0, #23
 800234a:	f000 fdde 	bl	8002f0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800234e:	2017      	movs	r0, #23
 8002350:	f000 fdf7 	bl	8002f42 <HAL_NVIC_EnableIRQ>

}
 8002354:	bf00      	nop
 8002356:	3730      	adds	r7, #48	; 0x30
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40023800 	.word	0x40023800
 8002360:	40020400 	.word	0x40020400
 8002364:	40021800 	.word	0x40021800
 8002368:	40020800 	.word	0x40020800
 800236c:	40021400 	.word	0x40021400
 8002370:	40020000 	.word	0x40020000

08002374 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002378:	b672      	cpsid	i
}
 800237a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800237c:	e7fe      	b.n	800237c <Error_Handler+0x8>
	...

08002380 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	607b      	str	r3, [r7, #4]
 800238a:	4b10      	ldr	r3, [pc, #64]	; (80023cc <HAL_MspInit+0x4c>)
 800238c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238e:	4a0f      	ldr	r2, [pc, #60]	; (80023cc <HAL_MspInit+0x4c>)
 8002390:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002394:	6453      	str	r3, [r2, #68]	; 0x44
 8002396:	4b0d      	ldr	r3, [pc, #52]	; (80023cc <HAL_MspInit+0x4c>)
 8002398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800239e:	607b      	str	r3, [r7, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	603b      	str	r3, [r7, #0]
 80023a6:	4b09      	ldr	r3, [pc, #36]	; (80023cc <HAL_MspInit+0x4c>)
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	4a08      	ldr	r2, [pc, #32]	; (80023cc <HAL_MspInit+0x4c>)
 80023ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023b0:	6413      	str	r3, [r2, #64]	; 0x40
 80023b2:	4b06      	ldr	r3, [pc, #24]	; (80023cc <HAL_MspInit+0x4c>)
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ba:	603b      	str	r3, [r7, #0]
 80023bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	40023800 	.word	0x40023800

080023d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b08c      	sub	sp, #48	; 0x30
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d8:	f107 031c 	add.w	r3, r7, #28
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	605a      	str	r2, [r3, #4]
 80023e2:	609a      	str	r2, [r3, #8]
 80023e4:	60da      	str	r2, [r3, #12]
 80023e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a42      	ldr	r2, [pc, #264]	; (80024f8 <HAL_I2C_MspInit+0x128>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d13d      	bne.n	800246e <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	61bb      	str	r3, [r7, #24]
 80023f6:	4b41      	ldr	r3, [pc, #260]	; (80024fc <HAL_I2C_MspInit+0x12c>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	4a40      	ldr	r2, [pc, #256]	; (80024fc <HAL_I2C_MspInit+0x12c>)
 80023fc:	f043 0302 	orr.w	r3, r3, #2
 8002400:	6313      	str	r3, [r2, #48]	; 0x30
 8002402:	4b3e      	ldr	r3, [pc, #248]	; (80024fc <HAL_I2C_MspInit+0x12c>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	61bb      	str	r3, [r7, #24]
 800240c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800240e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002414:	2312      	movs	r3, #18
 8002416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002418:	2300      	movs	r3, #0
 800241a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800241c:	2303      	movs	r3, #3
 800241e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002420:	2304      	movs	r3, #4
 8002422:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002424:	f107 031c 	add.w	r3, r7, #28
 8002428:	4619      	mov	r1, r3
 800242a:	4835      	ldr	r0, [pc, #212]	; (8002500 <HAL_I2C_MspInit+0x130>)
 800242c:	f002 fa42 	bl	80048b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]
 8002434:	4b31      	ldr	r3, [pc, #196]	; (80024fc <HAL_I2C_MspInit+0x12c>)
 8002436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002438:	4a30      	ldr	r2, [pc, #192]	; (80024fc <HAL_I2C_MspInit+0x12c>)
 800243a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800243e:	6413      	str	r3, [r2, #64]	; 0x40
 8002440:	4b2e      	ldr	r3, [pc, #184]	; (80024fc <HAL_I2C_MspInit+0x12c>)
 8002442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002448:	617b      	str	r3, [r7, #20]
 800244a:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800244c:	2200      	movs	r2, #0
 800244e:	2100      	movs	r1, #0
 8002450:	201f      	movs	r0, #31
 8002452:	f000 fd5a 	bl	8002f0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002456:	201f      	movs	r0, #31
 8002458:	f000 fd73 	bl	8002f42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800245c:	2200      	movs	r2, #0
 800245e:	2100      	movs	r1, #0
 8002460:	2020      	movs	r0, #32
 8002462:	f000 fd52 	bl	8002f0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002466:	2020      	movs	r0, #32
 8002468:	f000 fd6b 	bl	8002f42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800246c:	e040      	b.n	80024f0 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C2)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a24      	ldr	r2, [pc, #144]	; (8002504 <HAL_I2C_MspInit+0x134>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d13b      	bne.n	80024f0 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002478:	2300      	movs	r3, #0
 800247a:	613b      	str	r3, [r7, #16]
 800247c:	4b1f      	ldr	r3, [pc, #124]	; (80024fc <HAL_I2C_MspInit+0x12c>)
 800247e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002480:	4a1e      	ldr	r2, [pc, #120]	; (80024fc <HAL_I2C_MspInit+0x12c>)
 8002482:	f043 0320 	orr.w	r3, r3, #32
 8002486:	6313      	str	r3, [r2, #48]	; 0x30
 8002488:	4b1c      	ldr	r3, [pc, #112]	; (80024fc <HAL_I2C_MspInit+0x12c>)
 800248a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248c:	f003 0320 	and.w	r3, r3, #32
 8002490:	613b      	str	r3, [r7, #16]
 8002492:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002494:	2303      	movs	r3, #3
 8002496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002498:	2312      	movs	r3, #18
 800249a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249c:	2300      	movs	r3, #0
 800249e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a0:	2303      	movs	r3, #3
 80024a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80024a4:	2304      	movs	r3, #4
 80024a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80024a8:	f107 031c 	add.w	r3, r7, #28
 80024ac:	4619      	mov	r1, r3
 80024ae:	4816      	ldr	r0, [pc, #88]	; (8002508 <HAL_I2C_MspInit+0x138>)
 80024b0:	f002 fa00 	bl	80048b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80024b4:	2300      	movs	r3, #0
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	4b10      	ldr	r3, [pc, #64]	; (80024fc <HAL_I2C_MspInit+0x12c>)
 80024ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024bc:	4a0f      	ldr	r2, [pc, #60]	; (80024fc <HAL_I2C_MspInit+0x12c>)
 80024be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024c2:	6413      	str	r3, [r2, #64]	; 0x40
 80024c4:	4b0d      	ldr	r3, [pc, #52]	; (80024fc <HAL_I2C_MspInit+0x12c>)
 80024c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80024d0:	2200      	movs	r2, #0
 80024d2:	2100      	movs	r1, #0
 80024d4:	2021      	movs	r0, #33	; 0x21
 80024d6:	f000 fd18 	bl	8002f0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80024da:	2021      	movs	r0, #33	; 0x21
 80024dc:	f000 fd31 	bl	8002f42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80024e0:	2200      	movs	r2, #0
 80024e2:	2100      	movs	r1, #0
 80024e4:	2022      	movs	r0, #34	; 0x22
 80024e6:	f000 fd10 	bl	8002f0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80024ea:	2022      	movs	r0, #34	; 0x22
 80024ec:	f000 fd29 	bl	8002f42 <HAL_NVIC_EnableIRQ>
}
 80024f0:	bf00      	nop
 80024f2:	3730      	adds	r7, #48	; 0x30
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40005400 	.word	0x40005400
 80024fc:	40023800 	.word	0x40023800
 8002500:	40020400 	.word	0x40020400
 8002504:	40005800 	.word	0x40005800
 8002508:	40021400 	.word	0x40021400

0800250c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b08c      	sub	sp, #48	; 0x30
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002514:	f107 031c 	add.w	r3, r7, #28
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	605a      	str	r2, [r3, #4]
 800251e:	609a      	str	r2, [r3, #8]
 8002520:	60da      	str	r2, [r3, #12]
 8002522:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a4a      	ldr	r2, [pc, #296]	; (8002654 <HAL_UART_MspInit+0x148>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d153      	bne.n	80025d6 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	61bb      	str	r3, [r7, #24]
 8002532:	4b49      	ldr	r3, [pc, #292]	; (8002658 <HAL_UART_MspInit+0x14c>)
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	4a48      	ldr	r2, [pc, #288]	; (8002658 <HAL_UART_MspInit+0x14c>)
 8002538:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800253c:	6413      	str	r3, [r2, #64]	; 0x40
 800253e:	4b46      	ldr	r3, [pc, #280]	; (8002658 <HAL_UART_MspInit+0x14c>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002546:	61bb      	str	r3, [r7, #24]
 8002548:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	617b      	str	r3, [r7, #20]
 800254e:	4b42      	ldr	r3, [pc, #264]	; (8002658 <HAL_UART_MspInit+0x14c>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	4a41      	ldr	r2, [pc, #260]	; (8002658 <HAL_UART_MspInit+0x14c>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	6313      	str	r3, [r2, #48]	; 0x30
 800255a:	4b3f      	ldr	r3, [pc, #252]	; (8002658 <HAL_UART_MspInit+0x14c>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	617b      	str	r3, [r7, #20]
 8002564:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002566:	2300      	movs	r3, #0
 8002568:	613b      	str	r3, [r7, #16]
 800256a:	4b3b      	ldr	r3, [pc, #236]	; (8002658 <HAL_UART_MspInit+0x14c>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	4a3a      	ldr	r2, [pc, #232]	; (8002658 <HAL_UART_MspInit+0x14c>)
 8002570:	f043 0304 	orr.w	r3, r3, #4
 8002574:	6313      	str	r3, [r2, #48]	; 0x30
 8002576:	4b38      	ldr	r3, [pc, #224]	; (8002658 <HAL_UART_MspInit+0x14c>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	f003 0304 	and.w	r3, r3, #4
 800257e:	613b      	str	r3, [r7, #16]
 8002580:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002582:	2301      	movs	r3, #1
 8002584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002586:	2302      	movs	r3, #2
 8002588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258a:	2300      	movs	r3, #0
 800258c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800258e:	2303      	movs	r3, #3
 8002590:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002592:	2308      	movs	r3, #8
 8002594:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002596:	f107 031c 	add.w	r3, r7, #28
 800259a:	4619      	mov	r1, r3
 800259c:	482f      	ldr	r0, [pc, #188]	; (800265c <HAL_UART_MspInit+0x150>)
 800259e:	f002 f989 	bl	80048b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80025a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a8:	2302      	movs	r3, #2
 80025aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b0:	2303      	movs	r3, #3
 80025b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80025b4:	2308      	movs	r3, #8
 80025b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025b8:	f107 031c 	add.w	r3, r7, #28
 80025bc:	4619      	mov	r1, r3
 80025be:	4828      	ldr	r0, [pc, #160]	; (8002660 <HAL_UART_MspInit+0x154>)
 80025c0:	f002 f978 	bl	80048b4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80025c4:	2200      	movs	r2, #0
 80025c6:	2100      	movs	r1, #0
 80025c8:	2034      	movs	r0, #52	; 0x34
 80025ca:	f000 fc9e 	bl	8002f0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80025ce:	2034      	movs	r0, #52	; 0x34
 80025d0:	f000 fcb7 	bl	8002f42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80025d4:	e039      	b.n	800264a <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART3)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a22      	ldr	r2, [pc, #136]	; (8002664 <HAL_UART_MspInit+0x158>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d134      	bne.n	800264a <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80025e0:	2300      	movs	r3, #0
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	4b1c      	ldr	r3, [pc, #112]	; (8002658 <HAL_UART_MspInit+0x14c>)
 80025e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e8:	4a1b      	ldr	r2, [pc, #108]	; (8002658 <HAL_UART_MspInit+0x14c>)
 80025ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025ee:	6413      	str	r3, [r2, #64]	; 0x40
 80025f0:	4b19      	ldr	r3, [pc, #100]	; (8002658 <HAL_UART_MspInit+0x14c>)
 80025f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025fc:	2300      	movs	r3, #0
 80025fe:	60bb      	str	r3, [r7, #8]
 8002600:	4b15      	ldr	r3, [pc, #84]	; (8002658 <HAL_UART_MspInit+0x14c>)
 8002602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002604:	4a14      	ldr	r2, [pc, #80]	; (8002658 <HAL_UART_MspInit+0x14c>)
 8002606:	f043 0302 	orr.w	r3, r3, #2
 800260a:	6313      	str	r3, [r2, #48]	; 0x30
 800260c:	4b12      	ldr	r3, [pc, #72]	; (8002658 <HAL_UART_MspInit+0x14c>)
 800260e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	60bb      	str	r3, [r7, #8]
 8002616:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002618:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800261c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261e:	2302      	movs	r3, #2
 8002620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002622:	2300      	movs	r3, #0
 8002624:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002626:	2303      	movs	r3, #3
 8002628:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800262a:	2307      	movs	r3, #7
 800262c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800262e:	f107 031c 	add.w	r3, r7, #28
 8002632:	4619      	mov	r1, r3
 8002634:	480c      	ldr	r0, [pc, #48]	; (8002668 <HAL_UART_MspInit+0x15c>)
 8002636:	f002 f93d 	bl	80048b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800263a:	2200      	movs	r2, #0
 800263c:	2100      	movs	r1, #0
 800263e:	2027      	movs	r0, #39	; 0x27
 8002640:	f000 fc63 	bl	8002f0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002644:	2027      	movs	r0, #39	; 0x27
 8002646:	f000 fc7c 	bl	8002f42 <HAL_NVIC_EnableIRQ>
}
 800264a:	bf00      	nop
 800264c:	3730      	adds	r7, #48	; 0x30
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40004c00 	.word	0x40004c00
 8002658:	40023800 	.word	0x40023800
 800265c:	40020000 	.word	0x40020000
 8002660:	40020800 	.word	0x40020800
 8002664:	40004800 	.word	0x40004800
 8002668:	40020400 	.word	0x40020400

0800266c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002670:	e7fe      	b.n	8002670 <NMI_Handler+0x4>

08002672 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002672:	b480      	push	{r7}
 8002674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002676:	e7fe      	b.n	8002676 <HardFault_Handler+0x4>

08002678 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800267c:	e7fe      	b.n	800267c <MemManage_Handler+0x4>

0800267e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800267e:	b480      	push	{r7}
 8002680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002682:	e7fe      	b.n	8002682 <BusFault_Handler+0x4>

08002684 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002688:	e7fe      	b.n	8002688 <UsageFault_Handler+0x4>

0800268a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800268a:	b480      	push	{r7}
 800268c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800268e:	bf00      	nop
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800269c:	bf00      	nop
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026a6:	b480      	push	{r7}
 80026a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026aa:	bf00      	nop
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026b8:	f7ff fbb4 	bl	8001e24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026bc:	bf00      	nop
 80026be:	bd80      	pop	{r7, pc}

080026c0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80026c4:	2004      	movs	r0, #4
 80026c6:	f002 fabb 	bl	8004c40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}

080026ce <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80026d2:	2008      	movs	r0, #8
 80026d4:	f002 fab4 	bl	8004c40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80026d8:	bf00      	nop
 80026da:	bd80      	pop	{r7, pc}

080026dc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80026e0:	2010      	movs	r0, #16
 80026e2:	f002 faad 	bl	8004c40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80026e6:	bf00      	nop
 80026e8:	bd80      	pop	{r7, pc}

080026ea <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80026ee:	2020      	movs	r0, #32
 80026f0:	f002 faa6 	bl	8004c40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80026f4:	bf00      	nop
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80026fc:	4802      	ldr	r0, [pc, #8]	; (8002708 <I2C1_EV_IRQHandler+0x10>)
 80026fe:	f002 fbfb 	bl	8004ef8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002702:	bf00      	nop
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	200003a0 	.word	0x200003a0

0800270c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002710:	4802      	ldr	r0, [pc, #8]	; (800271c <I2C1_ER_IRQHandler+0x10>)
 8002712:	f002 fd62 	bl	80051da <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002716:	bf00      	nop
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	200003a0 	.word	0x200003a0

08002720 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002724:	4802      	ldr	r0, [pc, #8]	; (8002730 <I2C2_EV_IRQHandler+0x10>)
 8002726:	f002 fbe7 	bl	8004ef8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800272a:	bf00      	nop
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	200003f4 	.word	0x200003f4

08002734 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002738:	4802      	ldr	r0, [pc, #8]	; (8002744 <I2C2_ER_IRQHandler+0x10>)
 800273a:	f002 fd4e 	bl	80051da <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800273e:	bf00      	nop
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	200003f4 	.word	0x200003f4

08002748 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800274c:	4802      	ldr	r0, [pc, #8]	; (8002758 <USART3_IRQHandler+0x10>)
 800274e:	f004 fed1 	bl	80074f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002752:	bf00      	nop
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	200002a8 	.word	0x200002a8

0800275c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002760:	4802      	ldr	r0, [pc, #8]	; (800276c <UART4_IRQHandler+0x10>)
 8002762:	f004 fec7 	bl	80074f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002766:	bf00      	nop
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	20000264 	.word	0x20000264

08002770 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002774:	4802      	ldr	r0, [pc, #8]	; (8002780 <ETH_IRQHandler+0x10>)
 8002776:	f000 ffa1 	bl	80036bc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800277a:	bf00      	nop
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	20004f54 	.word	0x20004f54

08002784 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
	return 1;
 8002788:	2301      	movs	r3, #1
}
 800278a:	4618      	mov	r0, r3
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <_kill>:

int _kill(int pid, int sig)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800279e:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <_kill+0x20>)
 80027a0:	2216      	movs	r2, #22
 80027a2:	601a      	str	r2, [r3, #0]
	return -1;
 80027a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	20008730 	.word	0x20008730

080027b8 <_exit>:

void _exit (int status)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80027c0:	f04f 31ff 	mov.w	r1, #4294967295
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f7ff ffe5 	bl	8002794 <_kill>
	while (1) {}		/* Make sure we hang here */
 80027ca:	e7fe      	b.n	80027ca <_exit+0x12>

080027cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027d8:	2300      	movs	r3, #0
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	e00a      	b.n	80027f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80027de:	f3af 8000 	nop.w
 80027e2:	4601      	mov	r1, r0
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	1c5a      	adds	r2, r3, #1
 80027e8:	60ba      	str	r2, [r7, #8]
 80027ea:	b2ca      	uxtb	r2, r1
 80027ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	3301      	adds	r3, #1
 80027f2:	617b      	str	r3, [r7, #20]
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	dbf0      	blt.n	80027de <_read+0x12>
	}

return len;
 80027fc:	687b      	ldr	r3, [r7, #4]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3718      	adds	r7, #24
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b086      	sub	sp, #24
 800280a:	af00      	add	r7, sp, #0
 800280c:	60f8      	str	r0, [r7, #12]
 800280e:	60b9      	str	r1, [r7, #8]
 8002810:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002812:	2300      	movs	r3, #0
 8002814:	617b      	str	r3, [r7, #20]
 8002816:	e009      	b.n	800282c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	1c5a      	adds	r2, r3, #1
 800281c:	60ba      	str	r2, [r7, #8]
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	4618      	mov	r0, r3
 8002822:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	3301      	adds	r3, #1
 800282a:	617b      	str	r3, [r7, #20]
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	429a      	cmp	r2, r3
 8002832:	dbf1      	blt.n	8002818 <_write+0x12>
	}
	return len;
 8002834:	687b      	ldr	r3, [r7, #4]
}
 8002836:	4618      	mov	r0, r3
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <_close>:

int _close(int file)
{
 800283e:	b480      	push	{r7}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
	return -1;
 8002846:	f04f 33ff 	mov.w	r3, #4294967295
}
 800284a:	4618      	mov	r0, r3
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
 800285e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002866:	605a      	str	r2, [r3, #4]
	return 0;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <_isatty>:

int _isatty(int file)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
	return 1;
 800287e:	2301      	movs	r3, #1
}
 8002880:	4618      	mov	r0, r3
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
	return 0;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3714      	adds	r7, #20
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
	...

080028a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b087      	sub	sp, #28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028b0:	4a14      	ldr	r2, [pc, #80]	; (8002904 <_sbrk+0x5c>)
 80028b2:	4b15      	ldr	r3, [pc, #84]	; (8002908 <_sbrk+0x60>)
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028bc:	4b13      	ldr	r3, [pc, #76]	; (800290c <_sbrk+0x64>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d102      	bne.n	80028ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028c4:	4b11      	ldr	r3, [pc, #68]	; (800290c <_sbrk+0x64>)
 80028c6:	4a12      	ldr	r2, [pc, #72]	; (8002910 <_sbrk+0x68>)
 80028c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028ca:	4b10      	ldr	r3, [pc, #64]	; (800290c <_sbrk+0x64>)
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4413      	add	r3, r2
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d205      	bcs.n	80028e4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80028d8:	4b0e      	ldr	r3, [pc, #56]	; (8002914 <_sbrk+0x6c>)
 80028da:	220c      	movs	r2, #12
 80028dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028de:	f04f 33ff 	mov.w	r3, #4294967295
 80028e2:	e009      	b.n	80028f8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80028e4:	4b09      	ldr	r3, [pc, #36]	; (800290c <_sbrk+0x64>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028ea:	4b08      	ldr	r3, [pc, #32]	; (800290c <_sbrk+0x64>)
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4413      	add	r3, r2
 80028f2:	4a06      	ldr	r2, [pc, #24]	; (800290c <_sbrk+0x64>)
 80028f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028f6:	68fb      	ldr	r3, [r7, #12]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	371c      	adds	r7, #28
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	20030000 	.word	0x20030000
 8002908:	00000400 	.word	0x00000400
 800290c:	20000448 	.word	0x20000448
 8002910:	20008738 	.word	0x20008738
 8002914:	20008730 	.word	0x20008730

08002918 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800291c:	4b06      	ldr	r3, [pc, #24]	; (8002938 <SystemInit+0x20>)
 800291e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002922:	4a05      	ldr	r2, [pc, #20]	; (8002938 <SystemInit+0x20>)
 8002924:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002928:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800292c:	bf00      	nop
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	e000ed00 	.word	0xe000ed00

0800293c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800293c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002974 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002940:	480d      	ldr	r0, [pc, #52]	; (8002978 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002942:	490e      	ldr	r1, [pc, #56]	; (800297c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002944:	4a0e      	ldr	r2, [pc, #56]	; (8002980 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002948:	e002      	b.n	8002950 <LoopCopyDataInit>

0800294a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800294a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800294c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800294e:	3304      	adds	r3, #4

08002950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002954:	d3f9      	bcc.n	800294a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002956:	4a0b      	ldr	r2, [pc, #44]	; (8002984 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002958:	4c0b      	ldr	r4, [pc, #44]	; (8002988 <LoopFillZerobss+0x26>)
  movs r3, #0
 800295a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800295c:	e001      	b.n	8002962 <LoopFillZerobss>

0800295e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800295e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002960:	3204      	adds	r2, #4

08002962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002964:	d3fb      	bcc.n	800295e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002966:	f7ff ffd7 	bl	8002918 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800296a:	f010 fe4b 	bl	8013604 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800296e:	f7fe ff1f 	bl	80017b0 <main>
  bx  lr    
 8002972:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002974:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800297c:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8002980:	080173e0 	.word	0x080173e0
  ldr r2, =_sbss
 8002984:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8002988:	20008738 	.word	0x20008738

0800298c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800298c:	e7fe      	b.n	800298c <ADC_IRQHandler>

0800298e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800298e:	b480      	push	{r7}
 8002990:	b083      	sub	sp, #12
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
 8002996:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00b      	beq.n	80029b6 <LAN8742_RegisterBusIO+0x28>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d007      	beq.n	80029b6 <LAN8742_RegisterBusIO+0x28>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <LAN8742_RegisterBusIO+0x28>
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d102      	bne.n	80029bc <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80029b6:	f04f 33ff 	mov.w	r3, #4294967295
 80029ba:	e014      	b.n	80029e6 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	68da      	ldr	r2, [r3, #12]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	691a      	ldr	r2, [r3, #16]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b086      	sub	sp, #24
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80029fa:	2300      	movs	r3, #0
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	2300      	movs	r3, #0
 8002a00:	60bb      	str	r3, [r7, #8]
 8002a02:	2300      	movs	r3, #0
 8002a04:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8002a06:	2300      	movs	r3, #0
 8002a08:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d17c      	bne.n	8002b0c <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d002      	beq.n	8002a20 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2220      	movs	r2, #32
 8002a24:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002a26:	2300      	movs	r3, #0
 8002a28:	617b      	str	r3, [r7, #20]
 8002a2a:	e01c      	b.n	8002a66 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	f107 0208 	add.w	r2, r7, #8
 8002a34:	2112      	movs	r1, #18
 8002a36:	6978      	ldr	r0, [r7, #20]
 8002a38:	4798      	blx	r3
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	da03      	bge.n	8002a48 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8002a40:	f06f 0304 	mvn.w	r3, #4
 8002a44:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8002a46:	e00b      	b.n	8002a60 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	f003 031f 	and.w	r3, r3, #31
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d105      	bne.n	8002a60 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	613b      	str	r3, [r7, #16]
         break;
 8002a5e:	e005      	b.n	8002a6c <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	3301      	adds	r3, #1
 8002a64:	617b      	str	r3, [r7, #20]
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	2b1f      	cmp	r3, #31
 8002a6a:	d9df      	bls.n	8002a2c <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2b1f      	cmp	r3, #31
 8002a72:	d902      	bls.n	8002a7a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002a74:	f06f 0302 	mvn.w	r3, #2
 8002a78:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d145      	bne.n	8002b0c <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6810      	ldr	r0, [r2, #0]
 8002a88:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	4798      	blx	r3
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	db37      	blt.n	8002b06 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6810      	ldr	r0, [r2, #0]
 8002a9e:	f107 0208 	add.w	r2, r7, #8
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	4798      	blx	r3
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	db28      	blt.n	8002afe <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	4798      	blx	r3
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002ab6:	e01c      	b.n	8002af2 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	4798      	blx	r3
 8002abe:	4603      	mov	r3, r0
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002aca:	d80e      	bhi.n	8002aea <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6810      	ldr	r0, [r2, #0]
 8002ad4:	f107 0208 	add.w	r2, r7, #8
 8002ad8:	2100      	movs	r1, #0
 8002ada:	4798      	blx	r3
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	da07      	bge.n	8002af2 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8002ae2:	f06f 0304 	mvn.w	r3, #4
 8002ae6:	613b      	str	r3, [r7, #16]
                 break;
 8002ae8:	e010      	b.n	8002b0c <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8002aea:	f06f 0301 	mvn.w	r3, #1
 8002aee:	613b      	str	r3, [r7, #16]
               break;
 8002af0:	e00c      	b.n	8002b0c <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1dd      	bne.n	8002ab8 <LAN8742_Init+0xc6>
 8002afc:	e006      	b.n	8002b0c <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8002afe:	f06f 0304 	mvn.w	r3, #4
 8002b02:	613b      	str	r3, [r7, #16]
 8002b04:	e002      	b.n	8002b0c <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8002b06:	f06f 0303 	mvn.w	r3, #3
 8002b0a:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d112      	bne.n	8002b38 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	4798      	blx	r3
 8002b18:	4603      	mov	r3, r0
 8002b1a:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8002b1c:	bf00      	nop
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	4798      	blx	r3
 8002b24:	4603      	mov	r3, r0
 8002b26:	461a      	mov	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002b30:	d9f5      	bls.n	8002b1e <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8002b38:	693b      	ldr	r3, [r7, #16]
 }
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3718      	adds	r7, #24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b084      	sub	sp, #16
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	6810      	ldr	r0, [r2, #0]
 8002b56:	f107 020c 	add.w	r2, r7, #12
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	4798      	blx	r3
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	da02      	bge.n	8002b6a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002b64:	f06f 0304 	mvn.w	r3, #4
 8002b68:	e06e      	b.n	8002c48 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6810      	ldr	r0, [r2, #0]
 8002b72:	f107 020c 	add.w	r2, r7, #12
 8002b76:	2101      	movs	r1, #1
 8002b78:	4798      	blx	r3
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	da02      	bge.n	8002b86 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002b80:	f06f 0304 	mvn.w	r3, #4
 8002b84:	e060      	b.n	8002c48 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8002b90:	2301      	movs	r3, #1
 8002b92:	e059      	b.n	8002c48 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6810      	ldr	r0, [r2, #0]
 8002b9c:	f107 020c 	add.w	r2, r7, #12
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	4798      	blx	r3
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	da02      	bge.n	8002bb0 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002baa:	f06f 0304 	mvn.w	r3, #4
 8002bae:	e04b      	b.n	8002c48 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d11b      	bne.n	8002bf2 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d006      	beq.n	8002bd2 <LAN8742_GetLinkState+0x90>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002bce:	2302      	movs	r3, #2
 8002bd0:	e03a      	b.n	8002c48 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e033      	b.n	8002c48 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002bea:	2304      	movs	r3, #4
 8002bec:	e02c      	b.n	8002c48 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002bee:	2305      	movs	r3, #5
 8002bf0:	e02a      	b.n	8002c48 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	6810      	ldr	r0, [r2, #0]
 8002bfa:	f107 020c 	add.w	r2, r7, #12
 8002bfe:	211f      	movs	r1, #31
 8002c00:	4798      	blx	r3
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	da02      	bge.n	8002c0e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002c08:	f06f 0304 	mvn.w	r3, #4
 8002c0c:	e01c      	b.n	8002c48 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002c18:	2306      	movs	r3, #6
 8002c1a:	e015      	b.n	8002c48 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f003 031c 	and.w	r3, r3, #28
 8002c22:	2b18      	cmp	r3, #24
 8002c24:	d101      	bne.n	8002c2a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002c26:	2302      	movs	r3, #2
 8002c28:	e00e      	b.n	8002c48 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f003 031c 	and.w	r3, r3, #28
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	d101      	bne.n	8002c38 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e007      	b.n	8002c48 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f003 031c 	and.w	r3, r3, #28
 8002c3e:	2b14      	cmp	r3, #20
 8002c40:	d101      	bne.n	8002c46 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002c42:	2304      	movs	r3, #4
 8002c44:	e000      	b.n	8002c48 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002c46:	2305      	movs	r3, #5
    }				
  }
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c54:	4b0e      	ldr	r3, [pc, #56]	; (8002c90 <HAL_Init+0x40>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a0d      	ldr	r2, [pc, #52]	; (8002c90 <HAL_Init+0x40>)
 8002c5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c60:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <HAL_Init+0x40>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a0a      	ldr	r2, [pc, #40]	; (8002c90 <HAL_Init+0x40>)
 8002c66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c6c:	4b08      	ldr	r3, [pc, #32]	; (8002c90 <HAL_Init+0x40>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a07      	ldr	r2, [pc, #28]	; (8002c90 <HAL_Init+0x40>)
 8002c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c78:	2003      	movs	r0, #3
 8002c7a:	f000 f93b 	bl	8002ef4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c7e:	2000      	movs	r0, #0
 8002c80:	f000 f808 	bl	8002c94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c84:	f7ff fb7c 	bl	8002380 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40023c00 	.word	0x40023c00

08002c94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c9c:	4b12      	ldr	r3, [pc, #72]	; (8002ce8 <HAL_InitTick+0x54>)
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	4b12      	ldr	r3, [pc, #72]	; (8002cec <HAL_InitTick+0x58>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002caa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 f953 	bl	8002f5e <HAL_SYSTICK_Config>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e00e      	b.n	8002ce0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b0f      	cmp	r3, #15
 8002cc6:	d80a      	bhi.n	8002cde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cc8:	2200      	movs	r2, #0
 8002cca:	6879      	ldr	r1, [r7, #4]
 8002ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8002cd0:	f000 f91b 	bl	8002f0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cd4:	4a06      	ldr	r2, [pc, #24]	; (8002cf0 <HAL_InitTick+0x5c>)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	e000      	b.n	8002ce0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	20000014 	.word	0x20000014
 8002cec:	2000001c 	.word	0x2000001c
 8002cf0:	20000018 	.word	0x20000018

08002cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8002cf8:	4b03      	ldr	r3, [pc, #12]	; (8002d08 <HAL_GetTick+0x14>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	2000044c 	.word	0x2000044c

08002d0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d14:	f7ff ffee 	bl	8002cf4 <HAL_GetTick>
 8002d18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d24:	d005      	beq.n	8002d32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d26:	4b0a      	ldr	r3, [pc, #40]	; (8002d50 <HAL_Delay+0x44>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	4413      	add	r3, r2
 8002d30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d32:	bf00      	nop
 8002d34:	f7ff ffde 	bl	8002cf4 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d8f7      	bhi.n	8002d34 <HAL_Delay+0x28>
  {
  }
}
 8002d44:	bf00      	nop
 8002d46:	bf00      	nop
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	2000001c 	.word	0x2000001c

08002d54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f003 0307 	and.w	r3, r3, #7
 8002d62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d64:	4b0c      	ldr	r3, [pc, #48]	; (8002d98 <__NVIC_SetPriorityGrouping+0x44>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d70:	4013      	ands	r3, r2
 8002d72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d86:	4a04      	ldr	r2, [pc, #16]	; (8002d98 <__NVIC_SetPriorityGrouping+0x44>)
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	60d3      	str	r3, [r2, #12]
}
 8002d8c:	bf00      	nop
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	e000ed00 	.word	0xe000ed00

08002d9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002da0:	4b04      	ldr	r3, [pc, #16]	; (8002db4 <__NVIC_GetPriorityGrouping+0x18>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	0a1b      	lsrs	r3, r3, #8
 8002da6:	f003 0307 	and.w	r3, r3, #7
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	e000ed00 	.word	0xe000ed00

08002db8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	db0b      	blt.n	8002de2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dca:	79fb      	ldrb	r3, [r7, #7]
 8002dcc:	f003 021f 	and.w	r2, r3, #31
 8002dd0:	4907      	ldr	r1, [pc, #28]	; (8002df0 <__NVIC_EnableIRQ+0x38>)
 8002dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd6:	095b      	lsrs	r3, r3, #5
 8002dd8:	2001      	movs	r0, #1
 8002dda:	fa00 f202 	lsl.w	r2, r0, r2
 8002dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	e000e100 	.word	0xe000e100

08002df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	6039      	str	r1, [r7, #0]
 8002dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	db0a      	blt.n	8002e1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	490c      	ldr	r1, [pc, #48]	; (8002e40 <__NVIC_SetPriority+0x4c>)
 8002e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e12:	0112      	lsls	r2, r2, #4
 8002e14:	b2d2      	uxtb	r2, r2
 8002e16:	440b      	add	r3, r1
 8002e18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e1c:	e00a      	b.n	8002e34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	b2da      	uxtb	r2, r3
 8002e22:	4908      	ldr	r1, [pc, #32]	; (8002e44 <__NVIC_SetPriority+0x50>)
 8002e24:	79fb      	ldrb	r3, [r7, #7]
 8002e26:	f003 030f 	and.w	r3, r3, #15
 8002e2a:	3b04      	subs	r3, #4
 8002e2c:	0112      	lsls	r2, r2, #4
 8002e2e:	b2d2      	uxtb	r2, r2
 8002e30:	440b      	add	r3, r1
 8002e32:	761a      	strb	r2, [r3, #24]
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	e000e100 	.word	0xe000e100
 8002e44:	e000ed00 	.word	0xe000ed00

08002e48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b089      	sub	sp, #36	; 0x24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	f1c3 0307 	rsb	r3, r3, #7
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	bf28      	it	cs
 8002e66:	2304      	movcs	r3, #4
 8002e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	2b06      	cmp	r3, #6
 8002e70:	d902      	bls.n	8002e78 <NVIC_EncodePriority+0x30>
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	3b03      	subs	r3, #3
 8002e76:	e000      	b.n	8002e7a <NVIC_EncodePriority+0x32>
 8002e78:	2300      	movs	r3, #0
 8002e7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	43da      	mvns	r2, r3
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	401a      	ands	r2, r3
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e90:	f04f 31ff 	mov.w	r1, #4294967295
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9a:	43d9      	mvns	r1, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ea0:	4313      	orrs	r3, r2
         );
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3724      	adds	r7, #36	; 0x24
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
	...

08002eb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ec0:	d301      	bcc.n	8002ec6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e00f      	b.n	8002ee6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ec6:	4a0a      	ldr	r2, [pc, #40]	; (8002ef0 <SysTick_Config+0x40>)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ece:	210f      	movs	r1, #15
 8002ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ed4:	f7ff ff8e 	bl	8002df4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ed8:	4b05      	ldr	r3, [pc, #20]	; (8002ef0 <SysTick_Config+0x40>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ede:	4b04      	ldr	r3, [pc, #16]	; (8002ef0 <SysTick_Config+0x40>)
 8002ee0:	2207      	movs	r2, #7
 8002ee2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	e000e010 	.word	0xe000e010

08002ef4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f7ff ff29 	bl	8002d54 <__NVIC_SetPriorityGrouping>
}
 8002f02:	bf00      	nop
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b086      	sub	sp, #24
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	4603      	mov	r3, r0
 8002f12:	60b9      	str	r1, [r7, #8]
 8002f14:	607a      	str	r2, [r7, #4]
 8002f16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f1c:	f7ff ff3e 	bl	8002d9c <__NVIC_GetPriorityGrouping>
 8002f20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	68b9      	ldr	r1, [r7, #8]
 8002f26:	6978      	ldr	r0, [r7, #20]
 8002f28:	f7ff ff8e 	bl	8002e48 <NVIC_EncodePriority>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f32:	4611      	mov	r1, r2
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff ff5d 	bl	8002df4 <__NVIC_SetPriority>
}
 8002f3a:	bf00      	nop
 8002f3c:	3718      	adds	r7, #24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b082      	sub	sp, #8
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	4603      	mov	r3, r0
 8002f4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7ff ff31 	bl	8002db8 <__NVIC_EnableIRQ>
}
 8002f56:	bf00      	nop
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b082      	sub	sp, #8
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7ff ffa2 	bl	8002eb0 <SysTick_Config>
 8002f6c:	4603      	mov	r3, r0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b084      	sub	sp, #16
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f82:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f84:	f7ff feb6 	bl	8002cf4 <HAL_GetTick>
 8002f88:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d008      	beq.n	8002fa8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2280      	movs	r2, #128	; 0x80
 8002f9a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e052      	b.n	800304e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f022 0216 	bic.w	r2, r2, #22
 8002fb6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695a      	ldr	r2, [r3, #20]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fc6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d103      	bne.n	8002fd8 <HAL_DMA_Abort+0x62>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d007      	beq.n	8002fe8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f022 0208 	bic.w	r2, r2, #8
 8002fe6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0201 	bic.w	r2, r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ff8:	e013      	b.n	8003022 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ffa:	f7ff fe7b 	bl	8002cf4 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b05      	cmp	r3, #5
 8003006:	d90c      	bls.n	8003022 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2220      	movs	r2, #32
 800300c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2203      	movs	r2, #3
 8003012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e015      	b.n	800304e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1e4      	bne.n	8002ffa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003034:	223f      	movs	r2, #63	; 0x3f
 8003036:	409a      	lsls	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d004      	beq.n	8003074 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2280      	movs	r2, #128	; 0x80
 800306e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e00c      	b.n	800308e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2205      	movs	r2, #5
 8003078:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f022 0201 	bic.w	r2, r2, #1
 800308a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr

0800309a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800309a:	b480      	push	{r7}
 800309c:	b083      	sub	sp, #12
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030a8:	b2db      	uxtb	r3, r3
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
	...

080030b8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e06c      	b.n	80031a4 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d106      	bne.n	80030e2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2223      	movs	r2, #35	; 0x23
 80030d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f005 fc5f 	bl	80089a0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030e2:	2300      	movs	r3, #0
 80030e4:	60bb      	str	r3, [r7, #8]
 80030e6:	4b31      	ldr	r3, [pc, #196]	; (80031ac <HAL_ETH_Init+0xf4>)
 80030e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ea:	4a30      	ldr	r2, [pc, #192]	; (80031ac <HAL_ETH_Init+0xf4>)
 80030ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030f0:	6453      	str	r3, [r2, #68]	; 0x44
 80030f2:	4b2e      	ldr	r3, [pc, #184]	; (80031ac <HAL_ETH_Init+0xf4>)
 80030f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030fa:	60bb      	str	r3, [r7, #8]
 80030fc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80030fe:	4b2c      	ldr	r3, [pc, #176]	; (80031b0 <HAL_ETH_Init+0xf8>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	4a2b      	ldr	r2, [pc, #172]	; (80031b0 <HAL_ETH_Init+0xf8>)
 8003104:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003108:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800310a:	4b29      	ldr	r3, [pc, #164]	; (80031b0 <HAL_ETH_Init+0xf8>)
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	4927      	ldr	r1, [pc, #156]	; (80031b0 <HAL_ETH_Init+0xf8>)
 8003114:	4313      	orrs	r3, r2
 8003116:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003118:	4b25      	ldr	r3, [pc, #148]	; (80031b0 <HAL_ETH_Init+0xf8>)
 800311a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6812      	ldr	r2, [r2, #0]
 800312a:	f043 0301 	orr.w	r3, r3, #1
 800312e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003132:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003134:	f7ff fdde 	bl	8002cf4 <HAL_GetTick>
 8003138:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800313a:	e011      	b.n	8003160 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800313c:	f7ff fdda 	bl	8002cf4 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800314a:	d909      	bls.n	8003160 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2204      	movs	r2, #4
 8003150:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	22e0      	movs	r2, #224	; 0xe0
 8003158:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e021      	b.n	80031a4 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1e4      	bne.n	800313c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 fee4 	bl	8003f40 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 ff8b 	bl	8004094 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 ffe1 	bl	8004146 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	461a      	mov	r2, r3
 800318a:	2100      	movs	r1, #0
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 ff49 	bl	8004024 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2210      	movs	r2, #16
 800319e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40023800 	.word	0x40023800
 80031b0:	40013800 	.word	0x40013800

080031b4 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031c2:	2b10      	cmp	r3, #16
 80031c4:	d150      	bne.n	8003268 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2223      	movs	r2, #35	; 0x23
 80031ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2204      	movs	r2, #4
 80031d2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 f9fd 	bl	80035d4 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f042 0208 	orr.w	r2, r2, #8
 80031e8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80031f2:	2001      	movs	r0, #1
 80031f4:	f7ff fd8a 	bl	8002d0c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f042 0204 	orr.w	r2, r2, #4
 800320e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003218:	2001      	movs	r0, #1
 800321a:	f7ff fd77 	bl	8002d0c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 fd2a 	bl	8003c80 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	6812      	ldr	r2, [r2, #0]
 800323a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800323e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003242:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6812      	ldr	r2, [r2, #0]
 8003252:	f043 0302 	orr.w	r3, r3, #2
 8003256:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800325a:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2223      	movs	r2, #35	; 0x23
 8003260:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003264:	2300      	movs	r3, #0
 8003266:	e000      	b.n	800326a <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
  }
}
 800326a:	4618      	mov	r0, r3
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b084      	sub	sp, #16
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003280:	2b23      	cmp	r3, #35	; 0x23
 8003282:	d14a      	bne.n	800331a <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2223      	movs	r2, #35	; 0x23
 8003288:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	6812      	ldr	r2, [r2, #0]
 800329a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800329e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80032a2:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6812      	ldr	r2, [r2, #0]
 80032b2:	f023 0302 	bic.w	r3, r3, #2
 80032b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80032ba:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0204 	bic.w	r2, r2, #4
 80032ca:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80032d4:	2001      	movs	r0, #1
 80032d6:	f7ff fd19 	bl	8002d0c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 fccc 	bl	8003c80 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f022 0208 	bic.w	r2, r2, #8
 80032f6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003300:	2001      	movs	r0, #1
 8003302:	f7ff fd03 	bl	8002d0c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2210      	movs	r2, #16
 8003312:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8003316:	2300      	movs	r3, #0
 8003318:	e000      	b.n	800331c <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
  }
}
 800331c:	4618      	mov	r0, r3
 800331e:	3710      	adds	r7, #16
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d109      	bne.n	800334a <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333c:	f043 0201 	orr.w	r2, r3, #1
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e07c      	b.n	8003444 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003350:	2b23      	cmp	r3, #35	; 0x23
 8003352:	d176      	bne.n	8003442 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8003354:	2200      	movs	r2, #0
 8003356:	68b9      	ldr	r1, [r7, #8]
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f000 ff61 	bl	8004220 <ETH_Prepare_Tx_Descriptors>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d009      	beq.n	8003378 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336a:	f043 0202 	orr.w	r2, r3, #2
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e065      	b.n	8003444 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003378:	f3bf 8f4f 	dsb	sy
}
 800337c:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	3206      	adds	r2, #6
 8003386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800338a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003390:	1c5a      	adds	r2, r3, #1
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	629a      	str	r2, [r3, #40]	; 0x28
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339a:	2b03      	cmp	r3, #3
 800339c:	d904      	bls.n	80033a8 <HAL_ETH_Transmit+0x84>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a2:	1f1a      	subs	r2, r3, #4
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	3106      	adds	r1, #6
 80033b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80033b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80033bc:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80033be:	f7ff fc99 	bl	8002cf4 <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80033c4:	e037      	b.n	8003436 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d011      	beq.n	80033fc <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033de:	f043 0208 	orr.w	r2, r3, #8
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033f0:	695a      	ldr	r2, [r3, #20]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e023      	b.n	8003444 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003402:	d018      	beq.n	8003436 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003404:	f7ff fc76 	bl	8002cf4 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	429a      	cmp	r2, r3
 8003412:	d302      	bcc.n	800341a <HAL_ETH_Transmit+0xf6>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10d      	bne.n	8003436 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003420:	f043 0204 	orr.w	r2, r3, #4
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8003430:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e006      	b.n	8003444 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2b00      	cmp	r3, #0
 800343c:	dbc3      	blt.n	80033c6 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800343e:	2300      	movs	r3, #0
 8003440:	e000      	b.n	8003444 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
  }
}
 8003444:	4618      	mov	r0, r3
 8003446:	3718      	adds	r7, #24
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b088      	sub	sp, #32
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8003456:	2300      	movs	r3, #0
 8003458:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800345a:	2300      	movs	r3, #0
 800345c:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d109      	bne.n	8003478 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346a:	f043 0201 	orr.w	r2, r3, #1
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e0a8      	b.n	80035ca <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800347e:	2b23      	cmp	r3, #35	; 0x23
 8003480:	d001      	beq.n	8003486 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e0a1      	b.n	80035ca <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800348a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	69fa      	ldr	r2, [r7, #28]
 8003490:	3212      	adds	r2, #18
 8003492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003496:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800349c:	f1c3 0304 	rsb	r3, r3, #4
 80034a0:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80034a2:	e06a      	b.n	800357a <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d007      	beq.n	80034c0 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	699a      	ldr	r2, [r3, #24]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	69da      	ldr	r2, [r3, #28]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d103      	bne.n	80034d4 <HAL_ETH_ReadData+0x88>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d040      	beq.n	8003556 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d005      	beq.n	80034ec <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00c      	beq.n	8003518 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	0c1b      	lsrs	r3, r3, #16
 8003504:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003508:	3b04      	subs	r3, #4
 800350a:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8003514:	2301      	movs	r3, #1
 8003516:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003530:	461a      	mov	r2, r3
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	b29b      	uxth	r3, r3
 8003536:	f005 fc0b 	bl	8008d50 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800353e:	1c5a      	adds	r2, r3, #1
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	441a      	add	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	2200      	movs	r2, #0
 8003554:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	3301      	adds	r3, #1
 800355a:	61fb      	str	r3, [r7, #28]
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	2b03      	cmp	r3, #3
 8003560:	d902      	bls.n	8003568 <HAL_ETH_ReadData+0x11c>
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	3b04      	subs	r3, #4
 8003566:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	69fa      	ldr	r2, [r7, #28]
 800356c:	3212      	adds	r2, #18
 800356e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003572:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	3301      	adds	r3, #1
 8003578:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	db06      	blt.n	8003590 <HAL_ETH_ReadData+0x144>
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	429a      	cmp	r2, r3
 8003588:	d202      	bcs.n	8003590 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800358a:	7bfb      	ldrb	r3, [r7, #15]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d089      	beq.n	80034a4 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	441a      	add	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d002      	beq.n	80035aa <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 f815 	bl	80035d4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	69fa      	ldr	r2, [r7, #28]
 80035ae:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80035b0:	7bfb      	ldrb	r3, [r7, #15]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d108      	bne.n	80035c8 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80035c4:	2300      	movs	r3, #0
 80035c6:	e000      	b.n	80035ca <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3720      	adds	r7, #32
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
	...

080035d4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b088      	sub	sp, #32
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80035dc:	2300      	movs	r3, #0
 80035de:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80035e0:	2301      	movs	r3, #1
 80035e2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035e8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	69fa      	ldr	r2, [r7, #28]
 80035ee:	3212      	adds	r2, #18
 80035f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035f4:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035fa:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80035fc:	e040      	b.n	8003680 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d112      	bne.n	800362c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8003606:	f107 030c 	add.w	r3, r7, #12
 800360a:	4618      	mov	r0, r3
 800360c:	f005 fb70 	bl	8008cf0 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d102      	bne.n	800361c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8003616:	2300      	movs	r3, #0
 8003618:	74fb      	strb	r3, [r7, #19]
 800361a:	e007      	b.n	800362c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	461a      	mov	r2, r3
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	461a      	mov	r2, r3
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 800362c:	7cfb      	ldrb	r3, [r7, #19]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d026      	beq.n	8003680 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003636:	2b00      	cmp	r3, #0
 8003638:	d103      	bne.n	8003642 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	4a1e      	ldr	r2, [pc, #120]	; (80036b8 <ETH_UpdateDescriptor+0xe4>)
 800363e:	605a      	str	r2, [r3, #4]
 8003640:	e003      	b.n	800364a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8003648:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800364a:	f3bf 8f5f 	dmb	sy
}
 800364e:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	3301      	adds	r3, #1
 8003660:	61fb      	str	r3, [r7, #28]
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	2b03      	cmp	r3, #3
 8003666:	d902      	bls.n	800366e <ETH_UpdateDescriptor+0x9a>
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	3b04      	subs	r3, #4
 800366c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	69fa      	ldr	r2, [r7, #28]
 8003672:	3212      	adds	r2, #18
 8003674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003678:	617b      	str	r3, [r7, #20]
      desccount--;
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	3b01      	subs	r3, #1
 800367e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d002      	beq.n	800368c <ETH_UpdateDescriptor+0xb8>
 8003686:	7cfb      	ldrb	r3, [r7, #19]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1b8      	bne.n	80035fe <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	429a      	cmp	r2, r3
 8003694:	d00c      	beq.n	80036b0 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800369e:	461a      	mov	r2, r3
 80036a0:	2300      	movs	r3, #0
 80036a2:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	69fa      	ldr	r2, [r7, #28]
 80036a8:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80036b0:	bf00      	nop
 80036b2:	3720      	adds	r7, #32
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	800045f8 	.word	0x800045f8

080036bc <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d2:	2b40      	cmp	r3, #64	; 0x40
 80036d4:	d112      	bne.n	80036fc <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036de:	69db      	ldr	r3, [r3, #28]
 80036e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e4:	2b40      	cmp	r3, #64	; 0x40
 80036e6:	d109      	bne.n	80036fc <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036f0:	461a      	mov	r2, r3
 80036f2:	4b50      	ldr	r3, [pc, #320]	; (8003834 <HAL_ETH_IRQHandler+0x178>)
 80036f4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f8ac 	bl	8003854 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b01      	cmp	r3, #1
 800370c:	d113      	bne.n	8003736 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b01      	cmp	r3, #1
 800371e:	d10a      	bne.n	8003736 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003728:	461a      	mov	r2, r3
 800372a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800372e:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 f885 	bl	8003840 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003744:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003748:	d14c      	bne.n	80037e4 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003752:	69db      	ldr	r3, [r3, #28]
 8003754:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003758:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800375c:	d142      	bne.n	80037e4 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003764:	f043 0208 	orr.w	r2, r3, #8
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800377c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003780:	d11a      	bne.n	80037b8 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800378a:	695a      	ldr	r2, [r3, #20]
 800378c:	4b2a      	ldr	r3, [pc, #168]	; (8003838 <HAL_ETH_IRQHandler+0x17c>)
 800378e:	4013      	ands	r3, r2
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800379e:	69db      	ldr	r3, [r3, #28]
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6812      	ldr	r2, [r2, #0]
 80037a4:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 80037a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80037ac:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	22e0      	movs	r2, #224	; 0xe0
 80037b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80037b6:	e012      	b.n	80037de <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037c0:	695a      	ldr	r2, [r3, #20]
 80037c2:	f248 6380 	movw	r3, #34432	; 0x8680
 80037c6:	4013      	ands	r3, r2
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037d6:	461a      	mov	r2, r3
 80037d8:	f248 6380 	movw	r3, #34432	; 0x8680
 80037dc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 f842 	bl	8003868 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ea:	f003 0308 	and.w	r3, r3, #8
 80037ee:	2b08      	cmp	r3, #8
 80037f0:	d10e      	bne.n	8003810 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f83a 	bl	800387c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8003810:	4b0a      	ldr	r3, [pc, #40]	; (800383c <HAL_ETH_IRQHandler+0x180>)
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d006      	beq.n	800382a <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800381c:	4b07      	ldr	r3, [pc, #28]	; (800383c <HAL_ETH_IRQHandler+0x180>)
 800381e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003822:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 f833 	bl	8003890 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 800382a:	bf00      	nop
 800382c:	3708      	adds	r7, #8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	00010040 	.word	0x00010040
 8003838:	007e2000 	.word	0x007e2000
 800383c:	40013c00 	.word	0x40013c00

08003840 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
 80038b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f003 031c 	and.w	r3, r3, #28
 80038c0:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	02db      	lsls	r3, r3, #11
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	019b      	lsls	r3, r3, #6
 80038d2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	4313      	orrs	r3, r2
 80038da:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	f023 0302 	bic.w	r3, r3, #2
 80038e2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	f043 0301 	orr.w	r3, r3, #1
 80038ea:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80038f4:	f7ff f9fe 	bl	8002cf4 <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80038fa:	e00d      	b.n	8003918 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80038fc:	f7ff f9fa 	bl	8002cf4 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800390a:	d301      	bcc.n	8003910 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e010      	b.n	8003932 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1ec      	bne.n	80038fc <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	b29b      	uxth	r3, r3
 800392a:	461a      	mov	r2, r3
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3718      	adds	r7, #24
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b086      	sub	sp, #24
 800393e:	af00      	add	r7, sp, #0
 8003940:	60f8      	str	r0, [r7, #12]
 8003942:	60b9      	str	r1, [r7, #8]
 8003944:	607a      	str	r2, [r7, #4]
 8003946:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	f003 031c 	and.w	r3, r3, #28
 8003956:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	02db      	lsls	r3, r3, #11
 800395c:	b29b      	uxth	r3, r3
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	4313      	orrs	r3, r2
 8003962:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	019b      	lsls	r3, r3, #6
 8003968:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	4313      	orrs	r3, r2
 8003970:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f043 0302 	orr.w	r3, r3, #2
 8003978:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f043 0301 	orr.w	r3, r3, #1
 8003980:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	b29a      	uxth	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003994:	f7ff f9ae 	bl	8002cf4 <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800399a:	e00d      	b.n	80039b8 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 800399c:	f7ff f9aa 	bl	8002cf4 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039aa:	d301      	bcc.n	80039b0 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e009      	b.n	80039c4 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1ec      	bne.n	800399c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3718      	adds	r7, #24
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e0d9      	b.n	8003b94 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0310 	and.w	r3, r3, #16
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	bf14      	ite	ne
 80039ee:	2301      	movne	r3, #1
 80039f0:	2300      	moveq	r3, #0
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	461a      	mov	r2, r3
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	bf0c      	ite	eq
 8003a18:	2301      	moveq	r3, #1
 8003a1a:	2300      	movne	r3, #0
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	461a      	mov	r2, r3
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	bf14      	ite	ne
 8003a34:	2301      	movne	r3, #1
 8003a36:	2300      	moveq	r3, #0
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	bf0c      	ite	eq
 8003a4e:	2301      	moveq	r3, #1
 8003a50:	2300      	movne	r3, #0
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	461a      	mov	r2, r3
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	bf14      	ite	ne
 8003a68:	2301      	movne	r3, #1
 8003a6a:	2300      	moveq	r3, #0
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	461a      	mov	r2, r3
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	bf0c      	ite	eq
 8003a9e:	2301      	moveq	r3, #1
 8003aa0:	2300      	movne	r3, #0
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	bf0c      	ite	eq
 8003ab8:	2301      	moveq	r3, #1
 8003aba:	2300      	movne	r3, #0
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	461a      	mov	r2, r3
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	bf14      	ite	ne
 8003ad2:	2301      	movne	r3, #1
 8003ad4:	2300      	moveq	r3, #0
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	461a      	mov	r2, r3
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	bf14      	ite	ne
 8003afa:	2301      	movne	r3, #1
 8003afc:	2300      	moveq	r3, #0
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	461a      	mov	r2, r3
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	bf14      	ite	ne
 8003b14:	2301      	movne	r3, #1
 8003b16:	2300      	moveq	r3, #0
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	bf0c      	ite	eq
 8003b30:	2301      	moveq	r3, #1
 8003b32:	2300      	movne	r3, #0
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	461a      	mov	r2, r3
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	0c1b      	lsrs	r3, r3, #16
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	bf14      	ite	ne
 8003b68:	2301      	movne	r3, #1
 8003b6a:	2300      	moveq	r3, #0
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	461a      	mov	r2, r3
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	bf14      	ite	ne
 8003b84:	2301      	movne	r3, #1
 8003b86:	2300      	moveq	r3, #0
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d101      	bne.n	8003bb4 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e00b      	b.n	8003bcc <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bba:	2b10      	cmp	r3, #16
 8003bbc:	d105      	bne.n	8003bca <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8003bbe:	6839      	ldr	r1, [r7, #0]
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 f883 	bl	8003ccc <ETH_SetMACConfig>

    return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	e000      	b.n	8003bcc <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
  }
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f023 031c 	bic.w	r3, r3, #28
 8003bea:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003bec:	f003 fb3e 	bl	800726c <HAL_RCC_GetHCLKFreq>
 8003bf0:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	4a1d      	ldr	r2, [pc, #116]	; (8003c6c <HAL_ETH_SetMDIOClockRange+0x98>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d908      	bls.n	8003c0c <HAL_ETH_SetMDIOClockRange+0x38>
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	4a1c      	ldr	r2, [pc, #112]	; (8003c70 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d804      	bhi.n	8003c0c <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f043 0308 	orr.w	r3, r3, #8
 8003c08:	60fb      	str	r3, [r7, #12]
 8003c0a:	e027      	b.n	8003c5c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	4a18      	ldr	r2, [pc, #96]	; (8003c70 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d908      	bls.n	8003c26 <HAL_ETH_SetMDIOClockRange+0x52>
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	4a17      	ldr	r2, [pc, #92]	; (8003c74 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d204      	bcs.n	8003c26 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f043 030c 	orr.w	r3, r3, #12
 8003c22:	60fb      	str	r3, [r7, #12]
 8003c24:	e01a      	b.n	8003c5c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	4a12      	ldr	r2, [pc, #72]	; (8003c74 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d303      	bcc.n	8003c36 <HAL_ETH_SetMDIOClockRange+0x62>
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	4a11      	ldr	r2, [pc, #68]	; (8003c78 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d911      	bls.n	8003c5a <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	4a0f      	ldr	r2, [pc, #60]	; (8003c78 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d908      	bls.n	8003c50 <HAL_ETH_SetMDIOClockRange+0x7c>
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	4a0e      	ldr	r2, [pc, #56]	; (8003c7c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d804      	bhi.n	8003c50 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f043 0304 	orr.w	r3, r3, #4
 8003c4c:	60fb      	str	r3, [r7, #12]
 8003c4e:	e005      	b.n	8003c5c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f043 0310 	orr.w	r3, r3, #16
 8003c56:	60fb      	str	r3, [r7, #12]
 8003c58:	e000      	b.n	8003c5c <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003c5a:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	611a      	str	r2, [r3, #16]
}
 8003c64:	bf00      	nop
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	01312cff 	.word	0x01312cff
 8003c70:	02160ebf 	.word	0x02160ebf
 8003c74:	03938700 	.word	0x03938700
 8003c78:	05f5e0ff 	.word	0x05f5e0ff
 8003c7c:	08f0d17f 	.word	0x08f0d17f

08003c80 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	6812      	ldr	r2, [r2, #0]
 8003c9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c9e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ca2:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003cb0:	2001      	movs	r0, #1
 8003cb2:	f7ff f82b 	bl	8002d0c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003cc0:	6193      	str	r3, [r2, #24]
}
 8003cc2:	bf00      	nop
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
	...

08003ccc <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	4b51      	ldr	r3, [pc, #324]	; (8003e28 <ETH_SetMACConfig+0x15c>)
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	7c1b      	ldrb	r3, [r3, #16]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d102      	bne.n	8003cf4 <ETH_SetMACConfig+0x28>
 8003cee:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003cf2:	e000      	b.n	8003cf6 <ETH_SetMACConfig+0x2a>
 8003cf4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	7c5b      	ldrb	r3, [r3, #17]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d102      	bne.n	8003d04 <ETH_SetMACConfig+0x38>
 8003cfe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d02:	e000      	b.n	8003d06 <ETH_SetMACConfig+0x3a>
 8003d04:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003d06:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003d0c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	7fdb      	ldrb	r3, [r3, #31]
 8003d12:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003d14:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003d1a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	7f92      	ldrb	r2, [r2, #30]
 8003d20:	2a00      	cmp	r2, #0
 8003d22:	d102      	bne.n	8003d2a <ETH_SetMACConfig+0x5e>
 8003d24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d28:	e000      	b.n	8003d2c <ETH_SetMACConfig+0x60>
 8003d2a:	2200      	movs	r2, #0
                        macconf->Speed |
 8003d2c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	7f1b      	ldrb	r3, [r3, #28]
 8003d32:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003d34:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003d3a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	791b      	ldrb	r3, [r3, #4]
 8003d40:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003d42:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003d4a:	2a00      	cmp	r2, #0
 8003d4c:	d102      	bne.n	8003d54 <ETH_SetMACConfig+0x88>
 8003d4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d52:	e000      	b.n	8003d56 <ETH_SetMACConfig+0x8a>
 8003d54:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003d56:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	7bdb      	ldrb	r3, [r3, #15]
 8003d5c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003d5e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003d64:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d6c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d86:	2001      	movs	r0, #1
 8003d88:	f7fe ffc0 	bl	8002d0c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003da2:	4013      	ands	r3, r2
 8003da4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003daa:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003db2:	2a00      	cmp	r2, #0
 8003db4:	d101      	bne.n	8003dba <ETH_SetMACConfig+0xee>
 8003db6:	2280      	movs	r2, #128	; 0x80
 8003db8:	e000      	b.n	8003dbc <ETH_SetMACConfig+0xf0>
 8003dba:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003dbc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003dc2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003dca:	2a01      	cmp	r2, #1
 8003dcc:	d101      	bne.n	8003dd2 <ETH_SetMACConfig+0x106>
 8003dce:	2208      	movs	r2, #8
 8003dd0:	e000      	b.n	8003dd4 <ETH_SetMACConfig+0x108>
 8003dd2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003dd4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003ddc:	2a01      	cmp	r2, #1
 8003dde:	d101      	bne.n	8003de4 <ETH_SetMACConfig+0x118>
 8003de0:	2204      	movs	r2, #4
 8003de2:	e000      	b.n	8003de6 <ETH_SetMACConfig+0x11a>
 8003de4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003de6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003de8:	683a      	ldr	r2, [r7, #0]
 8003dea:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003dee:	2a01      	cmp	r2, #1
 8003df0:	d101      	bne.n	8003df6 <ETH_SetMACConfig+0x12a>
 8003df2:	2202      	movs	r2, #2
 8003df4:	e000      	b.n	8003df8 <ETH_SetMACConfig+0x12c>
 8003df6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e10:	2001      	movs	r0, #1
 8003e12:	f7fe ff7b 	bl	8002d0c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	619a      	str	r2, [r3, #24]
}
 8003e1e:	bf00      	nop
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	ff20810f 	.word	0xff20810f

08003e2c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	4b3d      	ldr	r3, [pc, #244]	; (8003f3c <ETH_SetDMAConfig+0x110>)
 8003e46:	4013      	ands	r3, r2
 8003e48:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	7b1b      	ldrb	r3, [r3, #12]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d102      	bne.n	8003e58 <ETH_SetDMAConfig+0x2c>
 8003e52:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003e56:	e000      	b.n	8003e5a <ETH_SetDMAConfig+0x2e>
 8003e58:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	7b5b      	ldrb	r3, [r3, #13]
 8003e5e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003e60:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	7f52      	ldrb	r2, [r2, #29]
 8003e66:	2a00      	cmp	r2, #0
 8003e68:	d102      	bne.n	8003e70 <ETH_SetDMAConfig+0x44>
 8003e6a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003e6e:	e000      	b.n	8003e72 <ETH_SetDMAConfig+0x46>
 8003e70:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003e72:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	7b9b      	ldrb	r3, [r3, #14]
 8003e78:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003e7a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003e80:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	7f1b      	ldrb	r3, [r3, #28]
 8003e86:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003e88:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	7f9b      	ldrb	r3, [r3, #30]
 8003e8e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003e90:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003e96:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e9e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ec2:	2001      	movs	r0, #1
 8003ec4:	f7fe ff22 	bl	8002d0c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	791b      	ldrb	r3, [r3, #4]
 8003eda:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003ee0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003ee6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003eec:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ef4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003ef6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003efe:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003f04:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	6812      	ldr	r2, [r2, #0]
 8003f0a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f0e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f12:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f20:	2001      	movs	r0, #1
 8003f22:	f7fe fef3 	bl	8002d0c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f2e:	461a      	mov	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6013      	str	r3, [r2, #0]
}
 8003f34:	bf00      	nop
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	f8de3f23 	.word	0xf8de3f23

08003f40 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b0a6      	sub	sp, #152	; 0x98
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003f54:	2300      	movs	r3, #0
 8003f56:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003f64:	2300      	movs	r3, #0
 8003f66:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003f70:	2300      	movs	r3, #0
 8003f72:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003f76:	2300      	movs	r3, #0
 8003f78:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003f80:	2300      	movs	r3, #0
 8003f82:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003f86:	2300      	movs	r3, #0
 8003f88:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003f90:	2300      	movs	r3, #0
 8003f92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003f96:	2300      	movs	r3, #0
 8003f98:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003fa2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003fa6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003fa8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003fac:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003fb4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003fb8:	4619      	mov	r1, r3
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7ff fe86 	bl	8003ccc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003fec:	2301      	movs	r3, #1
 8003fee:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003ff0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ff4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003ff6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003ffa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003ffc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004000:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004002:	2301      	movs	r3, #1
 8004004:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004008:	2300      	movs	r3, #0
 800400a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800400c:	2300      	movs	r3, #0
 800400e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004010:	f107 0308 	add.w	r3, r7, #8
 8004014:	4619      	mov	r1, r3
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7ff ff08 	bl	8003e2c <ETH_SetDMAConfig>
}
 800401c:	bf00      	nop
 800401e:	3798      	adds	r7, #152	; 0x98
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004024:	b480      	push	{r7}
 8004026:	b087      	sub	sp, #28
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	3305      	adds	r3, #5
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	021b      	lsls	r3, r3, #8
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	3204      	adds	r2, #4
 800403c:	7812      	ldrb	r2, [r2, #0]
 800403e:	4313      	orrs	r3, r2
 8004040:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	4b11      	ldr	r3, [pc, #68]	; (800408c <ETH_MACAddressConfig+0x68>)
 8004046:	4413      	add	r3, r2
 8004048:	461a      	mov	r2, r3
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	3303      	adds	r3, #3
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	061a      	lsls	r2, r3, #24
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	3302      	adds	r3, #2
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	041b      	lsls	r3, r3, #16
 800405e:	431a      	orrs	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	3301      	adds	r3, #1
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	021b      	lsls	r3, r3, #8
 8004068:	4313      	orrs	r3, r2
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	7812      	ldrb	r2, [r2, #0]
 800406e:	4313      	orrs	r3, r2
 8004070:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	4b06      	ldr	r3, [pc, #24]	; (8004090 <ETH_MACAddressConfig+0x6c>)
 8004076:	4413      	add	r3, r2
 8004078:	461a      	mov	r2, r3
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	6013      	str	r3, [r2, #0]
}
 800407e:	bf00      	nop
 8004080:	371c      	adds	r7, #28
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	40028040 	.word	0x40028040
 8004090:	40028044 	.word	0x40028044

08004094 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800409c:	2300      	movs	r3, #0
 800409e:	60fb      	str	r3, [r7, #12]
 80040a0:	e03e      	b.n	8004120 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68d9      	ldr	r1, [r3, #12]
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	4613      	mov	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4413      	add	r3, r2
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	440b      	add	r3, r1
 80040b2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	2200      	movs	r2, #0
 80040b8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	2200      	movs	r2, #0
 80040be:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2200      	movs	r2, #0
 80040c4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	2200      	movs	r2, #0
 80040ca:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80040cc:	68b9      	ldr	r1, [r7, #8]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	3206      	adds	r2, #6
 80040d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d80c      	bhi.n	8004104 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68d9      	ldr	r1, [r3, #12]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	1c5a      	adds	r2, r3, #1
 80040f2:	4613      	mov	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4413      	add	r3, r2
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	440b      	add	r3, r1
 80040fc:	461a      	mov	r2, r3
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	60da      	str	r2, [r3, #12]
 8004102:	e004      	b.n	800410e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	461a      	mov	r2, r3
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	3301      	adds	r3, #1
 800411e:	60fb      	str	r3, [r7, #12]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2b03      	cmp	r3, #3
 8004124:	d9bd      	bls.n	80040a2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68da      	ldr	r2, [r3, #12]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004138:	611a      	str	r2, [r3, #16]
}
 800413a:	bf00      	nop
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr

08004146 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004146:	b480      	push	{r7}
 8004148:	b085      	sub	sp, #20
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800414e:	2300      	movs	r3, #0
 8004150:	60fb      	str	r3, [r7, #12]
 8004152:	e046      	b.n	80041e2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6919      	ldr	r1, [r3, #16]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	4613      	mov	r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	4413      	add	r3, r2
 8004160:	00db      	lsls	r3, r3, #3
 8004162:	440b      	add	r3, r1
 8004164:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	2200      	movs	r2, #0
 800416a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	2200      	movs	r2, #0
 8004170:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	2200      	movs	r2, #0
 8004176:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	2200      	movs	r2, #0
 800417c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	2200      	movs	r2, #0
 8004182:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	2200      	movs	r2, #0
 8004188:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004190:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8004198:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80041a6:	68b9      	ldr	r1, [r7, #8]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	3212      	adds	r2, #18
 80041ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d80c      	bhi.n	80041d2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6919      	ldr	r1, [r3, #16]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	1c5a      	adds	r2, r3, #1
 80041c0:	4613      	mov	r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	4413      	add	r3, r2
 80041c6:	00db      	lsls	r3, r3, #3
 80041c8:	440b      	add	r3, r1
 80041ca:	461a      	mov	r2, r3
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	60da      	str	r2, [r3, #12]
 80041d0:	e004      	b.n	80041dc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	461a      	mov	r2, r3
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	3301      	adds	r3, #1
 80041e0:	60fb      	str	r3, [r7, #12]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2b03      	cmp	r3, #3
 80041e6:	d9b5      	bls.n	8004154 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	691a      	ldr	r2, [r3, #16]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004212:	60da      	str	r2, [r3, #12]
}
 8004214:	bf00      	nop
 8004216:	3714      	adds	r7, #20
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8004220:	b480      	push	{r7}
 8004222:	b08d      	sub	sp, #52	; 0x34
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	3318      	adds	r3, #24
 8004230:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800423e:	2300      	movs	r3, #0
 8004240:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800424a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8004252:	2300      	movs	r3, #0
 8004254:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004256:	6a3b      	ldr	r3, [r7, #32]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800425e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004262:	d007      	beq.n	8004274 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004268:	3304      	adds	r3, #4
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4413      	add	r3, r2
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d001      	beq.n	8004278 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004274:	2302      	movs	r3, #2
 8004276:	e103      	b.n	8004480 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8004278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427a:	3301      	adds	r3, #1
 800427c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	461a      	mov	r2, r3
 8004284:	6a3b      	ldr	r3, [r7, #32]
 8004286:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004288:	6a3b      	ldr	r3, [r7, #32]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8004290:	f023 031f 	bic.w	r3, r3, #31
 8004294:	69fa      	ldr	r2, [r7, #28]
 8004296:	6852      	ldr	r2, [r2, #4]
 8004298:	431a      	orrs	r2, r3
 800429a:	6a3b      	ldr	r3, [r7, #32]
 800429c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d008      	beq.n	80042bc <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80042aa:	6a3b      	ldr	r3, [r7, #32]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	431a      	orrs	r2, r3
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0320 	and.w	r3, r3, #32
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d008      	beq.n	80042da <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80042c8:	6a3b      	ldr	r3, [r7, #32]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	431a      	orrs	r2, r3
 80042d6:	6a3b      	ldr	r3, [r7, #32]
 80042d8:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0304 	and.w	r3, r3, #4
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d005      	beq.n	80042f2 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80042e6:	6a3b      	ldr	r3, [r7, #32]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80042ee:	6a3b      	ldr	r3, [r7, #32]
 80042f0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80042f2:	6a3b      	ldr	r3, [r7, #32]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80042fa:	6a3b      	ldr	r3, [r7, #32]
 80042fc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80042fe:	f3bf 8f5f 	dmb	sy
}
 8004302:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004304:	6a3b      	ldr	r3, [r7, #32]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800430c:	6a3b      	ldr	r3, [r7, #32]
 800430e:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004310:	e084      	b.n	800441c <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004312:	6a3b      	ldr	r3, [r7, #32]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800431a:	6a3b      	ldr	r3, [r7, #32]
 800431c:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d006      	beq.n	8004332 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004324:	6a3b      	ldr	r3, [r7, #32]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800432c:	6a3b      	ldr	r3, [r7, #32]
 800432e:	601a      	str	r2, [r3, #0]
 8004330:	e005      	b.n	800433e <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004332:	6a3b      	ldr	r3, [r7, #32]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800433a:	6a3b      	ldr	r3, [r7, #32]
 800433c:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800433e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004340:	3301      	adds	r3, #1
 8004342:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004346:	2b03      	cmp	r3, #3
 8004348:	d902      	bls.n	8004350 <ETH_Prepare_Tx_Descriptors+0x130>
 800434a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434c:	3b04      	subs	r3, #4
 800434e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004358:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800435a:	6a3b      	ldr	r3, [r7, #32]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004362:	6a3b      	ldr	r3, [r7, #32]
 8004364:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004366:	6a3b      	ldr	r3, [r7, #32]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800436e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004372:	d007      	beq.n	8004384 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004378:	3304      	adds	r3, #4
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d029      	beq.n	80043d8 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800438c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004390:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8004392:	2300      	movs	r3, #0
 8004394:	62bb      	str	r3, [r7, #40]	; 0x28
 8004396:	e019      	b.n	80043cc <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8004398:	f3bf 8f5f 	dmb	sy
}
 800439c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800439e:	6a3b      	ldr	r3, [r7, #32]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80043a6:	6a3b      	ldr	r3, [r7, #32]
 80043a8:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80043aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ac:	3301      	adds	r3, #1
 80043ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b2:	2b03      	cmp	r3, #3
 80043b4:	d902      	bls.n	80043bc <ETH_Prepare_Tx_Descriptors+0x19c>
 80043b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b8:	3b04      	subs	r3, #4
 80043ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043c4:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80043c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c8:	3301      	adds	r3, #1
 80043ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80043cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d3e1      	bcc.n	8004398 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 80043d4:	2302      	movs	r3, #2
 80043d6:	e053      	b.n	8004480 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 80043d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043da:	3301      	adds	r3, #1
 80043dc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	461a      	mov	r2, r3
 80043ea:	6a3b      	ldr	r3, [r7, #32]
 80043ec:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80043ee:	6a3b      	ldr	r3, [r7, #32]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80043f6:	f023 031f 	bic.w	r3, r3, #31
 80043fa:	69fa      	ldr	r2, [r7, #28]
 80043fc:	6852      	ldr	r2, [r2, #4]
 80043fe:	431a      	orrs	r2, r3
 8004400:	6a3b      	ldr	r3, [r7, #32]
 8004402:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	3301      	adds	r3, #1
 8004408:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800440a:	f3bf 8f5f 	dmb	sy
}
 800440e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004418:	6a3b      	ldr	r3, [r7, #32]
 800441a:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	2b00      	cmp	r3, #0
 8004422:	f47f af76 	bne.w	8004312 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d006      	beq.n	800443a <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800442c:	6a3b      	ldr	r3, [r7, #32]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004434:	6a3b      	ldr	r3, [r7, #32]
 8004436:	601a      	str	r2, [r3, #0]
 8004438:	e005      	b.n	8004446 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800443a:	6a3b      	ldr	r3, [r7, #32]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004442:	6a3b      	ldr	r3, [r7, #32]
 8004444:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004446:	6a3b      	ldr	r3, [r7, #32]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800444e:	6a3b      	ldr	r3, [r7, #32]
 8004450:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004456:	6979      	ldr	r1, [r7, #20]
 8004458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800445a:	3304      	adds	r3, #4
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	440b      	add	r3, r1
 8004460:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004466:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004468:	b672      	cpsid	i
}
 800446a:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	4413      	add	r3, r2
 8004474:	1c5a      	adds	r2, r3, #1
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800447a:	b662      	cpsie	i
}
 800447c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3734      	adds	r7, #52	; 0x34
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800449e:	4b23      	ldr	r3, [pc, #140]	; (800452c <HAL_FLASH_Program+0xa0>)
 80044a0:	7e1b      	ldrb	r3, [r3, #24]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d101      	bne.n	80044aa <HAL_FLASH_Program+0x1e>
 80044a6:	2302      	movs	r3, #2
 80044a8:	e03b      	b.n	8004522 <HAL_FLASH_Program+0x96>
 80044aa:	4b20      	ldr	r3, [pc, #128]	; (800452c <HAL_FLASH_Program+0xa0>)
 80044ac:	2201      	movs	r2, #1
 80044ae:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80044b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80044b4:	f000 f870 	bl	8004598 <FLASH_WaitForLastOperation>
 80044b8:	4603      	mov	r3, r0
 80044ba:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80044bc:	7dfb      	ldrb	r3, [r7, #23]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d12b      	bne.n	800451a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d105      	bne.n	80044d4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80044c8:	783b      	ldrb	r3, [r7, #0]
 80044ca:	4619      	mov	r1, r3
 80044cc:	68b8      	ldr	r0, [r7, #8]
 80044ce:	f000 f91b 	bl	8004708 <FLASH_Program_Byte>
 80044d2:	e016      	b.n	8004502 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d105      	bne.n	80044e6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80044da:	883b      	ldrh	r3, [r7, #0]
 80044dc:	4619      	mov	r1, r3
 80044de:	68b8      	ldr	r0, [r7, #8]
 80044e0:	f000 f8ee 	bl	80046c0 <FLASH_Program_HalfWord>
 80044e4:	e00d      	b.n	8004502 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d105      	bne.n	80044f8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	4619      	mov	r1, r3
 80044f0:	68b8      	ldr	r0, [r7, #8]
 80044f2:	f000 f8c3 	bl	800467c <FLASH_Program_Word>
 80044f6:	e004      	b.n	8004502 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80044f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044fc:	68b8      	ldr	r0, [r7, #8]
 80044fe:	f000 f88b 	bl	8004618 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004502:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004506:	f000 f847 	bl	8004598 <FLASH_WaitForLastOperation>
 800450a:	4603      	mov	r3, r0
 800450c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800450e:	4b08      	ldr	r3, [pc, #32]	; (8004530 <HAL_FLASH_Program+0xa4>)
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	4a07      	ldr	r2, [pc, #28]	; (8004530 <HAL_FLASH_Program+0xa4>)
 8004514:	f023 0301 	bic.w	r3, r3, #1
 8004518:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800451a:	4b04      	ldr	r3, [pc, #16]	; (800452c <HAL_FLASH_Program+0xa0>)
 800451c:	2200      	movs	r2, #0
 800451e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8004520:	7dfb      	ldrb	r3, [r7, #23]
}
 8004522:	4618      	mov	r0, r3
 8004524:	3718      	adds	r7, #24
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	20000450 	.word	0x20000450
 8004530:	40023c00 	.word	0x40023c00

08004534 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800453a:	2300      	movs	r3, #0
 800453c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800453e:	4b0b      	ldr	r3, [pc, #44]	; (800456c <HAL_FLASH_Unlock+0x38>)
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	2b00      	cmp	r3, #0
 8004544:	da0b      	bge.n	800455e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004546:	4b09      	ldr	r3, [pc, #36]	; (800456c <HAL_FLASH_Unlock+0x38>)
 8004548:	4a09      	ldr	r2, [pc, #36]	; (8004570 <HAL_FLASH_Unlock+0x3c>)
 800454a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800454c:	4b07      	ldr	r3, [pc, #28]	; (800456c <HAL_FLASH_Unlock+0x38>)
 800454e:	4a09      	ldr	r2, [pc, #36]	; (8004574 <HAL_FLASH_Unlock+0x40>)
 8004550:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004552:	4b06      	ldr	r3, [pc, #24]	; (800456c <HAL_FLASH_Unlock+0x38>)
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	2b00      	cmp	r3, #0
 8004558:	da01      	bge.n	800455e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800455e:	79fb      	ldrb	r3, [r7, #7]
}
 8004560:	4618      	mov	r0, r3
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	40023c00 	.word	0x40023c00
 8004570:	45670123 	.word	0x45670123
 8004574:	cdef89ab 	.word	0xcdef89ab

08004578 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004578:	b480      	push	{r7}
 800457a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800457c:	4b05      	ldr	r3, [pc, #20]	; (8004594 <HAL_FLASH_Lock+0x1c>)
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	4a04      	ldr	r2, [pc, #16]	; (8004594 <HAL_FLASH_Lock+0x1c>)
 8004582:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004586:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr
 8004594:	40023c00 	.word	0x40023c00

08004598 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045a0:	2300      	movs	r3, #0
 80045a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80045a4:	4b1a      	ldr	r3, [pc, #104]	; (8004610 <FLASH_WaitForLastOperation+0x78>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80045aa:	f7fe fba3 	bl	8002cf4 <HAL_GetTick>
 80045ae:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80045b0:	e010      	b.n	80045d4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b8:	d00c      	beq.n	80045d4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d007      	beq.n	80045d0 <FLASH_WaitForLastOperation+0x38>
 80045c0:	f7fe fb98 	bl	8002cf4 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d201      	bcs.n	80045d4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e019      	b.n	8004608 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80045d4:	4b0f      	ldr	r3, [pc, #60]	; (8004614 <FLASH_WaitForLastOperation+0x7c>)
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1e8      	bne.n	80045b2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80045e0:	4b0c      	ldr	r3, [pc, #48]	; (8004614 <FLASH_WaitForLastOperation+0x7c>)
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d002      	beq.n	80045f2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80045ec:	4b09      	ldr	r3, [pc, #36]	; (8004614 <FLASH_WaitForLastOperation+0x7c>)
 80045ee:	2201      	movs	r2, #1
 80045f0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80045f2:	4b08      	ldr	r3, [pc, #32]	; (8004614 <FLASH_WaitForLastOperation+0x7c>)
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d003      	beq.n	8004606 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80045fe:	f000 f8a5 	bl	800474c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e000      	b.n	8004608 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004606:	2300      	movs	r3, #0
  
}  
 8004608:	4618      	mov	r0, r3
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	20000450 	.word	0x20000450
 8004614:	40023c00 	.word	0x40023c00

08004618 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004624:	4b14      	ldr	r3, [pc, #80]	; (8004678 <FLASH_Program_DoubleWord+0x60>)
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	4a13      	ldr	r2, [pc, #76]	; (8004678 <FLASH_Program_DoubleWord+0x60>)
 800462a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800462e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004630:	4b11      	ldr	r3, [pc, #68]	; (8004678 <FLASH_Program_DoubleWord+0x60>)
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	4a10      	ldr	r2, [pc, #64]	; (8004678 <FLASH_Program_DoubleWord+0x60>)
 8004636:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800463a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800463c:	4b0e      	ldr	r3, [pc, #56]	; (8004678 <FLASH_Program_DoubleWord+0x60>)
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	4a0d      	ldr	r2, [pc, #52]	; (8004678 <FLASH_Program_DoubleWord+0x60>)
 8004642:	f043 0301 	orr.w	r3, r3, #1
 8004646:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800464e:	f3bf 8f6f 	isb	sy
}
 8004652:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8004654:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004658:	f04f 0200 	mov.w	r2, #0
 800465c:	f04f 0300 	mov.w	r3, #0
 8004660:	000a      	movs	r2, r1
 8004662:	2300      	movs	r3, #0
 8004664:	68f9      	ldr	r1, [r7, #12]
 8004666:	3104      	adds	r1, #4
 8004668:	4613      	mov	r3, r2
 800466a:	600b      	str	r3, [r1, #0]
}
 800466c:	bf00      	nop
 800466e:	3714      	adds	r7, #20
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr
 8004678:	40023c00 	.word	0x40023c00

0800467c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004686:	4b0d      	ldr	r3, [pc, #52]	; (80046bc <FLASH_Program_Word+0x40>)
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	4a0c      	ldr	r2, [pc, #48]	; (80046bc <FLASH_Program_Word+0x40>)
 800468c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004690:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8004692:	4b0a      	ldr	r3, [pc, #40]	; (80046bc <FLASH_Program_Word+0x40>)
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	4a09      	ldr	r2, [pc, #36]	; (80046bc <FLASH_Program_Word+0x40>)
 8004698:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800469c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800469e:	4b07      	ldr	r3, [pc, #28]	; (80046bc <FLASH_Program_Word+0x40>)
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	4a06      	ldr	r2, [pc, #24]	; (80046bc <FLASH_Program_Word+0x40>)
 80046a4:	f043 0301 	orr.w	r3, r3, #1
 80046a8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	601a      	str	r2, [r3, #0]
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	40023c00 	.word	0x40023c00

080046c0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	460b      	mov	r3, r1
 80046ca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80046cc:	4b0d      	ldr	r3, [pc, #52]	; (8004704 <FLASH_Program_HalfWord+0x44>)
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	4a0c      	ldr	r2, [pc, #48]	; (8004704 <FLASH_Program_HalfWord+0x44>)
 80046d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80046d8:	4b0a      	ldr	r3, [pc, #40]	; (8004704 <FLASH_Program_HalfWord+0x44>)
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	4a09      	ldr	r2, [pc, #36]	; (8004704 <FLASH_Program_HalfWord+0x44>)
 80046de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80046e4:	4b07      	ldr	r3, [pc, #28]	; (8004704 <FLASH_Program_HalfWord+0x44>)
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	4a06      	ldr	r2, [pc, #24]	; (8004704 <FLASH_Program_HalfWord+0x44>)
 80046ea:	f043 0301 	orr.w	r3, r3, #1
 80046ee:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	887a      	ldrh	r2, [r7, #2]
 80046f4:	801a      	strh	r2, [r3, #0]
}
 80046f6:	bf00      	nop
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	40023c00 	.word	0x40023c00

08004708 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	460b      	mov	r3, r1
 8004712:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004714:	4b0c      	ldr	r3, [pc, #48]	; (8004748 <FLASH_Program_Byte+0x40>)
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	4a0b      	ldr	r2, [pc, #44]	; (8004748 <FLASH_Program_Byte+0x40>)
 800471a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800471e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004720:	4b09      	ldr	r3, [pc, #36]	; (8004748 <FLASH_Program_Byte+0x40>)
 8004722:	4a09      	ldr	r2, [pc, #36]	; (8004748 <FLASH_Program_Byte+0x40>)
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004728:	4b07      	ldr	r3, [pc, #28]	; (8004748 <FLASH_Program_Byte+0x40>)
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	4a06      	ldr	r2, [pc, #24]	; (8004748 <FLASH_Program_Byte+0x40>)
 800472e:	f043 0301 	orr.w	r3, r3, #1
 8004732:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	78fa      	ldrb	r2, [r7, #3]
 8004738:	701a      	strb	r2, [r3, #0]
}
 800473a:	bf00      	nop
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	40023c00 	.word	0x40023c00

0800474c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800474c:	b480      	push	{r7}
 800474e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004750:	4b2f      	ldr	r3, [pc, #188]	; (8004810 <FLASH_SetErrorCode+0xc4>)
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	f003 0310 	and.w	r3, r3, #16
 8004758:	2b00      	cmp	r3, #0
 800475a:	d008      	beq.n	800476e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800475c:	4b2d      	ldr	r3, [pc, #180]	; (8004814 <FLASH_SetErrorCode+0xc8>)
 800475e:	69db      	ldr	r3, [r3, #28]
 8004760:	f043 0310 	orr.w	r3, r3, #16
 8004764:	4a2b      	ldr	r2, [pc, #172]	; (8004814 <FLASH_SetErrorCode+0xc8>)
 8004766:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004768:	4b29      	ldr	r3, [pc, #164]	; (8004810 <FLASH_SetErrorCode+0xc4>)
 800476a:	2210      	movs	r2, #16
 800476c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800476e:	4b28      	ldr	r3, [pc, #160]	; (8004810 <FLASH_SetErrorCode+0xc4>)
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	f003 0320 	and.w	r3, r3, #32
 8004776:	2b00      	cmp	r3, #0
 8004778:	d008      	beq.n	800478c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800477a:	4b26      	ldr	r3, [pc, #152]	; (8004814 <FLASH_SetErrorCode+0xc8>)
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	f043 0308 	orr.w	r3, r3, #8
 8004782:	4a24      	ldr	r2, [pc, #144]	; (8004814 <FLASH_SetErrorCode+0xc8>)
 8004784:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004786:	4b22      	ldr	r3, [pc, #136]	; (8004810 <FLASH_SetErrorCode+0xc4>)
 8004788:	2220      	movs	r2, #32
 800478a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800478c:	4b20      	ldr	r3, [pc, #128]	; (8004810 <FLASH_SetErrorCode+0xc4>)
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004794:	2b00      	cmp	r3, #0
 8004796:	d008      	beq.n	80047aa <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004798:	4b1e      	ldr	r3, [pc, #120]	; (8004814 <FLASH_SetErrorCode+0xc8>)
 800479a:	69db      	ldr	r3, [r3, #28]
 800479c:	f043 0304 	orr.w	r3, r3, #4
 80047a0:	4a1c      	ldr	r2, [pc, #112]	; (8004814 <FLASH_SetErrorCode+0xc8>)
 80047a2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80047a4:	4b1a      	ldr	r3, [pc, #104]	; (8004810 <FLASH_SetErrorCode+0xc4>)
 80047a6:	2240      	movs	r2, #64	; 0x40
 80047a8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80047aa:	4b19      	ldr	r3, [pc, #100]	; (8004810 <FLASH_SetErrorCode+0xc4>)
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d008      	beq.n	80047c8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80047b6:	4b17      	ldr	r3, [pc, #92]	; (8004814 <FLASH_SetErrorCode+0xc8>)
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	f043 0302 	orr.w	r3, r3, #2
 80047be:	4a15      	ldr	r2, [pc, #84]	; (8004814 <FLASH_SetErrorCode+0xc8>)
 80047c0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80047c2:	4b13      	ldr	r3, [pc, #76]	; (8004810 <FLASH_SetErrorCode+0xc4>)
 80047c4:	2280      	movs	r2, #128	; 0x80
 80047c6:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80047c8:	4b11      	ldr	r3, [pc, #68]	; (8004810 <FLASH_SetErrorCode+0xc4>)
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d009      	beq.n	80047e8 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80047d4:	4b0f      	ldr	r3, [pc, #60]	; (8004814 <FLASH_SetErrorCode+0xc8>)
 80047d6:	69db      	ldr	r3, [r3, #28]
 80047d8:	f043 0301 	orr.w	r3, r3, #1
 80047dc:	4a0d      	ldr	r2, [pc, #52]	; (8004814 <FLASH_SetErrorCode+0xc8>)
 80047de:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80047e0:	4b0b      	ldr	r3, [pc, #44]	; (8004810 <FLASH_SetErrorCode+0xc4>)
 80047e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047e6:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80047e8:	4b09      	ldr	r3, [pc, #36]	; (8004810 <FLASH_SetErrorCode+0xc4>)
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d008      	beq.n	8004806 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80047f4:	4b07      	ldr	r3, [pc, #28]	; (8004814 <FLASH_SetErrorCode+0xc8>)
 80047f6:	69db      	ldr	r3, [r3, #28]
 80047f8:	f043 0320 	orr.w	r3, r3, #32
 80047fc:	4a05      	ldr	r2, [pc, #20]	; (8004814 <FLASH_SetErrorCode+0xc8>)
 80047fe:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004800:	4b03      	ldr	r3, [pc, #12]	; (8004810 <FLASH_SetErrorCode+0xc4>)
 8004802:	2202      	movs	r2, #2
 8004804:	60da      	str	r2, [r3, #12]
  }
}
 8004806:	bf00      	nop
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr
 8004810:	40023c00 	.word	0x40023c00
 8004814:	20000450 	.word	0x20000450

08004818 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	460b      	mov	r3, r1
 8004822:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004824:	2300      	movs	r3, #0
 8004826:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004828:	78fb      	ldrb	r3, [r7, #3]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d102      	bne.n	8004834 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800482e:	2300      	movs	r3, #0
 8004830:	60fb      	str	r3, [r7, #12]
 8004832:	e010      	b.n	8004856 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004834:	78fb      	ldrb	r3, [r7, #3]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d103      	bne.n	8004842 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800483a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800483e:	60fb      	str	r3, [r7, #12]
 8004840:	e009      	b.n	8004856 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004842:	78fb      	ldrb	r3, [r7, #3]
 8004844:	2b02      	cmp	r3, #2
 8004846:	d103      	bne.n	8004850 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004848:	f44f 7300 	mov.w	r3, #512	; 0x200
 800484c:	60fb      	str	r3, [r7, #12]
 800484e:	e002      	b.n	8004856 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004850:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004854:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2b0b      	cmp	r3, #11
 800485a:	d902      	bls.n	8004862 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	3304      	adds	r3, #4
 8004860:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004862:	4b13      	ldr	r3, [pc, #76]	; (80048b0 <FLASH_Erase_Sector+0x98>)
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	4a12      	ldr	r2, [pc, #72]	; (80048b0 <FLASH_Erase_Sector+0x98>)
 8004868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800486c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800486e:	4b10      	ldr	r3, [pc, #64]	; (80048b0 <FLASH_Erase_Sector+0x98>)
 8004870:	691a      	ldr	r2, [r3, #16]
 8004872:	490f      	ldr	r1, [pc, #60]	; (80048b0 <FLASH_Erase_Sector+0x98>)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	4313      	orrs	r3, r2
 8004878:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800487a:	4b0d      	ldr	r3, [pc, #52]	; (80048b0 <FLASH_Erase_Sector+0x98>)
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	4a0c      	ldr	r2, [pc, #48]	; (80048b0 <FLASH_Erase_Sector+0x98>)
 8004880:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004884:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004886:	4b0a      	ldr	r3, [pc, #40]	; (80048b0 <FLASH_Erase_Sector+0x98>)
 8004888:	691a      	ldr	r2, [r3, #16]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	00db      	lsls	r3, r3, #3
 800488e:	4313      	orrs	r3, r2
 8004890:	4a07      	ldr	r2, [pc, #28]	; (80048b0 <FLASH_Erase_Sector+0x98>)
 8004892:	f043 0302 	orr.w	r3, r3, #2
 8004896:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004898:	4b05      	ldr	r3, [pc, #20]	; (80048b0 <FLASH_Erase_Sector+0x98>)
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	4a04      	ldr	r2, [pc, #16]	; (80048b0 <FLASH_Erase_Sector+0x98>)
 800489e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048a2:	6113      	str	r3, [r2, #16]
}
 80048a4:	bf00      	nop
 80048a6:	3714      	adds	r7, #20
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr
 80048b0:	40023c00 	.word	0x40023c00

080048b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b089      	sub	sp, #36	; 0x24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80048be:	2300      	movs	r3, #0
 80048c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80048c2:	2300      	movs	r3, #0
 80048c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80048c6:	2300      	movs	r3, #0
 80048c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048ca:	2300      	movs	r3, #0
 80048cc:	61fb      	str	r3, [r7, #28]
 80048ce:	e177      	b.n	8004bc0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80048d0:	2201      	movs	r2, #1
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	fa02 f303 	lsl.w	r3, r2, r3
 80048d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	4013      	ands	r3, r2
 80048e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	f040 8166 	bne.w	8004bba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f003 0303 	and.w	r3, r3, #3
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d005      	beq.n	8004906 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004902:	2b02      	cmp	r3, #2
 8004904:	d130      	bne.n	8004968 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	005b      	lsls	r3, r3, #1
 8004910:	2203      	movs	r2, #3
 8004912:	fa02 f303 	lsl.w	r3, r2, r3
 8004916:	43db      	mvns	r3, r3
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	4013      	ands	r3, r2
 800491c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	68da      	ldr	r2, [r3, #12]
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	005b      	lsls	r3, r3, #1
 8004926:	fa02 f303 	lsl.w	r3, r2, r3
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	4313      	orrs	r3, r2
 800492e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	69ba      	ldr	r2, [r7, #24]
 8004934:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800493c:	2201      	movs	r2, #1
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	fa02 f303 	lsl.w	r3, r2, r3
 8004944:	43db      	mvns	r3, r3
 8004946:	69ba      	ldr	r2, [r7, #24]
 8004948:	4013      	ands	r3, r2
 800494a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	091b      	lsrs	r3, r3, #4
 8004952:	f003 0201 	and.w	r2, r3, #1
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	fa02 f303 	lsl.w	r3, r2, r3
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	4313      	orrs	r3, r2
 8004960:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f003 0303 	and.w	r3, r3, #3
 8004970:	2b03      	cmp	r3, #3
 8004972:	d017      	beq.n	80049a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	2203      	movs	r2, #3
 8004980:	fa02 f303 	lsl.w	r3, r2, r3
 8004984:	43db      	mvns	r3, r3
 8004986:	69ba      	ldr	r2, [r7, #24]
 8004988:	4013      	ands	r3, r2
 800498a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	689a      	ldr	r2, [r3, #8]
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	005b      	lsls	r3, r3, #1
 8004994:	fa02 f303 	lsl.w	r3, r2, r3
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	4313      	orrs	r3, r2
 800499c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f003 0303 	and.w	r3, r3, #3
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d123      	bne.n	80049f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	08da      	lsrs	r2, r3, #3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	3208      	adds	r2, #8
 80049b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	f003 0307 	and.w	r3, r3, #7
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	220f      	movs	r2, #15
 80049c8:	fa02 f303 	lsl.w	r3, r2, r3
 80049cc:	43db      	mvns	r3, r3
 80049ce:	69ba      	ldr	r2, [r7, #24]
 80049d0:	4013      	ands	r3, r2
 80049d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	691a      	ldr	r2, [r3, #16]
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	f003 0307 	and.w	r3, r3, #7
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	fa02 f303 	lsl.w	r3, r2, r3
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	08da      	lsrs	r2, r3, #3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	3208      	adds	r2, #8
 80049f2:	69b9      	ldr	r1, [r7, #24]
 80049f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	2203      	movs	r2, #3
 8004a04:	fa02 f303 	lsl.w	r3, r2, r3
 8004a08:	43db      	mvns	r3, r3
 8004a0a:	69ba      	ldr	r2, [r7, #24]
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f003 0203 	and.w	r2, r3, #3
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	005b      	lsls	r3, r3, #1
 8004a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f000 80c0 	beq.w	8004bba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	60fb      	str	r3, [r7, #12]
 8004a3e:	4b66      	ldr	r3, [pc, #408]	; (8004bd8 <HAL_GPIO_Init+0x324>)
 8004a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a42:	4a65      	ldr	r2, [pc, #404]	; (8004bd8 <HAL_GPIO_Init+0x324>)
 8004a44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a48:	6453      	str	r3, [r2, #68]	; 0x44
 8004a4a:	4b63      	ldr	r3, [pc, #396]	; (8004bd8 <HAL_GPIO_Init+0x324>)
 8004a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a52:	60fb      	str	r3, [r7, #12]
 8004a54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a56:	4a61      	ldr	r2, [pc, #388]	; (8004bdc <HAL_GPIO_Init+0x328>)
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	089b      	lsrs	r3, r3, #2
 8004a5c:	3302      	adds	r3, #2
 8004a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	f003 0303 	and.w	r3, r3, #3
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	220f      	movs	r2, #15
 8004a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a72:	43db      	mvns	r3, r3
 8004a74:	69ba      	ldr	r2, [r7, #24]
 8004a76:	4013      	ands	r3, r2
 8004a78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a58      	ldr	r2, [pc, #352]	; (8004be0 <HAL_GPIO_Init+0x32c>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d037      	beq.n	8004af2 <HAL_GPIO_Init+0x23e>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a57      	ldr	r2, [pc, #348]	; (8004be4 <HAL_GPIO_Init+0x330>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d031      	beq.n	8004aee <HAL_GPIO_Init+0x23a>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a56      	ldr	r2, [pc, #344]	; (8004be8 <HAL_GPIO_Init+0x334>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d02b      	beq.n	8004aea <HAL_GPIO_Init+0x236>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a55      	ldr	r2, [pc, #340]	; (8004bec <HAL_GPIO_Init+0x338>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d025      	beq.n	8004ae6 <HAL_GPIO_Init+0x232>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a54      	ldr	r2, [pc, #336]	; (8004bf0 <HAL_GPIO_Init+0x33c>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d01f      	beq.n	8004ae2 <HAL_GPIO_Init+0x22e>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a53      	ldr	r2, [pc, #332]	; (8004bf4 <HAL_GPIO_Init+0x340>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d019      	beq.n	8004ade <HAL_GPIO_Init+0x22a>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a52      	ldr	r2, [pc, #328]	; (8004bf8 <HAL_GPIO_Init+0x344>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d013      	beq.n	8004ada <HAL_GPIO_Init+0x226>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a51      	ldr	r2, [pc, #324]	; (8004bfc <HAL_GPIO_Init+0x348>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d00d      	beq.n	8004ad6 <HAL_GPIO_Init+0x222>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a50      	ldr	r2, [pc, #320]	; (8004c00 <HAL_GPIO_Init+0x34c>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d007      	beq.n	8004ad2 <HAL_GPIO_Init+0x21e>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a4f      	ldr	r2, [pc, #316]	; (8004c04 <HAL_GPIO_Init+0x350>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d101      	bne.n	8004ace <HAL_GPIO_Init+0x21a>
 8004aca:	2309      	movs	r3, #9
 8004acc:	e012      	b.n	8004af4 <HAL_GPIO_Init+0x240>
 8004ace:	230a      	movs	r3, #10
 8004ad0:	e010      	b.n	8004af4 <HAL_GPIO_Init+0x240>
 8004ad2:	2308      	movs	r3, #8
 8004ad4:	e00e      	b.n	8004af4 <HAL_GPIO_Init+0x240>
 8004ad6:	2307      	movs	r3, #7
 8004ad8:	e00c      	b.n	8004af4 <HAL_GPIO_Init+0x240>
 8004ada:	2306      	movs	r3, #6
 8004adc:	e00a      	b.n	8004af4 <HAL_GPIO_Init+0x240>
 8004ade:	2305      	movs	r3, #5
 8004ae0:	e008      	b.n	8004af4 <HAL_GPIO_Init+0x240>
 8004ae2:	2304      	movs	r3, #4
 8004ae4:	e006      	b.n	8004af4 <HAL_GPIO_Init+0x240>
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e004      	b.n	8004af4 <HAL_GPIO_Init+0x240>
 8004aea:	2302      	movs	r3, #2
 8004aec:	e002      	b.n	8004af4 <HAL_GPIO_Init+0x240>
 8004aee:	2301      	movs	r3, #1
 8004af0:	e000      	b.n	8004af4 <HAL_GPIO_Init+0x240>
 8004af2:	2300      	movs	r3, #0
 8004af4:	69fa      	ldr	r2, [r7, #28]
 8004af6:	f002 0203 	and.w	r2, r2, #3
 8004afa:	0092      	lsls	r2, r2, #2
 8004afc:	4093      	lsls	r3, r2
 8004afe:	69ba      	ldr	r2, [r7, #24]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b04:	4935      	ldr	r1, [pc, #212]	; (8004bdc <HAL_GPIO_Init+0x328>)
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	089b      	lsrs	r3, r3, #2
 8004b0a:	3302      	adds	r3, #2
 8004b0c:	69ba      	ldr	r2, [r7, #24]
 8004b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b12:	4b3d      	ldr	r3, [pc, #244]	; (8004c08 <HAL_GPIO_Init+0x354>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	43db      	mvns	r3, r3
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004b2e:	69ba      	ldr	r2, [r7, #24]
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b36:	4a34      	ldr	r2, [pc, #208]	; (8004c08 <HAL_GPIO_Init+0x354>)
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b3c:	4b32      	ldr	r3, [pc, #200]	; (8004c08 <HAL_GPIO_Init+0x354>)
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	43db      	mvns	r3, r3
 8004b46:	69ba      	ldr	r2, [r7, #24]
 8004b48:	4013      	ands	r3, r2
 8004b4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d003      	beq.n	8004b60 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b60:	4a29      	ldr	r2, [pc, #164]	; (8004c08 <HAL_GPIO_Init+0x354>)
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004b66:	4b28      	ldr	r3, [pc, #160]	; (8004c08 <HAL_GPIO_Init+0x354>)
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	43db      	mvns	r3, r3
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	4013      	ands	r3, r2
 8004b74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b8a:	4a1f      	ldr	r2, [pc, #124]	; (8004c08 <HAL_GPIO_Init+0x354>)
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b90:	4b1d      	ldr	r3, [pc, #116]	; (8004c08 <HAL_GPIO_Init+0x354>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	43db      	mvns	r3, r3
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d003      	beq.n	8004bb4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004bb4:	4a14      	ldr	r2, [pc, #80]	; (8004c08 <HAL_GPIO_Init+0x354>)
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	61fb      	str	r3, [r7, #28]
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	2b0f      	cmp	r3, #15
 8004bc4:	f67f ae84 	bls.w	80048d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004bc8:	bf00      	nop
 8004bca:	bf00      	nop
 8004bcc:	3724      	adds	r7, #36	; 0x24
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	40023800 	.word	0x40023800
 8004bdc:	40013800 	.word	0x40013800
 8004be0:	40020000 	.word	0x40020000
 8004be4:	40020400 	.word	0x40020400
 8004be8:	40020800 	.word	0x40020800
 8004bec:	40020c00 	.word	0x40020c00
 8004bf0:	40021000 	.word	0x40021000
 8004bf4:	40021400 	.word	0x40021400
 8004bf8:	40021800 	.word	0x40021800
 8004bfc:	40021c00 	.word	0x40021c00
 8004c00:	40022000 	.word	0x40022000
 8004c04:	40022400 	.word	0x40022400
 8004c08:	40013c00 	.word	0x40013c00

08004c0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	460b      	mov	r3, r1
 8004c16:	807b      	strh	r3, [r7, #2]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c1c:	787b      	ldrb	r3, [r7, #1]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d003      	beq.n	8004c2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c22:	887a      	ldrh	r2, [r7, #2]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004c28:	e003      	b.n	8004c32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c2a:	887b      	ldrh	r3, [r7, #2]
 8004c2c:	041a      	lsls	r2, r3, #16
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	619a      	str	r2, [r3, #24]
}
 8004c32:	bf00      	nop
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
	...

08004c40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	4603      	mov	r3, r0
 8004c48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004c4a:	4b08      	ldr	r3, [pc, #32]	; (8004c6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c4c:	695a      	ldr	r2, [r3, #20]
 8004c4e:	88fb      	ldrh	r3, [r7, #6]
 8004c50:	4013      	ands	r3, r2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d006      	beq.n	8004c64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c56:	4a05      	ldr	r2, [pc, #20]	; (8004c6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c58:	88fb      	ldrh	r3, [r7, #6]
 8004c5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c5c:	88fb      	ldrh	r3, [r7, #6]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7fd f930 	bl	8001ec4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004c64:	bf00      	nop
 8004c66:	3708      	adds	r7, #8
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	40013c00 	.word	0x40013c00

08004c70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e12b      	b.n	8004eda <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d106      	bne.n	8004c9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f7fd fb9a 	bl	80023d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2224      	movs	r2, #36	; 0x24
 8004ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f022 0201 	bic.w	r2, r2, #1
 8004cb2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cc2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004cd2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004cd4:	f002 fad6 	bl	8007284 <HAL_RCC_GetPCLK1Freq>
 8004cd8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	4a81      	ldr	r2, [pc, #516]	; (8004ee4 <HAL_I2C_Init+0x274>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d807      	bhi.n	8004cf4 <HAL_I2C_Init+0x84>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	4a80      	ldr	r2, [pc, #512]	; (8004ee8 <HAL_I2C_Init+0x278>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	bf94      	ite	ls
 8004cec:	2301      	movls	r3, #1
 8004cee:	2300      	movhi	r3, #0
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	e006      	b.n	8004d02 <HAL_I2C_Init+0x92>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	4a7d      	ldr	r2, [pc, #500]	; (8004eec <HAL_I2C_Init+0x27c>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	bf94      	ite	ls
 8004cfc:	2301      	movls	r3, #1
 8004cfe:	2300      	movhi	r3, #0
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d001      	beq.n	8004d0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e0e7      	b.n	8004eda <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	4a78      	ldr	r2, [pc, #480]	; (8004ef0 <HAL_I2C_Init+0x280>)
 8004d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d12:	0c9b      	lsrs	r3, r3, #18
 8004d14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	4a6a      	ldr	r2, [pc, #424]	; (8004ee4 <HAL_I2C_Init+0x274>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d802      	bhi.n	8004d44 <HAL_I2C_Init+0xd4>
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	3301      	adds	r3, #1
 8004d42:	e009      	b.n	8004d58 <HAL_I2C_Init+0xe8>
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004d4a:	fb02 f303 	mul.w	r3, r2, r3
 8004d4e:	4a69      	ldr	r2, [pc, #420]	; (8004ef4 <HAL_I2C_Init+0x284>)
 8004d50:	fba2 2303 	umull	r2, r3, r2, r3
 8004d54:	099b      	lsrs	r3, r3, #6
 8004d56:	3301      	adds	r3, #1
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	6812      	ldr	r2, [r2, #0]
 8004d5c:	430b      	orrs	r3, r1
 8004d5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	69db      	ldr	r3, [r3, #28]
 8004d66:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004d6a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	495c      	ldr	r1, [pc, #368]	; (8004ee4 <HAL_I2C_Init+0x274>)
 8004d74:	428b      	cmp	r3, r1
 8004d76:	d819      	bhi.n	8004dac <HAL_I2C_Init+0x13c>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	1e59      	subs	r1, r3, #1
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	005b      	lsls	r3, r3, #1
 8004d82:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d86:	1c59      	adds	r1, r3, #1
 8004d88:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004d8c:	400b      	ands	r3, r1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00a      	beq.n	8004da8 <HAL_I2C_Init+0x138>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	1e59      	subs	r1, r3, #1
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	005b      	lsls	r3, r3, #1
 8004d9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004da0:	3301      	adds	r3, #1
 8004da2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004da6:	e051      	b.n	8004e4c <HAL_I2C_Init+0x1dc>
 8004da8:	2304      	movs	r3, #4
 8004daa:	e04f      	b.n	8004e4c <HAL_I2C_Init+0x1dc>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d111      	bne.n	8004dd8 <HAL_I2C_Init+0x168>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	1e58      	subs	r0, r3, #1
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6859      	ldr	r1, [r3, #4]
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	005b      	lsls	r3, r3, #1
 8004dc0:	440b      	add	r3, r1
 8004dc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	bf0c      	ite	eq
 8004dd0:	2301      	moveq	r3, #1
 8004dd2:	2300      	movne	r3, #0
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	e012      	b.n	8004dfe <HAL_I2C_Init+0x18e>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	1e58      	subs	r0, r3, #1
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6859      	ldr	r1, [r3, #4]
 8004de0:	460b      	mov	r3, r1
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	440b      	add	r3, r1
 8004de6:	0099      	lsls	r1, r3, #2
 8004de8:	440b      	add	r3, r1
 8004dea:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dee:	3301      	adds	r3, #1
 8004df0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	bf0c      	ite	eq
 8004df8:	2301      	moveq	r3, #1
 8004dfa:	2300      	movne	r3, #0
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <HAL_I2C_Init+0x196>
 8004e02:	2301      	movs	r3, #1
 8004e04:	e022      	b.n	8004e4c <HAL_I2C_Init+0x1dc>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10e      	bne.n	8004e2c <HAL_I2C_Init+0x1bc>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	1e58      	subs	r0, r3, #1
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6859      	ldr	r1, [r3, #4]
 8004e16:	460b      	mov	r3, r1
 8004e18:	005b      	lsls	r3, r3, #1
 8004e1a:	440b      	add	r3, r1
 8004e1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e20:	3301      	adds	r3, #1
 8004e22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e2a:	e00f      	b.n	8004e4c <HAL_I2C_Init+0x1dc>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	1e58      	subs	r0, r3, #1
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6859      	ldr	r1, [r3, #4]
 8004e34:	460b      	mov	r3, r1
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	440b      	add	r3, r1
 8004e3a:	0099      	lsls	r1, r3, #2
 8004e3c:	440b      	add	r3, r1
 8004e3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e42:	3301      	adds	r3, #1
 8004e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e4c:	6879      	ldr	r1, [r7, #4]
 8004e4e:	6809      	ldr	r1, [r1, #0]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	69da      	ldr	r2, [r3, #28]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a1b      	ldr	r3, [r3, #32]
 8004e66:	431a      	orrs	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004e7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	6911      	ldr	r1, [r2, #16]
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	68d2      	ldr	r2, [r2, #12]
 8004e86:	4311      	orrs	r1, r2
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	6812      	ldr	r2, [r2, #0]
 8004e8c:	430b      	orrs	r3, r1
 8004e8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	695a      	ldr	r2, [r3, #20]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f042 0201 	orr.w	r2, r2, #1
 8004eba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	000186a0 	.word	0x000186a0
 8004ee8:	001e847f 	.word	0x001e847f
 8004eec:	003d08ff 	.word	0x003d08ff
 8004ef0:	431bde83 	.word	0x431bde83
 8004ef4:	10624dd3 	.word	0x10624dd3

08004ef8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b088      	sub	sp, #32
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004f00:	2300      	movs	r3, #0
 8004f02:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f10:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f18:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f20:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004f22:	7bfb      	ldrb	r3, [r7, #15]
 8004f24:	2b10      	cmp	r3, #16
 8004f26:	d003      	beq.n	8004f30 <HAL_I2C_EV_IRQHandler+0x38>
 8004f28:	7bfb      	ldrb	r3, [r7, #15]
 8004f2a:	2b40      	cmp	r3, #64	; 0x40
 8004f2c:	f040 80c1 	bne.w	80050b2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10d      	bne.n	8004f66 <HAL_I2C_EV_IRQHandler+0x6e>
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004f50:	d003      	beq.n	8004f5a <HAL_I2C_EV_IRQHandler+0x62>
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004f58:	d101      	bne.n	8004f5e <HAL_I2C_EV_IRQHandler+0x66>
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e000      	b.n	8004f60 <HAL_I2C_EV_IRQHandler+0x68>
 8004f5e:	2300      	movs	r3, #0
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	f000 8132 	beq.w	80051ca <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	f003 0301 	and.w	r3, r3, #1
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00c      	beq.n	8004f8a <HAL_I2C_EV_IRQHandler+0x92>
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	0a5b      	lsrs	r3, r3, #9
 8004f74:	f003 0301 	and.w	r3, r3, #1
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d006      	beq.n	8004f8a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f001 fc7b 	bl	8006878 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 fd83 	bl	8005a8e <I2C_Master_SB>
 8004f88:	e092      	b.n	80050b0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	08db      	lsrs	r3, r3, #3
 8004f8e:	f003 0301 	and.w	r3, r3, #1
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d009      	beq.n	8004faa <HAL_I2C_EV_IRQHandler+0xb2>
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	0a5b      	lsrs	r3, r3, #9
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d003      	beq.n	8004faa <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 fdf9 	bl	8005b9a <I2C_Master_ADD10>
 8004fa8:	e082      	b.n	80050b0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	085b      	lsrs	r3, r3, #1
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d009      	beq.n	8004fca <HAL_I2C_EV_IRQHandler+0xd2>
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	0a5b      	lsrs	r3, r3, #9
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d003      	beq.n	8004fca <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 fe13 	bl	8005bee <I2C_Master_ADDR>
 8004fc8:	e072      	b.n	80050b0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	089b      	lsrs	r3, r3, #2
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d03b      	beq.n	800504e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fe0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fe4:	f000 80f3 	beq.w	80051ce <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	09db      	lsrs	r3, r3, #7
 8004fec:	f003 0301 	and.w	r3, r3, #1
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00f      	beq.n	8005014 <HAL_I2C_EV_IRQHandler+0x11c>
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	0a9b      	lsrs	r3, r3, #10
 8004ff8:	f003 0301 	and.w	r3, r3, #1
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d009      	beq.n	8005014 <HAL_I2C_EV_IRQHandler+0x11c>
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	089b      	lsrs	r3, r3, #2
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b00      	cmp	r3, #0
 800500a:	d103      	bne.n	8005014 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 f9f3 	bl	80053f8 <I2C_MasterTransmit_TXE>
 8005012:	e04d      	b.n	80050b0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	089b      	lsrs	r3, r3, #2
 8005018:	f003 0301 	and.w	r3, r3, #1
 800501c:	2b00      	cmp	r3, #0
 800501e:	f000 80d6 	beq.w	80051ce <HAL_I2C_EV_IRQHandler+0x2d6>
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	0a5b      	lsrs	r3, r3, #9
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	2b00      	cmp	r3, #0
 800502c:	f000 80cf 	beq.w	80051ce <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005030:	7bbb      	ldrb	r3, [r7, #14]
 8005032:	2b21      	cmp	r3, #33	; 0x21
 8005034:	d103      	bne.n	800503e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 fa7a 	bl	8005530 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800503c:	e0c7      	b.n	80051ce <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800503e:	7bfb      	ldrb	r3, [r7, #15]
 8005040:	2b40      	cmp	r3, #64	; 0x40
 8005042:	f040 80c4 	bne.w	80051ce <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 fae8 	bl	800561c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800504c:	e0bf      	b.n	80051ce <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005058:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800505c:	f000 80b7 	beq.w	80051ce <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	099b      	lsrs	r3, r3, #6
 8005064:	f003 0301 	and.w	r3, r3, #1
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00f      	beq.n	800508c <HAL_I2C_EV_IRQHandler+0x194>
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	0a9b      	lsrs	r3, r3, #10
 8005070:	f003 0301 	and.w	r3, r3, #1
 8005074:	2b00      	cmp	r3, #0
 8005076:	d009      	beq.n	800508c <HAL_I2C_EV_IRQHandler+0x194>
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	089b      	lsrs	r3, r3, #2
 800507c:	f003 0301 	and.w	r3, r3, #1
 8005080:	2b00      	cmp	r3, #0
 8005082:	d103      	bne.n	800508c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 fb5d 	bl	8005744 <I2C_MasterReceive_RXNE>
 800508a:	e011      	b.n	80050b0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	089b      	lsrs	r3, r3, #2
 8005090:	f003 0301 	and.w	r3, r3, #1
 8005094:	2b00      	cmp	r3, #0
 8005096:	f000 809a 	beq.w	80051ce <HAL_I2C_EV_IRQHandler+0x2d6>
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	0a5b      	lsrs	r3, r3, #9
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f000 8093 	beq.w	80051ce <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 fc06 	bl	80058ba <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050ae:	e08e      	b.n	80051ce <HAL_I2C_EV_IRQHandler+0x2d6>
 80050b0:	e08d      	b.n	80051ce <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d004      	beq.n	80050c4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	695b      	ldr	r3, [r3, #20]
 80050c0:	61fb      	str	r3, [r7, #28]
 80050c2:	e007      	b.n	80050d4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	085b      	lsrs	r3, r3, #1
 80050d8:	f003 0301 	and.w	r3, r3, #1
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d012      	beq.n	8005106 <HAL_I2C_EV_IRQHandler+0x20e>
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	0a5b      	lsrs	r3, r3, #9
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00c      	beq.n	8005106 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d003      	beq.n	80050fc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80050fc:	69b9      	ldr	r1, [r7, #24]
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 ffc4 	bl	800608c <I2C_Slave_ADDR>
 8005104:	e066      	b.n	80051d4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	091b      	lsrs	r3, r3, #4
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	2b00      	cmp	r3, #0
 8005110:	d009      	beq.n	8005126 <HAL_I2C_EV_IRQHandler+0x22e>
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	0a5b      	lsrs	r3, r3, #9
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b00      	cmp	r3, #0
 800511c:	d003      	beq.n	8005126 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 fffe 	bl	8006120 <I2C_Slave_STOPF>
 8005124:	e056      	b.n	80051d4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005126:	7bbb      	ldrb	r3, [r7, #14]
 8005128:	2b21      	cmp	r3, #33	; 0x21
 800512a:	d002      	beq.n	8005132 <HAL_I2C_EV_IRQHandler+0x23a>
 800512c:	7bbb      	ldrb	r3, [r7, #14]
 800512e:	2b29      	cmp	r3, #41	; 0x29
 8005130:	d125      	bne.n	800517e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	09db      	lsrs	r3, r3, #7
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00f      	beq.n	800515e <HAL_I2C_EV_IRQHandler+0x266>
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	0a9b      	lsrs	r3, r3, #10
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	2b00      	cmp	r3, #0
 8005148:	d009      	beq.n	800515e <HAL_I2C_EV_IRQHandler+0x266>
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	089b      	lsrs	r3, r3, #2
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	2b00      	cmp	r3, #0
 8005154:	d103      	bne.n	800515e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 feda 	bl	8005f10 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800515c:	e039      	b.n	80051d2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	089b      	lsrs	r3, r3, #2
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	2b00      	cmp	r3, #0
 8005168:	d033      	beq.n	80051d2 <HAL_I2C_EV_IRQHandler+0x2da>
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	0a5b      	lsrs	r3, r3, #9
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	2b00      	cmp	r3, #0
 8005174:	d02d      	beq.n	80051d2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 ff07 	bl	8005f8a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800517c:	e029      	b.n	80051d2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	099b      	lsrs	r3, r3, #6
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00f      	beq.n	80051aa <HAL_I2C_EV_IRQHandler+0x2b2>
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	0a9b      	lsrs	r3, r3, #10
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	2b00      	cmp	r3, #0
 8005194:	d009      	beq.n	80051aa <HAL_I2C_EV_IRQHandler+0x2b2>
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	089b      	lsrs	r3, r3, #2
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d103      	bne.n	80051aa <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 ff12 	bl	8005fcc <I2C_SlaveReceive_RXNE>
 80051a8:	e014      	b.n	80051d4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	089b      	lsrs	r3, r3, #2
 80051ae:	f003 0301 	and.w	r3, r3, #1
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00e      	beq.n	80051d4 <HAL_I2C_EV_IRQHandler+0x2dc>
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	0a5b      	lsrs	r3, r3, #9
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d008      	beq.n	80051d4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 ff40 	bl	8006048 <I2C_SlaveReceive_BTF>
 80051c8:	e004      	b.n	80051d4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80051ca:	bf00      	nop
 80051cc:	e002      	b.n	80051d4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051ce:	bf00      	nop
 80051d0:	e000      	b.n	80051d4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80051d2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80051d4:	3720      	adds	r7, #32
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80051da:	b580      	push	{r7, lr}
 80051dc:	b08a      	sub	sp, #40	; 0x28
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	695b      	ldr	r3, [r3, #20]
 80051e8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80051f2:	2300      	movs	r3, #0
 80051f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051fc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80051fe:	6a3b      	ldr	r3, [r7, #32]
 8005200:	0a1b      	lsrs	r3, r3, #8
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00e      	beq.n	8005228 <HAL_I2C_ER_IRQHandler+0x4e>
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	0a1b      	lsrs	r3, r3, #8
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b00      	cmp	r3, #0
 8005214:	d008      	beq.n	8005228 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005218:	f043 0301 	orr.w	r3, r3, #1
 800521c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005226:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	0a5b      	lsrs	r3, r3, #9
 800522c:	f003 0301 	and.w	r3, r3, #1
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00e      	beq.n	8005252 <HAL_I2C_ER_IRQHandler+0x78>
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	0a1b      	lsrs	r3, r3, #8
 8005238:	f003 0301 	and.w	r3, r3, #1
 800523c:	2b00      	cmp	r3, #0
 800523e:	d008      	beq.n	8005252 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005242:	f043 0302 	orr.w	r3, r3, #2
 8005246:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005250:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005252:	6a3b      	ldr	r3, [r7, #32]
 8005254:	0a9b      	lsrs	r3, r3, #10
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	2b00      	cmp	r3, #0
 800525c:	d03f      	beq.n	80052de <HAL_I2C_ER_IRQHandler+0x104>
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	0a1b      	lsrs	r3, r3, #8
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	2b00      	cmp	r3, #0
 8005268:	d039      	beq.n	80052de <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800526a:	7efb      	ldrb	r3, [r7, #27]
 800526c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005272:	b29b      	uxth	r3, r3
 8005274:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800527c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005282:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005284:	7ebb      	ldrb	r3, [r7, #26]
 8005286:	2b20      	cmp	r3, #32
 8005288:	d112      	bne.n	80052b0 <HAL_I2C_ER_IRQHandler+0xd6>
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d10f      	bne.n	80052b0 <HAL_I2C_ER_IRQHandler+0xd6>
 8005290:	7cfb      	ldrb	r3, [r7, #19]
 8005292:	2b21      	cmp	r3, #33	; 0x21
 8005294:	d008      	beq.n	80052a8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005296:	7cfb      	ldrb	r3, [r7, #19]
 8005298:	2b29      	cmp	r3, #41	; 0x29
 800529a:	d005      	beq.n	80052a8 <HAL_I2C_ER_IRQHandler+0xce>
 800529c:	7cfb      	ldrb	r3, [r7, #19]
 800529e:	2b28      	cmp	r3, #40	; 0x28
 80052a0:	d106      	bne.n	80052b0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2b21      	cmp	r3, #33	; 0x21
 80052a6:	d103      	bne.n	80052b0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f001 f869 	bl	8006380 <I2C_Slave_AF>
 80052ae:	e016      	b.n	80052de <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052b8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	f043 0304 	orr.w	r3, r3, #4
 80052c0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80052c2:	7efb      	ldrb	r3, [r7, #27]
 80052c4:	2b10      	cmp	r3, #16
 80052c6:	d002      	beq.n	80052ce <HAL_I2C_ER_IRQHandler+0xf4>
 80052c8:	7efb      	ldrb	r3, [r7, #27]
 80052ca:	2b40      	cmp	r3, #64	; 0x40
 80052cc:	d107      	bne.n	80052de <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052dc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80052de:	6a3b      	ldr	r3, [r7, #32]
 80052e0:	0adb      	lsrs	r3, r3, #11
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00e      	beq.n	8005308 <HAL_I2C_ER_IRQHandler+0x12e>
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	0a1b      	lsrs	r3, r3, #8
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d008      	beq.n	8005308 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80052f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f8:	f043 0308 	orr.w	r3, r3, #8
 80052fc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005306:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	2b00      	cmp	r3, #0
 800530c:	d008      	beq.n	8005320 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005314:	431a      	orrs	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f001 f8a0 	bl	8006460 <I2C_ITError>
  }
}
 8005320:	bf00      	nop
 8005322:	3728      	adds	r7, #40	; 0x28
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005330:	bf00      	nop
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	460b      	mov	r3, r1
 8005382:	70fb      	strb	r3, [r7, #3]
 8005384:	4613      	mov	r3, r2
 8005386:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80053d8:	bf00      	nop
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005406:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800540e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005414:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800541a:	2b00      	cmp	r3, #0
 800541c:	d150      	bne.n	80054c0 <I2C_MasterTransmit_TXE+0xc8>
 800541e:	7bfb      	ldrb	r3, [r7, #15]
 8005420:	2b21      	cmp	r3, #33	; 0x21
 8005422:	d14d      	bne.n	80054c0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	2b08      	cmp	r3, #8
 8005428:	d01d      	beq.n	8005466 <I2C_MasterTransmit_TXE+0x6e>
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	2b20      	cmp	r3, #32
 800542e:	d01a      	beq.n	8005466 <I2C_MasterTransmit_TXE+0x6e>
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005436:	d016      	beq.n	8005466 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	685a      	ldr	r2, [r3, #4]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005446:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2211      	movs	r2, #17
 800544c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2220      	movs	r2, #32
 800545a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f7ff ff62 	bl	8005328 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005464:	e060      	b.n	8005528 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	685a      	ldr	r2, [r3, #4]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005474:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005484:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2220      	movs	r2, #32
 8005490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b40      	cmp	r3, #64	; 0x40
 800549e:	d107      	bne.n	80054b0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f7ff ff7d 	bl	80053a8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80054ae:	e03b      	b.n	8005528 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f7ff ff35 	bl	8005328 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80054be:	e033      	b.n	8005528 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80054c0:	7bfb      	ldrb	r3, [r7, #15]
 80054c2:	2b21      	cmp	r3, #33	; 0x21
 80054c4:	d005      	beq.n	80054d2 <I2C_MasterTransmit_TXE+0xda>
 80054c6:	7bbb      	ldrb	r3, [r7, #14]
 80054c8:	2b40      	cmp	r3, #64	; 0x40
 80054ca:	d12d      	bne.n	8005528 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80054cc:	7bfb      	ldrb	r3, [r7, #15]
 80054ce:	2b22      	cmp	r3, #34	; 0x22
 80054d0:	d12a      	bne.n	8005528 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d108      	bne.n	80054ee <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685a      	ldr	r2, [r3, #4]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054ea:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80054ec:	e01c      	b.n	8005528 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b40      	cmp	r3, #64	; 0x40
 80054f8:	d103      	bne.n	8005502 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 f88e 	bl	800561c <I2C_MemoryTransmit_TXE_BTF>
}
 8005500:	e012      	b.n	8005528 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005506:	781a      	ldrb	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005512:	1c5a      	adds	r2, r3, #1
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800551c:	b29b      	uxth	r3, r3
 800551e:	3b01      	subs	r3, #1
 8005520:	b29a      	uxth	r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005526:	e7ff      	b.n	8005528 <I2C_MasterTransmit_TXE+0x130>
 8005528:	bf00      	nop
 800552a:	3710      	adds	r7, #16
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800553c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b21      	cmp	r3, #33	; 0x21
 8005548:	d164      	bne.n	8005614 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800554e:	b29b      	uxth	r3, r3
 8005550:	2b00      	cmp	r3, #0
 8005552:	d012      	beq.n	800557a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005558:	781a      	ldrb	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005564:	1c5a      	adds	r2, r3, #1
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800556e:	b29b      	uxth	r3, r3
 8005570:	3b01      	subs	r3, #1
 8005572:	b29a      	uxth	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005578:	e04c      	b.n	8005614 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2b08      	cmp	r3, #8
 800557e:	d01d      	beq.n	80055bc <I2C_MasterTransmit_BTF+0x8c>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2b20      	cmp	r3, #32
 8005584:	d01a      	beq.n	80055bc <I2C_MasterTransmit_BTF+0x8c>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800558c:	d016      	beq.n	80055bc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	685a      	ldr	r2, [r3, #4]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800559c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2211      	movs	r2, #17
 80055a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2220      	movs	r2, #32
 80055b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f7ff feb7 	bl	8005328 <HAL_I2C_MasterTxCpltCallback>
}
 80055ba:	e02b      	b.n	8005614 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	685a      	ldr	r2, [r3, #4]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80055ca:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055da:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2220      	movs	r2, #32
 80055e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	2b40      	cmp	r3, #64	; 0x40
 80055f4:	d107      	bne.n	8005606 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f7ff fed2 	bl	80053a8 <HAL_I2C_MemTxCpltCallback>
}
 8005604:	e006      	b.n	8005614 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f7ff fe8a 	bl	8005328 <HAL_I2C_MasterTxCpltCallback>
}
 8005614:	bf00      	nop
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800562a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005630:	2b00      	cmp	r3, #0
 8005632:	d11d      	bne.n	8005670 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005638:	2b01      	cmp	r3, #1
 800563a:	d10b      	bne.n	8005654 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005640:	b2da      	uxtb	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800564c:	1c9a      	adds	r2, r3, #2
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005652:	e073      	b.n	800573c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005658:	b29b      	uxth	r3, r3
 800565a:	121b      	asrs	r3, r3, #8
 800565c:	b2da      	uxtb	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005668:	1c5a      	adds	r2, r3, #1
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800566e:	e065      	b.n	800573c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005674:	2b01      	cmp	r3, #1
 8005676:	d10b      	bne.n	8005690 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800567c:	b2da      	uxtb	r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005688:	1c5a      	adds	r2, r3, #1
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800568e:	e055      	b.n	800573c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005694:	2b02      	cmp	r3, #2
 8005696:	d151      	bne.n	800573c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005698:	7bfb      	ldrb	r3, [r7, #15]
 800569a:	2b22      	cmp	r3, #34	; 0x22
 800569c:	d10d      	bne.n	80056ba <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056ac:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056b2:	1c5a      	adds	r2, r3, #1
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80056b8:	e040      	b.n	800573c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056be:	b29b      	uxth	r3, r3
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d015      	beq.n	80056f0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80056c4:	7bfb      	ldrb	r3, [r7, #15]
 80056c6:	2b21      	cmp	r3, #33	; 0x21
 80056c8:	d112      	bne.n	80056f0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ce:	781a      	ldrb	r2, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056da:	1c5a      	adds	r2, r3, #1
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	3b01      	subs	r3, #1
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80056ee:	e025      	b.n	800573c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d120      	bne.n	800573c <I2C_MemoryTransmit_TXE_BTF+0x120>
 80056fa:	7bfb      	ldrb	r3, [r7, #15]
 80056fc:	2b21      	cmp	r3, #33	; 0x21
 80056fe:	d11d      	bne.n	800573c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	685a      	ldr	r2, [r3, #4]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800570e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800571e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2220      	movs	r2, #32
 800572a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f7ff fe36 	bl	80053a8 <HAL_I2C_MemTxCpltCallback>
}
 800573c:	bf00      	nop
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005752:	b2db      	uxtb	r3, r3
 8005754:	2b22      	cmp	r3, #34	; 0x22
 8005756:	f040 80ac 	bne.w	80058b2 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800575e:	b29b      	uxth	r3, r3
 8005760:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2b03      	cmp	r3, #3
 8005766:	d921      	bls.n	80057ac <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	691a      	ldr	r2, [r3, #16]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005772:	b2d2      	uxtb	r2, r2
 8005774:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577a:	1c5a      	adds	r2, r3, #1
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005784:	b29b      	uxth	r3, r3
 8005786:	3b01      	subs	r3, #1
 8005788:	b29a      	uxth	r2, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005792:	b29b      	uxth	r3, r3
 8005794:	2b03      	cmp	r3, #3
 8005796:	f040 808c 	bne.w	80058b2 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057a8:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80057aa:	e082      	b.n	80058b2 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d075      	beq.n	80058a0 <I2C_MasterReceive_RXNE+0x15c>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d002      	beq.n	80057c0 <I2C_MasterReceive_RXNE+0x7c>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d16f      	bne.n	80058a0 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f001 f827 	bl	8006814 <I2C_WaitOnSTOPRequestThroughIT>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d142      	bne.n	8005852 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057da:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	685a      	ldr	r2, [r3, #4]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057ea:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	691a      	ldr	r2, [r3, #16]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f6:	b2d2      	uxtb	r2, r2
 80057f8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fe:	1c5a      	adds	r2, r3, #1
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005808:	b29b      	uxth	r3, r3
 800580a:	3b01      	subs	r3, #1
 800580c:	b29a      	uxth	r2, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2220      	movs	r2, #32
 8005816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2b40      	cmp	r3, #64	; 0x40
 8005824:	d10a      	bne.n	800583c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f7ff fdc1 	bl	80053bc <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800583a:	e03a      	b.n	80058b2 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2212      	movs	r2, #18
 8005848:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f7ff fd76 	bl	800533c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005850:	e02f      	b.n	80058b2 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	685a      	ldr	r2, [r3, #4]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005860:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	691a      	ldr	r2, [r3, #16]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586c:	b2d2      	uxtb	r2, r2
 800586e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005874:	1c5a      	adds	r2, r3, #1
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800587e:	b29b      	uxth	r3, r3
 8005880:	3b01      	subs	r3, #1
 8005882:	b29a      	uxth	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2220      	movs	r2, #32
 800588c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f7ff fd99 	bl	80053d0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800589e:	e008      	b.n	80058b2 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	685a      	ldr	r2, [r3, #4]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058ae:	605a      	str	r2, [r3, #4]
}
 80058b0:	e7ff      	b.n	80058b2 <I2C_MasterReceive_RXNE+0x16e>
 80058b2:	bf00      	nop
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}

080058ba <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b084      	sub	sp, #16
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	2b04      	cmp	r3, #4
 80058d0:	d11b      	bne.n	800590a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	685a      	ldr	r2, [r3, #4]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058e0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	691a      	ldr	r2, [r3, #16]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ec:	b2d2      	uxtb	r2, r2
 80058ee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f4:	1c5a      	adds	r2, r3, #1
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058fe:	b29b      	uxth	r3, r3
 8005900:	3b01      	subs	r3, #1
 8005902:	b29a      	uxth	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005908:	e0bd      	b.n	8005a86 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800590e:	b29b      	uxth	r3, r3
 8005910:	2b03      	cmp	r3, #3
 8005912:	d129      	bne.n	8005968 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	685a      	ldr	r2, [r3, #4]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005922:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2b04      	cmp	r3, #4
 8005928:	d00a      	beq.n	8005940 <I2C_MasterReceive_BTF+0x86>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2b02      	cmp	r3, #2
 800592e:	d007      	beq.n	8005940 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800593e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	691a      	ldr	r2, [r3, #16]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594a:	b2d2      	uxtb	r2, r2
 800594c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005952:	1c5a      	adds	r2, r3, #1
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800595c:	b29b      	uxth	r3, r3
 800595e:	3b01      	subs	r3, #1
 8005960:	b29a      	uxth	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005966:	e08e      	b.n	8005a86 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800596c:	b29b      	uxth	r3, r3
 800596e:	2b02      	cmp	r3, #2
 8005970:	d176      	bne.n	8005a60 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d002      	beq.n	800597e <I2C_MasterReceive_BTF+0xc4>
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2b10      	cmp	r3, #16
 800597c:	d108      	bne.n	8005990 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800598c:	601a      	str	r2, [r3, #0]
 800598e:	e019      	b.n	80059c4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2b04      	cmp	r3, #4
 8005994:	d002      	beq.n	800599c <I2C_MasterReceive_BTF+0xe2>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2b02      	cmp	r3, #2
 800599a:	d108      	bne.n	80059ae <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80059aa:	601a      	str	r2, [r3, #0]
 80059ac:	e00a      	b.n	80059c4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2b10      	cmp	r3, #16
 80059b2:	d007      	beq.n	80059c4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059c2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	691a      	ldr	r2, [r3, #16]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ce:	b2d2      	uxtb	r2, r2
 80059d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d6:	1c5a      	adds	r2, r3, #1
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	3b01      	subs	r3, #1
 80059e4:	b29a      	uxth	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	691a      	ldr	r2, [r3, #16]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f4:	b2d2      	uxtb	r2, r2
 80059f6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fc:	1c5a      	adds	r2, r3, #1
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	b29a      	uxth	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	685a      	ldr	r2, [r3, #4]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005a1e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2220      	movs	r2, #32
 8005a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2b40      	cmp	r3, #64	; 0x40
 8005a32:	d10a      	bne.n	8005a4a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f7ff fcba 	bl	80053bc <HAL_I2C_MemRxCpltCallback>
}
 8005a48:	e01d      	b.n	8005a86 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2212      	movs	r2, #18
 8005a56:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f7ff fc6f 	bl	800533c <HAL_I2C_MasterRxCpltCallback>
}
 8005a5e:	e012      	b.n	8005a86 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	691a      	ldr	r2, [r3, #16]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6a:	b2d2      	uxtb	r2, r2
 8005a6c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a72:	1c5a      	adds	r2, r3, #1
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	b29a      	uxth	r2, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005a86:	bf00      	nop
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b083      	sub	sp, #12
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2b40      	cmp	r3, #64	; 0x40
 8005aa0:	d117      	bne.n	8005ad2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d109      	bne.n	8005abe <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005aba:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005abc:	e067      	b.n	8005b8e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	f043 0301 	orr.w	r3, r3, #1
 8005ac8:	b2da      	uxtb	r2, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	611a      	str	r2, [r3, #16]
}
 8005ad0:	e05d      	b.n	8005b8e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ada:	d133      	bne.n	8005b44 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	2b21      	cmp	r3, #33	; 0x21
 8005ae6:	d109      	bne.n	8005afc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	461a      	mov	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005af8:	611a      	str	r2, [r3, #16]
 8005afa:	e008      	b.n	8005b0e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	f043 0301 	orr.w	r3, r3, #1
 8005b06:	b2da      	uxtb	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d004      	beq.n	8005b20 <I2C_Master_SB+0x92>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d108      	bne.n	8005b32 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d032      	beq.n	8005b8e <I2C_Master_SB+0x100>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d02d      	beq.n	8005b8e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b40:	605a      	str	r2, [r3, #4]
}
 8005b42:	e024      	b.n	8005b8e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10e      	bne.n	8005b6a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	11db      	asrs	r3, r3, #7
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	f003 0306 	and.w	r3, r3, #6
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	f063 030f 	orn	r3, r3, #15
 8005b60:	b2da      	uxtb	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	611a      	str	r2, [r3, #16]
}
 8005b68:	e011      	b.n	8005b8e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d10d      	bne.n	8005b8e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	11db      	asrs	r3, r3, #7
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	f003 0306 	and.w	r3, r3, #6
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	f063 030e 	orn	r3, r3, #14
 8005b86:	b2da      	uxtb	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	611a      	str	r2, [r3, #16]
}
 8005b8e:	bf00      	nop
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr

08005b9a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	b083      	sub	sp, #12
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ba6:	b2da      	uxtb	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d004      	beq.n	8005bc0 <I2C_Master_ADD10+0x26>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d108      	bne.n	8005bd2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00c      	beq.n	8005be2 <I2C_Master_ADD10+0x48>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d007      	beq.n	8005be2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	685a      	ldr	r2, [r3, #4]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005be0:	605a      	str	r2, [r3, #4]
  }
}
 8005be2:	bf00      	nop
 8005be4:	370c      	adds	r7, #12
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b091      	sub	sp, #68	; 0x44
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bfc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c04:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c0a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	2b22      	cmp	r3, #34	; 0x22
 8005c16:	f040 8169 	bne.w	8005eec <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d10f      	bne.n	8005c42 <I2C_Master_ADDR+0x54>
 8005c22:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005c26:	2b40      	cmp	r3, #64	; 0x40
 8005c28:	d10b      	bne.n	8005c42 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	633b      	str	r3, [r7, #48]	; 0x30
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	695b      	ldr	r3, [r3, #20]
 8005c34:	633b      	str	r3, [r7, #48]	; 0x30
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	633b      	str	r3, [r7, #48]	; 0x30
 8005c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c40:	e160      	b.n	8005f04 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d11d      	bne.n	8005c86 <I2C_Master_ADDR+0x98>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005c52:	d118      	bne.n	8005c86 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c54:	2300      	movs	r3, #0
 8005c56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c78:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c7e:	1c5a      	adds	r2, r3, #1
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	651a      	str	r2, [r3, #80]	; 0x50
 8005c84:	e13e      	b.n	8005f04 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d113      	bne.n	8005cb8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c90:	2300      	movs	r3, #0
 8005c92:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cb4:	601a      	str	r2, [r3, #0]
 8005cb6:	e115      	b.n	8005ee4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	f040 808a 	bne.w	8005dd8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005cca:	d137      	bne.n	8005d3c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cda:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ce6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cea:	d113      	bne.n	8005d14 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cfa:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	627b      	str	r3, [r7, #36]	; 0x24
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	627b      	str	r3, [r7, #36]	; 0x24
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d12:	e0e7      	b.n	8005ee4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d14:	2300      	movs	r3, #0
 8005d16:	623b      	str	r3, [r7, #32]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	623b      	str	r3, [r7, #32]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	623b      	str	r3, [r7, #32]
 8005d28:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d38:	601a      	str	r2, [r3, #0]
 8005d3a:	e0d3      	b.n	8005ee4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d3e:	2b08      	cmp	r3, #8
 8005d40:	d02e      	beq.n	8005da0 <I2C_Master_ADDR+0x1b2>
 8005d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d44:	2b20      	cmp	r3, #32
 8005d46:	d02b      	beq.n	8005da0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d4a:	2b12      	cmp	r3, #18
 8005d4c:	d102      	bne.n	8005d54 <I2C_Master_ADDR+0x166>
 8005d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d125      	bne.n	8005da0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d56:	2b04      	cmp	r3, #4
 8005d58:	d00e      	beq.n	8005d78 <I2C_Master_ADDR+0x18a>
 8005d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d00b      	beq.n	8005d78 <I2C_Master_ADDR+0x18a>
 8005d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d62:	2b10      	cmp	r3, #16
 8005d64:	d008      	beq.n	8005d78 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d74:	601a      	str	r2, [r3, #0]
 8005d76:	e007      	b.n	8005d88 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d86:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d88:	2300      	movs	r3, #0
 8005d8a:	61fb      	str	r3, [r7, #28]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	61fb      	str	r3, [r7, #28]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	61fb      	str	r3, [r7, #28]
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	e0a1      	b.n	8005ee4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dae:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005db0:	2300      	movs	r3, #0
 8005db2:	61bb      	str	r3, [r7, #24]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	61bb      	str	r3, [r7, #24]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	61bb      	str	r3, [r7, #24]
 8005dc4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dd4:	601a      	str	r2, [r3, #0]
 8005dd6:	e085      	b.n	8005ee4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d14d      	bne.n	8005e7e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de4:	2b04      	cmp	r3, #4
 8005de6:	d016      	beq.n	8005e16 <I2C_Master_ADDR+0x228>
 8005de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d013      	beq.n	8005e16 <I2C_Master_ADDR+0x228>
 8005dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df0:	2b10      	cmp	r3, #16
 8005df2:	d010      	beq.n	8005e16 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e02:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e12:	601a      	str	r2, [r3, #0]
 8005e14:	e007      	b.n	8005e26 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e24:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e34:	d117      	bne.n	8005e66 <I2C_Master_ADDR+0x278>
 8005e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e3c:	d00b      	beq.n	8005e56 <I2C_Master_ADDR+0x268>
 8005e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d008      	beq.n	8005e56 <I2C_Master_ADDR+0x268>
 8005e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e46:	2b08      	cmp	r3, #8
 8005e48:	d005      	beq.n	8005e56 <I2C_Master_ADDR+0x268>
 8005e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e4c:	2b10      	cmp	r3, #16
 8005e4e:	d002      	beq.n	8005e56 <I2C_Master_ADDR+0x268>
 8005e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e52:	2b20      	cmp	r3, #32
 8005e54:	d107      	bne.n	8005e66 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	685a      	ldr	r2, [r3, #4]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e64:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e66:	2300      	movs	r3, #0
 8005e68:	617b      	str	r3, [r7, #20]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	695b      	ldr	r3, [r3, #20]
 8005e70:	617b      	str	r3, [r7, #20]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	699b      	ldr	r3, [r3, #24]
 8005e78:	617b      	str	r3, [r7, #20]
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	e032      	b.n	8005ee4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e8c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e9c:	d117      	bne.n	8005ece <I2C_Master_ADDR+0x2e0>
 8005e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ea4:	d00b      	beq.n	8005ebe <I2C_Master_ADDR+0x2d0>
 8005ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d008      	beq.n	8005ebe <I2C_Master_ADDR+0x2d0>
 8005eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eae:	2b08      	cmp	r3, #8
 8005eb0:	d005      	beq.n	8005ebe <I2C_Master_ADDR+0x2d0>
 8005eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb4:	2b10      	cmp	r3, #16
 8005eb6:	d002      	beq.n	8005ebe <I2C_Master_ADDR+0x2d0>
 8005eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eba:	2b20      	cmp	r3, #32
 8005ebc:	d107      	bne.n	8005ece <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	685a      	ldr	r2, [r3, #4]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ecc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ece:	2300      	movs	r3, #0
 8005ed0:	613b      	str	r3, [r7, #16]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	695b      	ldr	r3, [r3, #20]
 8005ed8:	613b      	str	r3, [r7, #16]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	613b      	str	r3, [r7, #16]
 8005ee2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005eea:	e00b      	b.n	8005f04 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eec:	2300      	movs	r3, #0
 8005eee:	60fb      	str	r3, [r7, #12]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	60fb      	str	r3, [r7, #12]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	699b      	ldr	r3, [r3, #24]
 8005efe:	60fb      	str	r3, [r7, #12]
 8005f00:	68fb      	ldr	r3, [r7, #12]
}
 8005f02:	e7ff      	b.n	8005f04 <I2C_Master_ADDR+0x316>
 8005f04:	bf00      	nop
 8005f06:	3744      	adds	r7, #68	; 0x44
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f1e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d02b      	beq.n	8005f82 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2e:	781a      	ldrb	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3a:	1c5a      	adds	r2, r3, #1
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	3b01      	subs	r3, #1
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d114      	bne.n	8005f82 <I2C_SlaveTransmit_TXE+0x72>
 8005f58:	7bfb      	ldrb	r3, [r7, #15]
 8005f5a:	2b29      	cmp	r3, #41	; 0x29
 8005f5c:	d111      	bne.n	8005f82 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	685a      	ldr	r2, [r3, #4]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f6c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2221      	movs	r2, #33	; 0x21
 8005f72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2228      	movs	r2, #40	; 0x28
 8005f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f7ff f9e7 	bl	8005350 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005f82:	bf00      	nop
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b083      	sub	sp, #12
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d011      	beq.n	8005fc0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa0:	781a      	ldrb	r2, [r3, #0]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fac:	1c5a      	adds	r2, r3, #1
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fda:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d02c      	beq.n	8006040 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	691a      	ldr	r2, [r3, #16]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff0:	b2d2      	uxtb	r2, r2
 8005ff2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff8:	1c5a      	adds	r2, r3, #1
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006002:	b29b      	uxth	r3, r3
 8006004:	3b01      	subs	r3, #1
 8006006:	b29a      	uxth	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006010:	b29b      	uxth	r3, r3
 8006012:	2b00      	cmp	r3, #0
 8006014:	d114      	bne.n	8006040 <I2C_SlaveReceive_RXNE+0x74>
 8006016:	7bfb      	ldrb	r3, [r7, #15]
 8006018:	2b2a      	cmp	r3, #42	; 0x2a
 800601a:	d111      	bne.n	8006040 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	685a      	ldr	r2, [r3, #4]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800602a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2222      	movs	r2, #34	; 0x22
 8006030:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2228      	movs	r2, #40	; 0x28
 8006036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7ff f992 	bl	8005364 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006040:	bf00      	nop
 8006042:	3710      	adds	r7, #16
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006054:	b29b      	uxth	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	d012      	beq.n	8006080 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	691a      	ldr	r2, [r3, #16]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006064:	b2d2      	uxtb	r2, r2
 8006066:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606c:	1c5a      	adds	r2, r3, #1
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006076:	b29b      	uxth	r3, r3
 8006078:	3b01      	subs	r3, #1
 800607a:	b29a      	uxth	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006096:	2300      	movs	r3, #0
 8006098:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80060a6:	2b28      	cmp	r3, #40	; 0x28
 80060a8:	d127      	bne.n	80060fa <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	685a      	ldr	r2, [r3, #4]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060b8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	089b      	lsrs	r3, r3, #2
 80060be:	f003 0301 	and.w	r3, r3, #1
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80060c6:	2301      	movs	r3, #1
 80060c8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	09db      	lsrs	r3, r3, #7
 80060ce:	f003 0301 	and.w	r3, r3, #1
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d103      	bne.n	80060de <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	81bb      	strh	r3, [r7, #12]
 80060dc:	e002      	b.n	80060e4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80060ec:	89ba      	ldrh	r2, [r7, #12]
 80060ee:	7bfb      	ldrb	r3, [r7, #15]
 80060f0:	4619      	mov	r1, r3
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f7ff f940 	bl	8005378 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80060f8:	e00e      	b.n	8006118 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060fa:	2300      	movs	r3, #0
 80060fc:	60bb      	str	r3, [r7, #8]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	695b      	ldr	r3, [r3, #20]
 8006104:	60bb      	str	r3, [r7, #8]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	699b      	ldr	r3, [r3, #24]
 800610c:	60bb      	str	r3, [r7, #8]
 800610e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006118:	bf00      	nop
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800612e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	685a      	ldr	r2, [r3, #4]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800613e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006140:	2300      	movs	r3, #0
 8006142:	60bb      	str	r3, [r7, #8]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	60bb      	str	r3, [r7, #8]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f042 0201 	orr.w	r2, r2, #1
 800615a:	601a      	str	r2, [r3, #0]
 800615c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800616c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006178:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800617c:	d172      	bne.n	8006264 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800617e:	7bfb      	ldrb	r3, [r7, #15]
 8006180:	2b22      	cmp	r3, #34	; 0x22
 8006182:	d002      	beq.n	800618a <I2C_Slave_STOPF+0x6a>
 8006184:	7bfb      	ldrb	r3, [r7, #15]
 8006186:	2b2a      	cmp	r3, #42	; 0x2a
 8006188:	d135      	bne.n	80061f6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	b29a      	uxth	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800619c:	b29b      	uxth	r3, r3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d005      	beq.n	80061ae <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a6:	f043 0204 	orr.w	r2, r3, #4
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	685a      	ldr	r2, [r3, #4]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061bc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7fc ff69 	bl	800309a <HAL_DMA_GetState>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d049      	beq.n	8006262 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d2:	4a69      	ldr	r2, [pc, #420]	; (8006378 <I2C_Slave_STOPF+0x258>)
 80061d4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061da:	4618      	mov	r0, r3
 80061dc:	f7fc ff3b 	bl	8003056 <HAL_DMA_Abort_IT>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d03d      	beq.n	8006262 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80061f0:	4610      	mov	r0, r2
 80061f2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80061f4:	e035      	b.n	8006262 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	b29a      	uxth	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006208:	b29b      	uxth	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d005      	beq.n	800621a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006212:	f043 0204 	orr.w	r2, r3, #4
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	685a      	ldr	r2, [r3, #4]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006228:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800622e:	4618      	mov	r0, r3
 8006230:	f7fc ff33 	bl	800309a <HAL_DMA_GetState>
 8006234:	4603      	mov	r3, r0
 8006236:	2b01      	cmp	r3, #1
 8006238:	d014      	beq.n	8006264 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800623e:	4a4e      	ldr	r2, [pc, #312]	; (8006378 <I2C_Slave_STOPF+0x258>)
 8006240:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006246:	4618      	mov	r0, r3
 8006248:	f7fc ff05 	bl	8003056 <HAL_DMA_Abort_IT>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d008      	beq.n	8006264 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800625c:	4610      	mov	r0, r2
 800625e:	4798      	blx	r3
 8006260:	e000      	b.n	8006264 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006262:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006268:	b29b      	uxth	r3, r3
 800626a:	2b00      	cmp	r3, #0
 800626c:	d03e      	beq.n	80062ec <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	695b      	ldr	r3, [r3, #20]
 8006274:	f003 0304 	and.w	r3, r3, #4
 8006278:	2b04      	cmp	r3, #4
 800627a:	d112      	bne.n	80062a2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	691a      	ldr	r2, [r3, #16]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006286:	b2d2      	uxtb	r2, r2
 8006288:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628e:	1c5a      	adds	r2, r3, #1
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006298:	b29b      	uxth	r3, r3
 800629a:	3b01      	subs	r3, #1
 800629c:	b29a      	uxth	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	695b      	ldr	r3, [r3, #20]
 80062a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ac:	2b40      	cmp	r3, #64	; 0x40
 80062ae:	d112      	bne.n	80062d6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	691a      	ldr	r2, [r3, #16]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ba:	b2d2      	uxtb	r2, r2
 80062bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c2:	1c5a      	adds	r2, r3, #1
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	3b01      	subs	r3, #1
 80062d0:	b29a      	uxth	r2, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062da:	b29b      	uxth	r3, r3
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d005      	beq.n	80062ec <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e4:	f043 0204 	orr.w	r2, r3, #4
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d003      	beq.n	80062fc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 f8b3 	bl	8006460 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80062fa:	e039      	b.n	8006370 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80062fc:	7bfb      	ldrb	r3, [r7, #15]
 80062fe:	2b2a      	cmp	r3, #42	; 0x2a
 8006300:	d109      	bne.n	8006316 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2228      	movs	r2, #40	; 0x28
 800630c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f7ff f827 	bl	8005364 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b28      	cmp	r3, #40	; 0x28
 8006320:	d111      	bne.n	8006346 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a15      	ldr	r2, [pc, #84]	; (800637c <I2C_Slave_STOPF+0x25c>)
 8006326:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2220      	movs	r2, #32
 8006332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f7ff f828 	bl	8005394 <HAL_I2C_ListenCpltCallback>
}
 8006344:	e014      	b.n	8006370 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800634a:	2b22      	cmp	r3, #34	; 0x22
 800634c:	d002      	beq.n	8006354 <I2C_Slave_STOPF+0x234>
 800634e:	7bfb      	ldrb	r3, [r7, #15]
 8006350:	2b22      	cmp	r3, #34	; 0x22
 8006352:	d10d      	bne.n	8006370 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2220      	movs	r2, #32
 800635e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f7fe fffa 	bl	8005364 <HAL_I2C_SlaveRxCpltCallback>
}
 8006370:	bf00      	nop
 8006372:	3710      	adds	r7, #16
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}
 8006378:	080066c5 	.word	0x080066c5
 800637c:	ffff0000 	.word	0xffff0000

08006380 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800638e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006394:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	2b08      	cmp	r3, #8
 800639a:	d002      	beq.n	80063a2 <I2C_Slave_AF+0x22>
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	2b20      	cmp	r3, #32
 80063a0:	d129      	bne.n	80063f6 <I2C_Slave_AF+0x76>
 80063a2:	7bfb      	ldrb	r3, [r7, #15]
 80063a4:	2b28      	cmp	r3, #40	; 0x28
 80063a6:	d126      	bne.n	80063f6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a2c      	ldr	r2, [pc, #176]	; (800645c <I2C_Slave_AF+0xdc>)
 80063ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	685a      	ldr	r2, [r3, #4]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80063bc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80063c6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063d6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2220      	movs	r2, #32
 80063e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f7fe ffd0 	bl	8005394 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80063f4:	e02e      	b.n	8006454 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80063f6:	7bfb      	ldrb	r3, [r7, #15]
 80063f8:	2b21      	cmp	r3, #33	; 0x21
 80063fa:	d126      	bne.n	800644a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a17      	ldr	r2, [pc, #92]	; (800645c <I2C_Slave_AF+0xdc>)
 8006400:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2221      	movs	r2, #33	; 0x21
 8006406:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2220      	movs	r2, #32
 800640c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	685a      	ldr	r2, [r3, #4]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006426:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006430:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006440:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f7fe ff84 	bl	8005350 <HAL_I2C_SlaveTxCpltCallback>
}
 8006448:	e004      	b.n	8006454 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006452:	615a      	str	r2, [r3, #20]
}
 8006454:	bf00      	nop
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	ffff0000 	.word	0xffff0000

08006460 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800646e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006476:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006478:	7bbb      	ldrb	r3, [r7, #14]
 800647a:	2b10      	cmp	r3, #16
 800647c:	d002      	beq.n	8006484 <I2C_ITError+0x24>
 800647e:	7bbb      	ldrb	r3, [r7, #14]
 8006480:	2b40      	cmp	r3, #64	; 0x40
 8006482:	d10a      	bne.n	800649a <I2C_ITError+0x3a>
 8006484:	7bfb      	ldrb	r3, [r7, #15]
 8006486:	2b22      	cmp	r3, #34	; 0x22
 8006488:	d107      	bne.n	800649a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006498:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800649a:	7bfb      	ldrb	r3, [r7, #15]
 800649c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80064a0:	2b28      	cmp	r3, #40	; 0x28
 80064a2:	d107      	bne.n	80064b4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2228      	movs	r2, #40	; 0x28
 80064ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80064b2:	e015      	b.n	80064e0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064c2:	d00a      	beq.n	80064da <I2C_ITError+0x7a>
 80064c4:	7bfb      	ldrb	r3, [r7, #15]
 80064c6:	2b60      	cmp	r3, #96	; 0x60
 80064c8:	d007      	beq.n	80064da <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2220      	movs	r2, #32
 80064ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064ee:	d162      	bne.n	80065b6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	685a      	ldr	r2, [r3, #4]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064fe:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006504:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006508:	b2db      	uxtb	r3, r3
 800650a:	2b01      	cmp	r3, #1
 800650c:	d020      	beq.n	8006550 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006512:	4a6a      	ldr	r2, [pc, #424]	; (80066bc <I2C_ITError+0x25c>)
 8006514:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800651a:	4618      	mov	r0, r3
 800651c:	f7fc fd9b 	bl	8003056 <HAL_DMA_Abort_IT>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	f000 8089 	beq.w	800663a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f022 0201 	bic.w	r2, r2, #1
 8006536:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2220      	movs	r2, #32
 800653c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800654a:	4610      	mov	r0, r2
 800654c:	4798      	blx	r3
 800654e:	e074      	b.n	800663a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006554:	4a59      	ldr	r2, [pc, #356]	; (80066bc <I2C_ITError+0x25c>)
 8006556:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655c:	4618      	mov	r0, r3
 800655e:	f7fc fd7a 	bl	8003056 <HAL_DMA_Abort_IT>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d068      	beq.n	800663a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	695b      	ldr	r3, [r3, #20]
 800656e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006572:	2b40      	cmp	r3, #64	; 0x40
 8006574:	d10b      	bne.n	800658e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	691a      	ldr	r2, [r3, #16]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006580:	b2d2      	uxtb	r2, r2
 8006582:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006588:	1c5a      	adds	r2, r3, #1
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f022 0201 	bic.w	r2, r2, #1
 800659c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2220      	movs	r2, #32
 80065a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80065b0:	4610      	mov	r0, r2
 80065b2:	4798      	blx	r3
 80065b4:	e041      	b.n	800663a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	2b60      	cmp	r3, #96	; 0x60
 80065c0:	d125      	bne.n	800660e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2220      	movs	r2, #32
 80065c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065da:	2b40      	cmp	r3, #64	; 0x40
 80065dc:	d10b      	bne.n	80065f6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	691a      	ldr	r2, [r3, #16]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e8:	b2d2      	uxtb	r2, r2
 80065ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f0:	1c5a      	adds	r2, r3, #1
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f022 0201 	bic.w	r2, r2, #1
 8006604:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f7fe feec 	bl	80053e4 <HAL_I2C_AbortCpltCallback>
 800660c:	e015      	b.n	800663a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	695b      	ldr	r3, [r3, #20]
 8006614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006618:	2b40      	cmp	r3, #64	; 0x40
 800661a:	d10b      	bne.n	8006634 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	691a      	ldr	r2, [r3, #16]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006626:	b2d2      	uxtb	r2, r2
 8006628:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662e:	1c5a      	adds	r2, r3, #1
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f7fe fecb 	bl	80053d0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	f003 0301 	and.w	r3, r3, #1
 8006646:	2b00      	cmp	r3, #0
 8006648:	d10e      	bne.n	8006668 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006650:	2b00      	cmp	r3, #0
 8006652:	d109      	bne.n	8006668 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800665a:	2b00      	cmp	r3, #0
 800665c:	d104      	bne.n	8006668 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006664:	2b00      	cmp	r3, #0
 8006666:	d007      	beq.n	8006678 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	685a      	ldr	r2, [r3, #4]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006676:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800667e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006684:	f003 0304 	and.w	r3, r3, #4
 8006688:	2b04      	cmp	r3, #4
 800668a:	d113      	bne.n	80066b4 <I2C_ITError+0x254>
 800668c:	7bfb      	ldrb	r3, [r7, #15]
 800668e:	2b28      	cmp	r3, #40	; 0x28
 8006690:	d110      	bne.n	80066b4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a0a      	ldr	r2, [pc, #40]	; (80066c0 <I2C_ITError+0x260>)
 8006696:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2220      	movs	r2, #32
 80066a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f7fe fe70 	bl	8005394 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80066b4:	bf00      	nop
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	080066c5 	.word	0x080066c5
 80066c0:	ffff0000 	.word	0xffff0000

080066c4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b086      	sub	sp, #24
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066cc:	2300      	movs	r3, #0
 80066ce:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066dc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80066de:	4b4b      	ldr	r3, [pc, #300]	; (800680c <I2C_DMAAbort+0x148>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	08db      	lsrs	r3, r3, #3
 80066e4:	4a4a      	ldr	r2, [pc, #296]	; (8006810 <I2C_DMAAbort+0x14c>)
 80066e6:	fba2 2303 	umull	r2, r3, r2, r3
 80066ea:	0a1a      	lsrs	r2, r3, #8
 80066ec:	4613      	mov	r3, r2
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	4413      	add	r3, r2
 80066f2:	00da      	lsls	r2, r3, #3
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d106      	bne.n	800670c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006702:	f043 0220 	orr.w	r2, r3, #32
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800670a:	e00a      	b.n	8006722 <I2C_DMAAbort+0x5e>
    }
    count--;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	3b01      	subs	r3, #1
 8006710:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800671c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006720:	d0ea      	beq.n	80066f8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006726:	2b00      	cmp	r3, #0
 8006728:	d003      	beq.n	8006732 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800672e:	2200      	movs	r2, #0
 8006730:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006736:	2b00      	cmp	r3, #0
 8006738:	d003      	beq.n	8006742 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673e:	2200      	movs	r2, #0
 8006740:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006750:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	2200      	movs	r2, #0
 8006756:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800675c:	2b00      	cmp	r3, #0
 800675e:	d003      	beq.n	8006768 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006764:	2200      	movs	r2, #0
 8006766:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800676c:	2b00      	cmp	r3, #0
 800676e:	d003      	beq.n	8006778 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006774:	2200      	movs	r2, #0
 8006776:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f022 0201 	bic.w	r2, r2, #1
 8006786:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800678e:	b2db      	uxtb	r3, r3
 8006790:	2b60      	cmp	r3, #96	; 0x60
 8006792:	d10e      	bne.n	80067b2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	2220      	movs	r2, #32
 8006798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	2200      	movs	r2, #0
 80067a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80067aa:	6978      	ldr	r0, [r7, #20]
 80067ac:	f7fe fe1a 	bl	80053e4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80067b0:	e027      	b.n	8006802 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80067b2:	7cfb      	ldrb	r3, [r7, #19]
 80067b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80067b8:	2b28      	cmp	r3, #40	; 0x28
 80067ba:	d117      	bne.n	80067ec <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f042 0201 	orr.w	r2, r2, #1
 80067ca:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80067da:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	2200      	movs	r2, #0
 80067e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	2228      	movs	r2, #40	; 0x28
 80067e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80067ea:	e007      	b.n	80067fc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	2220      	movs	r2, #32
 80067f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80067fc:	6978      	ldr	r0, [r7, #20]
 80067fe:	f7fe fde7 	bl	80053d0 <HAL_I2C_ErrorCallback>
}
 8006802:	bf00      	nop
 8006804:	3718      	adds	r7, #24
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	20000014 	.word	0x20000014
 8006810:	14f8b589 	.word	0x14f8b589

08006814 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006814:	b480      	push	{r7}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800681c:	2300      	movs	r3, #0
 800681e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006820:	4b13      	ldr	r3, [pc, #76]	; (8006870 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	08db      	lsrs	r3, r3, #3
 8006826:	4a13      	ldr	r2, [pc, #76]	; (8006874 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006828:	fba2 2303 	umull	r2, r3, r2, r3
 800682c:	0a1a      	lsrs	r2, r3, #8
 800682e:	4613      	mov	r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	4413      	add	r3, r2
 8006834:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	3b01      	subs	r3, #1
 800683a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d107      	bne.n	8006852 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006846:	f043 0220 	orr.w	r2, r3, #32
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e008      	b.n	8006864 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800685c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006860:	d0e9      	beq.n	8006836 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	3714      	adds	r7, #20
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr
 8006870:	20000014 	.word	0x20000014
 8006874:	14f8b589 	.word	0x14f8b589

08006878 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006884:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006888:	d103      	bne.n	8006892 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006890:	e007      	b.n	80068a2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006896:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800689a:	d102      	bne.n	80068a2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2208      	movs	r2, #8
 80068a0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80068a2:	bf00      	nop
 80068a4:	370c      	adds	r7, #12
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr

080068ae <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80068ae:	b480      	push	{r7}
 80068b0:	b083      	sub	sp, #12
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
 80068b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	2b20      	cmp	r3, #32
 80068c2:	d129      	bne.n	8006918 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2224      	movs	r2, #36	; 0x24
 80068c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f022 0201 	bic.w	r2, r2, #1
 80068da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f022 0210 	bic.w	r2, r2, #16
 80068ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	683a      	ldr	r2, [r7, #0]
 80068f8:	430a      	orrs	r2, r1
 80068fa:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f042 0201 	orr.w	r2, r2, #1
 800690a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2220      	movs	r2, #32
 8006910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006914:	2300      	movs	r3, #0
 8006916:	e000      	b.n	800691a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006918:	2302      	movs	r3, #2
  }
}
 800691a:	4618      	mov	r0, r3
 800691c:	370c      	adds	r7, #12
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr

08006926 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006926:	b480      	push	{r7}
 8006928:	b085      	sub	sp, #20
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
 800692e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006930:	2300      	movs	r3, #0
 8006932:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800693a:	b2db      	uxtb	r3, r3
 800693c:	2b20      	cmp	r3, #32
 800693e:	d12a      	bne.n	8006996 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2224      	movs	r2, #36	; 0x24
 8006944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f022 0201 	bic.w	r2, r2, #1
 8006956:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006960:	89fb      	ldrh	r3, [r7, #14]
 8006962:	f023 030f 	bic.w	r3, r3, #15
 8006966:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	b29a      	uxth	r2, r3
 800696c:	89fb      	ldrh	r3, [r7, #14]
 800696e:	4313      	orrs	r3, r2
 8006970:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	89fa      	ldrh	r2, [r7, #14]
 8006978:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f042 0201 	orr.w	r2, r2, #1
 8006988:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2220      	movs	r2, #32
 800698e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006992:	2300      	movs	r3, #0
 8006994:	e000      	b.n	8006998 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006996:	2302      	movs	r3, #2
  }
}
 8006998:	4618      	mov	r0, r3
 800699a:	3714      	adds	r7, #20
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b086      	sub	sp, #24
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d101      	bne.n	80069b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e267      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 0301 	and.w	r3, r3, #1
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d075      	beq.n	8006aae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80069c2:	4b88      	ldr	r3, [pc, #544]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	f003 030c 	and.w	r3, r3, #12
 80069ca:	2b04      	cmp	r3, #4
 80069cc:	d00c      	beq.n	80069e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069ce:	4b85      	ldr	r3, [pc, #532]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80069d6:	2b08      	cmp	r3, #8
 80069d8:	d112      	bne.n	8006a00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069da:	4b82      	ldr	r3, [pc, #520]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069e6:	d10b      	bne.n	8006a00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069e8:	4b7e      	ldr	r3, [pc, #504]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d05b      	beq.n	8006aac <HAL_RCC_OscConfig+0x108>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d157      	bne.n	8006aac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e242      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a08:	d106      	bne.n	8006a18 <HAL_RCC_OscConfig+0x74>
 8006a0a:	4b76      	ldr	r3, [pc, #472]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a75      	ldr	r2, [pc, #468]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a14:	6013      	str	r3, [r2, #0]
 8006a16:	e01d      	b.n	8006a54 <HAL_RCC_OscConfig+0xb0>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a20:	d10c      	bne.n	8006a3c <HAL_RCC_OscConfig+0x98>
 8006a22:	4b70      	ldr	r3, [pc, #448]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a6f      	ldr	r2, [pc, #444]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006a28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a2c:	6013      	str	r3, [r2, #0]
 8006a2e:	4b6d      	ldr	r3, [pc, #436]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a6c      	ldr	r2, [pc, #432]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a38:	6013      	str	r3, [r2, #0]
 8006a3a:	e00b      	b.n	8006a54 <HAL_RCC_OscConfig+0xb0>
 8006a3c:	4b69      	ldr	r3, [pc, #420]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a68      	ldr	r2, [pc, #416]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006a42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a46:	6013      	str	r3, [r2, #0]
 8006a48:	4b66      	ldr	r3, [pc, #408]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a65      	ldr	r2, [pc, #404]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006a4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d013      	beq.n	8006a84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a5c:	f7fc f94a 	bl	8002cf4 <HAL_GetTick>
 8006a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a62:	e008      	b.n	8006a76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a64:	f7fc f946 	bl	8002cf4 <HAL_GetTick>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	2b64      	cmp	r3, #100	; 0x64
 8006a70:	d901      	bls.n	8006a76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006a72:	2303      	movs	r3, #3
 8006a74:	e207      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a76:	4b5b      	ldr	r3, [pc, #364]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d0f0      	beq.n	8006a64 <HAL_RCC_OscConfig+0xc0>
 8006a82:	e014      	b.n	8006aae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a84:	f7fc f936 	bl	8002cf4 <HAL_GetTick>
 8006a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a8a:	e008      	b.n	8006a9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a8c:	f7fc f932 	bl	8002cf4 <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	2b64      	cmp	r3, #100	; 0x64
 8006a98:	d901      	bls.n	8006a9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e1f3      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a9e:	4b51      	ldr	r3, [pc, #324]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d1f0      	bne.n	8006a8c <HAL_RCC_OscConfig+0xe8>
 8006aaa:	e000      	b.n	8006aae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006aac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 0302 	and.w	r3, r3, #2
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d063      	beq.n	8006b82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006aba:	4b4a      	ldr	r3, [pc, #296]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	f003 030c 	and.w	r3, r3, #12
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00b      	beq.n	8006ade <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ac6:	4b47      	ldr	r3, [pc, #284]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ace:	2b08      	cmp	r3, #8
 8006ad0:	d11c      	bne.n	8006b0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ad2:	4b44      	ldr	r3, [pc, #272]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d116      	bne.n	8006b0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ade:	4b41      	ldr	r3, [pc, #260]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 0302 	and.w	r3, r3, #2
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d005      	beq.n	8006af6 <HAL_RCC_OscConfig+0x152>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d001      	beq.n	8006af6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e1c7      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006af6:	4b3b      	ldr	r3, [pc, #236]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	00db      	lsls	r3, r3, #3
 8006b04:	4937      	ldr	r1, [pc, #220]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006b06:	4313      	orrs	r3, r2
 8006b08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b0a:	e03a      	b.n	8006b82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d020      	beq.n	8006b56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b14:	4b34      	ldr	r3, [pc, #208]	; (8006be8 <HAL_RCC_OscConfig+0x244>)
 8006b16:	2201      	movs	r2, #1
 8006b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b1a:	f7fc f8eb 	bl	8002cf4 <HAL_GetTick>
 8006b1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b20:	e008      	b.n	8006b34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b22:	f7fc f8e7 	bl	8002cf4 <HAL_GetTick>
 8006b26:	4602      	mov	r2, r0
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	1ad3      	subs	r3, r2, r3
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d901      	bls.n	8006b34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006b30:	2303      	movs	r3, #3
 8006b32:	e1a8      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b34:	4b2b      	ldr	r3, [pc, #172]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 0302 	and.w	r3, r3, #2
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d0f0      	beq.n	8006b22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b40:	4b28      	ldr	r3, [pc, #160]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	00db      	lsls	r3, r3, #3
 8006b4e:	4925      	ldr	r1, [pc, #148]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006b50:	4313      	orrs	r3, r2
 8006b52:	600b      	str	r3, [r1, #0]
 8006b54:	e015      	b.n	8006b82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b56:	4b24      	ldr	r3, [pc, #144]	; (8006be8 <HAL_RCC_OscConfig+0x244>)
 8006b58:	2200      	movs	r2, #0
 8006b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b5c:	f7fc f8ca 	bl	8002cf4 <HAL_GetTick>
 8006b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b62:	e008      	b.n	8006b76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b64:	f7fc f8c6 	bl	8002cf4 <HAL_GetTick>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d901      	bls.n	8006b76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006b72:	2303      	movs	r3, #3
 8006b74:	e187      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b76:	4b1b      	ldr	r3, [pc, #108]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 0302 	and.w	r3, r3, #2
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d1f0      	bne.n	8006b64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 0308 	and.w	r3, r3, #8
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d036      	beq.n	8006bfc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	695b      	ldr	r3, [r3, #20]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d016      	beq.n	8006bc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b96:	4b15      	ldr	r3, [pc, #84]	; (8006bec <HAL_RCC_OscConfig+0x248>)
 8006b98:	2201      	movs	r2, #1
 8006b9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b9c:	f7fc f8aa 	bl	8002cf4 <HAL_GetTick>
 8006ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ba2:	e008      	b.n	8006bb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ba4:	f7fc f8a6 	bl	8002cf4 <HAL_GetTick>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	d901      	bls.n	8006bb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	e167      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bb6:	4b0b      	ldr	r3, [pc, #44]	; (8006be4 <HAL_RCC_OscConfig+0x240>)
 8006bb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bba:	f003 0302 	and.w	r3, r3, #2
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d0f0      	beq.n	8006ba4 <HAL_RCC_OscConfig+0x200>
 8006bc2:	e01b      	b.n	8006bfc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bc4:	4b09      	ldr	r3, [pc, #36]	; (8006bec <HAL_RCC_OscConfig+0x248>)
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bca:	f7fc f893 	bl	8002cf4 <HAL_GetTick>
 8006bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bd0:	e00e      	b.n	8006bf0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bd2:	f7fc f88f 	bl	8002cf4 <HAL_GetTick>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d907      	bls.n	8006bf0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006be0:	2303      	movs	r3, #3
 8006be2:	e150      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
 8006be4:	40023800 	.word	0x40023800
 8006be8:	42470000 	.word	0x42470000
 8006bec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bf0:	4b88      	ldr	r3, [pc, #544]	; (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006bf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bf4:	f003 0302 	and.w	r3, r3, #2
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d1ea      	bne.n	8006bd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 0304 	and.w	r3, r3, #4
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	f000 8097 	beq.w	8006d38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c0e:	4b81      	ldr	r3, [pc, #516]	; (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d10f      	bne.n	8006c3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	60bb      	str	r3, [r7, #8]
 8006c1e:	4b7d      	ldr	r3, [pc, #500]	; (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c22:	4a7c      	ldr	r2, [pc, #496]	; (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c28:	6413      	str	r3, [r2, #64]	; 0x40
 8006c2a:	4b7a      	ldr	r3, [pc, #488]	; (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c32:	60bb      	str	r3, [r7, #8]
 8006c34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c36:	2301      	movs	r3, #1
 8006c38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c3a:	4b77      	ldr	r3, [pc, #476]	; (8006e18 <HAL_RCC_OscConfig+0x474>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d118      	bne.n	8006c78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c46:	4b74      	ldr	r3, [pc, #464]	; (8006e18 <HAL_RCC_OscConfig+0x474>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a73      	ldr	r2, [pc, #460]	; (8006e18 <HAL_RCC_OscConfig+0x474>)
 8006c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c52:	f7fc f84f 	bl	8002cf4 <HAL_GetTick>
 8006c56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c58:	e008      	b.n	8006c6c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c5a:	f7fc f84b 	bl	8002cf4 <HAL_GetTick>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	1ad3      	subs	r3, r2, r3
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d901      	bls.n	8006c6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	e10c      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c6c:	4b6a      	ldr	r3, [pc, #424]	; (8006e18 <HAL_RCC_OscConfig+0x474>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d0f0      	beq.n	8006c5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d106      	bne.n	8006c8e <HAL_RCC_OscConfig+0x2ea>
 8006c80:	4b64      	ldr	r3, [pc, #400]	; (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c84:	4a63      	ldr	r2, [pc, #396]	; (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006c86:	f043 0301 	orr.w	r3, r3, #1
 8006c8a:	6713      	str	r3, [r2, #112]	; 0x70
 8006c8c:	e01c      	b.n	8006cc8 <HAL_RCC_OscConfig+0x324>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	2b05      	cmp	r3, #5
 8006c94:	d10c      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x30c>
 8006c96:	4b5f      	ldr	r3, [pc, #380]	; (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c9a:	4a5e      	ldr	r2, [pc, #376]	; (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006c9c:	f043 0304 	orr.w	r3, r3, #4
 8006ca0:	6713      	str	r3, [r2, #112]	; 0x70
 8006ca2:	4b5c      	ldr	r3, [pc, #368]	; (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ca6:	4a5b      	ldr	r2, [pc, #364]	; (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006ca8:	f043 0301 	orr.w	r3, r3, #1
 8006cac:	6713      	str	r3, [r2, #112]	; 0x70
 8006cae:	e00b      	b.n	8006cc8 <HAL_RCC_OscConfig+0x324>
 8006cb0:	4b58      	ldr	r3, [pc, #352]	; (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb4:	4a57      	ldr	r2, [pc, #348]	; (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006cb6:	f023 0301 	bic.w	r3, r3, #1
 8006cba:	6713      	str	r3, [r2, #112]	; 0x70
 8006cbc:	4b55      	ldr	r3, [pc, #340]	; (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cc0:	4a54      	ldr	r2, [pc, #336]	; (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006cc2:	f023 0304 	bic.w	r3, r3, #4
 8006cc6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d015      	beq.n	8006cfc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cd0:	f7fc f810 	bl	8002cf4 <HAL_GetTick>
 8006cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cd6:	e00a      	b.n	8006cee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cd8:	f7fc f80c 	bl	8002cf4 <HAL_GetTick>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d901      	bls.n	8006cee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006cea:	2303      	movs	r3, #3
 8006cec:	e0cb      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cee:	4b49      	ldr	r3, [pc, #292]	; (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cf2:	f003 0302 	and.w	r3, r3, #2
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d0ee      	beq.n	8006cd8 <HAL_RCC_OscConfig+0x334>
 8006cfa:	e014      	b.n	8006d26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cfc:	f7fb fffa 	bl	8002cf4 <HAL_GetTick>
 8006d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d02:	e00a      	b.n	8006d1a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d04:	f7fb fff6 	bl	8002cf4 <HAL_GetTick>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	1ad3      	subs	r3, r2, r3
 8006d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d901      	bls.n	8006d1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006d16:	2303      	movs	r3, #3
 8006d18:	e0b5      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d1a:	4b3e      	ldr	r3, [pc, #248]	; (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d1e:	f003 0302 	and.w	r3, r3, #2
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1ee      	bne.n	8006d04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d26:	7dfb      	ldrb	r3, [r7, #23]
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d105      	bne.n	8006d38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d2c:	4b39      	ldr	r3, [pc, #228]	; (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d30:	4a38      	ldr	r2, [pc, #224]	; (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d36:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	699b      	ldr	r3, [r3, #24]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	f000 80a1 	beq.w	8006e84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d42:	4b34      	ldr	r3, [pc, #208]	; (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	f003 030c 	and.w	r3, r3, #12
 8006d4a:	2b08      	cmp	r3, #8
 8006d4c:	d05c      	beq.n	8006e08 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	699b      	ldr	r3, [r3, #24]
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d141      	bne.n	8006dda <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d56:	4b31      	ldr	r3, [pc, #196]	; (8006e1c <HAL_RCC_OscConfig+0x478>)
 8006d58:	2200      	movs	r2, #0
 8006d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d5c:	f7fb ffca 	bl	8002cf4 <HAL_GetTick>
 8006d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d62:	e008      	b.n	8006d76 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d64:	f7fb ffc6 	bl	8002cf4 <HAL_GetTick>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d901      	bls.n	8006d76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006d72:	2303      	movs	r3, #3
 8006d74:	e087      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d76:	4b27      	ldr	r3, [pc, #156]	; (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d1f0      	bne.n	8006d64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	69da      	ldr	r2, [r3, #28]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a1b      	ldr	r3, [r3, #32]
 8006d8a:	431a      	orrs	r2, r3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d90:	019b      	lsls	r3, r3, #6
 8006d92:	431a      	orrs	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d98:	085b      	lsrs	r3, r3, #1
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	041b      	lsls	r3, r3, #16
 8006d9e:	431a      	orrs	r2, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da4:	061b      	lsls	r3, r3, #24
 8006da6:	491b      	ldr	r1, [pc, #108]	; (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006da8:	4313      	orrs	r3, r2
 8006daa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006dac:	4b1b      	ldr	r3, [pc, #108]	; (8006e1c <HAL_RCC_OscConfig+0x478>)
 8006dae:	2201      	movs	r2, #1
 8006db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006db2:	f7fb ff9f 	bl	8002cf4 <HAL_GetTick>
 8006db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006db8:	e008      	b.n	8006dcc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006dba:	f7fb ff9b 	bl	8002cf4 <HAL_GetTick>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	1ad3      	subs	r3, r2, r3
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	d901      	bls.n	8006dcc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	e05c      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dcc:	4b11      	ldr	r3, [pc, #68]	; (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d0f0      	beq.n	8006dba <HAL_RCC_OscConfig+0x416>
 8006dd8:	e054      	b.n	8006e84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dda:	4b10      	ldr	r3, [pc, #64]	; (8006e1c <HAL_RCC_OscConfig+0x478>)
 8006ddc:	2200      	movs	r2, #0
 8006dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006de0:	f7fb ff88 	bl	8002cf4 <HAL_GetTick>
 8006de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006de6:	e008      	b.n	8006dfa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006de8:	f7fb ff84 	bl	8002cf4 <HAL_GetTick>
 8006dec:	4602      	mov	r2, r0
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	d901      	bls.n	8006dfa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006df6:	2303      	movs	r3, #3
 8006df8:	e045      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dfa:	4b06      	ldr	r3, [pc, #24]	; (8006e14 <HAL_RCC_OscConfig+0x470>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1f0      	bne.n	8006de8 <HAL_RCC_OscConfig+0x444>
 8006e06:	e03d      	b.n	8006e84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	699b      	ldr	r3, [r3, #24]
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d107      	bne.n	8006e20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	e038      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
 8006e14:	40023800 	.word	0x40023800
 8006e18:	40007000 	.word	0x40007000
 8006e1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006e20:	4b1b      	ldr	r3, [pc, #108]	; (8006e90 <HAL_RCC_OscConfig+0x4ec>)
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d028      	beq.n	8006e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d121      	bne.n	8006e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d11a      	bne.n	8006e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006e50:	4013      	ands	r3, r2
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d111      	bne.n	8006e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e66:	085b      	lsrs	r3, r3, #1
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d107      	bne.n	8006e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d001      	beq.n	8006e84 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	e000      	b.n	8006e86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3718      	adds	r7, #24
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	40023800 	.word	0x40023800

08006e94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d101      	bne.n	8006ea8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e0cc      	b.n	8007042 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ea8:	4b68      	ldr	r3, [pc, #416]	; (800704c <HAL_RCC_ClockConfig+0x1b8>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 030f 	and.w	r3, r3, #15
 8006eb0:	683a      	ldr	r2, [r7, #0]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d90c      	bls.n	8006ed0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006eb6:	4b65      	ldr	r3, [pc, #404]	; (800704c <HAL_RCC_ClockConfig+0x1b8>)
 8006eb8:	683a      	ldr	r2, [r7, #0]
 8006eba:	b2d2      	uxtb	r2, r2
 8006ebc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ebe:	4b63      	ldr	r3, [pc, #396]	; (800704c <HAL_RCC_ClockConfig+0x1b8>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 030f 	and.w	r3, r3, #15
 8006ec6:	683a      	ldr	r2, [r7, #0]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d001      	beq.n	8006ed0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e0b8      	b.n	8007042 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 0302 	and.w	r3, r3, #2
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d020      	beq.n	8006f1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 0304 	and.w	r3, r3, #4
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d005      	beq.n	8006ef4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ee8:	4b59      	ldr	r3, [pc, #356]	; (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	4a58      	ldr	r2, [pc, #352]	; (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8006eee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006ef2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 0308 	and.w	r3, r3, #8
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d005      	beq.n	8006f0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f00:	4b53      	ldr	r3, [pc, #332]	; (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	4a52      	ldr	r2, [pc, #328]	; (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8006f06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006f0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f0c:	4b50      	ldr	r3, [pc, #320]	; (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	494d      	ldr	r1, [pc, #308]	; (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 0301 	and.w	r3, r3, #1
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d044      	beq.n	8006fb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d107      	bne.n	8006f42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f32:	4b47      	ldr	r3, [pc, #284]	; (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d119      	bne.n	8006f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e07f      	b.n	8007042 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	2b02      	cmp	r3, #2
 8006f48:	d003      	beq.n	8006f52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f4e:	2b03      	cmp	r3, #3
 8006f50:	d107      	bne.n	8006f62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f52:	4b3f      	ldr	r3, [pc, #252]	; (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d109      	bne.n	8006f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e06f      	b.n	8007042 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f62:	4b3b      	ldr	r3, [pc, #236]	; (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f003 0302 	and.w	r3, r3, #2
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d101      	bne.n	8006f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e067      	b.n	8007042 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f72:	4b37      	ldr	r3, [pc, #220]	; (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	f023 0203 	bic.w	r2, r3, #3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	4934      	ldr	r1, [pc, #208]	; (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8006f80:	4313      	orrs	r3, r2
 8006f82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f84:	f7fb feb6 	bl	8002cf4 <HAL_GetTick>
 8006f88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f8a:	e00a      	b.n	8006fa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f8c:	f7fb feb2 	bl	8002cf4 <HAL_GetTick>
 8006f90:	4602      	mov	r2, r0
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d901      	bls.n	8006fa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	e04f      	b.n	8007042 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fa2:	4b2b      	ldr	r3, [pc, #172]	; (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	f003 020c 	and.w	r2, r3, #12
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d1eb      	bne.n	8006f8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006fb4:	4b25      	ldr	r3, [pc, #148]	; (800704c <HAL_RCC_ClockConfig+0x1b8>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 030f 	and.w	r3, r3, #15
 8006fbc:	683a      	ldr	r2, [r7, #0]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d20c      	bcs.n	8006fdc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fc2:	4b22      	ldr	r3, [pc, #136]	; (800704c <HAL_RCC_ClockConfig+0x1b8>)
 8006fc4:	683a      	ldr	r2, [r7, #0]
 8006fc6:	b2d2      	uxtb	r2, r2
 8006fc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fca:	4b20      	ldr	r3, [pc, #128]	; (800704c <HAL_RCC_ClockConfig+0x1b8>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 030f 	and.w	r3, r3, #15
 8006fd2:	683a      	ldr	r2, [r7, #0]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d001      	beq.n	8006fdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	e032      	b.n	8007042 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 0304 	and.w	r3, r3, #4
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d008      	beq.n	8006ffa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006fe8:	4b19      	ldr	r3, [pc, #100]	; (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	4916      	ldr	r1, [pc, #88]	; (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 0308 	and.w	r3, r3, #8
 8007002:	2b00      	cmp	r3, #0
 8007004:	d009      	beq.n	800701a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007006:	4b12      	ldr	r3, [pc, #72]	; (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	00db      	lsls	r3, r3, #3
 8007014:	490e      	ldr	r1, [pc, #56]	; (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8007016:	4313      	orrs	r3, r2
 8007018:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800701a:	f000 f821 	bl	8007060 <HAL_RCC_GetSysClockFreq>
 800701e:	4602      	mov	r2, r0
 8007020:	4b0b      	ldr	r3, [pc, #44]	; (8007050 <HAL_RCC_ClockConfig+0x1bc>)
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	091b      	lsrs	r3, r3, #4
 8007026:	f003 030f 	and.w	r3, r3, #15
 800702a:	490a      	ldr	r1, [pc, #40]	; (8007054 <HAL_RCC_ClockConfig+0x1c0>)
 800702c:	5ccb      	ldrb	r3, [r1, r3]
 800702e:	fa22 f303 	lsr.w	r3, r2, r3
 8007032:	4a09      	ldr	r2, [pc, #36]	; (8007058 <HAL_RCC_ClockConfig+0x1c4>)
 8007034:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007036:	4b09      	ldr	r3, [pc, #36]	; (800705c <HAL_RCC_ClockConfig+0x1c8>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4618      	mov	r0, r3
 800703c:	f7fb fe2a 	bl	8002c94 <HAL_InitTick>

  return HAL_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	40023c00 	.word	0x40023c00
 8007050:	40023800 	.word	0x40023800
 8007054:	08017180 	.word	0x08017180
 8007058:	20000014 	.word	0x20000014
 800705c:	20000018 	.word	0x20000018

08007060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007064:	b094      	sub	sp, #80	; 0x50
 8007066:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007068:	2300      	movs	r3, #0
 800706a:	647b      	str	r3, [r7, #68]	; 0x44
 800706c:	2300      	movs	r3, #0
 800706e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007070:	2300      	movs	r3, #0
 8007072:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007074:	2300      	movs	r3, #0
 8007076:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007078:	4b79      	ldr	r3, [pc, #484]	; (8007260 <HAL_RCC_GetSysClockFreq+0x200>)
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	f003 030c 	and.w	r3, r3, #12
 8007080:	2b08      	cmp	r3, #8
 8007082:	d00d      	beq.n	80070a0 <HAL_RCC_GetSysClockFreq+0x40>
 8007084:	2b08      	cmp	r3, #8
 8007086:	f200 80e1 	bhi.w	800724c <HAL_RCC_GetSysClockFreq+0x1ec>
 800708a:	2b00      	cmp	r3, #0
 800708c:	d002      	beq.n	8007094 <HAL_RCC_GetSysClockFreq+0x34>
 800708e:	2b04      	cmp	r3, #4
 8007090:	d003      	beq.n	800709a <HAL_RCC_GetSysClockFreq+0x3a>
 8007092:	e0db      	b.n	800724c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007094:	4b73      	ldr	r3, [pc, #460]	; (8007264 <HAL_RCC_GetSysClockFreq+0x204>)
 8007096:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007098:	e0db      	b.n	8007252 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800709a:	4b73      	ldr	r3, [pc, #460]	; (8007268 <HAL_RCC_GetSysClockFreq+0x208>)
 800709c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800709e:	e0d8      	b.n	8007252 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80070a0:	4b6f      	ldr	r3, [pc, #444]	; (8007260 <HAL_RCC_GetSysClockFreq+0x200>)
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070a8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80070aa:	4b6d      	ldr	r3, [pc, #436]	; (8007260 <HAL_RCC_GetSysClockFreq+0x200>)
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d063      	beq.n	800717e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070b6:	4b6a      	ldr	r3, [pc, #424]	; (8007260 <HAL_RCC_GetSysClockFreq+0x200>)
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	099b      	lsrs	r3, r3, #6
 80070bc:	2200      	movs	r2, #0
 80070be:	63bb      	str	r3, [r7, #56]	; 0x38
 80070c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80070c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070c8:	633b      	str	r3, [r7, #48]	; 0x30
 80070ca:	2300      	movs	r3, #0
 80070cc:	637b      	str	r3, [r7, #52]	; 0x34
 80070ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80070d2:	4622      	mov	r2, r4
 80070d4:	462b      	mov	r3, r5
 80070d6:	f04f 0000 	mov.w	r0, #0
 80070da:	f04f 0100 	mov.w	r1, #0
 80070de:	0159      	lsls	r1, r3, #5
 80070e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80070e4:	0150      	lsls	r0, r2, #5
 80070e6:	4602      	mov	r2, r0
 80070e8:	460b      	mov	r3, r1
 80070ea:	4621      	mov	r1, r4
 80070ec:	1a51      	subs	r1, r2, r1
 80070ee:	6139      	str	r1, [r7, #16]
 80070f0:	4629      	mov	r1, r5
 80070f2:	eb63 0301 	sbc.w	r3, r3, r1
 80070f6:	617b      	str	r3, [r7, #20]
 80070f8:	f04f 0200 	mov.w	r2, #0
 80070fc:	f04f 0300 	mov.w	r3, #0
 8007100:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007104:	4659      	mov	r1, fp
 8007106:	018b      	lsls	r3, r1, #6
 8007108:	4651      	mov	r1, sl
 800710a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800710e:	4651      	mov	r1, sl
 8007110:	018a      	lsls	r2, r1, #6
 8007112:	4651      	mov	r1, sl
 8007114:	ebb2 0801 	subs.w	r8, r2, r1
 8007118:	4659      	mov	r1, fp
 800711a:	eb63 0901 	sbc.w	r9, r3, r1
 800711e:	f04f 0200 	mov.w	r2, #0
 8007122:	f04f 0300 	mov.w	r3, #0
 8007126:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800712a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800712e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007132:	4690      	mov	r8, r2
 8007134:	4699      	mov	r9, r3
 8007136:	4623      	mov	r3, r4
 8007138:	eb18 0303 	adds.w	r3, r8, r3
 800713c:	60bb      	str	r3, [r7, #8]
 800713e:	462b      	mov	r3, r5
 8007140:	eb49 0303 	adc.w	r3, r9, r3
 8007144:	60fb      	str	r3, [r7, #12]
 8007146:	f04f 0200 	mov.w	r2, #0
 800714a:	f04f 0300 	mov.w	r3, #0
 800714e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007152:	4629      	mov	r1, r5
 8007154:	024b      	lsls	r3, r1, #9
 8007156:	4621      	mov	r1, r4
 8007158:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800715c:	4621      	mov	r1, r4
 800715e:	024a      	lsls	r2, r1, #9
 8007160:	4610      	mov	r0, r2
 8007162:	4619      	mov	r1, r3
 8007164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007166:	2200      	movs	r2, #0
 8007168:	62bb      	str	r3, [r7, #40]	; 0x28
 800716a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800716c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007170:	f7f9 f88e 	bl	8000290 <__aeabi_uldivmod>
 8007174:	4602      	mov	r2, r0
 8007176:	460b      	mov	r3, r1
 8007178:	4613      	mov	r3, r2
 800717a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800717c:	e058      	b.n	8007230 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800717e:	4b38      	ldr	r3, [pc, #224]	; (8007260 <HAL_RCC_GetSysClockFreq+0x200>)
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	099b      	lsrs	r3, r3, #6
 8007184:	2200      	movs	r2, #0
 8007186:	4618      	mov	r0, r3
 8007188:	4611      	mov	r1, r2
 800718a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800718e:	623b      	str	r3, [r7, #32]
 8007190:	2300      	movs	r3, #0
 8007192:	627b      	str	r3, [r7, #36]	; 0x24
 8007194:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007198:	4642      	mov	r2, r8
 800719a:	464b      	mov	r3, r9
 800719c:	f04f 0000 	mov.w	r0, #0
 80071a0:	f04f 0100 	mov.w	r1, #0
 80071a4:	0159      	lsls	r1, r3, #5
 80071a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80071aa:	0150      	lsls	r0, r2, #5
 80071ac:	4602      	mov	r2, r0
 80071ae:	460b      	mov	r3, r1
 80071b0:	4641      	mov	r1, r8
 80071b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80071b6:	4649      	mov	r1, r9
 80071b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80071bc:	f04f 0200 	mov.w	r2, #0
 80071c0:	f04f 0300 	mov.w	r3, #0
 80071c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80071c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80071cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80071d0:	ebb2 040a 	subs.w	r4, r2, sl
 80071d4:	eb63 050b 	sbc.w	r5, r3, fp
 80071d8:	f04f 0200 	mov.w	r2, #0
 80071dc:	f04f 0300 	mov.w	r3, #0
 80071e0:	00eb      	lsls	r3, r5, #3
 80071e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80071e6:	00e2      	lsls	r2, r4, #3
 80071e8:	4614      	mov	r4, r2
 80071ea:	461d      	mov	r5, r3
 80071ec:	4643      	mov	r3, r8
 80071ee:	18e3      	adds	r3, r4, r3
 80071f0:	603b      	str	r3, [r7, #0]
 80071f2:	464b      	mov	r3, r9
 80071f4:	eb45 0303 	adc.w	r3, r5, r3
 80071f8:	607b      	str	r3, [r7, #4]
 80071fa:	f04f 0200 	mov.w	r2, #0
 80071fe:	f04f 0300 	mov.w	r3, #0
 8007202:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007206:	4629      	mov	r1, r5
 8007208:	028b      	lsls	r3, r1, #10
 800720a:	4621      	mov	r1, r4
 800720c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007210:	4621      	mov	r1, r4
 8007212:	028a      	lsls	r2, r1, #10
 8007214:	4610      	mov	r0, r2
 8007216:	4619      	mov	r1, r3
 8007218:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800721a:	2200      	movs	r2, #0
 800721c:	61bb      	str	r3, [r7, #24]
 800721e:	61fa      	str	r2, [r7, #28]
 8007220:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007224:	f7f9 f834 	bl	8000290 <__aeabi_uldivmod>
 8007228:	4602      	mov	r2, r0
 800722a:	460b      	mov	r3, r1
 800722c:	4613      	mov	r3, r2
 800722e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007230:	4b0b      	ldr	r3, [pc, #44]	; (8007260 <HAL_RCC_GetSysClockFreq+0x200>)
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	0c1b      	lsrs	r3, r3, #16
 8007236:	f003 0303 	and.w	r3, r3, #3
 800723a:	3301      	adds	r3, #1
 800723c:	005b      	lsls	r3, r3, #1
 800723e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007240:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007244:	fbb2 f3f3 	udiv	r3, r2, r3
 8007248:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800724a:	e002      	b.n	8007252 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800724c:	4b05      	ldr	r3, [pc, #20]	; (8007264 <HAL_RCC_GetSysClockFreq+0x204>)
 800724e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007250:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007252:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007254:	4618      	mov	r0, r3
 8007256:	3750      	adds	r7, #80	; 0x50
 8007258:	46bd      	mov	sp, r7
 800725a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800725e:	bf00      	nop
 8007260:	40023800 	.word	0x40023800
 8007264:	00f42400 	.word	0x00f42400
 8007268:	007a1200 	.word	0x007a1200

0800726c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800726c:	b480      	push	{r7}
 800726e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007270:	4b03      	ldr	r3, [pc, #12]	; (8007280 <HAL_RCC_GetHCLKFreq+0x14>)
 8007272:	681b      	ldr	r3, [r3, #0]
}
 8007274:	4618      	mov	r0, r3
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr
 800727e:	bf00      	nop
 8007280:	20000014 	.word	0x20000014

08007284 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007288:	f7ff fff0 	bl	800726c <HAL_RCC_GetHCLKFreq>
 800728c:	4602      	mov	r2, r0
 800728e:	4b05      	ldr	r3, [pc, #20]	; (80072a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	0a9b      	lsrs	r3, r3, #10
 8007294:	f003 0307 	and.w	r3, r3, #7
 8007298:	4903      	ldr	r1, [pc, #12]	; (80072a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800729a:	5ccb      	ldrb	r3, [r1, r3]
 800729c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	40023800 	.word	0x40023800
 80072a8:	08017190 	.word	0x08017190

080072ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80072b0:	f7ff ffdc 	bl	800726c <HAL_RCC_GetHCLKFreq>
 80072b4:	4602      	mov	r2, r0
 80072b6:	4b05      	ldr	r3, [pc, #20]	; (80072cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	0b5b      	lsrs	r3, r3, #13
 80072bc:	f003 0307 	and.w	r3, r3, #7
 80072c0:	4903      	ldr	r1, [pc, #12]	; (80072d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80072c2:	5ccb      	ldrb	r3, [r1, r3]
 80072c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	40023800 	.word	0x40023800
 80072d0:	08017190 	.word	0x08017190

080072d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b082      	sub	sp, #8
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d101      	bne.n	80072e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e03f      	b.n	8007366 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d106      	bne.n	8007300 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f7fb f906 	bl	800250c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2224      	movs	r2, #36	; 0x24
 8007304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	68da      	ldr	r2, [r3, #12]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007316:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 fddf 	bl	8007edc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	691a      	ldr	r2, [r3, #16]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800732c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	695a      	ldr	r2, [r3, #20]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800733c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	68da      	ldr	r2, [r3, #12]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800734c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2220      	movs	r2, #32
 8007358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2220      	movs	r2, #32
 8007360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3708      	adds	r7, #8
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b08a      	sub	sp, #40	; 0x28
 8007372:	af02      	add	r7, sp, #8
 8007374:	60f8      	str	r0, [r7, #12]
 8007376:	60b9      	str	r1, [r7, #8]
 8007378:	603b      	str	r3, [r7, #0]
 800737a:	4613      	mov	r3, r2
 800737c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800737e:	2300      	movs	r3, #0
 8007380:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007388:	b2db      	uxtb	r3, r3
 800738a:	2b20      	cmp	r3, #32
 800738c:	d17c      	bne.n	8007488 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d002      	beq.n	800739a <HAL_UART_Transmit+0x2c>
 8007394:	88fb      	ldrh	r3, [r7, #6]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d101      	bne.n	800739e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	e075      	b.n	800748a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d101      	bne.n	80073ac <HAL_UART_Transmit+0x3e>
 80073a8:	2302      	movs	r3, #2
 80073aa:	e06e      	b.n	800748a <HAL_UART_Transmit+0x11c>
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2200      	movs	r2, #0
 80073b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2221      	movs	r2, #33	; 0x21
 80073be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80073c2:	f7fb fc97 	bl	8002cf4 <HAL_GetTick>
 80073c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	88fa      	ldrh	r2, [r7, #6]
 80073cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	88fa      	ldrh	r2, [r7, #6]
 80073d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073dc:	d108      	bne.n	80073f0 <HAL_UART_Transmit+0x82>
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d104      	bne.n	80073f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80073e6:	2300      	movs	r3, #0
 80073e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	61bb      	str	r3, [r7, #24]
 80073ee:	e003      	b.n	80073f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80073f4:	2300      	movs	r3, #0
 80073f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007400:	e02a      	b.n	8007458 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	9300      	str	r3, [sp, #0]
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	2200      	movs	r2, #0
 800740a:	2180      	movs	r1, #128	; 0x80
 800740c:	68f8      	ldr	r0, [r7, #12]
 800740e:	f000 fb1f 	bl	8007a50 <UART_WaitOnFlagUntilTimeout>
 8007412:	4603      	mov	r3, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d001      	beq.n	800741c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007418:	2303      	movs	r3, #3
 800741a:	e036      	b.n	800748a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d10b      	bne.n	800743a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007422:	69bb      	ldr	r3, [r7, #24]
 8007424:	881b      	ldrh	r3, [r3, #0]
 8007426:	461a      	mov	r2, r3
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007430:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	3302      	adds	r3, #2
 8007436:	61bb      	str	r3, [r7, #24]
 8007438:	e007      	b.n	800744a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	781a      	ldrb	r2, [r3, #0]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	3301      	adds	r3, #1
 8007448:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800744e:	b29b      	uxth	r3, r3
 8007450:	3b01      	subs	r3, #1
 8007452:	b29a      	uxth	r2, r3
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800745c:	b29b      	uxth	r3, r3
 800745e:	2b00      	cmp	r3, #0
 8007460:	d1cf      	bne.n	8007402 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	9300      	str	r3, [sp, #0]
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	2200      	movs	r2, #0
 800746a:	2140      	movs	r1, #64	; 0x40
 800746c:	68f8      	ldr	r0, [r7, #12]
 800746e:	f000 faef 	bl	8007a50 <UART_WaitOnFlagUntilTimeout>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d001      	beq.n	800747c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007478:	2303      	movs	r3, #3
 800747a:	e006      	b.n	800748a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2220      	movs	r2, #32
 8007480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007484:	2300      	movs	r3, #0
 8007486:	e000      	b.n	800748a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007488:	2302      	movs	r3, #2
  }
}
 800748a:	4618      	mov	r0, r3
 800748c:	3720      	adds	r7, #32
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}

08007492 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007492:	b580      	push	{r7, lr}
 8007494:	b084      	sub	sp, #16
 8007496:	af00      	add	r7, sp, #0
 8007498:	60f8      	str	r0, [r7, #12]
 800749a:	60b9      	str	r1, [r7, #8]
 800749c:	4613      	mov	r3, r2
 800749e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	2b20      	cmp	r3, #32
 80074aa:	d11d      	bne.n	80074e8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d002      	beq.n	80074b8 <HAL_UART_Receive_IT+0x26>
 80074b2:	88fb      	ldrh	r3, [r7, #6]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d101      	bne.n	80074bc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	e016      	b.n	80074ea <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d101      	bne.n	80074ca <HAL_UART_Receive_IT+0x38>
 80074c6:	2302      	movs	r3, #2
 80074c8:	e00f      	b.n	80074ea <HAL_UART_Receive_IT+0x58>
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2201      	movs	r2, #1
 80074ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2200      	movs	r2, #0
 80074d6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80074d8:	88fb      	ldrh	r3, [r7, #6]
 80074da:	461a      	mov	r2, r3
 80074dc:	68b9      	ldr	r1, [r7, #8]
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	f000 fb24 	bl	8007b2c <UART_Start_Receive_IT>
 80074e4:	4603      	mov	r3, r0
 80074e6:	e000      	b.n	80074ea <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80074e8:	2302      	movs	r3, #2
  }
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
	...

080074f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b0ba      	sub	sp, #232	; 0xe8
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	695b      	ldr	r3, [r3, #20]
 8007516:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800751a:	2300      	movs	r3, #0
 800751c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007520:	2300      	movs	r3, #0
 8007522:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800752a:	f003 030f 	and.w	r3, r3, #15
 800752e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007532:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007536:	2b00      	cmp	r3, #0
 8007538:	d10f      	bne.n	800755a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800753a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800753e:	f003 0320 	and.w	r3, r3, #32
 8007542:	2b00      	cmp	r3, #0
 8007544:	d009      	beq.n	800755a <HAL_UART_IRQHandler+0x66>
 8007546:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800754a:	f003 0320 	and.w	r3, r3, #32
 800754e:	2b00      	cmp	r3, #0
 8007550:	d003      	beq.n	800755a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 fc07 	bl	8007d66 <UART_Receive_IT>
      return;
 8007558:	e256      	b.n	8007a08 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800755a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800755e:	2b00      	cmp	r3, #0
 8007560:	f000 80de 	beq.w	8007720 <HAL_UART_IRQHandler+0x22c>
 8007564:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007568:	f003 0301 	and.w	r3, r3, #1
 800756c:	2b00      	cmp	r3, #0
 800756e:	d106      	bne.n	800757e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007574:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007578:	2b00      	cmp	r3, #0
 800757a:	f000 80d1 	beq.w	8007720 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800757e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007582:	f003 0301 	and.w	r3, r3, #1
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00b      	beq.n	80075a2 <HAL_UART_IRQHandler+0xae>
 800758a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800758e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007592:	2b00      	cmp	r3, #0
 8007594:	d005      	beq.n	80075a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759a:	f043 0201 	orr.w	r2, r3, #1
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80075a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075a6:	f003 0304 	and.w	r3, r3, #4
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d00b      	beq.n	80075c6 <HAL_UART_IRQHandler+0xd2>
 80075ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075b2:	f003 0301 	and.w	r3, r3, #1
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d005      	beq.n	80075c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075be:	f043 0202 	orr.w	r2, r3, #2
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80075c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075ca:	f003 0302 	and.w	r3, r3, #2
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00b      	beq.n	80075ea <HAL_UART_IRQHandler+0xf6>
 80075d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075d6:	f003 0301 	and.w	r3, r3, #1
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d005      	beq.n	80075ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e2:	f043 0204 	orr.w	r2, r3, #4
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80075ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075ee:	f003 0308 	and.w	r3, r3, #8
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d011      	beq.n	800761a <HAL_UART_IRQHandler+0x126>
 80075f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075fa:	f003 0320 	and.w	r3, r3, #32
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d105      	bne.n	800760e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007602:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007606:	f003 0301 	and.w	r3, r3, #1
 800760a:	2b00      	cmp	r3, #0
 800760c:	d005      	beq.n	800761a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007612:	f043 0208 	orr.w	r2, r3, #8
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761e:	2b00      	cmp	r3, #0
 8007620:	f000 81ed 	beq.w	80079fe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007628:	f003 0320 	and.w	r3, r3, #32
 800762c:	2b00      	cmp	r3, #0
 800762e:	d008      	beq.n	8007642 <HAL_UART_IRQHandler+0x14e>
 8007630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007634:	f003 0320 	and.w	r3, r3, #32
 8007638:	2b00      	cmp	r3, #0
 800763a:	d002      	beq.n	8007642 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 fb92 	bl	8007d66 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	695b      	ldr	r3, [r3, #20]
 8007648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800764c:	2b40      	cmp	r3, #64	; 0x40
 800764e:	bf0c      	ite	eq
 8007650:	2301      	moveq	r3, #1
 8007652:	2300      	movne	r3, #0
 8007654:	b2db      	uxtb	r3, r3
 8007656:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765e:	f003 0308 	and.w	r3, r3, #8
 8007662:	2b00      	cmp	r3, #0
 8007664:	d103      	bne.n	800766e <HAL_UART_IRQHandler+0x17a>
 8007666:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800766a:	2b00      	cmp	r3, #0
 800766c:	d04f      	beq.n	800770e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 fa9a 	bl	8007ba8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	695b      	ldr	r3, [r3, #20]
 800767a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800767e:	2b40      	cmp	r3, #64	; 0x40
 8007680:	d141      	bne.n	8007706 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	3314      	adds	r3, #20
 8007688:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007690:	e853 3f00 	ldrex	r3, [r3]
 8007694:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007698:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800769c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	3314      	adds	r3, #20
 80076aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80076ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80076b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80076ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80076be:	e841 2300 	strex	r3, r2, [r1]
 80076c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80076c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1d9      	bne.n	8007682 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d013      	beq.n	80076fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076da:	4a7d      	ldr	r2, [pc, #500]	; (80078d0 <HAL_UART_IRQHandler+0x3dc>)
 80076dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7fb fcb7 	bl	8003056 <HAL_DMA_Abort_IT>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d016      	beq.n	800771c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80076f8:	4610      	mov	r0, r2
 80076fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076fc:	e00e      	b.n	800771c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 f990 	bl	8007a24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007704:	e00a      	b.n	800771c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 f98c 	bl	8007a24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800770c:	e006      	b.n	800771c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 f988 	bl	8007a24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800771a:	e170      	b.n	80079fe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800771c:	bf00      	nop
    return;
 800771e:	e16e      	b.n	80079fe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007724:	2b01      	cmp	r3, #1
 8007726:	f040 814a 	bne.w	80079be <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800772a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800772e:	f003 0310 	and.w	r3, r3, #16
 8007732:	2b00      	cmp	r3, #0
 8007734:	f000 8143 	beq.w	80079be <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800773c:	f003 0310 	and.w	r3, r3, #16
 8007740:	2b00      	cmp	r3, #0
 8007742:	f000 813c 	beq.w	80079be <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007746:	2300      	movs	r3, #0
 8007748:	60bb      	str	r3, [r7, #8]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	60bb      	str	r3, [r7, #8]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	60bb      	str	r3, [r7, #8]
 800775a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	695b      	ldr	r3, [r3, #20]
 8007762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007766:	2b40      	cmp	r3, #64	; 0x40
 8007768:	f040 80b4 	bne.w	80078d4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007778:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800777c:	2b00      	cmp	r3, #0
 800777e:	f000 8140 	beq.w	8007a02 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007786:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800778a:	429a      	cmp	r2, r3
 800778c:	f080 8139 	bcs.w	8007a02 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007796:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800779c:	69db      	ldr	r3, [r3, #28]
 800779e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077a2:	f000 8088 	beq.w	80078b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	330c      	adds	r3, #12
 80077ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80077b4:	e853 3f00 	ldrex	r3, [r3]
 80077b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80077bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	330c      	adds	r3, #12
 80077ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80077d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80077d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80077de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80077e2:	e841 2300 	strex	r3, r2, [r1]
 80077e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80077ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d1d9      	bne.n	80077a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	3314      	adds	r3, #20
 80077f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077fc:	e853 3f00 	ldrex	r3, [r3]
 8007800:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007802:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007804:	f023 0301 	bic.w	r3, r3, #1
 8007808:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	3314      	adds	r3, #20
 8007812:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007816:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800781a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800781c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800781e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007822:	e841 2300 	strex	r3, r2, [r1]
 8007826:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007828:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800782a:	2b00      	cmp	r3, #0
 800782c:	d1e1      	bne.n	80077f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	3314      	adds	r3, #20
 8007834:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007836:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007838:	e853 3f00 	ldrex	r3, [r3]
 800783c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800783e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007840:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007844:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	3314      	adds	r3, #20
 800784e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007852:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007854:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007856:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007858:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800785a:	e841 2300 	strex	r3, r2, [r1]
 800785e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007860:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1e3      	bne.n	800782e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2220      	movs	r2, #32
 800786a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2200      	movs	r2, #0
 8007872:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	330c      	adds	r3, #12
 800787a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800787e:	e853 3f00 	ldrex	r3, [r3]
 8007882:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007884:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007886:	f023 0310 	bic.w	r3, r3, #16
 800788a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	330c      	adds	r3, #12
 8007894:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007898:	65ba      	str	r2, [r7, #88]	; 0x58
 800789a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800789e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078a0:	e841 2300 	strex	r3, r2, [r1]
 80078a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80078a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d1e3      	bne.n	8007874 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7fb fb60 	bl	8002f76 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078be:	b29b      	uxth	r3, r3
 80078c0:	1ad3      	subs	r3, r2, r3
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	4619      	mov	r1, r3
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 f8b6 	bl	8007a38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80078cc:	e099      	b.n	8007a02 <HAL_UART_IRQHandler+0x50e>
 80078ce:	bf00      	nop
 80078d0:	08007c6f 	.word	0x08007c6f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078dc:	b29b      	uxth	r3, r3
 80078de:	1ad3      	subs	r3, r2, r3
 80078e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	f000 808b 	beq.w	8007a06 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80078f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	f000 8086 	beq.w	8007a06 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	330c      	adds	r3, #12
 8007900:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007904:	e853 3f00 	ldrex	r3, [r3]
 8007908:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800790a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800790c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007910:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	330c      	adds	r3, #12
 800791a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800791e:	647a      	str	r2, [r7, #68]	; 0x44
 8007920:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007922:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007924:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007926:	e841 2300 	strex	r3, r2, [r1]
 800792a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800792c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800792e:	2b00      	cmp	r3, #0
 8007930:	d1e3      	bne.n	80078fa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	3314      	adds	r3, #20
 8007938:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793c:	e853 3f00 	ldrex	r3, [r3]
 8007940:	623b      	str	r3, [r7, #32]
   return(result);
 8007942:	6a3b      	ldr	r3, [r7, #32]
 8007944:	f023 0301 	bic.w	r3, r3, #1
 8007948:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	3314      	adds	r3, #20
 8007952:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007956:	633a      	str	r2, [r7, #48]	; 0x30
 8007958:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800795c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800795e:	e841 2300 	strex	r3, r2, [r1]
 8007962:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007966:	2b00      	cmp	r3, #0
 8007968:	d1e3      	bne.n	8007932 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2220      	movs	r2, #32
 800796e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	330c      	adds	r3, #12
 800797e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	e853 3f00 	ldrex	r3, [r3]
 8007986:	60fb      	str	r3, [r7, #12]
   return(result);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f023 0310 	bic.w	r3, r3, #16
 800798e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	330c      	adds	r3, #12
 8007998:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800799c:	61fa      	str	r2, [r7, #28]
 800799e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a0:	69b9      	ldr	r1, [r7, #24]
 80079a2:	69fa      	ldr	r2, [r7, #28]
 80079a4:	e841 2300 	strex	r3, r2, [r1]
 80079a8:	617b      	str	r3, [r7, #20]
   return(result);
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d1e3      	bne.n	8007978 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80079b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079b4:	4619      	mov	r1, r3
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 f83e 	bl	8007a38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80079bc:	e023      	b.n	8007a06 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80079be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d009      	beq.n	80079de <HAL_UART_IRQHandler+0x4ea>
 80079ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d003      	beq.n	80079de <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 f95d 	bl	8007c96 <UART_Transmit_IT>
    return;
 80079dc:	e014      	b.n	8007a08 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80079de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00e      	beq.n	8007a08 <HAL_UART_IRQHandler+0x514>
 80079ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d008      	beq.n	8007a08 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 f99d 	bl	8007d36 <UART_EndTransmit_IT>
    return;
 80079fc:	e004      	b.n	8007a08 <HAL_UART_IRQHandler+0x514>
    return;
 80079fe:	bf00      	nop
 8007a00:	e002      	b.n	8007a08 <HAL_UART_IRQHandler+0x514>
      return;
 8007a02:	bf00      	nop
 8007a04:	e000      	b.n	8007a08 <HAL_UART_IRQHandler+0x514>
      return;
 8007a06:	bf00      	nop
  }
}
 8007a08:	37e8      	adds	r7, #232	; 0xe8
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop

08007a10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007a18:	bf00      	nop
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007a2c:	bf00      	nop
 8007a2e:	370c      	adds	r7, #12
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	460b      	mov	r3, r1
 8007a42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a44:	bf00      	nop
 8007a46:	370c      	adds	r7, #12
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr

08007a50 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b090      	sub	sp, #64	; 0x40
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	603b      	str	r3, [r7, #0]
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a60:	e050      	b.n	8007b04 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a68:	d04c      	beq.n	8007b04 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d007      	beq.n	8007a80 <UART_WaitOnFlagUntilTimeout+0x30>
 8007a70:	f7fb f940 	bl	8002cf4 <HAL_GetTick>
 8007a74:	4602      	mov	r2, r0
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	1ad3      	subs	r3, r2, r3
 8007a7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d241      	bcs.n	8007b04 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	330c      	adds	r3, #12
 8007a86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8a:	e853 3f00 	ldrex	r3, [r3]
 8007a8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a92:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	330c      	adds	r3, #12
 8007a9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007aa0:	637a      	str	r2, [r7, #52]	; 0x34
 8007aa2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007aa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007aa8:	e841 2300 	strex	r3, r2, [r1]
 8007aac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d1e5      	bne.n	8007a80 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	3314      	adds	r3, #20
 8007aba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	e853 3f00 	ldrex	r3, [r3]
 8007ac2:	613b      	str	r3, [r7, #16]
   return(result);
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	f023 0301 	bic.w	r3, r3, #1
 8007aca:	63bb      	str	r3, [r7, #56]	; 0x38
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	3314      	adds	r3, #20
 8007ad2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ad4:	623a      	str	r2, [r7, #32]
 8007ad6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad8:	69f9      	ldr	r1, [r7, #28]
 8007ada:	6a3a      	ldr	r2, [r7, #32]
 8007adc:	e841 2300 	strex	r3, r2, [r1]
 8007ae0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ae2:	69bb      	ldr	r3, [r7, #24]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d1e5      	bne.n	8007ab4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2220      	movs	r2, #32
 8007aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2220      	movs	r2, #32
 8007af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007b00:	2303      	movs	r3, #3
 8007b02:	e00f      	b.n	8007b24 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	4013      	ands	r3, r2
 8007b0e:	68ba      	ldr	r2, [r7, #8]
 8007b10:	429a      	cmp	r2, r3
 8007b12:	bf0c      	ite	eq
 8007b14:	2301      	moveq	r3, #1
 8007b16:	2300      	movne	r3, #0
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	79fb      	ldrb	r3, [r7, #7]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d09f      	beq.n	8007a62 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b22:	2300      	movs	r3, #0
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3740      	adds	r7, #64	; 0x40
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b085      	sub	sp, #20
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	4613      	mov	r3, r2
 8007b38:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	68ba      	ldr	r2, [r7, #8]
 8007b3e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	88fa      	ldrh	r2, [r7, #6]
 8007b44:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	88fa      	ldrh	r2, [r7, #6]
 8007b4a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2222      	movs	r2, #34	; 0x22
 8007b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d007      	beq.n	8007b7a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	68da      	ldr	r2, [r3, #12]
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b78:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	695a      	ldr	r2, [r3, #20]
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f042 0201 	orr.w	r2, r2, #1
 8007b88:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	68da      	ldr	r2, [r3, #12]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f042 0220 	orr.w	r2, r2, #32
 8007b98:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007b9a:	2300      	movs	r3, #0
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3714      	adds	r7, #20
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b095      	sub	sp, #84	; 0x54
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	330c      	adds	r3, #12
 8007bb6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bba:	e853 3f00 	ldrex	r3, [r3]
 8007bbe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	330c      	adds	r3, #12
 8007bce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007bd0:	643a      	str	r2, [r7, #64]	; 0x40
 8007bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007bd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007bd8:	e841 2300 	strex	r3, r2, [r1]
 8007bdc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d1e5      	bne.n	8007bb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	3314      	adds	r3, #20
 8007bea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bec:	6a3b      	ldr	r3, [r7, #32]
 8007bee:	e853 3f00 	ldrex	r3, [r3]
 8007bf2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	f023 0301 	bic.w	r3, r3, #1
 8007bfa:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	3314      	adds	r3, #20
 8007c02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c0c:	e841 2300 	strex	r3, r2, [r1]
 8007c10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d1e5      	bne.n	8007be4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d119      	bne.n	8007c54 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	330c      	adds	r3, #12
 8007c26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	e853 3f00 	ldrex	r3, [r3]
 8007c2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	f023 0310 	bic.w	r3, r3, #16
 8007c36:	647b      	str	r3, [r7, #68]	; 0x44
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	330c      	adds	r3, #12
 8007c3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c40:	61ba      	str	r2, [r7, #24]
 8007c42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c44:	6979      	ldr	r1, [r7, #20]
 8007c46:	69ba      	ldr	r2, [r7, #24]
 8007c48:	e841 2300 	strex	r3, r2, [r1]
 8007c4c:	613b      	str	r3, [r7, #16]
   return(result);
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d1e5      	bne.n	8007c20 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2220      	movs	r2, #32
 8007c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007c62:	bf00      	nop
 8007c64:	3754      	adds	r7, #84	; 0x54
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr

08007c6e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b084      	sub	sp, #16
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2200      	movs	r2, #0
 8007c86:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c88:	68f8      	ldr	r0, [r7, #12]
 8007c8a:	f7ff fecb 	bl	8007a24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c8e:	bf00      	nop
 8007c90:	3710      	adds	r7, #16
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007c96:	b480      	push	{r7}
 8007c98:	b085      	sub	sp, #20
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	2b21      	cmp	r3, #33	; 0x21
 8007ca8:	d13e      	bne.n	8007d28 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cb2:	d114      	bne.n	8007cde <UART_Transmit_IT+0x48>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	691b      	ldr	r3, [r3, #16]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d110      	bne.n	8007cde <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6a1b      	ldr	r3, [r3, #32]
 8007cc0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	881b      	ldrh	r3, [r3, #0]
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007cd0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6a1b      	ldr	r3, [r3, #32]
 8007cd6:	1c9a      	adds	r2, r3, #2
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	621a      	str	r2, [r3, #32]
 8007cdc:	e008      	b.n	8007cf0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a1b      	ldr	r3, [r3, #32]
 8007ce2:	1c59      	adds	r1, r3, #1
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	6211      	str	r1, [r2, #32]
 8007ce8:	781a      	ldrb	r2, [r3, #0]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d10f      	bne.n	8007d24 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	68da      	ldr	r2, [r3, #12]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d12:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	68da      	ldr	r2, [r3, #12]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d22:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007d24:	2300      	movs	r3, #0
 8007d26:	e000      	b.n	8007d2a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007d28:	2302      	movs	r3, #2
  }
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3714      	adds	r7, #20
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr

08007d36 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b082      	sub	sp, #8
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	68da      	ldr	r2, [r3, #12]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d4c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2220      	movs	r2, #32
 8007d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f7ff fe5a 	bl	8007a10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007d5c:	2300      	movs	r3, #0
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3708      	adds	r7, #8
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b08c      	sub	sp, #48	; 0x30
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	2b22      	cmp	r3, #34	; 0x22
 8007d78:	f040 80ab 	bne.w	8007ed2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d84:	d117      	bne.n	8007db6 <UART_Receive_IT+0x50>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	691b      	ldr	r3, [r3, #16]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d113      	bne.n	8007db6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d96:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007da4:	b29a      	uxth	r2, r3
 8007da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dae:	1c9a      	adds	r2, r3, #2
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	629a      	str	r2, [r3, #40]	; 0x28
 8007db4:	e026      	b.n	8007e04 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dc8:	d007      	beq.n	8007dda <UART_Receive_IT+0x74>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d10a      	bne.n	8007de8 <UART_Receive_IT+0x82>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	691b      	ldr	r3, [r3, #16]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d106      	bne.n	8007de8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	b2da      	uxtb	r2, r3
 8007de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de4:	701a      	strb	r2, [r3, #0]
 8007de6:	e008      	b.n	8007dfa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007df4:	b2da      	uxtb	r2, r3
 8007df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dfe:	1c5a      	adds	r2, r3, #1
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	3b01      	subs	r3, #1
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	4619      	mov	r1, r3
 8007e12:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d15a      	bne.n	8007ece <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	68da      	ldr	r2, [r3, #12]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f022 0220 	bic.w	r2, r2, #32
 8007e26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68da      	ldr	r2, [r3, #12]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	695a      	ldr	r2, [r3, #20]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f022 0201 	bic.w	r2, r2, #1
 8007e46:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2220      	movs	r2, #32
 8007e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d135      	bne.n	8007ec4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	330c      	adds	r3, #12
 8007e64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	e853 3f00 	ldrex	r3, [r3]
 8007e6c:	613b      	str	r3, [r7, #16]
   return(result);
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	f023 0310 	bic.w	r3, r3, #16
 8007e74:	627b      	str	r3, [r7, #36]	; 0x24
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	330c      	adds	r3, #12
 8007e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e7e:	623a      	str	r2, [r7, #32]
 8007e80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e82:	69f9      	ldr	r1, [r7, #28]
 8007e84:	6a3a      	ldr	r2, [r7, #32]
 8007e86:	e841 2300 	strex	r3, r2, [r1]
 8007e8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d1e5      	bne.n	8007e5e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f003 0310 	and.w	r3, r3, #16
 8007e9c:	2b10      	cmp	r3, #16
 8007e9e:	d10a      	bne.n	8007eb6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	60fb      	str	r3, [r7, #12]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	60fb      	str	r3, [r7, #12]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	60fb      	str	r3, [r7, #12]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007eba:	4619      	mov	r1, r3
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f7ff fdbb 	bl	8007a38 <HAL_UARTEx_RxEventCallback>
 8007ec2:	e002      	b.n	8007eca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f7f9 fefd 	bl	8001cc4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	e002      	b.n	8007ed4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	e000      	b.n	8007ed4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007ed2:	2302      	movs	r3, #2
  }
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3730      	adds	r7, #48	; 0x30
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007edc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ee0:	b0c0      	sub	sp, #256	; 0x100
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	691b      	ldr	r3, [r3, #16]
 8007ef0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ef8:	68d9      	ldr	r1, [r3, #12]
 8007efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	ea40 0301 	orr.w	r3, r0, r1
 8007f04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f0a:	689a      	ldr	r2, [r3, #8]
 8007f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f10:	691b      	ldr	r3, [r3, #16]
 8007f12:	431a      	orrs	r2, r3
 8007f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f18:	695b      	ldr	r3, [r3, #20]
 8007f1a:	431a      	orrs	r2, r3
 8007f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f20:	69db      	ldr	r3, [r3, #28]
 8007f22:	4313      	orrs	r3, r2
 8007f24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007f34:	f021 010c 	bic.w	r1, r1, #12
 8007f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007f42:	430b      	orrs	r3, r1
 8007f44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	695b      	ldr	r3, [r3, #20]
 8007f4e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f56:	6999      	ldr	r1, [r3, #24]
 8007f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	ea40 0301 	orr.w	r3, r0, r1
 8007f62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	4b8f      	ldr	r3, [pc, #572]	; (80081a8 <UART_SetConfig+0x2cc>)
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d005      	beq.n	8007f7c <UART_SetConfig+0xa0>
 8007f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f74:	681a      	ldr	r2, [r3, #0]
 8007f76:	4b8d      	ldr	r3, [pc, #564]	; (80081ac <UART_SetConfig+0x2d0>)
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d104      	bne.n	8007f86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007f7c:	f7ff f996 	bl	80072ac <HAL_RCC_GetPCLK2Freq>
 8007f80:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007f84:	e003      	b.n	8007f8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007f86:	f7ff f97d 	bl	8007284 <HAL_RCC_GetPCLK1Freq>
 8007f8a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f92:	69db      	ldr	r3, [r3, #28]
 8007f94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f98:	f040 810c 	bne.w	80081b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007f9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007fa6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007faa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007fae:	4622      	mov	r2, r4
 8007fb0:	462b      	mov	r3, r5
 8007fb2:	1891      	adds	r1, r2, r2
 8007fb4:	65b9      	str	r1, [r7, #88]	; 0x58
 8007fb6:	415b      	adcs	r3, r3
 8007fb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007fba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007fbe:	4621      	mov	r1, r4
 8007fc0:	eb12 0801 	adds.w	r8, r2, r1
 8007fc4:	4629      	mov	r1, r5
 8007fc6:	eb43 0901 	adc.w	r9, r3, r1
 8007fca:	f04f 0200 	mov.w	r2, #0
 8007fce:	f04f 0300 	mov.w	r3, #0
 8007fd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007fd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007fda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007fde:	4690      	mov	r8, r2
 8007fe0:	4699      	mov	r9, r3
 8007fe2:	4623      	mov	r3, r4
 8007fe4:	eb18 0303 	adds.w	r3, r8, r3
 8007fe8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007fec:	462b      	mov	r3, r5
 8007fee:	eb49 0303 	adc.w	r3, r9, r3
 8007ff2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008002:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008006:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800800a:	460b      	mov	r3, r1
 800800c:	18db      	adds	r3, r3, r3
 800800e:	653b      	str	r3, [r7, #80]	; 0x50
 8008010:	4613      	mov	r3, r2
 8008012:	eb42 0303 	adc.w	r3, r2, r3
 8008016:	657b      	str	r3, [r7, #84]	; 0x54
 8008018:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800801c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008020:	f7f8 f936 	bl	8000290 <__aeabi_uldivmod>
 8008024:	4602      	mov	r2, r0
 8008026:	460b      	mov	r3, r1
 8008028:	4b61      	ldr	r3, [pc, #388]	; (80081b0 <UART_SetConfig+0x2d4>)
 800802a:	fba3 2302 	umull	r2, r3, r3, r2
 800802e:	095b      	lsrs	r3, r3, #5
 8008030:	011c      	lsls	r4, r3, #4
 8008032:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008036:	2200      	movs	r2, #0
 8008038:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800803c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008040:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008044:	4642      	mov	r2, r8
 8008046:	464b      	mov	r3, r9
 8008048:	1891      	adds	r1, r2, r2
 800804a:	64b9      	str	r1, [r7, #72]	; 0x48
 800804c:	415b      	adcs	r3, r3
 800804e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008050:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008054:	4641      	mov	r1, r8
 8008056:	eb12 0a01 	adds.w	sl, r2, r1
 800805a:	4649      	mov	r1, r9
 800805c:	eb43 0b01 	adc.w	fp, r3, r1
 8008060:	f04f 0200 	mov.w	r2, #0
 8008064:	f04f 0300 	mov.w	r3, #0
 8008068:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800806c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008070:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008074:	4692      	mov	sl, r2
 8008076:	469b      	mov	fp, r3
 8008078:	4643      	mov	r3, r8
 800807a:	eb1a 0303 	adds.w	r3, sl, r3
 800807e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008082:	464b      	mov	r3, r9
 8008084:	eb4b 0303 	adc.w	r3, fp, r3
 8008088:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800808c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008098:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800809c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80080a0:	460b      	mov	r3, r1
 80080a2:	18db      	adds	r3, r3, r3
 80080a4:	643b      	str	r3, [r7, #64]	; 0x40
 80080a6:	4613      	mov	r3, r2
 80080a8:	eb42 0303 	adc.w	r3, r2, r3
 80080ac:	647b      	str	r3, [r7, #68]	; 0x44
 80080ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80080b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80080b6:	f7f8 f8eb 	bl	8000290 <__aeabi_uldivmod>
 80080ba:	4602      	mov	r2, r0
 80080bc:	460b      	mov	r3, r1
 80080be:	4611      	mov	r1, r2
 80080c0:	4b3b      	ldr	r3, [pc, #236]	; (80081b0 <UART_SetConfig+0x2d4>)
 80080c2:	fba3 2301 	umull	r2, r3, r3, r1
 80080c6:	095b      	lsrs	r3, r3, #5
 80080c8:	2264      	movs	r2, #100	; 0x64
 80080ca:	fb02 f303 	mul.w	r3, r2, r3
 80080ce:	1acb      	subs	r3, r1, r3
 80080d0:	00db      	lsls	r3, r3, #3
 80080d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80080d6:	4b36      	ldr	r3, [pc, #216]	; (80081b0 <UART_SetConfig+0x2d4>)
 80080d8:	fba3 2302 	umull	r2, r3, r3, r2
 80080dc:	095b      	lsrs	r3, r3, #5
 80080de:	005b      	lsls	r3, r3, #1
 80080e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80080e4:	441c      	add	r4, r3
 80080e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080ea:	2200      	movs	r2, #0
 80080ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80080f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80080f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80080f8:	4642      	mov	r2, r8
 80080fa:	464b      	mov	r3, r9
 80080fc:	1891      	adds	r1, r2, r2
 80080fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8008100:	415b      	adcs	r3, r3
 8008102:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008104:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008108:	4641      	mov	r1, r8
 800810a:	1851      	adds	r1, r2, r1
 800810c:	6339      	str	r1, [r7, #48]	; 0x30
 800810e:	4649      	mov	r1, r9
 8008110:	414b      	adcs	r3, r1
 8008112:	637b      	str	r3, [r7, #52]	; 0x34
 8008114:	f04f 0200 	mov.w	r2, #0
 8008118:	f04f 0300 	mov.w	r3, #0
 800811c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008120:	4659      	mov	r1, fp
 8008122:	00cb      	lsls	r3, r1, #3
 8008124:	4651      	mov	r1, sl
 8008126:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800812a:	4651      	mov	r1, sl
 800812c:	00ca      	lsls	r2, r1, #3
 800812e:	4610      	mov	r0, r2
 8008130:	4619      	mov	r1, r3
 8008132:	4603      	mov	r3, r0
 8008134:	4642      	mov	r2, r8
 8008136:	189b      	adds	r3, r3, r2
 8008138:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800813c:	464b      	mov	r3, r9
 800813e:	460a      	mov	r2, r1
 8008140:	eb42 0303 	adc.w	r3, r2, r3
 8008144:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008154:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008158:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800815c:	460b      	mov	r3, r1
 800815e:	18db      	adds	r3, r3, r3
 8008160:	62bb      	str	r3, [r7, #40]	; 0x28
 8008162:	4613      	mov	r3, r2
 8008164:	eb42 0303 	adc.w	r3, r2, r3
 8008168:	62fb      	str	r3, [r7, #44]	; 0x2c
 800816a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800816e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008172:	f7f8 f88d 	bl	8000290 <__aeabi_uldivmod>
 8008176:	4602      	mov	r2, r0
 8008178:	460b      	mov	r3, r1
 800817a:	4b0d      	ldr	r3, [pc, #52]	; (80081b0 <UART_SetConfig+0x2d4>)
 800817c:	fba3 1302 	umull	r1, r3, r3, r2
 8008180:	095b      	lsrs	r3, r3, #5
 8008182:	2164      	movs	r1, #100	; 0x64
 8008184:	fb01 f303 	mul.w	r3, r1, r3
 8008188:	1ad3      	subs	r3, r2, r3
 800818a:	00db      	lsls	r3, r3, #3
 800818c:	3332      	adds	r3, #50	; 0x32
 800818e:	4a08      	ldr	r2, [pc, #32]	; (80081b0 <UART_SetConfig+0x2d4>)
 8008190:	fba2 2303 	umull	r2, r3, r2, r3
 8008194:	095b      	lsrs	r3, r3, #5
 8008196:	f003 0207 	and.w	r2, r3, #7
 800819a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4422      	add	r2, r4
 80081a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80081a4:	e105      	b.n	80083b2 <UART_SetConfig+0x4d6>
 80081a6:	bf00      	nop
 80081a8:	40011000 	.word	0x40011000
 80081ac:	40011400 	.word	0x40011400
 80081b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80081b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081b8:	2200      	movs	r2, #0
 80081ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80081be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80081c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80081c6:	4642      	mov	r2, r8
 80081c8:	464b      	mov	r3, r9
 80081ca:	1891      	adds	r1, r2, r2
 80081cc:	6239      	str	r1, [r7, #32]
 80081ce:	415b      	adcs	r3, r3
 80081d0:	627b      	str	r3, [r7, #36]	; 0x24
 80081d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80081d6:	4641      	mov	r1, r8
 80081d8:	1854      	adds	r4, r2, r1
 80081da:	4649      	mov	r1, r9
 80081dc:	eb43 0501 	adc.w	r5, r3, r1
 80081e0:	f04f 0200 	mov.w	r2, #0
 80081e4:	f04f 0300 	mov.w	r3, #0
 80081e8:	00eb      	lsls	r3, r5, #3
 80081ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80081ee:	00e2      	lsls	r2, r4, #3
 80081f0:	4614      	mov	r4, r2
 80081f2:	461d      	mov	r5, r3
 80081f4:	4643      	mov	r3, r8
 80081f6:	18e3      	adds	r3, r4, r3
 80081f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80081fc:	464b      	mov	r3, r9
 80081fe:	eb45 0303 	adc.w	r3, r5, r3
 8008202:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008212:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008216:	f04f 0200 	mov.w	r2, #0
 800821a:	f04f 0300 	mov.w	r3, #0
 800821e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008222:	4629      	mov	r1, r5
 8008224:	008b      	lsls	r3, r1, #2
 8008226:	4621      	mov	r1, r4
 8008228:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800822c:	4621      	mov	r1, r4
 800822e:	008a      	lsls	r2, r1, #2
 8008230:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008234:	f7f8 f82c 	bl	8000290 <__aeabi_uldivmod>
 8008238:	4602      	mov	r2, r0
 800823a:	460b      	mov	r3, r1
 800823c:	4b60      	ldr	r3, [pc, #384]	; (80083c0 <UART_SetConfig+0x4e4>)
 800823e:	fba3 2302 	umull	r2, r3, r3, r2
 8008242:	095b      	lsrs	r3, r3, #5
 8008244:	011c      	lsls	r4, r3, #4
 8008246:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800824a:	2200      	movs	r2, #0
 800824c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008250:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008254:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008258:	4642      	mov	r2, r8
 800825a:	464b      	mov	r3, r9
 800825c:	1891      	adds	r1, r2, r2
 800825e:	61b9      	str	r1, [r7, #24]
 8008260:	415b      	adcs	r3, r3
 8008262:	61fb      	str	r3, [r7, #28]
 8008264:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008268:	4641      	mov	r1, r8
 800826a:	1851      	adds	r1, r2, r1
 800826c:	6139      	str	r1, [r7, #16]
 800826e:	4649      	mov	r1, r9
 8008270:	414b      	adcs	r3, r1
 8008272:	617b      	str	r3, [r7, #20]
 8008274:	f04f 0200 	mov.w	r2, #0
 8008278:	f04f 0300 	mov.w	r3, #0
 800827c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008280:	4659      	mov	r1, fp
 8008282:	00cb      	lsls	r3, r1, #3
 8008284:	4651      	mov	r1, sl
 8008286:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800828a:	4651      	mov	r1, sl
 800828c:	00ca      	lsls	r2, r1, #3
 800828e:	4610      	mov	r0, r2
 8008290:	4619      	mov	r1, r3
 8008292:	4603      	mov	r3, r0
 8008294:	4642      	mov	r2, r8
 8008296:	189b      	adds	r3, r3, r2
 8008298:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800829c:	464b      	mov	r3, r9
 800829e:	460a      	mov	r2, r1
 80082a0:	eb42 0303 	adc.w	r3, r2, r3
 80082a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80082a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80082b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80082b4:	f04f 0200 	mov.w	r2, #0
 80082b8:	f04f 0300 	mov.w	r3, #0
 80082bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80082c0:	4649      	mov	r1, r9
 80082c2:	008b      	lsls	r3, r1, #2
 80082c4:	4641      	mov	r1, r8
 80082c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80082ca:	4641      	mov	r1, r8
 80082cc:	008a      	lsls	r2, r1, #2
 80082ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80082d2:	f7f7 ffdd 	bl	8000290 <__aeabi_uldivmod>
 80082d6:	4602      	mov	r2, r0
 80082d8:	460b      	mov	r3, r1
 80082da:	4b39      	ldr	r3, [pc, #228]	; (80083c0 <UART_SetConfig+0x4e4>)
 80082dc:	fba3 1302 	umull	r1, r3, r3, r2
 80082e0:	095b      	lsrs	r3, r3, #5
 80082e2:	2164      	movs	r1, #100	; 0x64
 80082e4:	fb01 f303 	mul.w	r3, r1, r3
 80082e8:	1ad3      	subs	r3, r2, r3
 80082ea:	011b      	lsls	r3, r3, #4
 80082ec:	3332      	adds	r3, #50	; 0x32
 80082ee:	4a34      	ldr	r2, [pc, #208]	; (80083c0 <UART_SetConfig+0x4e4>)
 80082f0:	fba2 2303 	umull	r2, r3, r2, r3
 80082f4:	095b      	lsrs	r3, r3, #5
 80082f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80082fa:	441c      	add	r4, r3
 80082fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008300:	2200      	movs	r2, #0
 8008302:	673b      	str	r3, [r7, #112]	; 0x70
 8008304:	677a      	str	r2, [r7, #116]	; 0x74
 8008306:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800830a:	4642      	mov	r2, r8
 800830c:	464b      	mov	r3, r9
 800830e:	1891      	adds	r1, r2, r2
 8008310:	60b9      	str	r1, [r7, #8]
 8008312:	415b      	adcs	r3, r3
 8008314:	60fb      	str	r3, [r7, #12]
 8008316:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800831a:	4641      	mov	r1, r8
 800831c:	1851      	adds	r1, r2, r1
 800831e:	6039      	str	r1, [r7, #0]
 8008320:	4649      	mov	r1, r9
 8008322:	414b      	adcs	r3, r1
 8008324:	607b      	str	r3, [r7, #4]
 8008326:	f04f 0200 	mov.w	r2, #0
 800832a:	f04f 0300 	mov.w	r3, #0
 800832e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008332:	4659      	mov	r1, fp
 8008334:	00cb      	lsls	r3, r1, #3
 8008336:	4651      	mov	r1, sl
 8008338:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800833c:	4651      	mov	r1, sl
 800833e:	00ca      	lsls	r2, r1, #3
 8008340:	4610      	mov	r0, r2
 8008342:	4619      	mov	r1, r3
 8008344:	4603      	mov	r3, r0
 8008346:	4642      	mov	r2, r8
 8008348:	189b      	adds	r3, r3, r2
 800834a:	66bb      	str	r3, [r7, #104]	; 0x68
 800834c:	464b      	mov	r3, r9
 800834e:	460a      	mov	r2, r1
 8008350:	eb42 0303 	adc.w	r3, r2, r3
 8008354:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	2200      	movs	r2, #0
 800835e:	663b      	str	r3, [r7, #96]	; 0x60
 8008360:	667a      	str	r2, [r7, #100]	; 0x64
 8008362:	f04f 0200 	mov.w	r2, #0
 8008366:	f04f 0300 	mov.w	r3, #0
 800836a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800836e:	4649      	mov	r1, r9
 8008370:	008b      	lsls	r3, r1, #2
 8008372:	4641      	mov	r1, r8
 8008374:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008378:	4641      	mov	r1, r8
 800837a:	008a      	lsls	r2, r1, #2
 800837c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008380:	f7f7 ff86 	bl	8000290 <__aeabi_uldivmod>
 8008384:	4602      	mov	r2, r0
 8008386:	460b      	mov	r3, r1
 8008388:	4b0d      	ldr	r3, [pc, #52]	; (80083c0 <UART_SetConfig+0x4e4>)
 800838a:	fba3 1302 	umull	r1, r3, r3, r2
 800838e:	095b      	lsrs	r3, r3, #5
 8008390:	2164      	movs	r1, #100	; 0x64
 8008392:	fb01 f303 	mul.w	r3, r1, r3
 8008396:	1ad3      	subs	r3, r2, r3
 8008398:	011b      	lsls	r3, r3, #4
 800839a:	3332      	adds	r3, #50	; 0x32
 800839c:	4a08      	ldr	r2, [pc, #32]	; (80083c0 <UART_SetConfig+0x4e4>)
 800839e:	fba2 2303 	umull	r2, r3, r2, r3
 80083a2:	095b      	lsrs	r3, r3, #5
 80083a4:	f003 020f 	and.w	r2, r3, #15
 80083a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4422      	add	r2, r4
 80083b0:	609a      	str	r2, [r3, #8]
}
 80083b2:	bf00      	nop
 80083b4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80083b8:	46bd      	mov	sp, r7
 80083ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083be:	bf00      	nop
 80083c0:	51eb851f 	.word	0x51eb851f

080083c4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(uint8_t ipSet_1,uint8_t ipSet_2,uint8_t ipSet_3,uint8_t ipSet_4)
{
 80083c4:	b590      	push	{r4, r7, lr}
 80083c6:	b087      	sub	sp, #28
 80083c8:	af04      	add	r7, sp, #16
 80083ca:	4604      	mov	r4, r0
 80083cc:	4608      	mov	r0, r1
 80083ce:	4611      	mov	r1, r2
 80083d0:	461a      	mov	r2, r3
 80083d2:	4623      	mov	r3, r4
 80083d4:	71fb      	strb	r3, [r7, #7]
 80083d6:	4603      	mov	r3, r0
 80083d8:	71bb      	strb	r3, [r7, #6]
 80083da:	460b      	mov	r3, r1
 80083dc:	717b      	strb	r3, [r7, #5]
 80083de:	4613      	mov	r3, r2
 80083e0:	713b      	strb	r3, [r7, #4]
  /* IP addresses initialization */
  IP_ADDRESS[0] = ipSet_1;
 80083e2:	4a8e      	ldr	r2, [pc, #568]	; (800861c <MX_LWIP_Init+0x258>)
 80083e4:	79fb      	ldrb	r3, [r7, #7]
 80083e6:	7013      	strb	r3, [r2, #0]
  IP_ADDRESS[1] = ipSet_2;
 80083e8:	4a8c      	ldr	r2, [pc, #560]	; (800861c <MX_LWIP_Init+0x258>)
 80083ea:	79bb      	ldrb	r3, [r7, #6]
 80083ec:	7053      	strb	r3, [r2, #1]
  IP_ADDRESS[2] = ipSet_3;
 80083ee:	4a8b      	ldr	r2, [pc, #556]	; (800861c <MX_LWIP_Init+0x258>)
 80083f0:	797b      	ldrb	r3, [r7, #5]
 80083f2:	7093      	strb	r3, [r2, #2]
  IP_ADDRESS[3] = ipSet_4;
 80083f4:	4a89      	ldr	r2, [pc, #548]	; (800861c <MX_LWIP_Init+0x258>)
 80083f6:	793b      	ldrb	r3, [r7, #4]
 80083f8:	70d3      	strb	r3, [r2, #3]
  NETMASK_ADDRESS[0] = 255;
 80083fa:	4b89      	ldr	r3, [pc, #548]	; (8008620 <MX_LWIP_Init+0x25c>)
 80083fc:	22ff      	movs	r2, #255	; 0xff
 80083fe:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8008400:	4b87      	ldr	r3, [pc, #540]	; (8008620 <MX_LWIP_Init+0x25c>)
 8008402:	22ff      	movs	r2, #255	; 0xff
 8008404:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8008406:	4b86      	ldr	r3, [pc, #536]	; (8008620 <MX_LWIP_Init+0x25c>)
 8008408:	22ff      	movs	r2, #255	; 0xff
 800840a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800840c:	4b84      	ldr	r3, [pc, #528]	; (8008620 <MX_LWIP_Init+0x25c>)
 800840e:	2200      	movs	r2, #0
 8008410:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8008412:	4b84      	ldr	r3, [pc, #528]	; (8008624 <MX_LWIP_Init+0x260>)
 8008414:	2200      	movs	r2, #0
 8008416:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8008418:	4b82      	ldr	r3, [pc, #520]	; (8008624 <MX_LWIP_Init+0x260>)
 800841a:	2200      	movs	r2, #0
 800841c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800841e:	4b81      	ldr	r3, [pc, #516]	; (8008624 <MX_LWIP_Init+0x260>)
 8008420:	2200      	movs	r2, #0
 8008422:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8008424:	4b7f      	ldr	r3, [pc, #508]	; (8008624 <MX_LWIP_Init+0x260>)
 8008426:	2200      	movs	r2, #0
 8008428:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800842a:	f000 fcff 	bl	8008e2c <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800842e:	4b7b      	ldr	r3, [pc, #492]	; (800861c <MX_LWIP_Init+0x258>)
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	061a      	lsls	r2, r3, #24
 8008434:	4b79      	ldr	r3, [pc, #484]	; (800861c <MX_LWIP_Init+0x258>)
 8008436:	785b      	ldrb	r3, [r3, #1]
 8008438:	041b      	lsls	r3, r3, #16
 800843a:	431a      	orrs	r2, r3
 800843c:	4b77      	ldr	r3, [pc, #476]	; (800861c <MX_LWIP_Init+0x258>)
 800843e:	789b      	ldrb	r3, [r3, #2]
 8008440:	021b      	lsls	r3, r3, #8
 8008442:	4313      	orrs	r3, r2
 8008444:	4a75      	ldr	r2, [pc, #468]	; (800861c <MX_LWIP_Init+0x258>)
 8008446:	78d2      	ldrb	r2, [r2, #3]
 8008448:	4313      	orrs	r3, r2
 800844a:	061a      	lsls	r2, r3, #24
 800844c:	4b73      	ldr	r3, [pc, #460]	; (800861c <MX_LWIP_Init+0x258>)
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	0619      	lsls	r1, r3, #24
 8008452:	4b72      	ldr	r3, [pc, #456]	; (800861c <MX_LWIP_Init+0x258>)
 8008454:	785b      	ldrb	r3, [r3, #1]
 8008456:	041b      	lsls	r3, r3, #16
 8008458:	4319      	orrs	r1, r3
 800845a:	4b70      	ldr	r3, [pc, #448]	; (800861c <MX_LWIP_Init+0x258>)
 800845c:	789b      	ldrb	r3, [r3, #2]
 800845e:	021b      	lsls	r3, r3, #8
 8008460:	430b      	orrs	r3, r1
 8008462:	496e      	ldr	r1, [pc, #440]	; (800861c <MX_LWIP_Init+0x258>)
 8008464:	78c9      	ldrb	r1, [r1, #3]
 8008466:	430b      	orrs	r3, r1
 8008468:	021b      	lsls	r3, r3, #8
 800846a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800846e:	431a      	orrs	r2, r3
 8008470:	4b6a      	ldr	r3, [pc, #424]	; (800861c <MX_LWIP_Init+0x258>)
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	0619      	lsls	r1, r3, #24
 8008476:	4b69      	ldr	r3, [pc, #420]	; (800861c <MX_LWIP_Init+0x258>)
 8008478:	785b      	ldrb	r3, [r3, #1]
 800847a:	041b      	lsls	r3, r3, #16
 800847c:	4319      	orrs	r1, r3
 800847e:	4b67      	ldr	r3, [pc, #412]	; (800861c <MX_LWIP_Init+0x258>)
 8008480:	789b      	ldrb	r3, [r3, #2]
 8008482:	021b      	lsls	r3, r3, #8
 8008484:	430b      	orrs	r3, r1
 8008486:	4965      	ldr	r1, [pc, #404]	; (800861c <MX_LWIP_Init+0x258>)
 8008488:	78c9      	ldrb	r1, [r1, #3]
 800848a:	430b      	orrs	r3, r1
 800848c:	0a1b      	lsrs	r3, r3, #8
 800848e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008492:	431a      	orrs	r2, r3
 8008494:	4b61      	ldr	r3, [pc, #388]	; (800861c <MX_LWIP_Init+0x258>)
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	0619      	lsls	r1, r3, #24
 800849a:	4b60      	ldr	r3, [pc, #384]	; (800861c <MX_LWIP_Init+0x258>)
 800849c:	785b      	ldrb	r3, [r3, #1]
 800849e:	041b      	lsls	r3, r3, #16
 80084a0:	4319      	orrs	r1, r3
 80084a2:	4b5e      	ldr	r3, [pc, #376]	; (800861c <MX_LWIP_Init+0x258>)
 80084a4:	789b      	ldrb	r3, [r3, #2]
 80084a6:	021b      	lsls	r3, r3, #8
 80084a8:	430b      	orrs	r3, r1
 80084aa:	495c      	ldr	r1, [pc, #368]	; (800861c <MX_LWIP_Init+0x258>)
 80084ac:	78c9      	ldrb	r1, [r1, #3]
 80084ae:	430b      	orrs	r3, r1
 80084b0:	0e1b      	lsrs	r3, r3, #24
 80084b2:	4313      	orrs	r3, r2
 80084b4:	4a5c      	ldr	r2, [pc, #368]	; (8008628 <MX_LWIP_Init+0x264>)
 80084b6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80084b8:	4b59      	ldr	r3, [pc, #356]	; (8008620 <MX_LWIP_Init+0x25c>)
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	061a      	lsls	r2, r3, #24
 80084be:	4b58      	ldr	r3, [pc, #352]	; (8008620 <MX_LWIP_Init+0x25c>)
 80084c0:	785b      	ldrb	r3, [r3, #1]
 80084c2:	041b      	lsls	r3, r3, #16
 80084c4:	431a      	orrs	r2, r3
 80084c6:	4b56      	ldr	r3, [pc, #344]	; (8008620 <MX_LWIP_Init+0x25c>)
 80084c8:	789b      	ldrb	r3, [r3, #2]
 80084ca:	021b      	lsls	r3, r3, #8
 80084cc:	4313      	orrs	r3, r2
 80084ce:	4a54      	ldr	r2, [pc, #336]	; (8008620 <MX_LWIP_Init+0x25c>)
 80084d0:	78d2      	ldrb	r2, [r2, #3]
 80084d2:	4313      	orrs	r3, r2
 80084d4:	061a      	lsls	r2, r3, #24
 80084d6:	4b52      	ldr	r3, [pc, #328]	; (8008620 <MX_LWIP_Init+0x25c>)
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	0619      	lsls	r1, r3, #24
 80084dc:	4b50      	ldr	r3, [pc, #320]	; (8008620 <MX_LWIP_Init+0x25c>)
 80084de:	785b      	ldrb	r3, [r3, #1]
 80084e0:	041b      	lsls	r3, r3, #16
 80084e2:	4319      	orrs	r1, r3
 80084e4:	4b4e      	ldr	r3, [pc, #312]	; (8008620 <MX_LWIP_Init+0x25c>)
 80084e6:	789b      	ldrb	r3, [r3, #2]
 80084e8:	021b      	lsls	r3, r3, #8
 80084ea:	430b      	orrs	r3, r1
 80084ec:	494c      	ldr	r1, [pc, #304]	; (8008620 <MX_LWIP_Init+0x25c>)
 80084ee:	78c9      	ldrb	r1, [r1, #3]
 80084f0:	430b      	orrs	r3, r1
 80084f2:	021b      	lsls	r3, r3, #8
 80084f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80084f8:	431a      	orrs	r2, r3
 80084fa:	4b49      	ldr	r3, [pc, #292]	; (8008620 <MX_LWIP_Init+0x25c>)
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	0619      	lsls	r1, r3, #24
 8008500:	4b47      	ldr	r3, [pc, #284]	; (8008620 <MX_LWIP_Init+0x25c>)
 8008502:	785b      	ldrb	r3, [r3, #1]
 8008504:	041b      	lsls	r3, r3, #16
 8008506:	4319      	orrs	r1, r3
 8008508:	4b45      	ldr	r3, [pc, #276]	; (8008620 <MX_LWIP_Init+0x25c>)
 800850a:	789b      	ldrb	r3, [r3, #2]
 800850c:	021b      	lsls	r3, r3, #8
 800850e:	430b      	orrs	r3, r1
 8008510:	4943      	ldr	r1, [pc, #268]	; (8008620 <MX_LWIP_Init+0x25c>)
 8008512:	78c9      	ldrb	r1, [r1, #3]
 8008514:	430b      	orrs	r3, r1
 8008516:	0a1b      	lsrs	r3, r3, #8
 8008518:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800851c:	431a      	orrs	r2, r3
 800851e:	4b40      	ldr	r3, [pc, #256]	; (8008620 <MX_LWIP_Init+0x25c>)
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	0619      	lsls	r1, r3, #24
 8008524:	4b3e      	ldr	r3, [pc, #248]	; (8008620 <MX_LWIP_Init+0x25c>)
 8008526:	785b      	ldrb	r3, [r3, #1]
 8008528:	041b      	lsls	r3, r3, #16
 800852a:	4319      	orrs	r1, r3
 800852c:	4b3c      	ldr	r3, [pc, #240]	; (8008620 <MX_LWIP_Init+0x25c>)
 800852e:	789b      	ldrb	r3, [r3, #2]
 8008530:	021b      	lsls	r3, r3, #8
 8008532:	430b      	orrs	r3, r1
 8008534:	493a      	ldr	r1, [pc, #232]	; (8008620 <MX_LWIP_Init+0x25c>)
 8008536:	78c9      	ldrb	r1, [r1, #3]
 8008538:	430b      	orrs	r3, r1
 800853a:	0e1b      	lsrs	r3, r3, #24
 800853c:	4313      	orrs	r3, r2
 800853e:	4a3b      	ldr	r2, [pc, #236]	; (800862c <MX_LWIP_Init+0x268>)
 8008540:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8008542:	4b38      	ldr	r3, [pc, #224]	; (8008624 <MX_LWIP_Init+0x260>)
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	061a      	lsls	r2, r3, #24
 8008548:	4b36      	ldr	r3, [pc, #216]	; (8008624 <MX_LWIP_Init+0x260>)
 800854a:	785b      	ldrb	r3, [r3, #1]
 800854c:	041b      	lsls	r3, r3, #16
 800854e:	431a      	orrs	r2, r3
 8008550:	4b34      	ldr	r3, [pc, #208]	; (8008624 <MX_LWIP_Init+0x260>)
 8008552:	789b      	ldrb	r3, [r3, #2]
 8008554:	021b      	lsls	r3, r3, #8
 8008556:	4313      	orrs	r3, r2
 8008558:	4a32      	ldr	r2, [pc, #200]	; (8008624 <MX_LWIP_Init+0x260>)
 800855a:	78d2      	ldrb	r2, [r2, #3]
 800855c:	4313      	orrs	r3, r2
 800855e:	061a      	lsls	r2, r3, #24
 8008560:	4b30      	ldr	r3, [pc, #192]	; (8008624 <MX_LWIP_Init+0x260>)
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	0619      	lsls	r1, r3, #24
 8008566:	4b2f      	ldr	r3, [pc, #188]	; (8008624 <MX_LWIP_Init+0x260>)
 8008568:	785b      	ldrb	r3, [r3, #1]
 800856a:	041b      	lsls	r3, r3, #16
 800856c:	4319      	orrs	r1, r3
 800856e:	4b2d      	ldr	r3, [pc, #180]	; (8008624 <MX_LWIP_Init+0x260>)
 8008570:	789b      	ldrb	r3, [r3, #2]
 8008572:	021b      	lsls	r3, r3, #8
 8008574:	430b      	orrs	r3, r1
 8008576:	492b      	ldr	r1, [pc, #172]	; (8008624 <MX_LWIP_Init+0x260>)
 8008578:	78c9      	ldrb	r1, [r1, #3]
 800857a:	430b      	orrs	r3, r1
 800857c:	021b      	lsls	r3, r3, #8
 800857e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008582:	431a      	orrs	r2, r3
 8008584:	4b27      	ldr	r3, [pc, #156]	; (8008624 <MX_LWIP_Init+0x260>)
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	0619      	lsls	r1, r3, #24
 800858a:	4b26      	ldr	r3, [pc, #152]	; (8008624 <MX_LWIP_Init+0x260>)
 800858c:	785b      	ldrb	r3, [r3, #1]
 800858e:	041b      	lsls	r3, r3, #16
 8008590:	4319      	orrs	r1, r3
 8008592:	4b24      	ldr	r3, [pc, #144]	; (8008624 <MX_LWIP_Init+0x260>)
 8008594:	789b      	ldrb	r3, [r3, #2]
 8008596:	021b      	lsls	r3, r3, #8
 8008598:	430b      	orrs	r3, r1
 800859a:	4922      	ldr	r1, [pc, #136]	; (8008624 <MX_LWIP_Init+0x260>)
 800859c:	78c9      	ldrb	r1, [r1, #3]
 800859e:	430b      	orrs	r3, r1
 80085a0:	0a1b      	lsrs	r3, r3, #8
 80085a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80085a6:	431a      	orrs	r2, r3
 80085a8:	4b1e      	ldr	r3, [pc, #120]	; (8008624 <MX_LWIP_Init+0x260>)
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	0619      	lsls	r1, r3, #24
 80085ae:	4b1d      	ldr	r3, [pc, #116]	; (8008624 <MX_LWIP_Init+0x260>)
 80085b0:	785b      	ldrb	r3, [r3, #1]
 80085b2:	041b      	lsls	r3, r3, #16
 80085b4:	4319      	orrs	r1, r3
 80085b6:	4b1b      	ldr	r3, [pc, #108]	; (8008624 <MX_LWIP_Init+0x260>)
 80085b8:	789b      	ldrb	r3, [r3, #2]
 80085ba:	021b      	lsls	r3, r3, #8
 80085bc:	430b      	orrs	r3, r1
 80085be:	4919      	ldr	r1, [pc, #100]	; (8008624 <MX_LWIP_Init+0x260>)
 80085c0:	78c9      	ldrb	r1, [r1, #3]
 80085c2:	430b      	orrs	r3, r1
 80085c4:	0e1b      	lsrs	r3, r3, #24
 80085c6:	4313      	orrs	r3, r2
 80085c8:	4a19      	ldr	r2, [pc, #100]	; (8008630 <MX_LWIP_Init+0x26c>)
 80085ca:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80085cc:	4b19      	ldr	r3, [pc, #100]	; (8008634 <MX_LWIP_Init+0x270>)
 80085ce:	9302      	str	r3, [sp, #8]
 80085d0:	4b19      	ldr	r3, [pc, #100]	; (8008638 <MX_LWIP_Init+0x274>)
 80085d2:	9301      	str	r3, [sp, #4]
 80085d4:	2300      	movs	r3, #0
 80085d6:	9300      	str	r3, [sp, #0]
 80085d8:	4b15      	ldr	r3, [pc, #84]	; (8008630 <MX_LWIP_Init+0x26c>)
 80085da:	4a14      	ldr	r2, [pc, #80]	; (800862c <MX_LWIP_Init+0x268>)
 80085dc:	4912      	ldr	r1, [pc, #72]	; (8008628 <MX_LWIP_Init+0x264>)
 80085de:	4817      	ldr	r0, [pc, #92]	; (800863c <MX_LWIP_Init+0x278>)
 80085e0:	f001 f910 	bl	8009804 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80085e4:	4815      	ldr	r0, [pc, #84]	; (800863c <MX_LWIP_Init+0x278>)
 80085e6:	f001 fabf 	bl	8009b68 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80085ea:	4b14      	ldr	r3, [pc, #80]	; (800863c <MX_LWIP_Init+0x278>)
 80085ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80085f0:	089b      	lsrs	r3, r3, #2
 80085f2:	f003 0301 	and.w	r3, r3, #1
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d003      	beq.n	8008604 <MX_LWIP_Init+0x240>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80085fc:	480f      	ldr	r0, [pc, #60]	; (800863c <MX_LWIP_Init+0x278>)
 80085fe:	f001 fac3 	bl	8009b88 <netif_set_up>
 8008602:	e002      	b.n	800860a <MX_LWIP_Init+0x246>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8008604:	480d      	ldr	r0, [pc, #52]	; (800863c <MX_LWIP_Init+0x278>)
 8008606:	f001 fb2b 	bl	8009c60 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800860a:	490d      	ldr	r1, [pc, #52]	; (8008640 <MX_LWIP_Init+0x27c>)
 800860c:	480b      	ldr	r0, [pc, #44]	; (800863c <MX_LWIP_Init+0x278>)
 800860e:	f001 fbbd 	bl	8009d8c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8008612:	bf00      	nop
 8008614:	370c      	adds	r7, #12
 8008616:	46bd      	mov	sp, r7
 8008618:	bd90      	pop	{r4, r7, pc}
 800861a:	bf00      	nop
 800861c:	2000047c 	.word	0x2000047c
 8008620:	20000480 	.word	0x20000480
 8008624:	20000484 	.word	0x20000484
 8008628:	20000470 	.word	0x20000470
 800862c:	20000474 	.word	0x20000474
 8008630:	20000478 	.word	0x20000478
 8008634:	08013459 	.word	0x08013459
 8008638:	08008901 	.word	0x08008901
 800863c:	2000022c 	.word	0x2000022c
 8008640:	08008645 	.word	0x08008645

08008644 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8008644:	b480      	push	{r7}
 8008646:	b083      	sub	sp, #12
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800864c:	bf00      	nop
 800864e:	370c      	adds	r7, #12
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8008660:	2300      	movs	r3, #0
 8008662:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8008664:	4b40      	ldr	r3, [pc, #256]	; (8008768 <low_level_init+0x110>)
 8008666:	4a41      	ldr	r2, [pc, #260]	; (800876c <low_level_init+0x114>)
 8008668:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800866a:	2300      	movs	r3, #0
 800866c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800866e:	2380      	movs	r3, #128	; 0x80
 8008670:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8008672:	23e1      	movs	r3, #225	; 0xe1
 8008674:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8008676:	2300      	movs	r3, #0
 8008678:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800867a:	2300      	movs	r3, #0
 800867c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800867e:	2300      	movs	r3, #0
 8008680:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8008682:	4a39      	ldr	r2, [pc, #228]	; (8008768 <low_level_init+0x110>)
 8008684:	f107 0308 	add.w	r3, r7, #8
 8008688:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800868a:	4b37      	ldr	r3, [pc, #220]	; (8008768 <low_level_init+0x110>)
 800868c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8008690:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8008692:	4b35      	ldr	r3, [pc, #212]	; (8008768 <low_level_init+0x110>)
 8008694:	4a36      	ldr	r2, [pc, #216]	; (8008770 <low_level_init+0x118>)
 8008696:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8008698:	4b33      	ldr	r3, [pc, #204]	; (8008768 <low_level_init+0x110>)
 800869a:	4a36      	ldr	r2, [pc, #216]	; (8008774 <low_level_init+0x11c>)
 800869c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800869e:	4b32      	ldr	r3, [pc, #200]	; (8008768 <low_level_init+0x110>)
 80086a0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80086a4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80086a6:	4830      	ldr	r0, [pc, #192]	; (8008768 <low_level_init+0x110>)
 80086a8:	f7fa fd06 	bl	80030b8 <HAL_ETH_Init>
 80086ac:	4603      	mov	r3, r0
 80086ae:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80086b0:	2238      	movs	r2, #56	; 0x38
 80086b2:	2100      	movs	r1, #0
 80086b4:	4830      	ldr	r0, [pc, #192]	; (8008778 <low_level_init+0x120>)
 80086b6:	f00a ffe7 	bl	8013688 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80086ba:	4b2f      	ldr	r3, [pc, #188]	; (8008778 <low_level_init+0x120>)
 80086bc:	2221      	movs	r2, #33	; 0x21
 80086be:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80086c0:	4b2d      	ldr	r3, [pc, #180]	; (8008778 <low_level_init+0x120>)
 80086c2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80086c6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80086c8:	4b2b      	ldr	r3, [pc, #172]	; (8008778 <low_level_init+0x120>)
 80086ca:	2200      	movs	r2, #0
 80086cc:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80086ce:	482b      	ldr	r0, [pc, #172]	; (800877c <low_level_init+0x124>)
 80086d0:	f000 ff60 	bl	8009594 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2206      	movs	r2, #6
 80086d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80086dc:	4b22      	ldr	r3, [pc, #136]	; (8008768 <low_level_init+0x110>)
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	781a      	ldrb	r2, [r3, #0]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80086e8:	4b1f      	ldr	r3, [pc, #124]	; (8008768 <low_level_init+0x110>)
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	785a      	ldrb	r2, [r3, #1]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80086f4:	4b1c      	ldr	r3, [pc, #112]	; (8008768 <low_level_init+0x110>)
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	789a      	ldrb	r2, [r3, #2]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8008700:	4b19      	ldr	r3, [pc, #100]	; (8008768 <low_level_init+0x110>)
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	78da      	ldrb	r2, [r3, #3]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800870c:	4b16      	ldr	r3, [pc, #88]	; (8008768 <low_level_init+0x110>)
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	791a      	ldrb	r2, [r3, #4]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8008718:	4b13      	ldr	r3, [pc, #76]	; (8008768 <low_level_init+0x110>)
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	795a      	ldrb	r2, [r3, #5]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800872a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008732:	f043 030a 	orr.w	r3, r3, #10
 8008736:	b2da      	uxtb	r2, r3
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800873e:	4910      	ldr	r1, [pc, #64]	; (8008780 <low_level_init+0x128>)
 8008740:	4810      	ldr	r0, [pc, #64]	; (8008784 <low_level_init+0x12c>)
 8008742:	f7fa f924 	bl	800298e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8008746:	480f      	ldr	r0, [pc, #60]	; (8008784 <low_level_init+0x12c>)
 8008748:	f7fa f953 	bl	80029f2 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800874c:	7bfb      	ldrb	r3, [r7, #15]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d103      	bne.n	800875a <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 fa40 	bl	8008bd8 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8008758:	e001      	b.n	800875e <low_level_init+0x106>
    Error_Handler();
 800875a:	f7f9 fe0b 	bl	8002374 <Error_Handler>
}
 800875e:	bf00      	nop
 8008760:	3710      	adds	r7, #16
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	20004f54 	.word	0x20004f54
 800876c:	40028000 	.word	0x40028000
 8008770:	20004eb4 	.word	0x20004eb4
 8008774:	20004e14 	.word	0x20004e14
 8008778:	20005004 	.word	0x20005004
 800877c:	08017198 	.word	0x08017198
 8008780:	20000020 	.word	0x20000020
 8008784:	2000503c 	.word	0x2000503c

08008788 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b092      	sub	sp, #72	; 0x48
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8008792:	2300      	movs	r3, #0
 8008794:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8008796:	2300      	movs	r3, #0
 8008798:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800879a:	2300      	movs	r3, #0
 800879c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80087a0:	f107 030c 	add.w	r3, r7, #12
 80087a4:	2230      	movs	r2, #48	; 0x30
 80087a6:	2100      	movs	r1, #0
 80087a8:	4618      	mov	r0, r3
 80087aa:	f00a ff6d 	bl	8013688 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80087ae:	f107 030c 	add.w	r3, r7, #12
 80087b2:	2230      	movs	r2, #48	; 0x30
 80087b4:	2100      	movs	r1, #0
 80087b6:	4618      	mov	r0, r3
 80087b8:	f00a ff66 	bl	8013688 <memset>

  for(q = p; q != NULL; q = q->next)
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	643b      	str	r3, [r7, #64]	; 0x40
 80087c0:	e045      	b.n	800884e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80087c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087c4:	2b03      	cmp	r3, #3
 80087c6:	d902      	bls.n	80087ce <low_level_output+0x46>
      return ERR_IF;
 80087c8:	f06f 030b 	mvn.w	r3, #11
 80087cc:	e055      	b.n	800887a <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80087ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087d0:	6859      	ldr	r1, [r3, #4]
 80087d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087d4:	4613      	mov	r3, r2
 80087d6:	005b      	lsls	r3, r3, #1
 80087d8:	4413      	add	r3, r2
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	3348      	adds	r3, #72	; 0x48
 80087de:	443b      	add	r3, r7
 80087e0:	3b3c      	subs	r3, #60	; 0x3c
 80087e2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80087e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087e6:	895b      	ldrh	r3, [r3, #10]
 80087e8:	4619      	mov	r1, r3
 80087ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087ec:	4613      	mov	r3, r2
 80087ee:	005b      	lsls	r3, r3, #1
 80087f0:	4413      	add	r3, r2
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	3348      	adds	r3, #72	; 0x48
 80087f6:	443b      	add	r3, r7
 80087f8:	3b38      	subs	r3, #56	; 0x38
 80087fa:	6019      	str	r1, [r3, #0]

    if(i>0)
 80087fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d011      	beq.n	8008826 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8008802:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008804:	1e5a      	subs	r2, r3, #1
 8008806:	f107 000c 	add.w	r0, r7, #12
 800880a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800880c:	460b      	mov	r3, r1
 800880e:	005b      	lsls	r3, r3, #1
 8008810:	440b      	add	r3, r1
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	18c1      	adds	r1, r0, r3
 8008816:	4613      	mov	r3, r2
 8008818:	005b      	lsls	r3, r3, #1
 800881a:	4413      	add	r3, r2
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	3348      	adds	r3, #72	; 0x48
 8008820:	443b      	add	r3, r7
 8008822:	3b34      	subs	r3, #52	; 0x34
 8008824:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8008826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d109      	bne.n	8008842 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800882e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008830:	4613      	mov	r3, r2
 8008832:	005b      	lsls	r3, r3, #1
 8008834:	4413      	add	r3, r2
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	3348      	adds	r3, #72	; 0x48
 800883a:	443b      	add	r3, r7
 800883c:	3b34      	subs	r3, #52	; 0x34
 800883e:	2200      	movs	r2, #0
 8008840:	601a      	str	r2, [r3, #0]
    }

    i++;
 8008842:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008844:	3301      	adds	r3, #1
 8008846:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8008848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	643b      	str	r3, [r7, #64]	; 0x40
 800884e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008850:	2b00      	cmp	r3, #0
 8008852:	d1b6      	bne.n	80087c2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	891b      	ldrh	r3, [r3, #8]
 8008858:	461a      	mov	r2, r3
 800885a:	4b0a      	ldr	r3, [pc, #40]	; (8008884 <low_level_output+0xfc>)
 800885c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800885e:	4a09      	ldr	r2, [pc, #36]	; (8008884 <low_level_output+0xfc>)
 8008860:	f107 030c 	add.w	r3, r7, #12
 8008864:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8008866:	4a07      	ldr	r2, [pc, #28]	; (8008884 <low_level_output+0xfc>)
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800886c:	2214      	movs	r2, #20
 800886e:	4905      	ldr	r1, [pc, #20]	; (8008884 <low_level_output+0xfc>)
 8008870:	4805      	ldr	r0, [pc, #20]	; (8008888 <low_level_output+0x100>)
 8008872:	f7fa fd57 	bl	8003324 <HAL_ETH_Transmit>

  return errval;
 8008876:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800887a:	4618      	mov	r0, r3
 800887c:	3748      	adds	r7, #72	; 0x48
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop
 8008884:	20005004 	.word	0x20005004
 8008888:	20004f54 	.word	0x20004f54

0800888c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b084      	sub	sp, #16
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008894:	2300      	movs	r3, #0
 8008896:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8008898:	4b07      	ldr	r3, [pc, #28]	; (80088b8 <low_level_input+0x2c>)
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d105      	bne.n	80088ac <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80088a0:	f107 030c 	add.w	r3, r7, #12
 80088a4:	4619      	mov	r1, r3
 80088a6:	4805      	ldr	r0, [pc, #20]	; (80088bc <low_level_input+0x30>)
 80088a8:	f7fa fdd0 	bl	800344c <HAL_ETH_ReadData>
  }

  return p;
 80088ac:	68fb      	ldr	r3, [r7, #12]
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3710      	adds	r7, #16
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop
 80088b8:	20004e10 	.word	0x20004e10
 80088bc:	20004f54 	.word	0x20004f54

080088c0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80088c8:	2300      	movs	r3, #0
 80088ca:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f7ff ffdd 	bl	800888c <low_level_input>
 80088d2:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d00a      	beq.n	80088f0 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	6879      	ldr	r1, [r7, #4]
 80088e0:	68f8      	ldr	r0, [r7, #12]
 80088e2:	4798      	blx	r3
 80088e4:	4603      	mov	r3, r0
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d002      	beq.n	80088f0 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	f001 fdce 	bl	800a48c <pbuf_free>
      }
    }
  } while(p!=NULL);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d1ea      	bne.n	80088cc <ethernetif_input+0xc>
}
 80088f6:	bf00      	nop
 80088f8:	bf00      	nop
 80088fa:	3710      	adds	r7, #16
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d106      	bne.n	800891c <ethernetif_init+0x1c>
 800890e:	4b0e      	ldr	r3, [pc, #56]	; (8008948 <ethernetif_init+0x48>)
 8008910:	f240 126b 	movw	r2, #363	; 0x16b
 8008914:	490d      	ldr	r1, [pc, #52]	; (800894c <ethernetif_init+0x4c>)
 8008916:	480e      	ldr	r0, [pc, #56]	; (8008950 <ethernetif_init+0x50>)
 8008918:	f00a ff52 	bl	80137c0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2273      	movs	r2, #115	; 0x73
 8008920:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2274      	movs	r2, #116	; 0x74
 8008928:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	4a09      	ldr	r2, [pc, #36]	; (8008954 <ethernetif_init+0x54>)
 8008930:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	4a08      	ldr	r2, [pc, #32]	; (8008958 <ethernetif_init+0x58>)
 8008936:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f7ff fe8d 	bl	8008658 <low_level_init>

  return ERR_OK;
 800893e:	2300      	movs	r3, #0
}
 8008940:	4618      	mov	r0, r3
 8008942:	3708      	adds	r7, #8
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}
 8008948:	080147a0 	.word	0x080147a0
 800894c:	080147bc 	.word	0x080147bc
 8008950:	080147cc 	.word	0x080147cc
 8008954:	08011911 	.word	0x08011911
 8008958:	08008789 	.word	0x08008789

0800895c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8008968:	68f9      	ldr	r1, [r7, #12]
 800896a:	4807      	ldr	r0, [pc, #28]	; (8008988 <pbuf_free_custom+0x2c>)
 800896c:	f000 fef4 	bl	8009758 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8008970:	4b06      	ldr	r3, [pc, #24]	; (800898c <pbuf_free_custom+0x30>)
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	2b01      	cmp	r3, #1
 8008976:	d102      	bne.n	800897e <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8008978:	4b04      	ldr	r3, [pc, #16]	; (800898c <pbuf_free_custom+0x30>)
 800897a:	2200      	movs	r2, #0
 800897c:	701a      	strb	r2, [r3, #0]
  }
}
 800897e:	bf00      	nop
 8008980:	3710      	adds	r7, #16
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
 8008986:	bf00      	nop
 8008988:	08017198 	.word	0x08017198
 800898c:	20004e10 	.word	0x20004e10

08008990 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008994:	f7fa f9ae 	bl	8002cf4 <HAL_GetTick>
 8008998:	4603      	mov	r3, r0
}
 800899a:	4618      	mov	r0, r3
 800899c:	bd80      	pop	{r7, pc}
	...

080089a0 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b08e      	sub	sp, #56	; 0x38
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089ac:	2200      	movs	r2, #0
 80089ae:	601a      	str	r2, [r3, #0]
 80089b0:	605a      	str	r2, [r3, #4]
 80089b2:	609a      	str	r2, [r3, #8]
 80089b4:	60da      	str	r2, [r3, #12]
 80089b6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a59      	ldr	r2, [pc, #356]	; (8008b24 <HAL_ETH_MspInit+0x184>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	f040 80ac 	bne.w	8008b1c <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80089c4:	2300      	movs	r3, #0
 80089c6:	623b      	str	r3, [r7, #32]
 80089c8:	4b57      	ldr	r3, [pc, #348]	; (8008b28 <HAL_ETH_MspInit+0x188>)
 80089ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089cc:	4a56      	ldr	r2, [pc, #344]	; (8008b28 <HAL_ETH_MspInit+0x188>)
 80089ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80089d2:	6313      	str	r3, [r2, #48]	; 0x30
 80089d4:	4b54      	ldr	r3, [pc, #336]	; (8008b28 <HAL_ETH_MspInit+0x188>)
 80089d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089dc:	623b      	str	r3, [r7, #32]
 80089de:	6a3b      	ldr	r3, [r7, #32]
 80089e0:	2300      	movs	r3, #0
 80089e2:	61fb      	str	r3, [r7, #28]
 80089e4:	4b50      	ldr	r3, [pc, #320]	; (8008b28 <HAL_ETH_MspInit+0x188>)
 80089e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089e8:	4a4f      	ldr	r2, [pc, #316]	; (8008b28 <HAL_ETH_MspInit+0x188>)
 80089ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80089ee:	6313      	str	r3, [r2, #48]	; 0x30
 80089f0:	4b4d      	ldr	r3, [pc, #308]	; (8008b28 <HAL_ETH_MspInit+0x188>)
 80089f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80089f8:	61fb      	str	r3, [r7, #28]
 80089fa:	69fb      	ldr	r3, [r7, #28]
 80089fc:	2300      	movs	r3, #0
 80089fe:	61bb      	str	r3, [r7, #24]
 8008a00:	4b49      	ldr	r3, [pc, #292]	; (8008b28 <HAL_ETH_MspInit+0x188>)
 8008a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a04:	4a48      	ldr	r2, [pc, #288]	; (8008b28 <HAL_ETH_MspInit+0x188>)
 8008a06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008a0a:	6313      	str	r3, [r2, #48]	; 0x30
 8008a0c:	4b46      	ldr	r3, [pc, #280]	; (8008b28 <HAL_ETH_MspInit+0x188>)
 8008a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a14:	61bb      	str	r3, [r7, #24]
 8008a16:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008a18:	2300      	movs	r3, #0
 8008a1a:	617b      	str	r3, [r7, #20]
 8008a1c:	4b42      	ldr	r3, [pc, #264]	; (8008b28 <HAL_ETH_MspInit+0x188>)
 8008a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a20:	4a41      	ldr	r2, [pc, #260]	; (8008b28 <HAL_ETH_MspInit+0x188>)
 8008a22:	f043 0304 	orr.w	r3, r3, #4
 8008a26:	6313      	str	r3, [r2, #48]	; 0x30
 8008a28:	4b3f      	ldr	r3, [pc, #252]	; (8008b28 <HAL_ETH_MspInit+0x188>)
 8008a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a2c:	f003 0304 	and.w	r3, r3, #4
 8008a30:	617b      	str	r3, [r7, #20]
 8008a32:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a34:	2300      	movs	r3, #0
 8008a36:	613b      	str	r3, [r7, #16]
 8008a38:	4b3b      	ldr	r3, [pc, #236]	; (8008b28 <HAL_ETH_MspInit+0x188>)
 8008a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a3c:	4a3a      	ldr	r2, [pc, #232]	; (8008b28 <HAL_ETH_MspInit+0x188>)
 8008a3e:	f043 0301 	orr.w	r3, r3, #1
 8008a42:	6313      	str	r3, [r2, #48]	; 0x30
 8008a44:	4b38      	ldr	r3, [pc, #224]	; (8008b28 <HAL_ETH_MspInit+0x188>)
 8008a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a48:	f003 0301 	and.w	r3, r3, #1
 8008a4c:	613b      	str	r3, [r7, #16]
 8008a4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008a50:	2300      	movs	r3, #0
 8008a52:	60fb      	str	r3, [r7, #12]
 8008a54:	4b34      	ldr	r3, [pc, #208]	; (8008b28 <HAL_ETH_MspInit+0x188>)
 8008a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a58:	4a33      	ldr	r2, [pc, #204]	; (8008b28 <HAL_ETH_MspInit+0x188>)
 8008a5a:	f043 0302 	orr.w	r3, r3, #2
 8008a5e:	6313      	str	r3, [r2, #48]	; 0x30
 8008a60:	4b31      	ldr	r3, [pc, #196]	; (8008b28 <HAL_ETH_MspInit+0x188>)
 8008a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a64:	f003 0302 	and.w	r3, r3, #2
 8008a68:	60fb      	str	r3, [r7, #12]
 8008a6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	60bb      	str	r3, [r7, #8]
 8008a70:	4b2d      	ldr	r3, [pc, #180]	; (8008b28 <HAL_ETH_MspInit+0x188>)
 8008a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a74:	4a2c      	ldr	r2, [pc, #176]	; (8008b28 <HAL_ETH_MspInit+0x188>)
 8008a76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a7a:	6313      	str	r3, [r2, #48]	; 0x30
 8008a7c:	4b2a      	ldr	r3, [pc, #168]	; (8008b28 <HAL_ETH_MspInit+0x188>)
 8008a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a84:	60bb      	str	r3, [r7, #8]
 8008a86:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8008a88:	2332      	movs	r3, #50	; 0x32
 8008a8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a8c:	2302      	movs	r3, #2
 8008a8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a90:	2300      	movs	r3, #0
 8008a92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a94:	2303      	movs	r3, #3
 8008a96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008a98:	230b      	movs	r3, #11
 8008a9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008a9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	4822      	ldr	r0, [pc, #136]	; (8008b2c <HAL_ETH_MspInit+0x18c>)
 8008aa4:	f7fb ff06 	bl	80048b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8008aa8:	2386      	movs	r3, #134	; 0x86
 8008aaa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008aac:	2302      	movs	r3, #2
 8008aae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ab4:	2303      	movs	r3, #3
 8008ab6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008ab8:	230b      	movs	r3, #11
 8008aba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	481b      	ldr	r0, [pc, #108]	; (8008b30 <HAL_ETH_MspInit+0x190>)
 8008ac4:	f7fb fef6 	bl	80048b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8008ac8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008acc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ace:	2302      	movs	r3, #2
 8008ad0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ad6:	2303      	movs	r3, #3
 8008ad8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008ada:	230b      	movs	r3, #11
 8008adc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8008ade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	4813      	ldr	r0, [pc, #76]	; (8008b34 <HAL_ETH_MspInit+0x194>)
 8008ae6:	f7fb fee5 	bl	80048b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8008aea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8008aee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008af0:	2302      	movs	r3, #2
 8008af2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008af4:	2300      	movs	r3, #0
 8008af6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008af8:	2303      	movs	r3, #3
 8008afa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008afc:	230b      	movs	r3, #11
 8008afe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b04:	4619      	mov	r1, r3
 8008b06:	480c      	ldr	r0, [pc, #48]	; (8008b38 <HAL_ETH_MspInit+0x198>)
 8008b08:	f7fb fed4 	bl	80048b4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	2100      	movs	r1, #0
 8008b10:	203d      	movs	r0, #61	; 0x3d
 8008b12:	f7fa f9fa 	bl	8002f0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8008b16:	203d      	movs	r0, #61	; 0x3d
 8008b18:	f7fa fa13 	bl	8002f42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8008b1c:	bf00      	nop
 8008b1e:	3738      	adds	r7, #56	; 0x38
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}
 8008b24:	40028000 	.word	0x40028000
 8008b28:	40023800 	.word	0x40023800
 8008b2c:	40020800 	.word	0x40020800
 8008b30:	40020000 	.word	0x40020000
 8008b34:	40020400 	.word	0x40020400
 8008b38:	40021800 	.word	0x40021800

08008b3c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8008b40:	4802      	ldr	r0, [pc, #8]	; (8008b4c <ETH_PHY_IO_Init+0x10>)
 8008b42:	f7fb f847 	bl	8003bd4 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8008b46:	2300      	movs	r3, #0
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	bd80      	pop	{r7, pc}
 8008b4c:	20004f54 	.word	0x20004f54

08008b50 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8008b50:	b480      	push	{r7}
 8008b52:	af00      	add	r7, sp, #0
  return 0;
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr

08008b60 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	60f8      	str	r0, [r7, #12]
 8008b68:	60b9      	str	r1, [r7, #8]
 8008b6a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	68ba      	ldr	r2, [r7, #8]
 8008b70:	68f9      	ldr	r1, [r7, #12]
 8008b72:	4807      	ldr	r0, [pc, #28]	; (8008b90 <ETH_PHY_IO_ReadReg+0x30>)
 8008b74:	f7fa fe96 	bl	80038a4 <HAL_ETH_ReadPHYRegister>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d002      	beq.n	8008b84 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8008b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8008b82:	e000      	b.n	8008b86 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8008b84:	2300      	movs	r3, #0
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3710      	adds	r7, #16
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	bf00      	nop
 8008b90:	20004f54 	.word	0x20004f54

08008b94 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b084      	sub	sp, #16
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	68ba      	ldr	r2, [r7, #8]
 8008ba4:	68f9      	ldr	r1, [r7, #12]
 8008ba6:	4807      	ldr	r0, [pc, #28]	; (8008bc4 <ETH_PHY_IO_WriteReg+0x30>)
 8008ba8:	f7fa fec7 	bl	800393a <HAL_ETH_WritePHYRegister>
 8008bac:	4603      	mov	r3, r0
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d002      	beq.n	8008bb8 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8008bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8008bb6:	e000      	b.n	8008bba <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8008bb8:	2300      	movs	r3, #0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3710      	adds	r7, #16
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
 8008bc2:	bf00      	nop
 8008bc4:	20004f54 	.word	0x20004f54

08008bc8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008bcc:	f7fa f892 	bl	8002cf4 <HAL_GetTick>
 8008bd0:	4603      	mov	r3, r0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	bd80      	pop	{r7, pc}
	...

08008bd8 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b0a0      	sub	sp, #128	; 0x80
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8008be0:	f107 030c 	add.w	r3, r7, #12
 8008be4:	2264      	movs	r2, #100	; 0x64
 8008be6:	2100      	movs	r1, #0
 8008be8:	4618      	mov	r0, r3
 8008bea:	f00a fd4d 	bl	8013688 <memset>
  int32_t PHYLinkState = 0;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	67bb      	str	r3, [r7, #120]	; 0x78
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008bfe:	483a      	ldr	r0, [pc, #232]	; (8008ce8 <ethernet_link_check_state+0x110>)
 8008c00:	f7f9 ff9f 	bl	8002b42 <LAN8742_GetLinkState>
 8008c04:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008c0c:	089b      	lsrs	r3, r3, #2
 8008c0e:	f003 0301 	and.w	r3, r3, #1
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d00c      	beq.n	8008c32 <ethernet_link_check_state+0x5a>
 8008c18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	dc09      	bgt.n	8008c32 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8008c1e:	4833      	ldr	r0, [pc, #204]	; (8008cec <ethernet_link_check_state+0x114>)
 8008c20:	f7fa fb27 	bl	8003272 <HAL_ETH_Stop>
    netif_set_down(netif);
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f001 f81b 	bl	8009c60 <netif_set_down>
    netif_set_link_down(netif);
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f001 f87e 	bl	8009d2c <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8008c30:	e055      	b.n	8008cde <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008c38:	f003 0304 	and.w	r3, r3, #4
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d14e      	bne.n	8008cde <ethernet_link_check_state+0x106>
 8008c40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	dd4b      	ble.n	8008cde <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8008c46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c48:	3b02      	subs	r3, #2
 8008c4a:	2b03      	cmp	r3, #3
 8008c4c:	d82a      	bhi.n	8008ca4 <ethernet_link_check_state+0xcc>
 8008c4e:	a201      	add	r2, pc, #4	; (adr r2, 8008c54 <ethernet_link_check_state+0x7c>)
 8008c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c54:	08008c65 	.word	0x08008c65
 8008c58:	08008c77 	.word	0x08008c77
 8008c5c:	08008c87 	.word	0x08008c87
 8008c60:	08008c97 	.word	0x08008c97
      duplex = ETH_FULLDUPLEX_MODE;
 8008c64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008c68:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8008c6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008c6e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008c70:	2301      	movs	r3, #1
 8008c72:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008c74:	e017      	b.n	8008ca6 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8008c76:	2300      	movs	r3, #0
 8008c78:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8008c7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008c7e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008c80:	2301      	movs	r3, #1
 8008c82:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008c84:	e00f      	b.n	8008ca6 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8008c86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008c8a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008c90:	2301      	movs	r3, #1
 8008c92:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008c94:	e007      	b.n	8008ca6 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8008c96:	2300      	movs	r3, #0
 8008c98:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008ca2:	e000      	b.n	8008ca6 <ethernet_link_check_state+0xce>
      break;
 8008ca4:	bf00      	nop
    if(linkchanged)
 8008ca6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d018      	beq.n	8008cde <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8008cac:	f107 030c 	add.w	r3, r7, #12
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	480e      	ldr	r0, [pc, #56]	; (8008cec <ethernet_link_check_state+0x114>)
 8008cb4:	f7fa fe8a 	bl	80039cc <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8008cb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cba:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8008cbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008cbe:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8008cc0:	f107 030c 	add.w	r3, r7, #12
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	4809      	ldr	r0, [pc, #36]	; (8008cec <ethernet_link_check_state+0x114>)
 8008cc8:	f7fa ff6a 	bl	8003ba0 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8008ccc:	4807      	ldr	r0, [pc, #28]	; (8008cec <ethernet_link_check_state+0x114>)
 8008cce:	f7fa fa71 	bl	80031b4 <HAL_ETH_Start>
      netif_set_up(netif);
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 ff58 	bl	8009b88 <netif_set_up>
      netif_set_link_up(netif);
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 fff3 	bl	8009cc4 <netif_set_link_up>
}
 8008cde:	bf00      	nop
 8008ce0:	3780      	adds	r7, #128	; 0x80
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	2000503c 	.word	0x2000503c
 8008cec:	20004f54 	.word	0x20004f54

08008cf0 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b086      	sub	sp, #24
 8008cf4:	af02      	add	r7, sp, #8
 8008cf6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8008cf8:	4812      	ldr	r0, [pc, #72]	; (8008d44 <HAL_ETH_RxAllocateCallback+0x54>)
 8008cfa:	f000 fcbf 	bl	800967c <memp_malloc_pool>
 8008cfe:	60f8      	str	r0, [r7, #12]
  if (p)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d014      	beq.n	8008d30 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	f103 0220 	add.w	r2, r3, #32
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	4a0d      	ldr	r2, [pc, #52]	; (8008d48 <HAL_ETH_RxAllocateCallback+0x58>)
 8008d14:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8008d1e:	9201      	str	r2, [sp, #4]
 8008d20:	9300      	str	r3, [sp, #0]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2241      	movs	r2, #65	; 0x41
 8008d26:	2100      	movs	r1, #0
 8008d28:	2000      	movs	r0, #0
 8008d2a:	f001 f9f5 	bl	800a118 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8008d2e:	e005      	b.n	8008d3c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8008d30:	4b06      	ldr	r3, [pc, #24]	; (8008d4c <HAL_ETH_RxAllocateCallback+0x5c>)
 8008d32:	2201      	movs	r2, #1
 8008d34:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	601a      	str	r2, [r3, #0]
}
 8008d3c:	bf00      	nop
 8008d3e:	3710      	adds	r7, #16
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	08017198 	.word	0x08017198
 8008d48:	0800895d 	.word	0x0800895d
 8008d4c:	20004e10 	.word	0x20004e10

08008d50 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b089      	sub	sp, #36	; 0x24
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	607a      	str	r2, [r7, #4]
 8008d5c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8008d66:	2300      	movs	r3, #0
 8008d68:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	3b20      	subs	r3, #32
 8008d6e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8008d70:	69fb      	ldr	r3, [r7, #28]
 8008d72:	2200      	movs	r2, #0
 8008d74:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8008d76:	69fb      	ldr	r3, [r7, #28]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8008d7c:	69fb      	ldr	r3, [r7, #28]
 8008d7e:	887a      	ldrh	r2, [r7, #2]
 8008d80:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8008d82:	69bb      	ldr	r3, [r7, #24]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d103      	bne.n	8008d92 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8008d8a:	69bb      	ldr	r3, [r7, #24]
 8008d8c:	69fa      	ldr	r2, [r7, #28]
 8008d8e:	601a      	str	r2, [r3, #0]
 8008d90:	e003      	b.n	8008d9a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	69fa      	ldr	r2, [r7, #28]
 8008d98:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	69fa      	ldr	r2, [r7, #28]
 8008d9e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8008da0:	69bb      	ldr	r3, [r7, #24]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	61fb      	str	r3, [r7, #28]
 8008da6:	e009      	b.n	8008dbc <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8008da8:	69fb      	ldr	r3, [r7, #28]
 8008daa:	891a      	ldrh	r2, [r3, #8]
 8008dac:	887b      	ldrh	r3, [r7, #2]
 8008dae:	4413      	add	r3, r2
 8008db0:	b29a      	uxth	r2, r3
 8008db2:	69fb      	ldr	r3, [r7, #28]
 8008db4:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8008db6:	69fb      	ldr	r3, [r7, #28]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	61fb      	str	r3, [r7, #28]
 8008dbc:	69fb      	ldr	r3, [r7, #28]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d1f2      	bne.n	8008da8 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8008dc2:	bf00      	nop
 8008dc4:	bf00      	nop
 8008dc6:	3724      	adds	r7, #36	; 0x24
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b083      	sub	sp, #12
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8008dda:	88fb      	ldrh	r3, [r7, #6]
 8008ddc:	021b      	lsls	r3, r3, #8
 8008dde:	b21a      	sxth	r2, r3
 8008de0:	88fb      	ldrh	r3, [r7, #6]
 8008de2:	0a1b      	lsrs	r3, r3, #8
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	b21b      	sxth	r3, r3
 8008de8:	4313      	orrs	r3, r2
 8008dea:	b21b      	sxth	r3, r3
 8008dec:	b29b      	uxth	r3, r3
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	370c      	adds	r7, #12
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr

08008dfa <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8008dfa:	b480      	push	{r7}
 8008dfc:	b083      	sub	sp, #12
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	061a      	lsls	r2, r3, #24
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	021b      	lsls	r3, r3, #8
 8008e0a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008e0e:	431a      	orrs	r2, r3
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	0a1b      	lsrs	r3, r3, #8
 8008e14:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008e18:	431a      	orrs	r2, r3
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	0e1b      	lsrs	r3, r3, #24
 8008e1e:	4313      	orrs	r3, r2
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr

08008e2c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b082      	sub	sp, #8
 8008e30:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8008e32:	2300      	movs	r3, #0
 8008e34:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8008e36:	f000 f8d5 	bl	8008fe4 <mem_init>
  memp_init();
 8008e3a:	f000 fbdb 	bl	80095f4 <memp_init>
  pbuf_init();
  netif_init();
 8008e3e:	f000 fcd9 	bl	80097f4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8008e42:	f007 ff5f 	bl	8010d04 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8008e46:	f001 fdbf 	bl	800a9c8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8008e4a:	f007 fed1 	bl	8010bf0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8008e4e:	bf00      	nop
 8008e50:	3708      	adds	r7, #8
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
	...

08008e58 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b083      	sub	sp, #12
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	4603      	mov	r3, r0
 8008e60:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8008e62:	4b05      	ldr	r3, [pc, #20]	; (8008e78 <ptr_to_mem+0x20>)
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	88fb      	ldrh	r3, [r7, #6]
 8008e68:	4413      	add	r3, r2
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	370c      	adds	r7, #12
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr
 8008e76:	bf00      	nop
 8008e78:	200056c8 	.word	0x200056c8

08008e7c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b083      	sub	sp, #12
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8008e84:	4b05      	ldr	r3, [pc, #20]	; (8008e9c <mem_to_ptr+0x20>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	687a      	ldr	r2, [r7, #4]
 8008e8a:	1ad3      	subs	r3, r2, r3
 8008e8c:	b29b      	uxth	r3, r3
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	370c      	adds	r7, #12
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr
 8008e9a:	bf00      	nop
 8008e9c:	200056c8 	.word	0x200056c8

08008ea0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8008ea0:	b590      	push	{r4, r7, lr}
 8008ea2:	b085      	sub	sp, #20
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8008ea8:	4b45      	ldr	r3, [pc, #276]	; (8008fc0 <plug_holes+0x120>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d206      	bcs.n	8008ec0 <plug_holes+0x20>
 8008eb2:	4b44      	ldr	r3, [pc, #272]	; (8008fc4 <plug_holes+0x124>)
 8008eb4:	f240 12df 	movw	r2, #479	; 0x1df
 8008eb8:	4943      	ldr	r1, [pc, #268]	; (8008fc8 <plug_holes+0x128>)
 8008eba:	4844      	ldr	r0, [pc, #272]	; (8008fcc <plug_holes+0x12c>)
 8008ebc:	f00a fc80 	bl	80137c0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8008ec0:	4b43      	ldr	r3, [pc, #268]	; (8008fd0 <plug_holes+0x130>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d306      	bcc.n	8008ed8 <plug_holes+0x38>
 8008eca:	4b3e      	ldr	r3, [pc, #248]	; (8008fc4 <plug_holes+0x124>)
 8008ecc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8008ed0:	4940      	ldr	r1, [pc, #256]	; (8008fd4 <plug_holes+0x134>)
 8008ed2:	483e      	ldr	r0, [pc, #248]	; (8008fcc <plug_holes+0x12c>)
 8008ed4:	f00a fc74 	bl	80137c0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	791b      	ldrb	r3, [r3, #4]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d006      	beq.n	8008eee <plug_holes+0x4e>
 8008ee0:	4b38      	ldr	r3, [pc, #224]	; (8008fc4 <plug_holes+0x124>)
 8008ee2:	f240 12e1 	movw	r2, #481	; 0x1e1
 8008ee6:	493c      	ldr	r1, [pc, #240]	; (8008fd8 <plug_holes+0x138>)
 8008ee8:	4838      	ldr	r0, [pc, #224]	; (8008fcc <plug_holes+0x12c>)
 8008eea:	f00a fc69 	bl	80137c0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	881b      	ldrh	r3, [r3, #0]
 8008ef2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008ef6:	d906      	bls.n	8008f06 <plug_holes+0x66>
 8008ef8:	4b32      	ldr	r3, [pc, #200]	; (8008fc4 <plug_holes+0x124>)
 8008efa:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8008efe:	4937      	ldr	r1, [pc, #220]	; (8008fdc <plug_holes+0x13c>)
 8008f00:	4832      	ldr	r0, [pc, #200]	; (8008fcc <plug_holes+0x12c>)
 8008f02:	f00a fc5d 	bl	80137c0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	881b      	ldrh	r3, [r3, #0]
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f7ff ffa4 	bl	8008e58 <ptr_to_mem>
 8008f10:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d024      	beq.n	8008f64 <plug_holes+0xc4>
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	791b      	ldrb	r3, [r3, #4]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d120      	bne.n	8008f64 <plug_holes+0xc4>
 8008f22:	4b2b      	ldr	r3, [pc, #172]	; (8008fd0 <plug_holes+0x130>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	68fa      	ldr	r2, [r7, #12]
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d01b      	beq.n	8008f64 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8008f2c:	4b2c      	ldr	r3, [pc, #176]	; (8008fe0 <plug_holes+0x140>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	68fa      	ldr	r2, [r7, #12]
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d102      	bne.n	8008f3c <plug_holes+0x9c>
      lfree = mem;
 8008f36:	4a2a      	ldr	r2, [pc, #168]	; (8008fe0 <plug_holes+0x140>)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	881a      	ldrh	r2, [r3, #0]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	881b      	ldrh	r3, [r3, #0]
 8008f48:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008f4c:	d00a      	beq.n	8008f64 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	881b      	ldrh	r3, [r3, #0]
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7ff ff80 	bl	8008e58 <ptr_to_mem>
 8008f58:	4604      	mov	r4, r0
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f7ff ff8e 	bl	8008e7c <mem_to_ptr>
 8008f60:	4603      	mov	r3, r0
 8008f62:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	885b      	ldrh	r3, [r3, #2]
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f7ff ff75 	bl	8008e58 <ptr_to_mem>
 8008f6e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8008f70:	68ba      	ldr	r2, [r7, #8]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d01f      	beq.n	8008fb8 <plug_holes+0x118>
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	791b      	ldrb	r3, [r3, #4]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d11b      	bne.n	8008fb8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8008f80:	4b17      	ldr	r3, [pc, #92]	; (8008fe0 <plug_holes+0x140>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	687a      	ldr	r2, [r7, #4]
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d102      	bne.n	8008f90 <plug_holes+0xf0>
      lfree = pmem;
 8008f8a:	4a15      	ldr	r2, [pc, #84]	; (8008fe0 <plug_holes+0x140>)
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	881a      	ldrh	r2, [r3, #0]
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	881b      	ldrh	r3, [r3, #0]
 8008f9c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008fa0:	d00a      	beq.n	8008fb8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	881b      	ldrh	r3, [r3, #0]
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f7ff ff56 	bl	8008e58 <ptr_to_mem>
 8008fac:	4604      	mov	r4, r0
 8008fae:	68b8      	ldr	r0, [r7, #8]
 8008fb0:	f7ff ff64 	bl	8008e7c <mem_to_ptr>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8008fb8:	bf00      	nop
 8008fba:	3714      	adds	r7, #20
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd90      	pop	{r4, r7, pc}
 8008fc0:	200056c8 	.word	0x200056c8
 8008fc4:	080147f4 	.word	0x080147f4
 8008fc8:	08014824 	.word	0x08014824
 8008fcc:	0801483c 	.word	0x0801483c
 8008fd0:	200056cc 	.word	0x200056cc
 8008fd4:	08014864 	.word	0x08014864
 8008fd8:	08014880 	.word	0x08014880
 8008fdc:	0801489c 	.word	0x0801489c
 8008fe0:	200056d0 	.word	0x200056d0

08008fe4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8008fea:	4b18      	ldr	r3, [pc, #96]	; (800904c <mem_init+0x68>)
 8008fec:	3303      	adds	r3, #3
 8008fee:	f023 0303 	bic.w	r3, r3, #3
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	4b16      	ldr	r3, [pc, #88]	; (8009050 <mem_init+0x6c>)
 8008ff6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8008ff8:	4b15      	ldr	r3, [pc, #84]	; (8009050 <mem_init+0x6c>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009004:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2200      	movs	r2, #0
 800900a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8009012:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8009016:	f7ff ff1f 	bl	8008e58 <ptr_to_mem>
 800901a:	4603      	mov	r3, r0
 800901c:	4a0d      	ldr	r2, [pc, #52]	; (8009054 <mem_init+0x70>)
 800901e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8009020:	4b0c      	ldr	r3, [pc, #48]	; (8009054 <mem_init+0x70>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	2201      	movs	r2, #1
 8009026:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8009028:	4b0a      	ldr	r3, [pc, #40]	; (8009054 <mem_init+0x70>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009030:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8009032:	4b08      	ldr	r3, [pc, #32]	; (8009054 <mem_init+0x70>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800903a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800903c:	4b04      	ldr	r3, [pc, #16]	; (8009050 <mem_init+0x6c>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a05      	ldr	r2, [pc, #20]	; (8009058 <mem_init+0x74>)
 8009042:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8009044:	bf00      	nop
 8009046:	3708      	adds	r7, #8
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}
 800904c:	20005074 	.word	0x20005074
 8009050:	200056c8 	.word	0x200056c8
 8009054:	200056cc 	.word	0x200056cc
 8009058:	200056d0 	.word	0x200056d0

0800905c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b086      	sub	sp, #24
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f7ff ff09 	bl	8008e7c <mem_to_ptr>
 800906a:	4603      	mov	r3, r0
 800906c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	881b      	ldrh	r3, [r3, #0]
 8009072:	4618      	mov	r0, r3
 8009074:	f7ff fef0 	bl	8008e58 <ptr_to_mem>
 8009078:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	885b      	ldrh	r3, [r3, #2]
 800907e:	4618      	mov	r0, r3
 8009080:	f7ff feea 	bl	8008e58 <ptr_to_mem>
 8009084:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	881b      	ldrh	r3, [r3, #0]
 800908a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800908e:	d818      	bhi.n	80090c2 <mem_link_valid+0x66>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	885b      	ldrh	r3, [r3, #2]
 8009094:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009098:	d813      	bhi.n	80090c2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800909e:	8afa      	ldrh	r2, [r7, #22]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d004      	beq.n	80090ae <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	881b      	ldrh	r3, [r3, #0]
 80090a8:	8afa      	ldrh	r2, [r7, #22]
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d109      	bne.n	80090c2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80090ae:	4b08      	ldr	r3, [pc, #32]	; (80090d0 <mem_link_valid+0x74>)
 80090b0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80090b2:	693a      	ldr	r2, [r7, #16]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d006      	beq.n	80090c6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	885b      	ldrh	r3, [r3, #2]
 80090bc:	8afa      	ldrh	r2, [r7, #22]
 80090be:	429a      	cmp	r2, r3
 80090c0:	d001      	beq.n	80090c6 <mem_link_valid+0x6a>
    return 0;
 80090c2:	2300      	movs	r3, #0
 80090c4:	e000      	b.n	80090c8 <mem_link_valid+0x6c>
  }
  return 1;
 80090c6:	2301      	movs	r3, #1
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3718      	adds	r7, #24
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}
 80090d0:	200056cc 	.word	0x200056cc

080090d4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d04c      	beq.n	800917c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f003 0303 	and.w	r3, r3, #3
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d007      	beq.n	80090fc <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80090ec:	4b25      	ldr	r3, [pc, #148]	; (8009184 <mem_free+0xb0>)
 80090ee:	f240 2273 	movw	r2, #627	; 0x273
 80090f2:	4925      	ldr	r1, [pc, #148]	; (8009188 <mem_free+0xb4>)
 80090f4:	4825      	ldr	r0, [pc, #148]	; (800918c <mem_free+0xb8>)
 80090f6:	f00a fb63 	bl	80137c0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80090fa:	e040      	b.n	800917e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	3b08      	subs	r3, #8
 8009100:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8009102:	4b23      	ldr	r3, [pc, #140]	; (8009190 <mem_free+0xbc>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	68fa      	ldr	r2, [r7, #12]
 8009108:	429a      	cmp	r2, r3
 800910a:	d306      	bcc.n	800911a <mem_free+0x46>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f103 020c 	add.w	r2, r3, #12
 8009112:	4b20      	ldr	r3, [pc, #128]	; (8009194 <mem_free+0xc0>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	429a      	cmp	r2, r3
 8009118:	d907      	bls.n	800912a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800911a:	4b1a      	ldr	r3, [pc, #104]	; (8009184 <mem_free+0xb0>)
 800911c:	f240 227f 	movw	r2, #639	; 0x27f
 8009120:	491d      	ldr	r1, [pc, #116]	; (8009198 <mem_free+0xc4>)
 8009122:	481a      	ldr	r0, [pc, #104]	; (800918c <mem_free+0xb8>)
 8009124:	f00a fb4c 	bl	80137c0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009128:	e029      	b.n	800917e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	791b      	ldrb	r3, [r3, #4]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d107      	bne.n	8009142 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8009132:	4b14      	ldr	r3, [pc, #80]	; (8009184 <mem_free+0xb0>)
 8009134:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8009138:	4918      	ldr	r1, [pc, #96]	; (800919c <mem_free+0xc8>)
 800913a:	4814      	ldr	r0, [pc, #80]	; (800918c <mem_free+0xb8>)
 800913c:	f00a fb40 	bl	80137c0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009140:	e01d      	b.n	800917e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8009142:	68f8      	ldr	r0, [r7, #12]
 8009144:	f7ff ff8a 	bl	800905c <mem_link_valid>
 8009148:	4603      	mov	r3, r0
 800914a:	2b00      	cmp	r3, #0
 800914c:	d107      	bne.n	800915e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800914e:	4b0d      	ldr	r3, [pc, #52]	; (8009184 <mem_free+0xb0>)
 8009150:	f240 2295 	movw	r2, #661	; 0x295
 8009154:	4912      	ldr	r1, [pc, #72]	; (80091a0 <mem_free+0xcc>)
 8009156:	480d      	ldr	r0, [pc, #52]	; (800918c <mem_free+0xb8>)
 8009158:	f00a fb32 	bl	80137c0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800915c:	e00f      	b.n	800917e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2200      	movs	r2, #0
 8009162:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8009164:	4b0f      	ldr	r3, [pc, #60]	; (80091a4 <mem_free+0xd0>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	68fa      	ldr	r2, [r7, #12]
 800916a:	429a      	cmp	r2, r3
 800916c:	d202      	bcs.n	8009174 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800916e:	4a0d      	ldr	r2, [pc, #52]	; (80091a4 <mem_free+0xd0>)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8009174:	68f8      	ldr	r0, [r7, #12]
 8009176:	f7ff fe93 	bl	8008ea0 <plug_holes>
 800917a:	e000      	b.n	800917e <mem_free+0xaa>
    return;
 800917c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800917e:	3710      	adds	r7, #16
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}
 8009184:	080147f4 	.word	0x080147f4
 8009188:	080148c8 	.word	0x080148c8
 800918c:	0801483c 	.word	0x0801483c
 8009190:	200056c8 	.word	0x200056c8
 8009194:	200056cc 	.word	0x200056cc
 8009198:	080148ec 	.word	0x080148ec
 800919c:	08014908 	.word	0x08014908
 80091a0:	08014930 	.word	0x08014930
 80091a4:	200056d0 	.word	0x200056d0

080091a8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b088      	sub	sp, #32
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	460b      	mov	r3, r1
 80091b2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80091b4:	887b      	ldrh	r3, [r7, #2]
 80091b6:	3303      	adds	r3, #3
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	f023 0303 	bic.w	r3, r3, #3
 80091be:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80091c0:	8bfb      	ldrh	r3, [r7, #30]
 80091c2:	2b0b      	cmp	r3, #11
 80091c4:	d801      	bhi.n	80091ca <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80091c6:	230c      	movs	r3, #12
 80091c8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80091ca:	8bfb      	ldrh	r3, [r7, #30]
 80091cc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80091d0:	d803      	bhi.n	80091da <mem_trim+0x32>
 80091d2:	8bfa      	ldrh	r2, [r7, #30]
 80091d4:	887b      	ldrh	r3, [r7, #2]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d201      	bcs.n	80091de <mem_trim+0x36>
    return NULL;
 80091da:	2300      	movs	r3, #0
 80091dc:	e0cc      	b.n	8009378 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80091de:	4b68      	ldr	r3, [pc, #416]	; (8009380 <mem_trim+0x1d8>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d304      	bcc.n	80091f2 <mem_trim+0x4a>
 80091e8:	4b66      	ldr	r3, [pc, #408]	; (8009384 <mem_trim+0x1dc>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	429a      	cmp	r2, r3
 80091f0:	d306      	bcc.n	8009200 <mem_trim+0x58>
 80091f2:	4b65      	ldr	r3, [pc, #404]	; (8009388 <mem_trim+0x1e0>)
 80091f4:	f240 22d1 	movw	r2, #721	; 0x2d1
 80091f8:	4964      	ldr	r1, [pc, #400]	; (800938c <mem_trim+0x1e4>)
 80091fa:	4865      	ldr	r0, [pc, #404]	; (8009390 <mem_trim+0x1e8>)
 80091fc:	f00a fae0 	bl	80137c0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8009200:	4b5f      	ldr	r3, [pc, #380]	; (8009380 <mem_trim+0x1d8>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	429a      	cmp	r2, r3
 8009208:	d304      	bcc.n	8009214 <mem_trim+0x6c>
 800920a:	4b5e      	ldr	r3, [pc, #376]	; (8009384 <mem_trim+0x1dc>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	429a      	cmp	r2, r3
 8009212:	d301      	bcc.n	8009218 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	e0af      	b.n	8009378 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	3b08      	subs	r3, #8
 800921c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800921e:	69b8      	ldr	r0, [r7, #24]
 8009220:	f7ff fe2c 	bl	8008e7c <mem_to_ptr>
 8009224:	4603      	mov	r3, r0
 8009226:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009228:	69bb      	ldr	r3, [r7, #24]
 800922a:	881a      	ldrh	r2, [r3, #0]
 800922c:	8afb      	ldrh	r3, [r7, #22]
 800922e:	1ad3      	subs	r3, r2, r3
 8009230:	b29b      	uxth	r3, r3
 8009232:	3b08      	subs	r3, #8
 8009234:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8009236:	8bfa      	ldrh	r2, [r7, #30]
 8009238:	8abb      	ldrh	r3, [r7, #20]
 800923a:	429a      	cmp	r2, r3
 800923c:	d906      	bls.n	800924c <mem_trim+0xa4>
 800923e:	4b52      	ldr	r3, [pc, #328]	; (8009388 <mem_trim+0x1e0>)
 8009240:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8009244:	4953      	ldr	r1, [pc, #332]	; (8009394 <mem_trim+0x1ec>)
 8009246:	4852      	ldr	r0, [pc, #328]	; (8009390 <mem_trim+0x1e8>)
 8009248:	f00a faba 	bl	80137c0 <iprintf>
  if (newsize > size) {
 800924c:	8bfa      	ldrh	r2, [r7, #30]
 800924e:	8abb      	ldrh	r3, [r7, #20]
 8009250:	429a      	cmp	r2, r3
 8009252:	d901      	bls.n	8009258 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8009254:	2300      	movs	r3, #0
 8009256:	e08f      	b.n	8009378 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8009258:	8bfa      	ldrh	r2, [r7, #30]
 800925a:	8abb      	ldrh	r3, [r7, #20]
 800925c:	429a      	cmp	r2, r3
 800925e:	d101      	bne.n	8009264 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	e089      	b.n	8009378 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8009264:	69bb      	ldr	r3, [r7, #24]
 8009266:	881b      	ldrh	r3, [r3, #0]
 8009268:	4618      	mov	r0, r3
 800926a:	f7ff fdf5 	bl	8008e58 <ptr_to_mem>
 800926e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	791b      	ldrb	r3, [r3, #4]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d13f      	bne.n	80092f8 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	881b      	ldrh	r3, [r3, #0]
 800927c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009280:	d106      	bne.n	8009290 <mem_trim+0xe8>
 8009282:	4b41      	ldr	r3, [pc, #260]	; (8009388 <mem_trim+0x1e0>)
 8009284:	f240 22f5 	movw	r2, #757	; 0x2f5
 8009288:	4943      	ldr	r1, [pc, #268]	; (8009398 <mem_trim+0x1f0>)
 800928a:	4841      	ldr	r0, [pc, #260]	; (8009390 <mem_trim+0x1e8>)
 800928c:	f00a fa98 	bl	80137c0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	881b      	ldrh	r3, [r3, #0]
 8009294:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009296:	8afa      	ldrh	r2, [r7, #22]
 8009298:	8bfb      	ldrh	r3, [r7, #30]
 800929a:	4413      	add	r3, r2
 800929c:	b29b      	uxth	r3, r3
 800929e:	3308      	adds	r3, #8
 80092a0:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80092a2:	4b3e      	ldr	r3, [pc, #248]	; (800939c <mem_trim+0x1f4>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	693a      	ldr	r2, [r7, #16]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d106      	bne.n	80092ba <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80092ac:	89fb      	ldrh	r3, [r7, #14]
 80092ae:	4618      	mov	r0, r3
 80092b0:	f7ff fdd2 	bl	8008e58 <ptr_to_mem>
 80092b4:	4603      	mov	r3, r0
 80092b6:	4a39      	ldr	r2, [pc, #228]	; (800939c <mem_trim+0x1f4>)
 80092b8:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80092ba:	89fb      	ldrh	r3, [r7, #14]
 80092bc:	4618      	mov	r0, r3
 80092be:	f7ff fdcb 	bl	8008e58 <ptr_to_mem>
 80092c2:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	2200      	movs	r2, #0
 80092c8:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	89ba      	ldrh	r2, [r7, #12]
 80092ce:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	8afa      	ldrh	r2, [r7, #22]
 80092d4:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80092d6:	69bb      	ldr	r3, [r7, #24]
 80092d8:	89fa      	ldrh	r2, [r7, #14]
 80092da:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	881b      	ldrh	r3, [r3, #0]
 80092e0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80092e4:	d047      	beq.n	8009376 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	881b      	ldrh	r3, [r3, #0]
 80092ea:	4618      	mov	r0, r3
 80092ec:	f7ff fdb4 	bl	8008e58 <ptr_to_mem>
 80092f0:	4602      	mov	r2, r0
 80092f2:	89fb      	ldrh	r3, [r7, #14]
 80092f4:	8053      	strh	r3, [r2, #2]
 80092f6:	e03e      	b.n	8009376 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80092f8:	8bfb      	ldrh	r3, [r7, #30]
 80092fa:	f103 0214 	add.w	r2, r3, #20
 80092fe:	8abb      	ldrh	r3, [r7, #20]
 8009300:	429a      	cmp	r2, r3
 8009302:	d838      	bhi.n	8009376 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009304:	8afa      	ldrh	r2, [r7, #22]
 8009306:	8bfb      	ldrh	r3, [r7, #30]
 8009308:	4413      	add	r3, r2
 800930a:	b29b      	uxth	r3, r3
 800930c:	3308      	adds	r3, #8
 800930e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009310:	69bb      	ldr	r3, [r7, #24]
 8009312:	881b      	ldrh	r3, [r3, #0]
 8009314:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009318:	d106      	bne.n	8009328 <mem_trim+0x180>
 800931a:	4b1b      	ldr	r3, [pc, #108]	; (8009388 <mem_trim+0x1e0>)
 800931c:	f240 3216 	movw	r2, #790	; 0x316
 8009320:	491d      	ldr	r1, [pc, #116]	; (8009398 <mem_trim+0x1f0>)
 8009322:	481b      	ldr	r0, [pc, #108]	; (8009390 <mem_trim+0x1e8>)
 8009324:	f00a fa4c 	bl	80137c0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8009328:	89fb      	ldrh	r3, [r7, #14]
 800932a:	4618      	mov	r0, r3
 800932c:	f7ff fd94 	bl	8008e58 <ptr_to_mem>
 8009330:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8009332:	4b1a      	ldr	r3, [pc, #104]	; (800939c <mem_trim+0x1f4>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	693a      	ldr	r2, [r7, #16]
 8009338:	429a      	cmp	r2, r3
 800933a:	d202      	bcs.n	8009342 <mem_trim+0x19a>
      lfree = mem2;
 800933c:	4a17      	ldr	r2, [pc, #92]	; (800939c <mem_trim+0x1f4>)
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	2200      	movs	r2, #0
 8009346:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8009348:	69bb      	ldr	r3, [r7, #24]
 800934a:	881a      	ldrh	r2, [r3, #0]
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	8afa      	ldrh	r2, [r7, #22]
 8009354:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8009356:	69bb      	ldr	r3, [r7, #24]
 8009358:	89fa      	ldrh	r2, [r7, #14]
 800935a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	881b      	ldrh	r3, [r3, #0]
 8009360:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009364:	d007      	beq.n	8009376 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	881b      	ldrh	r3, [r3, #0]
 800936a:	4618      	mov	r0, r3
 800936c:	f7ff fd74 	bl	8008e58 <ptr_to_mem>
 8009370:	4602      	mov	r2, r0
 8009372:	89fb      	ldrh	r3, [r7, #14]
 8009374:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8009376:	687b      	ldr	r3, [r7, #4]
}
 8009378:	4618      	mov	r0, r3
 800937a:	3720      	adds	r7, #32
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}
 8009380:	200056c8 	.word	0x200056c8
 8009384:	200056cc 	.word	0x200056cc
 8009388:	080147f4 	.word	0x080147f4
 800938c:	08014964 	.word	0x08014964
 8009390:	0801483c 	.word	0x0801483c
 8009394:	0801497c 	.word	0x0801497c
 8009398:	0801499c 	.word	0x0801499c
 800939c:	200056d0 	.word	0x200056d0

080093a0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b088      	sub	sp, #32
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	4603      	mov	r3, r0
 80093a8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80093aa:	88fb      	ldrh	r3, [r7, #6]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d101      	bne.n	80093b4 <mem_malloc+0x14>
    return NULL;
 80093b0:	2300      	movs	r3, #0
 80093b2:	e0d9      	b.n	8009568 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80093b4:	88fb      	ldrh	r3, [r7, #6]
 80093b6:	3303      	adds	r3, #3
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	f023 0303 	bic.w	r3, r3, #3
 80093be:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80093c0:	8bbb      	ldrh	r3, [r7, #28]
 80093c2:	2b0b      	cmp	r3, #11
 80093c4:	d801      	bhi.n	80093ca <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80093c6:	230c      	movs	r3, #12
 80093c8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80093ca:	8bbb      	ldrh	r3, [r7, #28]
 80093cc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80093d0:	d803      	bhi.n	80093da <mem_malloc+0x3a>
 80093d2:	8bba      	ldrh	r2, [r7, #28]
 80093d4:	88fb      	ldrh	r3, [r7, #6]
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d201      	bcs.n	80093de <mem_malloc+0x3e>
    return NULL;
 80093da:	2300      	movs	r3, #0
 80093dc:	e0c4      	b.n	8009568 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80093de:	4b64      	ldr	r3, [pc, #400]	; (8009570 <mem_malloc+0x1d0>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7ff fd4a 	bl	8008e7c <mem_to_ptr>
 80093e8:	4603      	mov	r3, r0
 80093ea:	83fb      	strh	r3, [r7, #30]
 80093ec:	e0b4      	b.n	8009558 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80093ee:	8bfb      	ldrh	r3, [r7, #30]
 80093f0:	4618      	mov	r0, r3
 80093f2:	f7ff fd31 	bl	8008e58 <ptr_to_mem>
 80093f6:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	791b      	ldrb	r3, [r3, #4]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	f040 80a4 	bne.w	800954a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	881b      	ldrh	r3, [r3, #0]
 8009406:	461a      	mov	r2, r3
 8009408:	8bfb      	ldrh	r3, [r7, #30]
 800940a:	1ad3      	subs	r3, r2, r3
 800940c:	f1a3 0208 	sub.w	r2, r3, #8
 8009410:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8009412:	429a      	cmp	r2, r3
 8009414:	f0c0 8099 	bcc.w	800954a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	881b      	ldrh	r3, [r3, #0]
 800941c:	461a      	mov	r2, r3
 800941e:	8bfb      	ldrh	r3, [r7, #30]
 8009420:	1ad3      	subs	r3, r2, r3
 8009422:	f1a3 0208 	sub.w	r2, r3, #8
 8009426:	8bbb      	ldrh	r3, [r7, #28]
 8009428:	3314      	adds	r3, #20
 800942a:	429a      	cmp	r2, r3
 800942c:	d333      	bcc.n	8009496 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800942e:	8bfa      	ldrh	r2, [r7, #30]
 8009430:	8bbb      	ldrh	r3, [r7, #28]
 8009432:	4413      	add	r3, r2
 8009434:	b29b      	uxth	r3, r3
 8009436:	3308      	adds	r3, #8
 8009438:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800943a:	8a7b      	ldrh	r3, [r7, #18]
 800943c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009440:	d106      	bne.n	8009450 <mem_malloc+0xb0>
 8009442:	4b4c      	ldr	r3, [pc, #304]	; (8009574 <mem_malloc+0x1d4>)
 8009444:	f240 3287 	movw	r2, #903	; 0x387
 8009448:	494b      	ldr	r1, [pc, #300]	; (8009578 <mem_malloc+0x1d8>)
 800944a:	484c      	ldr	r0, [pc, #304]	; (800957c <mem_malloc+0x1dc>)
 800944c:	f00a f9b8 	bl	80137c0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8009450:	8a7b      	ldrh	r3, [r7, #18]
 8009452:	4618      	mov	r0, r3
 8009454:	f7ff fd00 	bl	8008e58 <ptr_to_mem>
 8009458:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2200      	movs	r2, #0
 800945e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	881a      	ldrh	r2, [r3, #0]
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	8bfa      	ldrh	r2, [r7, #30]
 800946c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	8a7a      	ldrh	r2, [r7, #18]
 8009472:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	2201      	movs	r2, #1
 8009478:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	881b      	ldrh	r3, [r3, #0]
 800947e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009482:	d00b      	beq.n	800949c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	881b      	ldrh	r3, [r3, #0]
 8009488:	4618      	mov	r0, r3
 800948a:	f7ff fce5 	bl	8008e58 <ptr_to_mem>
 800948e:	4602      	mov	r2, r0
 8009490:	8a7b      	ldrh	r3, [r7, #18]
 8009492:	8053      	strh	r3, [r2, #2]
 8009494:	e002      	b.n	800949c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	2201      	movs	r2, #1
 800949a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800949c:	4b34      	ldr	r3, [pc, #208]	; (8009570 <mem_malloc+0x1d0>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	697a      	ldr	r2, [r7, #20]
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d127      	bne.n	80094f6 <mem_malloc+0x156>
          struct mem *cur = lfree;
 80094a6:	4b32      	ldr	r3, [pc, #200]	; (8009570 <mem_malloc+0x1d0>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80094ac:	e005      	b.n	80094ba <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80094ae:	69bb      	ldr	r3, [r7, #24]
 80094b0:	881b      	ldrh	r3, [r3, #0]
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7ff fcd0 	bl	8008e58 <ptr_to_mem>
 80094b8:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80094ba:	69bb      	ldr	r3, [r7, #24]
 80094bc:	791b      	ldrb	r3, [r3, #4]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d004      	beq.n	80094cc <mem_malloc+0x12c>
 80094c2:	4b2f      	ldr	r3, [pc, #188]	; (8009580 <mem_malloc+0x1e0>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	69ba      	ldr	r2, [r7, #24]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d1f0      	bne.n	80094ae <mem_malloc+0x10e>
          }
          lfree = cur;
 80094cc:	4a28      	ldr	r2, [pc, #160]	; (8009570 <mem_malloc+0x1d0>)
 80094ce:	69bb      	ldr	r3, [r7, #24]
 80094d0:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80094d2:	4b27      	ldr	r3, [pc, #156]	; (8009570 <mem_malloc+0x1d0>)
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	4b2a      	ldr	r3, [pc, #168]	; (8009580 <mem_malloc+0x1e0>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	429a      	cmp	r2, r3
 80094dc:	d00b      	beq.n	80094f6 <mem_malloc+0x156>
 80094de:	4b24      	ldr	r3, [pc, #144]	; (8009570 <mem_malloc+0x1d0>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	791b      	ldrb	r3, [r3, #4]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d006      	beq.n	80094f6 <mem_malloc+0x156>
 80094e8:	4b22      	ldr	r3, [pc, #136]	; (8009574 <mem_malloc+0x1d4>)
 80094ea:	f240 32b5 	movw	r2, #949	; 0x3b5
 80094ee:	4925      	ldr	r1, [pc, #148]	; (8009584 <mem_malloc+0x1e4>)
 80094f0:	4822      	ldr	r0, [pc, #136]	; (800957c <mem_malloc+0x1dc>)
 80094f2:	f00a f965 	bl	80137c0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80094f6:	8bba      	ldrh	r2, [r7, #28]
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	4413      	add	r3, r2
 80094fc:	3308      	adds	r3, #8
 80094fe:	4a20      	ldr	r2, [pc, #128]	; (8009580 <mem_malloc+0x1e0>)
 8009500:	6812      	ldr	r2, [r2, #0]
 8009502:	4293      	cmp	r3, r2
 8009504:	d906      	bls.n	8009514 <mem_malloc+0x174>
 8009506:	4b1b      	ldr	r3, [pc, #108]	; (8009574 <mem_malloc+0x1d4>)
 8009508:	f240 32b9 	movw	r2, #953	; 0x3b9
 800950c:	491e      	ldr	r1, [pc, #120]	; (8009588 <mem_malloc+0x1e8>)
 800950e:	481b      	ldr	r0, [pc, #108]	; (800957c <mem_malloc+0x1dc>)
 8009510:	f00a f956 	bl	80137c0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	f003 0303 	and.w	r3, r3, #3
 800951a:	2b00      	cmp	r3, #0
 800951c:	d006      	beq.n	800952c <mem_malloc+0x18c>
 800951e:	4b15      	ldr	r3, [pc, #84]	; (8009574 <mem_malloc+0x1d4>)
 8009520:	f240 32bb 	movw	r2, #955	; 0x3bb
 8009524:	4919      	ldr	r1, [pc, #100]	; (800958c <mem_malloc+0x1ec>)
 8009526:	4815      	ldr	r0, [pc, #84]	; (800957c <mem_malloc+0x1dc>)
 8009528:	f00a f94a 	bl	80137c0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	f003 0303 	and.w	r3, r3, #3
 8009532:	2b00      	cmp	r3, #0
 8009534:	d006      	beq.n	8009544 <mem_malloc+0x1a4>
 8009536:	4b0f      	ldr	r3, [pc, #60]	; (8009574 <mem_malloc+0x1d4>)
 8009538:	f240 32bd 	movw	r2, #957	; 0x3bd
 800953c:	4914      	ldr	r1, [pc, #80]	; (8009590 <mem_malloc+0x1f0>)
 800953e:	480f      	ldr	r0, [pc, #60]	; (800957c <mem_malloc+0x1dc>)
 8009540:	f00a f93e 	bl	80137c0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	3308      	adds	r3, #8
 8009548:	e00e      	b.n	8009568 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800954a:	8bfb      	ldrh	r3, [r7, #30]
 800954c:	4618      	mov	r0, r3
 800954e:	f7ff fc83 	bl	8008e58 <ptr_to_mem>
 8009552:	4603      	mov	r3, r0
 8009554:	881b      	ldrh	r3, [r3, #0]
 8009556:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009558:	8bfa      	ldrh	r2, [r7, #30]
 800955a:	8bbb      	ldrh	r3, [r7, #28]
 800955c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8009560:	429a      	cmp	r2, r3
 8009562:	f4ff af44 	bcc.w	80093ee <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8009566:	2300      	movs	r3, #0
}
 8009568:	4618      	mov	r0, r3
 800956a:	3720      	adds	r7, #32
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}
 8009570:	200056d0 	.word	0x200056d0
 8009574:	080147f4 	.word	0x080147f4
 8009578:	0801499c 	.word	0x0801499c
 800957c:	0801483c 	.word	0x0801483c
 8009580:	200056cc 	.word	0x200056cc
 8009584:	080149b0 	.word	0x080149b0
 8009588:	080149cc 	.word	0x080149cc
 800958c:	080149fc 	.word	0x080149fc
 8009590:	08014a2c 	.word	0x08014a2c

08009594 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8009594:	b480      	push	{r7}
 8009596:	b085      	sub	sp, #20
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	689b      	ldr	r3, [r3, #8]
 80095a0:	2200      	movs	r2, #0
 80095a2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	3303      	adds	r3, #3
 80095aa:	f023 0303 	bic.w	r3, r3, #3
 80095ae:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80095b0:	2300      	movs	r3, #0
 80095b2:	60fb      	str	r3, [r7, #12]
 80095b4:	e011      	b.n	80095da <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	689b      	ldr	r3, [r3, #8]
 80095ba:	681a      	ldr	r2, [r3, #0]
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	689b      	ldr	r3, [r3, #8]
 80095c4:	68ba      	ldr	r2, [r7, #8]
 80095c6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	881b      	ldrh	r3, [r3, #0]
 80095cc:	461a      	mov	r2, r3
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	4413      	add	r3, r2
 80095d2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	3301      	adds	r3, #1
 80095d8:	60fb      	str	r3, [r7, #12]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	885b      	ldrh	r3, [r3, #2]
 80095de:	461a      	mov	r2, r3
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	4293      	cmp	r3, r2
 80095e4:	dbe7      	blt.n	80095b6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80095e6:	bf00      	nop
 80095e8:	bf00      	nop
 80095ea:	3714      	adds	r7, #20
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr

080095f4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b082      	sub	sp, #8
 80095f8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80095fa:	2300      	movs	r3, #0
 80095fc:	80fb      	strh	r3, [r7, #6]
 80095fe:	e009      	b.n	8009614 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8009600:	88fb      	ldrh	r3, [r7, #6]
 8009602:	4a08      	ldr	r2, [pc, #32]	; (8009624 <memp_init+0x30>)
 8009604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009608:	4618      	mov	r0, r3
 800960a:	f7ff ffc3 	bl	8009594 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800960e:	88fb      	ldrh	r3, [r7, #6]
 8009610:	3301      	adds	r3, #1
 8009612:	80fb      	strh	r3, [r7, #6]
 8009614:	88fb      	ldrh	r3, [r7, #6]
 8009616:	2b08      	cmp	r3, #8
 8009618:	d9f2      	bls.n	8009600 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800961a:	bf00      	nop
 800961c:	bf00      	nop
 800961e:	3708      	adds	r7, #8
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}
 8009624:	08017210 	.word	0x08017210

08009628 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d012      	beq.n	8009664 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	689b      	ldr	r3, [r3, #8]
 8009642:	68fa      	ldr	r2, [r7, #12]
 8009644:	6812      	ldr	r2, [r2, #0]
 8009646:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f003 0303 	and.w	r3, r3, #3
 800964e:	2b00      	cmp	r3, #0
 8009650:	d006      	beq.n	8009660 <do_memp_malloc_pool+0x38>
 8009652:	4b07      	ldr	r3, [pc, #28]	; (8009670 <do_memp_malloc_pool+0x48>)
 8009654:	f44f 728c 	mov.w	r2, #280	; 0x118
 8009658:	4906      	ldr	r1, [pc, #24]	; (8009674 <do_memp_malloc_pool+0x4c>)
 800965a:	4807      	ldr	r0, [pc, #28]	; (8009678 <do_memp_malloc_pool+0x50>)
 800965c:	f00a f8b0 	bl	80137c0 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	e000      	b.n	8009666 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8009664:	2300      	movs	r3, #0
}
 8009666:	4618      	mov	r0, r3
 8009668:	3710      	adds	r7, #16
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	08014a50 	.word	0x08014a50
 8009674:	08014a80 	.word	0x08014a80
 8009678:	08014aa4 	.word	0x08014aa4

0800967c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d106      	bne.n	8009698 <memp_malloc_pool+0x1c>
 800968a:	4b0a      	ldr	r3, [pc, #40]	; (80096b4 <memp_malloc_pool+0x38>)
 800968c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8009690:	4909      	ldr	r1, [pc, #36]	; (80096b8 <memp_malloc_pool+0x3c>)
 8009692:	480a      	ldr	r0, [pc, #40]	; (80096bc <memp_malloc_pool+0x40>)
 8009694:	f00a f894 	bl	80137c0 <iprintf>
  if (desc == NULL) {
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d101      	bne.n	80096a2 <memp_malloc_pool+0x26>
    return NULL;
 800969e:	2300      	movs	r3, #0
 80096a0:	e003      	b.n	80096aa <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f7ff ffc0 	bl	8009628 <do_memp_malloc_pool>
 80096a8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3708      	adds	r7, #8
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop
 80096b4:	08014a50 	.word	0x08014a50
 80096b8:	08014acc 	.word	0x08014acc
 80096bc:	08014aa4 	.word	0x08014aa4

080096c0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	4603      	mov	r3, r0
 80096c8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80096ca:	79fb      	ldrb	r3, [r7, #7]
 80096cc:	2b08      	cmp	r3, #8
 80096ce:	d908      	bls.n	80096e2 <memp_malloc+0x22>
 80096d0:	4b0a      	ldr	r3, [pc, #40]	; (80096fc <memp_malloc+0x3c>)
 80096d2:	f240 1257 	movw	r2, #343	; 0x157
 80096d6:	490a      	ldr	r1, [pc, #40]	; (8009700 <memp_malloc+0x40>)
 80096d8:	480a      	ldr	r0, [pc, #40]	; (8009704 <memp_malloc+0x44>)
 80096da:	f00a f871 	bl	80137c0 <iprintf>
 80096de:	2300      	movs	r3, #0
 80096e0:	e008      	b.n	80096f4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80096e2:	79fb      	ldrb	r3, [r7, #7]
 80096e4:	4a08      	ldr	r2, [pc, #32]	; (8009708 <memp_malloc+0x48>)
 80096e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096ea:	4618      	mov	r0, r3
 80096ec:	f7ff ff9c 	bl	8009628 <do_memp_malloc_pool>
 80096f0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80096f2:	68fb      	ldr	r3, [r7, #12]
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3710      	adds	r7, #16
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}
 80096fc:	08014a50 	.word	0x08014a50
 8009700:	08014ae0 	.word	0x08014ae0
 8009704:	08014aa4 	.word	0x08014aa4
 8009708:	08017210 	.word	0x08017210

0800970c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b084      	sub	sp, #16
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	f003 0303 	and.w	r3, r3, #3
 800971c:	2b00      	cmp	r3, #0
 800971e:	d006      	beq.n	800972e <do_memp_free_pool+0x22>
 8009720:	4b0a      	ldr	r3, [pc, #40]	; (800974c <do_memp_free_pool+0x40>)
 8009722:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8009726:	490a      	ldr	r1, [pc, #40]	; (8009750 <do_memp_free_pool+0x44>)
 8009728:	480a      	ldr	r0, [pc, #40]	; (8009754 <do_memp_free_pool+0x48>)
 800972a:	f00a f849 	bl	80137c0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	689b      	ldr	r3, [r3, #8]
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	689b      	ldr	r3, [r3, #8]
 8009740:	68fa      	ldr	r2, [r7, #12]
 8009742:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8009744:	bf00      	nop
 8009746:	3710      	adds	r7, #16
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}
 800974c:	08014a50 	.word	0x08014a50
 8009750:	08014b00 	.word	0x08014b00
 8009754:	08014aa4 	.word	0x08014aa4

08009758 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d106      	bne.n	8009776 <memp_free_pool+0x1e>
 8009768:	4b0a      	ldr	r3, [pc, #40]	; (8009794 <memp_free_pool+0x3c>)
 800976a:	f240 1295 	movw	r2, #405	; 0x195
 800976e:	490a      	ldr	r1, [pc, #40]	; (8009798 <memp_free_pool+0x40>)
 8009770:	480a      	ldr	r0, [pc, #40]	; (800979c <memp_free_pool+0x44>)
 8009772:	f00a f825 	bl	80137c0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d007      	beq.n	800978c <memp_free_pool+0x34>
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d004      	beq.n	800978c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8009782:	6839      	ldr	r1, [r7, #0]
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f7ff ffc1 	bl	800970c <do_memp_free_pool>
 800978a:	e000      	b.n	800978e <memp_free_pool+0x36>
    return;
 800978c:	bf00      	nop
}
 800978e:	3708      	adds	r7, #8
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}
 8009794:	08014a50 	.word	0x08014a50
 8009798:	08014acc 	.word	0x08014acc
 800979c:	08014aa4 	.word	0x08014aa4

080097a0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	4603      	mov	r3, r0
 80097a8:	6039      	str	r1, [r7, #0]
 80097aa:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80097ac:	79fb      	ldrb	r3, [r7, #7]
 80097ae:	2b08      	cmp	r3, #8
 80097b0:	d907      	bls.n	80097c2 <memp_free+0x22>
 80097b2:	4b0c      	ldr	r3, [pc, #48]	; (80097e4 <memp_free+0x44>)
 80097b4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80097b8:	490b      	ldr	r1, [pc, #44]	; (80097e8 <memp_free+0x48>)
 80097ba:	480c      	ldr	r0, [pc, #48]	; (80097ec <memp_free+0x4c>)
 80097bc:	f00a f800 	bl	80137c0 <iprintf>
 80097c0:	e00c      	b.n	80097dc <memp_free+0x3c>

  if (mem == NULL) {
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d008      	beq.n	80097da <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80097c8:	79fb      	ldrb	r3, [r7, #7]
 80097ca:	4a09      	ldr	r2, [pc, #36]	; (80097f0 <memp_free+0x50>)
 80097cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097d0:	6839      	ldr	r1, [r7, #0]
 80097d2:	4618      	mov	r0, r3
 80097d4:	f7ff ff9a 	bl	800970c <do_memp_free_pool>
 80097d8:	e000      	b.n	80097dc <memp_free+0x3c>
    return;
 80097da:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80097dc:	3708      	adds	r7, #8
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}
 80097e2:	bf00      	nop
 80097e4:	08014a50 	.word	0x08014a50
 80097e8:	08014b20 	.word	0x08014b20
 80097ec:	08014aa4 	.word	0x08014aa4
 80097f0:	08017210 	.word	0x08017210

080097f4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80097f4:	b480      	push	{r7}
 80097f6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80097f8:	bf00      	nop
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr
	...

08009804 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b086      	sub	sp, #24
 8009808:	af00      	add	r7, sp, #0
 800980a:	60f8      	str	r0, [r7, #12]
 800980c:	60b9      	str	r1, [r7, #8]
 800980e:	607a      	str	r2, [r7, #4]
 8009810:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d108      	bne.n	800982a <netif_add+0x26>
 8009818:	4b57      	ldr	r3, [pc, #348]	; (8009978 <netif_add+0x174>)
 800981a:	f240 1227 	movw	r2, #295	; 0x127
 800981e:	4957      	ldr	r1, [pc, #348]	; (800997c <netif_add+0x178>)
 8009820:	4857      	ldr	r0, [pc, #348]	; (8009980 <netif_add+0x17c>)
 8009822:	f009 ffcd 	bl	80137c0 <iprintf>
 8009826:	2300      	movs	r3, #0
 8009828:	e0a2      	b.n	8009970 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800982a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982c:	2b00      	cmp	r3, #0
 800982e:	d108      	bne.n	8009842 <netif_add+0x3e>
 8009830:	4b51      	ldr	r3, [pc, #324]	; (8009978 <netif_add+0x174>)
 8009832:	f44f 7294 	mov.w	r2, #296	; 0x128
 8009836:	4953      	ldr	r1, [pc, #332]	; (8009984 <netif_add+0x180>)
 8009838:	4851      	ldr	r0, [pc, #324]	; (8009980 <netif_add+0x17c>)
 800983a:	f009 ffc1 	bl	80137c0 <iprintf>
 800983e:	2300      	movs	r3, #0
 8009840:	e096      	b.n	8009970 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d101      	bne.n	800984c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8009848:	4b4f      	ldr	r3, [pc, #316]	; (8009988 <netif_add+0x184>)
 800984a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d101      	bne.n	8009856 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8009852:	4b4d      	ldr	r3, [pc, #308]	; (8009988 <netif_add+0x184>)
 8009854:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d101      	bne.n	8009860 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800985c:	4b4a      	ldr	r3, [pc, #296]	; (8009988 <netif_add+0x184>)
 800985e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2200      	movs	r2, #0
 8009864:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2200      	movs	r2, #0
 800986a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2200      	movs	r2, #0
 8009870:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	4a45      	ldr	r2, [pc, #276]	; (800998c <netif_add+0x188>)
 8009876:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2200      	movs	r2, #0
 800987c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2200      	movs	r2, #0
 8009882:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2200      	movs	r2, #0
 800988a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	6a3a      	ldr	r2, [r7, #32]
 8009890:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8009892:	4b3f      	ldr	r3, [pc, #252]	; (8009990 <netif_add+0x18c>)
 8009894:	781a      	ldrb	r2, [r3, #0]
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098a0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	68b9      	ldr	r1, [r7, #8]
 80098a8:	68f8      	ldr	r0, [r7, #12]
 80098aa:	f000 f913 	bl	8009ad4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80098ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b0:	68f8      	ldr	r0, [r7, #12]
 80098b2:	4798      	blx	r3
 80098b4:	4603      	mov	r3, r0
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d001      	beq.n	80098be <netif_add+0xba>
    return NULL;
 80098ba:	2300      	movs	r3, #0
 80098bc:	e058      	b.n	8009970 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80098c4:	2bff      	cmp	r3, #255	; 0xff
 80098c6:	d103      	bne.n	80098d0 <netif_add+0xcc>
        netif->num = 0;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2200      	movs	r2, #0
 80098cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80098d0:	2300      	movs	r3, #0
 80098d2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80098d4:	4b2f      	ldr	r3, [pc, #188]	; (8009994 <netif_add+0x190>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	617b      	str	r3, [r7, #20]
 80098da:	e02b      	b.n	8009934 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80098dc:	697a      	ldr	r2, [r7, #20]
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d106      	bne.n	80098f2 <netif_add+0xee>
 80098e4:	4b24      	ldr	r3, [pc, #144]	; (8009978 <netif_add+0x174>)
 80098e6:	f240 128b 	movw	r2, #395	; 0x18b
 80098ea:	492b      	ldr	r1, [pc, #172]	; (8009998 <netif_add+0x194>)
 80098ec:	4824      	ldr	r0, [pc, #144]	; (8009980 <netif_add+0x17c>)
 80098ee:	f009 ff67 	bl	80137c0 <iprintf>
        num_netifs++;
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	3301      	adds	r3, #1
 80098f6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	2bff      	cmp	r3, #255	; 0xff
 80098fc:	dd06      	ble.n	800990c <netif_add+0x108>
 80098fe:	4b1e      	ldr	r3, [pc, #120]	; (8009978 <netif_add+0x174>)
 8009900:	f240 128d 	movw	r2, #397	; 0x18d
 8009904:	4925      	ldr	r1, [pc, #148]	; (800999c <netif_add+0x198>)
 8009906:	481e      	ldr	r0, [pc, #120]	; (8009980 <netif_add+0x17c>)
 8009908:	f009 ff5a 	bl	80137c0 <iprintf>
        if (netif2->num == netif->num) {
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009918:	429a      	cmp	r2, r3
 800991a:	d108      	bne.n	800992e <netif_add+0x12a>
          netif->num++;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009922:	3301      	adds	r3, #1
 8009924:	b2da      	uxtb	r2, r3
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800992c:	e005      	b.n	800993a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	617b      	str	r3, [r7, #20]
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d1d0      	bne.n	80098dc <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d1be      	bne.n	80098be <netif_add+0xba>
  }
  if (netif->num == 254) {
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009946:	2bfe      	cmp	r3, #254	; 0xfe
 8009948:	d103      	bne.n	8009952 <netif_add+0x14e>
    netif_num = 0;
 800994a:	4b11      	ldr	r3, [pc, #68]	; (8009990 <netif_add+0x18c>)
 800994c:	2200      	movs	r2, #0
 800994e:	701a      	strb	r2, [r3, #0]
 8009950:	e006      	b.n	8009960 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009958:	3301      	adds	r3, #1
 800995a:	b2da      	uxtb	r2, r3
 800995c:	4b0c      	ldr	r3, [pc, #48]	; (8009990 <netif_add+0x18c>)
 800995e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8009960:	4b0c      	ldr	r3, [pc, #48]	; (8009994 <netif_add+0x190>)
 8009962:	681a      	ldr	r2, [r3, #0]
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8009968:	4a0a      	ldr	r2, [pc, #40]	; (8009994 <netif_add+0x190>)
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800996e:	68fb      	ldr	r3, [r7, #12]
}
 8009970:	4618      	mov	r0, r3
 8009972:	3718      	adds	r7, #24
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}
 8009978:	08014b3c 	.word	0x08014b3c
 800997c:	08014bd0 	.word	0x08014bd0
 8009980:	08014b8c 	.word	0x08014b8c
 8009984:	08014bec 	.word	0x08014bec
 8009988:	08017274 	.word	0x08017274
 800998c:	08009daf 	.word	0x08009daf
 8009990:	200085c8 	.word	0x200085c8
 8009994:	200085c0 	.word	0x200085c0
 8009998:	08014c10 	.word	0x08014c10
 800999c:	08014c24 	.word	0x08014c24

080099a0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b082      	sub	sp, #8
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80099aa:	6839      	ldr	r1, [r7, #0]
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f002 fdf3 	bl	800c598 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80099b2:	6839      	ldr	r1, [r7, #0]
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f007 fb2f 	bl	8011018 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80099ba:	bf00      	nop
 80099bc:	3708      	adds	r7, #8
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
	...

080099c4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b086      	sub	sp, #24
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d106      	bne.n	80099e4 <netif_do_set_ipaddr+0x20>
 80099d6:	4b1d      	ldr	r3, [pc, #116]	; (8009a4c <netif_do_set_ipaddr+0x88>)
 80099d8:	f240 12cb 	movw	r2, #459	; 0x1cb
 80099dc:	491c      	ldr	r1, [pc, #112]	; (8009a50 <netif_do_set_ipaddr+0x8c>)
 80099de:	481d      	ldr	r0, [pc, #116]	; (8009a54 <netif_do_set_ipaddr+0x90>)
 80099e0:	f009 feee 	bl	80137c0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d106      	bne.n	80099f8 <netif_do_set_ipaddr+0x34>
 80099ea:	4b18      	ldr	r3, [pc, #96]	; (8009a4c <netif_do_set_ipaddr+0x88>)
 80099ec:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80099f0:	4917      	ldr	r1, [pc, #92]	; (8009a50 <netif_do_set_ipaddr+0x8c>)
 80099f2:	4818      	ldr	r0, [pc, #96]	; (8009a54 <netif_do_set_ipaddr+0x90>)
 80099f4:	f009 fee4 	bl	80137c0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	681a      	ldr	r2, [r3, #0]
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	3304      	adds	r3, #4
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	429a      	cmp	r2, r3
 8009a04:	d01c      	beq.n	8009a40 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	3304      	adds	r3, #4
 8009a10:	681a      	ldr	r2, [r3, #0]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8009a16:	f107 0314 	add.w	r3, r7, #20
 8009a1a:	4619      	mov	r1, r3
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f7ff ffbf 	bl	80099a0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d002      	beq.n	8009a2e <netif_do_set_ipaddr+0x6a>
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	e000      	b.n	8009a30 <netif_do_set_ipaddr+0x6c>
 8009a2e:	2300      	movs	r3, #0
 8009a30:	68fa      	ldr	r2, [r7, #12]
 8009a32:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009a34:	2101      	movs	r1, #1
 8009a36:	68f8      	ldr	r0, [r7, #12]
 8009a38:	f000 f8d2 	bl	8009be0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	e000      	b.n	8009a42 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8009a40:	2300      	movs	r3, #0
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3718      	adds	r7, #24
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	08014b3c 	.word	0x08014b3c
 8009a50:	08014c54 	.word	0x08014c54
 8009a54:	08014b8c 	.word	0x08014b8c

08009a58 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b085      	sub	sp, #20
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	60f8      	str	r0, [r7, #12]
 8009a60:	60b9      	str	r1, [r7, #8]
 8009a62:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	681a      	ldr	r2, [r3, #0]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	3308      	adds	r3, #8
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	d00a      	beq.n	8009a88 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d002      	beq.n	8009a7e <netif_do_set_netmask+0x26>
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	e000      	b.n	8009a80 <netif_do_set_netmask+0x28>
 8009a7e:	2300      	movs	r3, #0
 8009a80:	68fa      	ldr	r2, [r7, #12]
 8009a82:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8009a84:	2301      	movs	r3, #1
 8009a86:	e000      	b.n	8009a8a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8009a88:	2300      	movs	r3, #0
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3714      	adds	r7, #20
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr

08009a96 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8009a96:	b480      	push	{r7}
 8009a98:	b085      	sub	sp, #20
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	60f8      	str	r0, [r7, #12]
 8009a9e:	60b9      	str	r1, [r7, #8]
 8009aa0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	681a      	ldr	r2, [r3, #0]
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	330c      	adds	r3, #12
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	429a      	cmp	r2, r3
 8009aae:	d00a      	beq.n	8009ac6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d002      	beq.n	8009abc <netif_do_set_gw+0x26>
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	e000      	b.n	8009abe <netif_do_set_gw+0x28>
 8009abc:	2300      	movs	r3, #0
 8009abe:	68fa      	ldr	r2, [r7, #12]
 8009ac0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	e000      	b.n	8009ac8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8009ac6:	2300      	movs	r3, #0
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3714      	adds	r7, #20
 8009acc:	46bd      	mov	sp, r7
 8009ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad2:	4770      	bx	lr

08009ad4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b088      	sub	sp, #32
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	60f8      	str	r0, [r7, #12]
 8009adc:	60b9      	str	r1, [r7, #8]
 8009ade:	607a      	str	r2, [r7, #4]
 8009ae0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d101      	bne.n	8009af4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8009af0:	4b1c      	ldr	r3, [pc, #112]	; (8009b64 <netif_set_addr+0x90>)
 8009af2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d101      	bne.n	8009afe <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8009afa:	4b1a      	ldr	r3, [pc, #104]	; (8009b64 <netif_set_addr+0x90>)
 8009afc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d101      	bne.n	8009b08 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8009b04:	4b17      	ldr	r3, [pc, #92]	; (8009b64 <netif_set_addr+0x90>)
 8009b06:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d003      	beq.n	8009b16 <netif_set_addr+0x42>
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d101      	bne.n	8009b1a <netif_set_addr+0x46>
 8009b16:	2301      	movs	r3, #1
 8009b18:	e000      	b.n	8009b1c <netif_set_addr+0x48>
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	617b      	str	r3, [r7, #20]
  if (remove) {
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d006      	beq.n	8009b32 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009b24:	f107 0310 	add.w	r3, r7, #16
 8009b28:	461a      	mov	r2, r3
 8009b2a:	68b9      	ldr	r1, [r7, #8]
 8009b2c:	68f8      	ldr	r0, [r7, #12]
 8009b2e:	f7ff ff49 	bl	80099c4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8009b32:	69fa      	ldr	r2, [r7, #28]
 8009b34:	6879      	ldr	r1, [r7, #4]
 8009b36:	68f8      	ldr	r0, [r7, #12]
 8009b38:	f7ff ff8e 	bl	8009a58 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8009b3c:	69ba      	ldr	r2, [r7, #24]
 8009b3e:	6839      	ldr	r1, [r7, #0]
 8009b40:	68f8      	ldr	r0, [r7, #12]
 8009b42:	f7ff ffa8 	bl	8009a96 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d106      	bne.n	8009b5a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009b4c:	f107 0310 	add.w	r3, r7, #16
 8009b50:	461a      	mov	r2, r3
 8009b52:	68b9      	ldr	r1, [r7, #8]
 8009b54:	68f8      	ldr	r0, [r7, #12]
 8009b56:	f7ff ff35 	bl	80099c4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8009b5a:	bf00      	nop
 8009b5c:	3720      	adds	r7, #32
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	08017274 	.word	0x08017274

08009b68 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b083      	sub	sp, #12
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8009b70:	4a04      	ldr	r2, [pc, #16]	; (8009b84 <netif_set_default+0x1c>)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8009b76:	bf00      	nop
 8009b78:	370c      	adds	r7, #12
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr
 8009b82:	bf00      	nop
 8009b84:	200085c4 	.word	0x200085c4

08009b88 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d107      	bne.n	8009ba6 <netif_set_up+0x1e>
 8009b96:	4b0f      	ldr	r3, [pc, #60]	; (8009bd4 <netif_set_up+0x4c>)
 8009b98:	f44f 7254 	mov.w	r2, #848	; 0x350
 8009b9c:	490e      	ldr	r1, [pc, #56]	; (8009bd8 <netif_set_up+0x50>)
 8009b9e:	480f      	ldr	r0, [pc, #60]	; (8009bdc <netif_set_up+0x54>)
 8009ba0:	f009 fe0e 	bl	80137c0 <iprintf>
 8009ba4:	e013      	b.n	8009bce <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009bac:	f003 0301 	and.w	r3, r3, #1
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d10c      	bne.n	8009bce <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009bba:	f043 0301 	orr.w	r3, r3, #1
 8009bbe:	b2da      	uxtb	r2, r3
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009bc6:	2103      	movs	r1, #3
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f000 f809 	bl	8009be0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8009bce:	3708      	adds	r7, #8
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	08014b3c 	.word	0x08014b3c
 8009bd8:	08014cc4 	.word	0x08014cc4
 8009bdc:	08014b8c 	.word	0x08014b8c

08009be0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b082      	sub	sp, #8
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	460b      	mov	r3, r1
 8009bea:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d106      	bne.n	8009c00 <netif_issue_reports+0x20>
 8009bf2:	4b18      	ldr	r3, [pc, #96]	; (8009c54 <netif_issue_reports+0x74>)
 8009bf4:	f240 326d 	movw	r2, #877	; 0x36d
 8009bf8:	4917      	ldr	r1, [pc, #92]	; (8009c58 <netif_issue_reports+0x78>)
 8009bfa:	4818      	ldr	r0, [pc, #96]	; (8009c5c <netif_issue_reports+0x7c>)
 8009bfc:	f009 fde0 	bl	80137c0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009c06:	f003 0304 	and.w	r3, r3, #4
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d01e      	beq.n	8009c4c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009c14:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d017      	beq.n	8009c4c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009c1c:	78fb      	ldrb	r3, [r7, #3]
 8009c1e:	f003 0301 	and.w	r3, r3, #1
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d013      	beq.n	8009c4e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	3304      	adds	r3, #4
 8009c2a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d00e      	beq.n	8009c4e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009c36:	f003 0308 	and.w	r3, r3, #8
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d007      	beq.n	8009c4e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	3304      	adds	r3, #4
 8009c42:	4619      	mov	r1, r3
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f008 f951 	bl	8011eec <etharp_request>
 8009c4a:	e000      	b.n	8009c4e <netif_issue_reports+0x6e>
    return;
 8009c4c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8009c4e:	3708      	adds	r7, #8
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	08014b3c 	.word	0x08014b3c
 8009c58:	08014ce0 	.word	0x08014ce0
 8009c5c:	08014b8c 	.word	0x08014b8c

08009c60 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b082      	sub	sp, #8
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d107      	bne.n	8009c7e <netif_set_down+0x1e>
 8009c6e:	4b12      	ldr	r3, [pc, #72]	; (8009cb8 <netif_set_down+0x58>)
 8009c70:	f240 329b 	movw	r2, #923	; 0x39b
 8009c74:	4911      	ldr	r1, [pc, #68]	; (8009cbc <netif_set_down+0x5c>)
 8009c76:	4812      	ldr	r0, [pc, #72]	; (8009cc0 <netif_set_down+0x60>)
 8009c78:	f009 fda2 	bl	80137c0 <iprintf>
 8009c7c:	e019      	b.n	8009cb2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009c84:	f003 0301 	and.w	r3, r3, #1
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d012      	beq.n	8009cb2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009c92:	f023 0301 	bic.w	r3, r3, #1
 8009c96:	b2da      	uxtb	r2, r3
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009ca4:	f003 0308 	and.w	r3, r3, #8
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d002      	beq.n	8009cb2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f007 fcdb 	bl	8011668 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8009cb2:	3708      	adds	r7, #8
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}
 8009cb8:	08014b3c 	.word	0x08014b3c
 8009cbc:	08014d04 	.word	0x08014d04
 8009cc0:	08014b8c 	.word	0x08014b8c

08009cc4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b082      	sub	sp, #8
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d107      	bne.n	8009ce2 <netif_set_link_up+0x1e>
 8009cd2:	4b13      	ldr	r3, [pc, #76]	; (8009d20 <netif_set_link_up+0x5c>)
 8009cd4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8009cd8:	4912      	ldr	r1, [pc, #72]	; (8009d24 <netif_set_link_up+0x60>)
 8009cda:	4813      	ldr	r0, [pc, #76]	; (8009d28 <netif_set_link_up+0x64>)
 8009cdc:	f009 fd70 	bl	80137c0 <iprintf>
 8009ce0:	e01b      	b.n	8009d1a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009ce8:	f003 0304 	and.w	r3, r3, #4
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d114      	bne.n	8009d1a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009cf6:	f043 0304 	orr.w	r3, r3, #4
 8009cfa:	b2da      	uxtb	r2, r3
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009d02:	2103      	movs	r1, #3
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f7ff ff6b 	bl	8009be0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	69db      	ldr	r3, [r3, #28]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d003      	beq.n	8009d1a <netif_set_link_up+0x56>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	69db      	ldr	r3, [r3, #28]
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8009d1a:	3708      	adds	r7, #8
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}
 8009d20:	08014b3c 	.word	0x08014b3c
 8009d24:	08014d24 	.word	0x08014d24
 8009d28:	08014b8c 	.word	0x08014b8c

08009d2c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d107      	bne.n	8009d4a <netif_set_link_down+0x1e>
 8009d3a:	4b11      	ldr	r3, [pc, #68]	; (8009d80 <netif_set_link_down+0x54>)
 8009d3c:	f240 4206 	movw	r2, #1030	; 0x406
 8009d40:	4910      	ldr	r1, [pc, #64]	; (8009d84 <netif_set_link_down+0x58>)
 8009d42:	4811      	ldr	r0, [pc, #68]	; (8009d88 <netif_set_link_down+0x5c>)
 8009d44:	f009 fd3c 	bl	80137c0 <iprintf>
 8009d48:	e017      	b.n	8009d7a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009d50:	f003 0304 	and.w	r3, r3, #4
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d010      	beq.n	8009d7a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009d5e:	f023 0304 	bic.w	r3, r3, #4
 8009d62:	b2da      	uxtb	r2, r3
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	69db      	ldr	r3, [r3, #28]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d003      	beq.n	8009d7a <netif_set_link_down+0x4e>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	69db      	ldr	r3, [r3, #28]
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8009d7a:	3708      	adds	r7, #8
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}
 8009d80:	08014b3c 	.word	0x08014b3c
 8009d84:	08014d48 	.word	0x08014d48
 8009d88:	08014b8c 	.word	0x08014b8c

08009d8c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b083      	sub	sp, #12
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d002      	beq.n	8009da2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	683a      	ldr	r2, [r7, #0]
 8009da0:	61da      	str	r2, [r3, #28]
  }
}
 8009da2:	bf00      	nop
 8009da4:	370c      	adds	r7, #12
 8009da6:	46bd      	mov	sp, r7
 8009da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dac:	4770      	bx	lr

08009dae <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8009dae:	b480      	push	{r7}
 8009db0:	b085      	sub	sp, #20
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	60f8      	str	r0, [r7, #12]
 8009db6:	60b9      	str	r1, [r7, #8]
 8009db8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8009dba:	f06f 030b 	mvn.w	r3, #11
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3714      	adds	r7, #20
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc8:	4770      	bx	lr
	...

08009dcc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b085      	sub	sp, #20
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8009dd6:	79fb      	ldrb	r3, [r7, #7]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d013      	beq.n	8009e04 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8009ddc:	4b0d      	ldr	r3, [pc, #52]	; (8009e14 <netif_get_by_index+0x48>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	60fb      	str	r3, [r7, #12]
 8009de2:	e00c      	b.n	8009dfe <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009dea:	3301      	adds	r3, #1
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	79fa      	ldrb	r2, [r7, #7]
 8009df0:	429a      	cmp	r2, r3
 8009df2:	d101      	bne.n	8009df8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	e006      	b.n	8009e06 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	60fb      	str	r3, [r7, #12]
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d1ef      	bne.n	8009de4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8009e04:	2300      	movs	r3, #0
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3714      	adds	r7, #20
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr
 8009e12:	bf00      	nop
 8009e14:	200085c0 	.word	0x200085c0

08009e18 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b082      	sub	sp, #8
 8009e1c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8009e1e:	4b0c      	ldr	r3, [pc, #48]	; (8009e50 <pbuf_free_ooseq+0x38>)
 8009e20:	2200      	movs	r2, #0
 8009e22:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009e24:	4b0b      	ldr	r3, [pc, #44]	; (8009e54 <pbuf_free_ooseq+0x3c>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	607b      	str	r3, [r7, #4]
 8009e2a:	e00a      	b.n	8009e42 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d003      	beq.n	8009e3c <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f002 fbed 	bl	800c614 <tcp_free_ooseq>
      return;
 8009e3a:	e005      	b.n	8009e48 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	68db      	ldr	r3, [r3, #12]
 8009e40:	607b      	str	r3, [r7, #4]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d1f1      	bne.n	8009e2c <pbuf_free_ooseq+0x14>
    }
  }
}
 8009e48:	3708      	adds	r7, #8
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}
 8009e4e:	bf00      	nop
 8009e50:	200085c9 	.word	0x200085c9
 8009e54:	200085d8 	.word	0x200085d8

08009e58 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8009e5c:	4b03      	ldr	r3, [pc, #12]	; (8009e6c <pbuf_pool_is_empty+0x14>)
 8009e5e:	2201      	movs	r2, #1
 8009e60:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8009e62:	bf00      	nop
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr
 8009e6c:	200085c9 	.word	0x200085c9

08009e70 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b085      	sub	sp, #20
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	60f8      	str	r0, [r7, #12]
 8009e78:	60b9      	str	r1, [r7, #8]
 8009e7a:	4611      	mov	r1, r2
 8009e7c:	461a      	mov	r2, r3
 8009e7e:	460b      	mov	r3, r1
 8009e80:	80fb      	strh	r3, [r7, #6]
 8009e82:	4613      	mov	r3, r2
 8009e84:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	68ba      	ldr	r2, [r7, #8]
 8009e90:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	88fa      	ldrh	r2, [r7, #6]
 8009e96:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	88ba      	ldrh	r2, [r7, #4]
 8009e9c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8009e9e:	8b3b      	ldrh	r3, [r7, #24]
 8009ea0:	b2da      	uxtb	r2, r3
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	7f3a      	ldrb	r2, [r7, #28]
 8009eaa:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2201      	movs	r2, #1
 8009eb0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	73da      	strb	r2, [r3, #15]
}
 8009eb8:	bf00      	nop
 8009eba:	3714      	adds	r7, #20
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr

08009ec4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b08c      	sub	sp, #48	; 0x30
 8009ec8:	af02      	add	r7, sp, #8
 8009eca:	4603      	mov	r3, r0
 8009ecc:	71fb      	strb	r3, [r7, #7]
 8009ece:	460b      	mov	r3, r1
 8009ed0:	80bb      	strh	r3, [r7, #4]
 8009ed2:	4613      	mov	r3, r2
 8009ed4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8009ed6:	79fb      	ldrb	r3, [r7, #7]
 8009ed8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8009eda:	887b      	ldrh	r3, [r7, #2]
 8009edc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8009ee0:	d07f      	beq.n	8009fe2 <pbuf_alloc+0x11e>
 8009ee2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8009ee6:	f300 80c8 	bgt.w	800a07a <pbuf_alloc+0x1b6>
 8009eea:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8009eee:	d010      	beq.n	8009f12 <pbuf_alloc+0x4e>
 8009ef0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8009ef4:	f300 80c1 	bgt.w	800a07a <pbuf_alloc+0x1b6>
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	d002      	beq.n	8009f02 <pbuf_alloc+0x3e>
 8009efc:	2b41      	cmp	r3, #65	; 0x41
 8009efe:	f040 80bc 	bne.w	800a07a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8009f02:	887a      	ldrh	r2, [r7, #2]
 8009f04:	88bb      	ldrh	r3, [r7, #4]
 8009f06:	4619      	mov	r1, r3
 8009f08:	2000      	movs	r0, #0
 8009f0a:	f000 f8d1 	bl	800a0b0 <pbuf_alloc_reference>
 8009f0e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8009f10:	e0bd      	b.n	800a08e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8009f12:	2300      	movs	r3, #0
 8009f14:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8009f16:	2300      	movs	r3, #0
 8009f18:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8009f1a:	88bb      	ldrh	r3, [r7, #4]
 8009f1c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8009f1e:	2008      	movs	r0, #8
 8009f20:	f7ff fbce 	bl	80096c0 <memp_malloc>
 8009f24:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d109      	bne.n	8009f40 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8009f2c:	f7ff ff94 	bl	8009e58 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8009f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d002      	beq.n	8009f3c <pbuf_alloc+0x78>
            pbuf_free(p);
 8009f36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f38:	f000 faa8 	bl	800a48c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	e0a7      	b.n	800a090 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8009f40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009f42:	3303      	adds	r3, #3
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	f023 0303 	bic.w	r3, r3, #3
 8009f4a:	b29b      	uxth	r3, r3
 8009f4c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8009f50:	b29b      	uxth	r3, r3
 8009f52:	8b7a      	ldrh	r2, [r7, #26]
 8009f54:	4293      	cmp	r3, r2
 8009f56:	bf28      	it	cs
 8009f58:	4613      	movcs	r3, r2
 8009f5a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8009f5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009f5e:	3310      	adds	r3, #16
 8009f60:	693a      	ldr	r2, [r7, #16]
 8009f62:	4413      	add	r3, r2
 8009f64:	3303      	adds	r3, #3
 8009f66:	f023 0303 	bic.w	r3, r3, #3
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	89f9      	ldrh	r1, [r7, #14]
 8009f6e:	8b7a      	ldrh	r2, [r7, #26]
 8009f70:	2300      	movs	r3, #0
 8009f72:	9301      	str	r3, [sp, #4]
 8009f74:	887b      	ldrh	r3, [r7, #2]
 8009f76:	9300      	str	r3, [sp, #0]
 8009f78:	460b      	mov	r3, r1
 8009f7a:	4601      	mov	r1, r0
 8009f7c:	6938      	ldr	r0, [r7, #16]
 8009f7e:	f7ff ff77 	bl	8009e70 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	f003 0303 	and.w	r3, r3, #3
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d006      	beq.n	8009f9c <pbuf_alloc+0xd8>
 8009f8e:	4b42      	ldr	r3, [pc, #264]	; (800a098 <pbuf_alloc+0x1d4>)
 8009f90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009f94:	4941      	ldr	r1, [pc, #260]	; (800a09c <pbuf_alloc+0x1d8>)
 8009f96:	4842      	ldr	r0, [pc, #264]	; (800a0a0 <pbuf_alloc+0x1dc>)
 8009f98:	f009 fc12 	bl	80137c0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8009f9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009f9e:	3303      	adds	r3, #3
 8009fa0:	f023 0303 	bic.w	r3, r3, #3
 8009fa4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8009fa8:	d106      	bne.n	8009fb8 <pbuf_alloc+0xf4>
 8009faa:	4b3b      	ldr	r3, [pc, #236]	; (800a098 <pbuf_alloc+0x1d4>)
 8009fac:	f44f 7281 	mov.w	r2, #258	; 0x102
 8009fb0:	493c      	ldr	r1, [pc, #240]	; (800a0a4 <pbuf_alloc+0x1e0>)
 8009fb2:	483b      	ldr	r0, [pc, #236]	; (800a0a0 <pbuf_alloc+0x1dc>)
 8009fb4:	f009 fc04 	bl	80137c0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8009fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d102      	bne.n	8009fc4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8009fc2:	e002      	b.n	8009fca <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8009fc4:	69fb      	ldr	r3, [r7, #28]
 8009fc6:	693a      	ldr	r2, [r7, #16]
 8009fc8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8009fce:	8b7a      	ldrh	r2, [r7, #26]
 8009fd0:	89fb      	ldrh	r3, [r7, #14]
 8009fd2:	1ad3      	subs	r3, r2, r3
 8009fd4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8009fda:	8b7b      	ldrh	r3, [r7, #26]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d19e      	bne.n	8009f1e <pbuf_alloc+0x5a>
      break;
 8009fe0:	e055      	b.n	800a08e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8009fe2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009fe4:	3303      	adds	r3, #3
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	f023 0303 	bic.w	r3, r3, #3
 8009fec:	b29a      	uxth	r2, r3
 8009fee:	88bb      	ldrh	r3, [r7, #4]
 8009ff0:	3303      	adds	r3, #3
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	f023 0303 	bic.w	r3, r3, #3
 8009ff8:	b29b      	uxth	r3, r3
 8009ffa:	4413      	add	r3, r2
 8009ffc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8009ffe:	8b3b      	ldrh	r3, [r7, #24]
 800a000:	3310      	adds	r3, #16
 800a002:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a004:	8b3a      	ldrh	r2, [r7, #24]
 800a006:	88bb      	ldrh	r3, [r7, #4]
 800a008:	3303      	adds	r3, #3
 800a00a:	f023 0303 	bic.w	r3, r3, #3
 800a00e:	429a      	cmp	r2, r3
 800a010:	d306      	bcc.n	800a020 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800a012:	8afa      	ldrh	r2, [r7, #22]
 800a014:	88bb      	ldrh	r3, [r7, #4]
 800a016:	3303      	adds	r3, #3
 800a018:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d201      	bcs.n	800a024 <pbuf_alloc+0x160>
        return NULL;
 800a020:	2300      	movs	r3, #0
 800a022:	e035      	b.n	800a090 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800a024:	8afb      	ldrh	r3, [r7, #22]
 800a026:	4618      	mov	r0, r3
 800a028:	f7ff f9ba 	bl	80093a0 <mem_malloc>
 800a02c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800a02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a030:	2b00      	cmp	r3, #0
 800a032:	d101      	bne.n	800a038 <pbuf_alloc+0x174>
        return NULL;
 800a034:	2300      	movs	r3, #0
 800a036:	e02b      	b.n	800a090 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a038:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a03a:	3310      	adds	r3, #16
 800a03c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a03e:	4413      	add	r3, r2
 800a040:	3303      	adds	r3, #3
 800a042:	f023 0303 	bic.w	r3, r3, #3
 800a046:	4618      	mov	r0, r3
 800a048:	88b9      	ldrh	r1, [r7, #4]
 800a04a:	88ba      	ldrh	r2, [r7, #4]
 800a04c:	2300      	movs	r3, #0
 800a04e:	9301      	str	r3, [sp, #4]
 800a050:	887b      	ldrh	r3, [r7, #2]
 800a052:	9300      	str	r3, [sp, #0]
 800a054:	460b      	mov	r3, r1
 800a056:	4601      	mov	r1, r0
 800a058:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a05a:	f7ff ff09 	bl	8009e70 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800a05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	f003 0303 	and.w	r3, r3, #3
 800a066:	2b00      	cmp	r3, #0
 800a068:	d010      	beq.n	800a08c <pbuf_alloc+0x1c8>
 800a06a:	4b0b      	ldr	r3, [pc, #44]	; (800a098 <pbuf_alloc+0x1d4>)
 800a06c:	f44f 7291 	mov.w	r2, #290	; 0x122
 800a070:	490d      	ldr	r1, [pc, #52]	; (800a0a8 <pbuf_alloc+0x1e4>)
 800a072:	480b      	ldr	r0, [pc, #44]	; (800a0a0 <pbuf_alloc+0x1dc>)
 800a074:	f009 fba4 	bl	80137c0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800a078:	e008      	b.n	800a08c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800a07a:	4b07      	ldr	r3, [pc, #28]	; (800a098 <pbuf_alloc+0x1d4>)
 800a07c:	f240 1227 	movw	r2, #295	; 0x127
 800a080:	490a      	ldr	r1, [pc, #40]	; (800a0ac <pbuf_alloc+0x1e8>)
 800a082:	4807      	ldr	r0, [pc, #28]	; (800a0a0 <pbuf_alloc+0x1dc>)
 800a084:	f009 fb9c 	bl	80137c0 <iprintf>
      return NULL;
 800a088:	2300      	movs	r3, #0
 800a08a:	e001      	b.n	800a090 <pbuf_alloc+0x1cc>
      break;
 800a08c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800a08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a090:	4618      	mov	r0, r3
 800a092:	3728      	adds	r7, #40	; 0x28
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}
 800a098:	08014d6c 	.word	0x08014d6c
 800a09c:	08014d9c 	.word	0x08014d9c
 800a0a0:	08014dcc 	.word	0x08014dcc
 800a0a4:	08014df4 	.word	0x08014df4
 800a0a8:	08014e28 	.word	0x08014e28
 800a0ac:	08014e54 	.word	0x08014e54

0800a0b0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b086      	sub	sp, #24
 800a0b4:	af02      	add	r7, sp, #8
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	807b      	strh	r3, [r7, #2]
 800a0bc:	4613      	mov	r3, r2
 800a0be:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800a0c0:	883b      	ldrh	r3, [r7, #0]
 800a0c2:	2b41      	cmp	r3, #65	; 0x41
 800a0c4:	d009      	beq.n	800a0da <pbuf_alloc_reference+0x2a>
 800a0c6:	883b      	ldrh	r3, [r7, #0]
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	d006      	beq.n	800a0da <pbuf_alloc_reference+0x2a>
 800a0cc:	4b0f      	ldr	r3, [pc, #60]	; (800a10c <pbuf_alloc_reference+0x5c>)
 800a0ce:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800a0d2:	490f      	ldr	r1, [pc, #60]	; (800a110 <pbuf_alloc_reference+0x60>)
 800a0d4:	480f      	ldr	r0, [pc, #60]	; (800a114 <pbuf_alloc_reference+0x64>)
 800a0d6:	f009 fb73 	bl	80137c0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800a0da:	2007      	movs	r0, #7
 800a0dc:	f7ff faf0 	bl	80096c0 <memp_malloc>
 800a0e0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d101      	bne.n	800a0ec <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	e00b      	b.n	800a104 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800a0ec:	8879      	ldrh	r1, [r7, #2]
 800a0ee:	887a      	ldrh	r2, [r7, #2]
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	9301      	str	r3, [sp, #4]
 800a0f4:	883b      	ldrh	r3, [r7, #0]
 800a0f6:	9300      	str	r3, [sp, #0]
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	6879      	ldr	r1, [r7, #4]
 800a0fc:	68f8      	ldr	r0, [r7, #12]
 800a0fe:	f7ff feb7 	bl	8009e70 <pbuf_init_alloced_pbuf>
  return p;
 800a102:	68fb      	ldr	r3, [r7, #12]
}
 800a104:	4618      	mov	r0, r3
 800a106:	3710      	adds	r7, #16
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}
 800a10c:	08014d6c 	.word	0x08014d6c
 800a110:	08014e70 	.word	0x08014e70
 800a114:	08014dcc 	.word	0x08014dcc

0800a118 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b088      	sub	sp, #32
 800a11c:	af02      	add	r7, sp, #8
 800a11e:	607b      	str	r3, [r7, #4]
 800a120:	4603      	mov	r3, r0
 800a122:	73fb      	strb	r3, [r7, #15]
 800a124:	460b      	mov	r3, r1
 800a126:	81bb      	strh	r3, [r7, #12]
 800a128:	4613      	mov	r3, r2
 800a12a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800a12c:	7bfb      	ldrb	r3, [r7, #15]
 800a12e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a130:	8a7b      	ldrh	r3, [r7, #18]
 800a132:	3303      	adds	r3, #3
 800a134:	f023 0203 	bic.w	r2, r3, #3
 800a138:	89bb      	ldrh	r3, [r7, #12]
 800a13a:	441a      	add	r2, r3
 800a13c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a13e:	429a      	cmp	r2, r3
 800a140:	d901      	bls.n	800a146 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800a142:	2300      	movs	r3, #0
 800a144:	e018      	b.n	800a178 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800a146:	6a3b      	ldr	r3, [r7, #32]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d007      	beq.n	800a15c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800a14c:	8a7b      	ldrh	r3, [r7, #18]
 800a14e:	3303      	adds	r3, #3
 800a150:	f023 0303 	bic.w	r3, r3, #3
 800a154:	6a3a      	ldr	r2, [r7, #32]
 800a156:	4413      	add	r3, r2
 800a158:	617b      	str	r3, [r7, #20]
 800a15a:	e001      	b.n	800a160 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800a15c:	2300      	movs	r3, #0
 800a15e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	89b9      	ldrh	r1, [r7, #12]
 800a164:	89ba      	ldrh	r2, [r7, #12]
 800a166:	2302      	movs	r3, #2
 800a168:	9301      	str	r3, [sp, #4]
 800a16a:	897b      	ldrh	r3, [r7, #10]
 800a16c:	9300      	str	r3, [sp, #0]
 800a16e:	460b      	mov	r3, r1
 800a170:	6979      	ldr	r1, [r7, #20]
 800a172:	f7ff fe7d 	bl	8009e70 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800a176:	687b      	ldr	r3, [r7, #4]
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3718      	adds	r7, #24
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}

0800a180 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b084      	sub	sp, #16
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	460b      	mov	r3, r1
 800a18a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d106      	bne.n	800a1a0 <pbuf_realloc+0x20>
 800a192:	4b3a      	ldr	r3, [pc, #232]	; (800a27c <pbuf_realloc+0xfc>)
 800a194:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800a198:	4939      	ldr	r1, [pc, #228]	; (800a280 <pbuf_realloc+0x100>)
 800a19a:	483a      	ldr	r0, [pc, #232]	; (800a284 <pbuf_realloc+0x104>)
 800a19c:	f009 fb10 	bl	80137c0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	891b      	ldrh	r3, [r3, #8]
 800a1a4:	887a      	ldrh	r2, [r7, #2]
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d263      	bcs.n	800a272 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	891a      	ldrh	r2, [r3, #8]
 800a1ae:	887b      	ldrh	r3, [r7, #2]
 800a1b0:	1ad3      	subs	r3, r2, r3
 800a1b2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800a1b4:	887b      	ldrh	r3, [r7, #2]
 800a1b6:	817b      	strh	r3, [r7, #10]
  q = p;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800a1bc:	e018      	b.n	800a1f0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	895b      	ldrh	r3, [r3, #10]
 800a1c2:	897a      	ldrh	r2, [r7, #10]
 800a1c4:	1ad3      	subs	r3, r2, r3
 800a1c6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	891a      	ldrh	r2, [r3, #8]
 800a1cc:	893b      	ldrh	r3, [r7, #8]
 800a1ce:	1ad3      	subs	r3, r2, r3
 800a1d0:	b29a      	uxth	r2, r3
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d106      	bne.n	800a1f0 <pbuf_realloc+0x70>
 800a1e2:	4b26      	ldr	r3, [pc, #152]	; (800a27c <pbuf_realloc+0xfc>)
 800a1e4:	f240 12af 	movw	r2, #431	; 0x1af
 800a1e8:	4927      	ldr	r1, [pc, #156]	; (800a288 <pbuf_realloc+0x108>)
 800a1ea:	4826      	ldr	r0, [pc, #152]	; (800a284 <pbuf_realloc+0x104>)
 800a1ec:	f009 fae8 	bl	80137c0 <iprintf>
  while (rem_len > q->len) {
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	895b      	ldrh	r3, [r3, #10]
 800a1f4:	897a      	ldrh	r2, [r7, #10]
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	d8e1      	bhi.n	800a1be <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	7b1b      	ldrb	r3, [r3, #12]
 800a1fe:	f003 030f 	and.w	r3, r3, #15
 800a202:	2b00      	cmp	r3, #0
 800a204:	d121      	bne.n	800a24a <pbuf_realloc+0xca>
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	895b      	ldrh	r3, [r3, #10]
 800a20a:	897a      	ldrh	r2, [r7, #10]
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d01c      	beq.n	800a24a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	7b5b      	ldrb	r3, [r3, #13]
 800a214:	f003 0302 	and.w	r3, r3, #2
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d116      	bne.n	800a24a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	685a      	ldr	r2, [r3, #4]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	1ad3      	subs	r3, r2, r3
 800a224:	b29a      	uxth	r2, r3
 800a226:	897b      	ldrh	r3, [r7, #10]
 800a228:	4413      	add	r3, r2
 800a22a:	b29b      	uxth	r3, r3
 800a22c:	4619      	mov	r1, r3
 800a22e:	68f8      	ldr	r0, [r7, #12]
 800a230:	f7fe ffba 	bl	80091a8 <mem_trim>
 800a234:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d106      	bne.n	800a24a <pbuf_realloc+0xca>
 800a23c:	4b0f      	ldr	r3, [pc, #60]	; (800a27c <pbuf_realloc+0xfc>)
 800a23e:	f240 12bd 	movw	r2, #445	; 0x1bd
 800a242:	4912      	ldr	r1, [pc, #72]	; (800a28c <pbuf_realloc+0x10c>)
 800a244:	480f      	ldr	r0, [pc, #60]	; (800a284 <pbuf_realloc+0x104>)
 800a246:	f009 fabb 	bl	80137c0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	897a      	ldrh	r2, [r7, #10]
 800a24e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	895a      	ldrh	r2, [r3, #10]
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d004      	beq.n	800a26a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4618      	mov	r0, r3
 800a266:	f000 f911 	bl	800a48c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2200      	movs	r2, #0
 800a26e:	601a      	str	r2, [r3, #0]
 800a270:	e000      	b.n	800a274 <pbuf_realloc+0xf4>
    return;
 800a272:	bf00      	nop

}
 800a274:	3710      	adds	r7, #16
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	08014d6c 	.word	0x08014d6c
 800a280:	08014e84 	.word	0x08014e84
 800a284:	08014dcc 	.word	0x08014dcc
 800a288:	08014e9c 	.word	0x08014e9c
 800a28c:	08014eb4 	.word	0x08014eb4

0800a290 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b086      	sub	sp, #24
 800a294:	af00      	add	r7, sp, #0
 800a296:	60f8      	str	r0, [r7, #12]
 800a298:	60b9      	str	r1, [r7, #8]
 800a29a:	4613      	mov	r3, r2
 800a29c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d106      	bne.n	800a2b2 <pbuf_add_header_impl+0x22>
 800a2a4:	4b2b      	ldr	r3, [pc, #172]	; (800a354 <pbuf_add_header_impl+0xc4>)
 800a2a6:	f240 12df 	movw	r2, #479	; 0x1df
 800a2aa:	492b      	ldr	r1, [pc, #172]	; (800a358 <pbuf_add_header_impl+0xc8>)
 800a2ac:	482b      	ldr	r0, [pc, #172]	; (800a35c <pbuf_add_header_impl+0xcc>)
 800a2ae:	f009 fa87 	bl	80137c0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d003      	beq.n	800a2c0 <pbuf_add_header_impl+0x30>
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2be:	d301      	bcc.n	800a2c4 <pbuf_add_header_impl+0x34>
    return 1;
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	e043      	b.n	800a34c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d101      	bne.n	800a2ce <pbuf_add_header_impl+0x3e>
    return 0;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	e03e      	b.n	800a34c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	891a      	ldrh	r2, [r3, #8]
 800a2d6:	8a7b      	ldrh	r3, [r7, #18]
 800a2d8:	4413      	add	r3, r2
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	8a7a      	ldrh	r2, [r7, #18]
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d901      	bls.n	800a2e6 <pbuf_add_header_impl+0x56>
    return 1;
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	e032      	b.n	800a34c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	7b1b      	ldrb	r3, [r3, #12]
 800a2ea:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a2ec:	8a3b      	ldrh	r3, [r7, #16]
 800a2ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d00c      	beq.n	800a310 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	685a      	ldr	r2, [r3, #4]
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	425b      	negs	r3, r3
 800a2fe:	4413      	add	r3, r2
 800a300:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	3310      	adds	r3, #16
 800a306:	697a      	ldr	r2, [r7, #20]
 800a308:	429a      	cmp	r2, r3
 800a30a:	d20d      	bcs.n	800a328 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800a30c:	2301      	movs	r3, #1
 800a30e:	e01d      	b.n	800a34c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800a310:	79fb      	ldrb	r3, [r7, #7]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d006      	beq.n	800a324 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	685a      	ldr	r2, [r3, #4]
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	425b      	negs	r3, r3
 800a31e:	4413      	add	r3, r2
 800a320:	617b      	str	r3, [r7, #20]
 800a322:	e001      	b.n	800a328 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800a324:	2301      	movs	r3, #1
 800a326:	e011      	b.n	800a34c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	697a      	ldr	r2, [r7, #20]
 800a32c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	895a      	ldrh	r2, [r3, #10]
 800a332:	8a7b      	ldrh	r3, [r7, #18]
 800a334:	4413      	add	r3, r2
 800a336:	b29a      	uxth	r2, r3
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	891a      	ldrh	r2, [r3, #8]
 800a340:	8a7b      	ldrh	r3, [r7, #18]
 800a342:	4413      	add	r3, r2
 800a344:	b29a      	uxth	r2, r3
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	811a      	strh	r2, [r3, #8]


  return 0;
 800a34a:	2300      	movs	r3, #0
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3718      	adds	r7, #24
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}
 800a354:	08014d6c 	.word	0x08014d6c
 800a358:	08014ed0 	.word	0x08014ed0
 800a35c:	08014dcc 	.word	0x08014dcc

0800a360 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b082      	sub	sp, #8
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800a36a:	2200      	movs	r2, #0
 800a36c:	6839      	ldr	r1, [r7, #0]
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f7ff ff8e 	bl	800a290 <pbuf_add_header_impl>
 800a374:	4603      	mov	r3, r0
}
 800a376:	4618      	mov	r0, r3
 800a378:	3708      	adds	r7, #8
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
	...

0800a380 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b084      	sub	sp, #16
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d106      	bne.n	800a39e <pbuf_remove_header+0x1e>
 800a390:	4b20      	ldr	r3, [pc, #128]	; (800a414 <pbuf_remove_header+0x94>)
 800a392:	f240 224b 	movw	r2, #587	; 0x24b
 800a396:	4920      	ldr	r1, [pc, #128]	; (800a418 <pbuf_remove_header+0x98>)
 800a398:	4820      	ldr	r0, [pc, #128]	; (800a41c <pbuf_remove_header+0x9c>)
 800a39a:	f009 fa11 	bl	80137c0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d003      	beq.n	800a3ac <pbuf_remove_header+0x2c>
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3aa:	d301      	bcc.n	800a3b0 <pbuf_remove_header+0x30>
    return 1;
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	e02c      	b.n	800a40a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d101      	bne.n	800a3ba <pbuf_remove_header+0x3a>
    return 0;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	e027      	b.n	800a40a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	895b      	ldrh	r3, [r3, #10]
 800a3c2:	89fa      	ldrh	r2, [r7, #14]
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d908      	bls.n	800a3da <pbuf_remove_header+0x5a>
 800a3c8:	4b12      	ldr	r3, [pc, #72]	; (800a414 <pbuf_remove_header+0x94>)
 800a3ca:	f240 2255 	movw	r2, #597	; 0x255
 800a3ce:	4914      	ldr	r1, [pc, #80]	; (800a420 <pbuf_remove_header+0xa0>)
 800a3d0:	4812      	ldr	r0, [pc, #72]	; (800a41c <pbuf_remove_header+0x9c>)
 800a3d2:	f009 f9f5 	bl	80137c0 <iprintf>
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	e017      	b.n	800a40a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	685a      	ldr	r2, [r3, #4]
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	441a      	add	r2, r3
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	895a      	ldrh	r2, [r3, #10]
 800a3f0:	89fb      	ldrh	r3, [r7, #14]
 800a3f2:	1ad3      	subs	r3, r2, r3
 800a3f4:	b29a      	uxth	r2, r3
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	891a      	ldrh	r2, [r3, #8]
 800a3fe:	89fb      	ldrh	r3, [r7, #14]
 800a400:	1ad3      	subs	r3, r2, r3
 800a402:	b29a      	uxth	r2, r3
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800a408:	2300      	movs	r3, #0
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3710      	adds	r7, #16
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop
 800a414:	08014d6c 	.word	0x08014d6c
 800a418:	08014ed0 	.word	0x08014ed0
 800a41c:	08014dcc 	.word	0x08014dcc
 800a420:	08014edc 	.word	0x08014edc

0800a424 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b082      	sub	sp, #8
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	460b      	mov	r3, r1
 800a42e:	807b      	strh	r3, [r7, #2]
 800a430:	4613      	mov	r3, r2
 800a432:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800a434:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	da08      	bge.n	800a44e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800a43c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a440:	425b      	negs	r3, r3
 800a442:	4619      	mov	r1, r3
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f7ff ff9b 	bl	800a380 <pbuf_remove_header>
 800a44a:	4603      	mov	r3, r0
 800a44c:	e007      	b.n	800a45e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800a44e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a452:	787a      	ldrb	r2, [r7, #1]
 800a454:	4619      	mov	r1, r3
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f7ff ff1a 	bl	800a290 <pbuf_add_header_impl>
 800a45c:	4603      	mov	r3, r0
  }
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3708      	adds	r7, #8
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}

0800a466 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800a466:	b580      	push	{r7, lr}
 800a468:	b082      	sub	sp, #8
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]
 800a46e:	460b      	mov	r3, r1
 800a470:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800a472:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a476:	2201      	movs	r2, #1
 800a478:	4619      	mov	r1, r3
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f7ff ffd2 	bl	800a424 <pbuf_header_impl>
 800a480:	4603      	mov	r3, r0
}
 800a482:	4618      	mov	r0, r3
 800a484:	3708      	adds	r7, #8
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}
	...

0800a48c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b086      	sub	sp, #24
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d10b      	bne.n	800a4b2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d106      	bne.n	800a4ae <pbuf_free+0x22>
 800a4a0:	4b38      	ldr	r3, [pc, #224]	; (800a584 <pbuf_free+0xf8>)
 800a4a2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800a4a6:	4938      	ldr	r1, [pc, #224]	; (800a588 <pbuf_free+0xfc>)
 800a4a8:	4838      	ldr	r0, [pc, #224]	; (800a58c <pbuf_free+0x100>)
 800a4aa:	f009 f989 	bl	80137c0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	e063      	b.n	800a57a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800a4b6:	e05c      	b.n	800a572 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	7b9b      	ldrb	r3, [r3, #14]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d106      	bne.n	800a4ce <pbuf_free+0x42>
 800a4c0:	4b30      	ldr	r3, [pc, #192]	; (800a584 <pbuf_free+0xf8>)
 800a4c2:	f240 22f1 	movw	r2, #753	; 0x2f1
 800a4c6:	4932      	ldr	r1, [pc, #200]	; (800a590 <pbuf_free+0x104>)
 800a4c8:	4830      	ldr	r0, [pc, #192]	; (800a58c <pbuf_free+0x100>)
 800a4ca:	f009 f979 	bl	80137c0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	7b9b      	ldrb	r3, [r3, #14]
 800a4d2:	3b01      	subs	r3, #1
 800a4d4:	b2da      	uxtb	r2, r3
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	739a      	strb	r2, [r3, #14]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	7b9b      	ldrb	r3, [r3, #14]
 800a4de:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800a4e0:	7dbb      	ldrb	r3, [r7, #22]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d143      	bne.n	800a56e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	7b1b      	ldrb	r3, [r3, #12]
 800a4f0:	f003 030f 	and.w	r3, r3, #15
 800a4f4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	7b5b      	ldrb	r3, [r3, #13]
 800a4fa:	f003 0302 	and.w	r3, r3, #2
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d011      	beq.n	800a526 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	691b      	ldr	r3, [r3, #16]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d106      	bne.n	800a51c <pbuf_free+0x90>
 800a50e:	4b1d      	ldr	r3, [pc, #116]	; (800a584 <pbuf_free+0xf8>)
 800a510:	f240 22ff 	movw	r2, #767	; 0x2ff
 800a514:	491f      	ldr	r1, [pc, #124]	; (800a594 <pbuf_free+0x108>)
 800a516:	481d      	ldr	r0, [pc, #116]	; (800a58c <pbuf_free+0x100>)
 800a518:	f009 f952 	bl	80137c0 <iprintf>
        pc->custom_free_function(p);
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	691b      	ldr	r3, [r3, #16]
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	4798      	blx	r3
 800a524:	e01d      	b.n	800a562 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800a526:	7bfb      	ldrb	r3, [r7, #15]
 800a528:	2b02      	cmp	r3, #2
 800a52a:	d104      	bne.n	800a536 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800a52c:	6879      	ldr	r1, [r7, #4]
 800a52e:	2008      	movs	r0, #8
 800a530:	f7ff f936 	bl	80097a0 <memp_free>
 800a534:	e015      	b.n	800a562 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800a536:	7bfb      	ldrb	r3, [r7, #15]
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d104      	bne.n	800a546 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800a53c:	6879      	ldr	r1, [r7, #4]
 800a53e:	2007      	movs	r0, #7
 800a540:	f7ff f92e 	bl	80097a0 <memp_free>
 800a544:	e00d      	b.n	800a562 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800a546:	7bfb      	ldrb	r3, [r7, #15]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d103      	bne.n	800a554 <pbuf_free+0xc8>
          mem_free(p);
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f7fe fdc1 	bl	80090d4 <mem_free>
 800a552:	e006      	b.n	800a562 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800a554:	4b0b      	ldr	r3, [pc, #44]	; (800a584 <pbuf_free+0xf8>)
 800a556:	f240 320f 	movw	r2, #783	; 0x30f
 800a55a:	490f      	ldr	r1, [pc, #60]	; (800a598 <pbuf_free+0x10c>)
 800a55c:	480b      	ldr	r0, [pc, #44]	; (800a58c <pbuf_free+0x100>)
 800a55e:	f009 f92f 	bl	80137c0 <iprintf>
        }
      }
      count++;
 800a562:	7dfb      	ldrb	r3, [r7, #23]
 800a564:	3301      	adds	r3, #1
 800a566:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	607b      	str	r3, [r7, #4]
 800a56c:	e001      	b.n	800a572 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800a56e:	2300      	movs	r3, #0
 800a570:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d19f      	bne.n	800a4b8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800a578:	7dfb      	ldrb	r3, [r7, #23]
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3718      	adds	r7, #24
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}
 800a582:	bf00      	nop
 800a584:	08014d6c 	.word	0x08014d6c
 800a588:	08014ed0 	.word	0x08014ed0
 800a58c:	08014dcc 	.word	0x08014dcc
 800a590:	08014efc 	.word	0x08014efc
 800a594:	08014f14 	.word	0x08014f14
 800a598:	08014f38 	.word	0x08014f38

0800a59c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b085      	sub	sp, #20
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800a5a8:	e005      	b.n	800a5b6 <pbuf_clen+0x1a>
    ++len;
 800a5aa:	89fb      	ldrh	r3, [r7, #14]
 800a5ac:	3301      	adds	r3, #1
 800a5ae:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d1f6      	bne.n	800a5aa <pbuf_clen+0xe>
  }
  return len;
 800a5bc:	89fb      	ldrh	r3, [r7, #14]
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3714      	adds	r7, #20
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c8:	4770      	bx	lr
	...

0800a5cc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b082      	sub	sp, #8
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d010      	beq.n	800a5fc <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	7b9b      	ldrb	r3, [r3, #14]
 800a5de:	3301      	adds	r3, #1
 800a5e0:	b2da      	uxtb	r2, r3
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	7b9b      	ldrb	r3, [r3, #14]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d106      	bne.n	800a5fc <pbuf_ref+0x30>
 800a5ee:	4b05      	ldr	r3, [pc, #20]	; (800a604 <pbuf_ref+0x38>)
 800a5f0:	f240 3242 	movw	r2, #834	; 0x342
 800a5f4:	4904      	ldr	r1, [pc, #16]	; (800a608 <pbuf_ref+0x3c>)
 800a5f6:	4805      	ldr	r0, [pc, #20]	; (800a60c <pbuf_ref+0x40>)
 800a5f8:	f009 f8e2 	bl	80137c0 <iprintf>
  }
}
 800a5fc:	bf00      	nop
 800a5fe:	3708      	adds	r7, #8
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}
 800a604:	08014d6c 	.word	0x08014d6c
 800a608:	08014f4c 	.word	0x08014f4c
 800a60c:	08014dcc 	.word	0x08014dcc

0800a610 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b084      	sub	sp, #16
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d002      	beq.n	800a626 <pbuf_cat+0x16>
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d107      	bne.n	800a636 <pbuf_cat+0x26>
 800a626:	4b20      	ldr	r3, [pc, #128]	; (800a6a8 <pbuf_cat+0x98>)
 800a628:	f240 3259 	movw	r2, #857	; 0x359
 800a62c:	491f      	ldr	r1, [pc, #124]	; (800a6ac <pbuf_cat+0x9c>)
 800a62e:	4820      	ldr	r0, [pc, #128]	; (800a6b0 <pbuf_cat+0xa0>)
 800a630:	f009 f8c6 	bl	80137c0 <iprintf>
 800a634:	e034      	b.n	800a6a0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	60fb      	str	r3, [r7, #12]
 800a63a:	e00a      	b.n	800a652 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	891a      	ldrh	r2, [r3, #8]
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	891b      	ldrh	r3, [r3, #8]
 800a644:	4413      	add	r3, r2
 800a646:	b29a      	uxth	r2, r3
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	60fb      	str	r3, [r7, #12]
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d1f0      	bne.n	800a63c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	891a      	ldrh	r2, [r3, #8]
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	895b      	ldrh	r3, [r3, #10]
 800a662:	429a      	cmp	r2, r3
 800a664:	d006      	beq.n	800a674 <pbuf_cat+0x64>
 800a666:	4b10      	ldr	r3, [pc, #64]	; (800a6a8 <pbuf_cat+0x98>)
 800a668:	f240 3262 	movw	r2, #866	; 0x362
 800a66c:	4911      	ldr	r1, [pc, #68]	; (800a6b4 <pbuf_cat+0xa4>)
 800a66e:	4810      	ldr	r0, [pc, #64]	; (800a6b0 <pbuf_cat+0xa0>)
 800a670:	f009 f8a6 	bl	80137c0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d006      	beq.n	800a68a <pbuf_cat+0x7a>
 800a67c:	4b0a      	ldr	r3, [pc, #40]	; (800a6a8 <pbuf_cat+0x98>)
 800a67e:	f240 3263 	movw	r2, #867	; 0x363
 800a682:	490d      	ldr	r1, [pc, #52]	; (800a6b8 <pbuf_cat+0xa8>)
 800a684:	480a      	ldr	r0, [pc, #40]	; (800a6b0 <pbuf_cat+0xa0>)
 800a686:	f009 f89b 	bl	80137c0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	891a      	ldrh	r2, [r3, #8]
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	891b      	ldrh	r3, [r3, #8]
 800a692:	4413      	add	r3, r2
 800a694:	b29a      	uxth	r2, r3
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	683a      	ldr	r2, [r7, #0]
 800a69e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800a6a0:	3710      	adds	r7, #16
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}
 800a6a6:	bf00      	nop
 800a6a8:	08014d6c 	.word	0x08014d6c
 800a6ac:	08014f60 	.word	0x08014f60
 800a6b0:	08014dcc 	.word	0x08014dcc
 800a6b4:	08014f98 	.word	0x08014f98
 800a6b8:	08014fc8 	.word	0x08014fc8

0800a6bc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b082      	sub	sp, #8
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800a6c6:	6839      	ldr	r1, [r7, #0]
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f7ff ffa1 	bl	800a610 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800a6ce:	6838      	ldr	r0, [r7, #0]
 800a6d0:	f7ff ff7c 	bl	800a5cc <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800a6d4:	bf00      	nop
 800a6d6:	3708      	adds	r7, #8
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}

0800a6dc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b086      	sub	sp, #24
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	617b      	str	r3, [r7, #20]
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d008      	beq.n	800a706 <pbuf_copy+0x2a>
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d005      	beq.n	800a706 <pbuf_copy+0x2a>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	891a      	ldrh	r2, [r3, #8]
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	891b      	ldrh	r3, [r3, #8]
 800a702:	429a      	cmp	r2, r3
 800a704:	d209      	bcs.n	800a71a <pbuf_copy+0x3e>
 800a706:	4b57      	ldr	r3, [pc, #348]	; (800a864 <pbuf_copy+0x188>)
 800a708:	f240 32c9 	movw	r2, #969	; 0x3c9
 800a70c:	4956      	ldr	r1, [pc, #344]	; (800a868 <pbuf_copy+0x18c>)
 800a70e:	4857      	ldr	r0, [pc, #348]	; (800a86c <pbuf_copy+0x190>)
 800a710:	f009 f856 	bl	80137c0 <iprintf>
 800a714:	f06f 030f 	mvn.w	r3, #15
 800a718:	e09f      	b.n	800a85a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	895b      	ldrh	r3, [r3, #10]
 800a71e:	461a      	mov	r2, r3
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	1ad2      	subs	r2, r2, r3
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	895b      	ldrh	r3, [r3, #10]
 800a728:	4619      	mov	r1, r3
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	1acb      	subs	r3, r1, r3
 800a72e:	429a      	cmp	r2, r3
 800a730:	d306      	bcc.n	800a740 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	895b      	ldrh	r3, [r3, #10]
 800a736:	461a      	mov	r2, r3
 800a738:	693b      	ldr	r3, [r7, #16]
 800a73a:	1ad3      	subs	r3, r2, r3
 800a73c:	60fb      	str	r3, [r7, #12]
 800a73e:	e005      	b.n	800a74c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	895b      	ldrh	r3, [r3, #10]
 800a744:	461a      	mov	r2, r3
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	1ad3      	subs	r3, r2, r3
 800a74a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	685a      	ldr	r2, [r3, #4]
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	18d0      	adds	r0, r2, r3
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	685a      	ldr	r2, [r3, #4]
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	4413      	add	r3, r2
 800a75c:	68fa      	ldr	r2, [r7, #12]
 800a75e:	4619      	mov	r1, r3
 800a760:	f008 ff84 	bl	801366c <memcpy>
    offset_to += len;
 800a764:	697a      	ldr	r2, [r7, #20]
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	4413      	add	r3, r2
 800a76a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800a76c:	693a      	ldr	r2, [r7, #16]
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	4413      	add	r3, r2
 800a772:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	895b      	ldrh	r3, [r3, #10]
 800a778:	461a      	mov	r2, r3
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d906      	bls.n	800a78e <pbuf_copy+0xb2>
 800a780:	4b38      	ldr	r3, [pc, #224]	; (800a864 <pbuf_copy+0x188>)
 800a782:	f240 32d9 	movw	r2, #985	; 0x3d9
 800a786:	493a      	ldr	r1, [pc, #232]	; (800a870 <pbuf_copy+0x194>)
 800a788:	4838      	ldr	r0, [pc, #224]	; (800a86c <pbuf_copy+0x190>)
 800a78a:	f009 f819 	bl	80137c0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	895b      	ldrh	r3, [r3, #10]
 800a792:	461a      	mov	r2, r3
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	4293      	cmp	r3, r2
 800a798:	d906      	bls.n	800a7a8 <pbuf_copy+0xcc>
 800a79a:	4b32      	ldr	r3, [pc, #200]	; (800a864 <pbuf_copy+0x188>)
 800a79c:	f240 32da 	movw	r2, #986	; 0x3da
 800a7a0:	4934      	ldr	r1, [pc, #208]	; (800a874 <pbuf_copy+0x198>)
 800a7a2:	4832      	ldr	r0, [pc, #200]	; (800a86c <pbuf_copy+0x190>)
 800a7a4:	f009 f80c 	bl	80137c0 <iprintf>
    if (offset_from >= p_from->len) {
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	895b      	ldrh	r3, [r3, #10]
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d304      	bcc.n	800a7be <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	895b      	ldrh	r3, [r3, #10]
 800a7c2:	461a      	mov	r2, r3
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d114      	bne.n	800a7f4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d10c      	bne.n	800a7f4 <pbuf_copy+0x118>
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d009      	beq.n	800a7f4 <pbuf_copy+0x118>
 800a7e0:	4b20      	ldr	r3, [pc, #128]	; (800a864 <pbuf_copy+0x188>)
 800a7e2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800a7e6:	4924      	ldr	r1, [pc, #144]	; (800a878 <pbuf_copy+0x19c>)
 800a7e8:	4820      	ldr	r0, [pc, #128]	; (800a86c <pbuf_copy+0x190>)
 800a7ea:	f008 ffe9 	bl	80137c0 <iprintf>
 800a7ee:	f06f 030f 	mvn.w	r3, #15
 800a7f2:	e032      	b.n	800a85a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d013      	beq.n	800a822 <pbuf_copy+0x146>
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	895a      	ldrh	r2, [r3, #10]
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	891b      	ldrh	r3, [r3, #8]
 800a802:	429a      	cmp	r2, r3
 800a804:	d10d      	bne.n	800a822 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d009      	beq.n	800a822 <pbuf_copy+0x146>
 800a80e:	4b15      	ldr	r3, [pc, #84]	; (800a864 <pbuf_copy+0x188>)
 800a810:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800a814:	4919      	ldr	r1, [pc, #100]	; (800a87c <pbuf_copy+0x1a0>)
 800a816:	4815      	ldr	r0, [pc, #84]	; (800a86c <pbuf_copy+0x190>)
 800a818:	f008 ffd2 	bl	80137c0 <iprintf>
 800a81c:	f06f 0305 	mvn.w	r3, #5
 800a820:	e01b      	b.n	800a85a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d013      	beq.n	800a850 <pbuf_copy+0x174>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	895a      	ldrh	r2, [r3, #10]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	891b      	ldrh	r3, [r3, #8]
 800a830:	429a      	cmp	r2, r3
 800a832:	d10d      	bne.n	800a850 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d009      	beq.n	800a850 <pbuf_copy+0x174>
 800a83c:	4b09      	ldr	r3, [pc, #36]	; (800a864 <pbuf_copy+0x188>)
 800a83e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800a842:	490e      	ldr	r1, [pc, #56]	; (800a87c <pbuf_copy+0x1a0>)
 800a844:	4809      	ldr	r0, [pc, #36]	; (800a86c <pbuf_copy+0x190>)
 800a846:	f008 ffbb 	bl	80137c0 <iprintf>
 800a84a:	f06f 0305 	mvn.w	r3, #5
 800a84e:	e004      	b.n	800a85a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	2b00      	cmp	r3, #0
 800a854:	f47f af61 	bne.w	800a71a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800a858:	2300      	movs	r3, #0
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3718      	adds	r7, #24
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}
 800a862:	bf00      	nop
 800a864:	08014d6c 	.word	0x08014d6c
 800a868:	08015014 	.word	0x08015014
 800a86c:	08014dcc 	.word	0x08014dcc
 800a870:	08015044 	.word	0x08015044
 800a874:	0801505c 	.word	0x0801505c
 800a878:	08015078 	.word	0x08015078
 800a87c:	08015088 	.word	0x08015088

0800a880 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b088      	sub	sp, #32
 800a884:	af00      	add	r7, sp, #0
 800a886:	60f8      	str	r0, [r7, #12]
 800a888:	60b9      	str	r1, [r7, #8]
 800a88a:	4611      	mov	r1, r2
 800a88c:	461a      	mov	r2, r3
 800a88e:	460b      	mov	r3, r1
 800a890:	80fb      	strh	r3, [r7, #6]
 800a892:	4613      	mov	r3, r2
 800a894:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800a896:	2300      	movs	r3, #0
 800a898:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800a89a:	2300      	movs	r3, #0
 800a89c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d108      	bne.n	800a8b6 <pbuf_copy_partial+0x36>
 800a8a4:	4b2b      	ldr	r3, [pc, #172]	; (800a954 <pbuf_copy_partial+0xd4>)
 800a8a6:	f240 420a 	movw	r2, #1034	; 0x40a
 800a8aa:	492b      	ldr	r1, [pc, #172]	; (800a958 <pbuf_copy_partial+0xd8>)
 800a8ac:	482b      	ldr	r0, [pc, #172]	; (800a95c <pbuf_copy_partial+0xdc>)
 800a8ae:	f008 ff87 	bl	80137c0 <iprintf>
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	e04a      	b.n	800a94c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d108      	bne.n	800a8ce <pbuf_copy_partial+0x4e>
 800a8bc:	4b25      	ldr	r3, [pc, #148]	; (800a954 <pbuf_copy_partial+0xd4>)
 800a8be:	f240 420b 	movw	r2, #1035	; 0x40b
 800a8c2:	4927      	ldr	r1, [pc, #156]	; (800a960 <pbuf_copy_partial+0xe0>)
 800a8c4:	4825      	ldr	r0, [pc, #148]	; (800a95c <pbuf_copy_partial+0xdc>)
 800a8c6:	f008 ff7b 	bl	80137c0 <iprintf>
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	e03e      	b.n	800a94c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	61fb      	str	r3, [r7, #28]
 800a8d2:	e034      	b.n	800a93e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800a8d4:	88bb      	ldrh	r3, [r7, #4]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d00a      	beq.n	800a8f0 <pbuf_copy_partial+0x70>
 800a8da:	69fb      	ldr	r3, [r7, #28]
 800a8dc:	895b      	ldrh	r3, [r3, #10]
 800a8de:	88ba      	ldrh	r2, [r7, #4]
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d305      	bcc.n	800a8f0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800a8e4:	69fb      	ldr	r3, [r7, #28]
 800a8e6:	895b      	ldrh	r3, [r3, #10]
 800a8e8:	88ba      	ldrh	r2, [r7, #4]
 800a8ea:	1ad3      	subs	r3, r2, r3
 800a8ec:	80bb      	strh	r3, [r7, #4]
 800a8ee:	e023      	b.n	800a938 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800a8f0:	69fb      	ldr	r3, [r7, #28]
 800a8f2:	895a      	ldrh	r2, [r3, #10]
 800a8f4:	88bb      	ldrh	r3, [r7, #4]
 800a8f6:	1ad3      	subs	r3, r2, r3
 800a8f8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800a8fa:	8b3a      	ldrh	r2, [r7, #24]
 800a8fc:	88fb      	ldrh	r3, [r7, #6]
 800a8fe:	429a      	cmp	r2, r3
 800a900:	d901      	bls.n	800a906 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800a902:	88fb      	ldrh	r3, [r7, #6]
 800a904:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800a906:	8b7b      	ldrh	r3, [r7, #26]
 800a908:	68ba      	ldr	r2, [r7, #8]
 800a90a:	18d0      	adds	r0, r2, r3
 800a90c:	69fb      	ldr	r3, [r7, #28]
 800a90e:	685a      	ldr	r2, [r3, #4]
 800a910:	88bb      	ldrh	r3, [r7, #4]
 800a912:	4413      	add	r3, r2
 800a914:	8b3a      	ldrh	r2, [r7, #24]
 800a916:	4619      	mov	r1, r3
 800a918:	f008 fea8 	bl	801366c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800a91c:	8afa      	ldrh	r2, [r7, #22]
 800a91e:	8b3b      	ldrh	r3, [r7, #24]
 800a920:	4413      	add	r3, r2
 800a922:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800a924:	8b7a      	ldrh	r2, [r7, #26]
 800a926:	8b3b      	ldrh	r3, [r7, #24]
 800a928:	4413      	add	r3, r2
 800a92a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800a92c:	88fa      	ldrh	r2, [r7, #6]
 800a92e:	8b3b      	ldrh	r3, [r7, #24]
 800a930:	1ad3      	subs	r3, r2, r3
 800a932:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800a934:	2300      	movs	r3, #0
 800a936:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a938:	69fb      	ldr	r3, [r7, #28]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	61fb      	str	r3, [r7, #28]
 800a93e:	88fb      	ldrh	r3, [r7, #6]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d002      	beq.n	800a94a <pbuf_copy_partial+0xca>
 800a944:	69fb      	ldr	r3, [r7, #28]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d1c4      	bne.n	800a8d4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800a94a:	8afb      	ldrh	r3, [r7, #22]
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3720      	adds	r7, #32
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}
 800a954:	08014d6c 	.word	0x08014d6c
 800a958:	080150b4 	.word	0x080150b4
 800a95c:	08014dcc 	.word	0x08014dcc
 800a960:	080150d4 	.word	0x080150d4

0800a964 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b084      	sub	sp, #16
 800a968:	af00      	add	r7, sp, #0
 800a96a:	4603      	mov	r3, r0
 800a96c:	603a      	str	r2, [r7, #0]
 800a96e:	71fb      	strb	r3, [r7, #7]
 800a970:	460b      	mov	r3, r1
 800a972:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	8919      	ldrh	r1, [r3, #8]
 800a978:	88ba      	ldrh	r2, [r7, #4]
 800a97a:	79fb      	ldrb	r3, [r7, #7]
 800a97c:	4618      	mov	r0, r3
 800a97e:	f7ff faa1 	bl	8009ec4 <pbuf_alloc>
 800a982:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d101      	bne.n	800a98e <pbuf_clone+0x2a>
    return NULL;
 800a98a:	2300      	movs	r3, #0
 800a98c:	e011      	b.n	800a9b2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800a98e:	6839      	ldr	r1, [r7, #0]
 800a990:	68f8      	ldr	r0, [r7, #12]
 800a992:	f7ff fea3 	bl	800a6dc <pbuf_copy>
 800a996:	4603      	mov	r3, r0
 800a998:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800a99a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d006      	beq.n	800a9b0 <pbuf_clone+0x4c>
 800a9a2:	4b06      	ldr	r3, [pc, #24]	; (800a9bc <pbuf_clone+0x58>)
 800a9a4:	f240 5224 	movw	r2, #1316	; 0x524
 800a9a8:	4905      	ldr	r1, [pc, #20]	; (800a9c0 <pbuf_clone+0x5c>)
 800a9aa:	4806      	ldr	r0, [pc, #24]	; (800a9c4 <pbuf_clone+0x60>)
 800a9ac:	f008 ff08 	bl	80137c0 <iprintf>
  return q;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3710      	adds	r7, #16
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}
 800a9ba:	bf00      	nop
 800a9bc:	08014d6c 	.word	0x08014d6c
 800a9c0:	080151e0 	.word	0x080151e0
 800a9c4:	08014dcc 	.word	0x08014dcc

0800a9c8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800a9cc:	f008 ff10 	bl	80137f0 <rand>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	b29b      	uxth	r3, r3
 800a9d4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800a9de:	b29a      	uxth	r2, r3
 800a9e0:	4b01      	ldr	r3, [pc, #4]	; (800a9e8 <tcp_init+0x20>)
 800a9e2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800a9e4:	bf00      	nop
 800a9e6:	bd80      	pop	{r7, pc}
 800a9e8:	20000034 	.word	0x20000034

0800a9ec <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b082      	sub	sp, #8
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	7d1b      	ldrb	r3, [r3, #20]
 800a9f8:	2b01      	cmp	r3, #1
 800a9fa:	d105      	bne.n	800aa08 <tcp_free+0x1c>
 800a9fc:	4b06      	ldr	r3, [pc, #24]	; (800aa18 <tcp_free+0x2c>)
 800a9fe:	22d4      	movs	r2, #212	; 0xd4
 800aa00:	4906      	ldr	r1, [pc, #24]	; (800aa1c <tcp_free+0x30>)
 800aa02:	4807      	ldr	r0, [pc, #28]	; (800aa20 <tcp_free+0x34>)
 800aa04:	f008 fedc 	bl	80137c0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800aa08:	6879      	ldr	r1, [r7, #4]
 800aa0a:	2001      	movs	r0, #1
 800aa0c:	f7fe fec8 	bl	80097a0 <memp_free>
}
 800aa10:	bf00      	nop
 800aa12:	3708      	adds	r7, #8
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}
 800aa18:	0801526c 	.word	0x0801526c
 800aa1c:	0801529c 	.word	0x0801529c
 800aa20:	080152b0 	.word	0x080152b0

0800aa24 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b082      	sub	sp, #8
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	7d1b      	ldrb	r3, [r3, #20]
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	d105      	bne.n	800aa40 <tcp_free_listen+0x1c>
 800aa34:	4b06      	ldr	r3, [pc, #24]	; (800aa50 <tcp_free_listen+0x2c>)
 800aa36:	22df      	movs	r2, #223	; 0xdf
 800aa38:	4906      	ldr	r1, [pc, #24]	; (800aa54 <tcp_free_listen+0x30>)
 800aa3a:	4807      	ldr	r0, [pc, #28]	; (800aa58 <tcp_free_listen+0x34>)
 800aa3c:	f008 fec0 	bl	80137c0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800aa40:	6879      	ldr	r1, [r7, #4]
 800aa42:	2002      	movs	r0, #2
 800aa44:	f7fe feac 	bl	80097a0 <memp_free>
}
 800aa48:	bf00      	nop
 800aa4a:	3708      	adds	r7, #8
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}
 800aa50:	0801526c 	.word	0x0801526c
 800aa54:	080152d8 	.word	0x080152d8
 800aa58:	080152b0 	.word	0x080152b0

0800aa5c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800aa60:	f001 f85c 	bl	800bb1c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800aa64:	4b07      	ldr	r3, [pc, #28]	; (800aa84 <tcp_tmr+0x28>)
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	3301      	adds	r3, #1
 800aa6a:	b2da      	uxtb	r2, r3
 800aa6c:	4b05      	ldr	r3, [pc, #20]	; (800aa84 <tcp_tmr+0x28>)
 800aa6e:	701a      	strb	r2, [r3, #0]
 800aa70:	4b04      	ldr	r3, [pc, #16]	; (800aa84 <tcp_tmr+0x28>)
 800aa72:	781b      	ldrb	r3, [r3, #0]
 800aa74:	f003 0301 	and.w	r3, r3, #1
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d001      	beq.n	800aa80 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800aa7c:	f000 fd0e 	bl	800b49c <tcp_slowtmr>
  }
}
 800aa80:	bf00      	nop
 800aa82:	bd80      	pop	{r7, pc}
 800aa84:	200085e1 	.word	0x200085e1

0800aa88 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b084      	sub	sp, #16
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d105      	bne.n	800aaa4 <tcp_remove_listener+0x1c>
 800aa98:	4b0d      	ldr	r3, [pc, #52]	; (800aad0 <tcp_remove_listener+0x48>)
 800aa9a:	22ff      	movs	r2, #255	; 0xff
 800aa9c:	490d      	ldr	r1, [pc, #52]	; (800aad4 <tcp_remove_listener+0x4c>)
 800aa9e:	480e      	ldr	r0, [pc, #56]	; (800aad8 <tcp_remove_listener+0x50>)
 800aaa0:	f008 fe8e 	bl	80137c0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	60fb      	str	r3, [r7, #12]
 800aaa8:	e00a      	b.n	800aac0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aaae:	683a      	ldr	r2, [r7, #0]
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d102      	bne.n	800aaba <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	2200      	movs	r2, #0
 800aab8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	68db      	ldr	r3, [r3, #12]
 800aabe:	60fb      	str	r3, [r7, #12]
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d1f1      	bne.n	800aaaa <tcp_remove_listener+0x22>
    }
  }
}
 800aac6:	bf00      	nop
 800aac8:	bf00      	nop
 800aaca:	3710      	adds	r7, #16
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}
 800aad0:	0801526c 	.word	0x0801526c
 800aad4:	080152f4 	.word	0x080152f4
 800aad8:	080152b0 	.word	0x080152b0

0800aadc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b084      	sub	sp, #16
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d106      	bne.n	800aaf8 <tcp_listen_closed+0x1c>
 800aaea:	4b14      	ldr	r3, [pc, #80]	; (800ab3c <tcp_listen_closed+0x60>)
 800aaec:	f240 1211 	movw	r2, #273	; 0x111
 800aaf0:	4913      	ldr	r1, [pc, #76]	; (800ab40 <tcp_listen_closed+0x64>)
 800aaf2:	4814      	ldr	r0, [pc, #80]	; (800ab44 <tcp_listen_closed+0x68>)
 800aaf4:	f008 fe64 	bl	80137c0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	7d1b      	ldrb	r3, [r3, #20]
 800aafc:	2b01      	cmp	r3, #1
 800aafe:	d006      	beq.n	800ab0e <tcp_listen_closed+0x32>
 800ab00:	4b0e      	ldr	r3, [pc, #56]	; (800ab3c <tcp_listen_closed+0x60>)
 800ab02:	f44f 7289 	mov.w	r2, #274	; 0x112
 800ab06:	4910      	ldr	r1, [pc, #64]	; (800ab48 <tcp_listen_closed+0x6c>)
 800ab08:	480e      	ldr	r0, [pc, #56]	; (800ab44 <tcp_listen_closed+0x68>)
 800ab0a:	f008 fe59 	bl	80137c0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ab0e:	2301      	movs	r3, #1
 800ab10:	60fb      	str	r3, [r7, #12]
 800ab12:	e00b      	b.n	800ab2c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800ab14:	4a0d      	ldr	r2, [pc, #52]	; (800ab4c <tcp_listen_closed+0x70>)
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	6879      	ldr	r1, [r7, #4]
 800ab20:	4618      	mov	r0, r3
 800ab22:	f7ff ffb1 	bl	800aa88 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	3301      	adds	r3, #1
 800ab2a:	60fb      	str	r3, [r7, #12]
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2b03      	cmp	r3, #3
 800ab30:	d9f0      	bls.n	800ab14 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800ab32:	bf00      	nop
 800ab34:	bf00      	nop
 800ab36:	3710      	adds	r7, #16
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	0801526c 	.word	0x0801526c
 800ab40:	0801531c 	.word	0x0801531c
 800ab44:	080152b0 	.word	0x080152b0
 800ab48:	08015328 	.word	0x08015328
 800ab4c:	0801724c 	.word	0x0801724c

0800ab50 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800ab50:	b5b0      	push	{r4, r5, r7, lr}
 800ab52:	b088      	sub	sp, #32
 800ab54:	af04      	add	r7, sp, #16
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	460b      	mov	r3, r1
 800ab5a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d106      	bne.n	800ab70 <tcp_close_shutdown+0x20>
 800ab62:	4b63      	ldr	r3, [pc, #396]	; (800acf0 <tcp_close_shutdown+0x1a0>)
 800ab64:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800ab68:	4962      	ldr	r1, [pc, #392]	; (800acf4 <tcp_close_shutdown+0x1a4>)
 800ab6a:	4863      	ldr	r0, [pc, #396]	; (800acf8 <tcp_close_shutdown+0x1a8>)
 800ab6c:	f008 fe28 	bl	80137c0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800ab70:	78fb      	ldrb	r3, [r7, #3]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d066      	beq.n	800ac44 <tcp_close_shutdown+0xf4>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	7d1b      	ldrb	r3, [r3, #20]
 800ab7a:	2b04      	cmp	r3, #4
 800ab7c:	d003      	beq.n	800ab86 <tcp_close_shutdown+0x36>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	7d1b      	ldrb	r3, [r3, #20]
 800ab82:	2b07      	cmp	r3, #7
 800ab84:	d15e      	bne.n	800ac44 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d104      	bne.n	800ab98 <tcp_close_shutdown+0x48>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab92:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ab96:	d055      	beq.n	800ac44 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	8b5b      	ldrh	r3, [r3, #26]
 800ab9c:	f003 0310 	and.w	r3, r3, #16
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d106      	bne.n	800abb2 <tcp_close_shutdown+0x62>
 800aba4:	4b52      	ldr	r3, [pc, #328]	; (800acf0 <tcp_close_shutdown+0x1a0>)
 800aba6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800abaa:	4954      	ldr	r1, [pc, #336]	; (800acfc <tcp_close_shutdown+0x1ac>)
 800abac:	4852      	ldr	r0, [pc, #328]	; (800acf8 <tcp_close_shutdown+0x1a8>)
 800abae:	f008 fe07 	bl	80137c0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800abba:	687d      	ldr	r5, [r7, #4]
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	3304      	adds	r3, #4
 800abc0:	687a      	ldr	r2, [r7, #4]
 800abc2:	8ad2      	ldrh	r2, [r2, #22]
 800abc4:	6879      	ldr	r1, [r7, #4]
 800abc6:	8b09      	ldrh	r1, [r1, #24]
 800abc8:	9102      	str	r1, [sp, #8]
 800abca:	9201      	str	r2, [sp, #4]
 800abcc:	9300      	str	r3, [sp, #0]
 800abce:	462b      	mov	r3, r5
 800abd0:	4622      	mov	r2, r4
 800abd2:	4601      	mov	r1, r0
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f005 fd89 	bl	80106ec <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f001 fb66 	bl	800c2ac <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800abe0:	4b47      	ldr	r3, [pc, #284]	; (800ad00 <tcp_close_shutdown+0x1b0>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	687a      	ldr	r2, [r7, #4]
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d105      	bne.n	800abf6 <tcp_close_shutdown+0xa6>
 800abea:	4b45      	ldr	r3, [pc, #276]	; (800ad00 <tcp_close_shutdown+0x1b0>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	68db      	ldr	r3, [r3, #12]
 800abf0:	4a43      	ldr	r2, [pc, #268]	; (800ad00 <tcp_close_shutdown+0x1b0>)
 800abf2:	6013      	str	r3, [r2, #0]
 800abf4:	e013      	b.n	800ac1e <tcp_close_shutdown+0xce>
 800abf6:	4b42      	ldr	r3, [pc, #264]	; (800ad00 <tcp_close_shutdown+0x1b0>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	60fb      	str	r3, [r7, #12]
 800abfc:	e00c      	b.n	800ac18 <tcp_close_shutdown+0xc8>
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	68db      	ldr	r3, [r3, #12]
 800ac02:	687a      	ldr	r2, [r7, #4]
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d104      	bne.n	800ac12 <tcp_close_shutdown+0xc2>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	68da      	ldr	r2, [r3, #12]
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	60da      	str	r2, [r3, #12]
 800ac10:	e005      	b.n	800ac1e <tcp_close_shutdown+0xce>
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	68db      	ldr	r3, [r3, #12]
 800ac16:	60fb      	str	r3, [r7, #12]
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d1ef      	bne.n	800abfe <tcp_close_shutdown+0xae>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2200      	movs	r2, #0
 800ac22:	60da      	str	r2, [r3, #12]
 800ac24:	4b37      	ldr	r3, [pc, #220]	; (800ad04 <tcp_close_shutdown+0x1b4>)
 800ac26:	2201      	movs	r2, #1
 800ac28:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800ac2a:	4b37      	ldr	r3, [pc, #220]	; (800ad08 <tcp_close_shutdown+0x1b8>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	687a      	ldr	r2, [r7, #4]
 800ac30:	429a      	cmp	r2, r3
 800ac32:	d102      	bne.n	800ac3a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800ac34:	f003 fffe 	bl	800ec34 <tcp_trigger_input_pcb_close>
 800ac38:	e002      	b.n	800ac40 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f7ff fed6 	bl	800a9ec <tcp_free>
      }
      return ERR_OK;
 800ac40:	2300      	movs	r3, #0
 800ac42:	e050      	b.n	800ace6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	7d1b      	ldrb	r3, [r3, #20]
 800ac48:	2b02      	cmp	r3, #2
 800ac4a:	d03b      	beq.n	800acc4 <tcp_close_shutdown+0x174>
 800ac4c:	2b02      	cmp	r3, #2
 800ac4e:	dc44      	bgt.n	800acda <tcp_close_shutdown+0x18a>
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d002      	beq.n	800ac5a <tcp_close_shutdown+0x10a>
 800ac54:	2b01      	cmp	r3, #1
 800ac56:	d02a      	beq.n	800acae <tcp_close_shutdown+0x15e>
 800ac58:	e03f      	b.n	800acda <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	8adb      	ldrh	r3, [r3, #22]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d021      	beq.n	800aca6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ac62:	4b2a      	ldr	r3, [pc, #168]	; (800ad0c <tcp_close_shutdown+0x1bc>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	687a      	ldr	r2, [r7, #4]
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	d105      	bne.n	800ac78 <tcp_close_shutdown+0x128>
 800ac6c:	4b27      	ldr	r3, [pc, #156]	; (800ad0c <tcp_close_shutdown+0x1bc>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	68db      	ldr	r3, [r3, #12]
 800ac72:	4a26      	ldr	r2, [pc, #152]	; (800ad0c <tcp_close_shutdown+0x1bc>)
 800ac74:	6013      	str	r3, [r2, #0]
 800ac76:	e013      	b.n	800aca0 <tcp_close_shutdown+0x150>
 800ac78:	4b24      	ldr	r3, [pc, #144]	; (800ad0c <tcp_close_shutdown+0x1bc>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	60bb      	str	r3, [r7, #8]
 800ac7e:	e00c      	b.n	800ac9a <tcp_close_shutdown+0x14a>
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	68db      	ldr	r3, [r3, #12]
 800ac84:	687a      	ldr	r2, [r7, #4]
 800ac86:	429a      	cmp	r2, r3
 800ac88:	d104      	bne.n	800ac94 <tcp_close_shutdown+0x144>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	68da      	ldr	r2, [r3, #12]
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	60da      	str	r2, [r3, #12]
 800ac92:	e005      	b.n	800aca0 <tcp_close_shutdown+0x150>
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	68db      	ldr	r3, [r3, #12]
 800ac98:	60bb      	str	r3, [r7, #8]
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d1ef      	bne.n	800ac80 <tcp_close_shutdown+0x130>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2200      	movs	r2, #0
 800aca4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f7ff fea0 	bl	800a9ec <tcp_free>
      break;
 800acac:	e01a      	b.n	800ace4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f7ff ff14 	bl	800aadc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800acb4:	6879      	ldr	r1, [r7, #4]
 800acb6:	4816      	ldr	r0, [pc, #88]	; (800ad10 <tcp_close_shutdown+0x1c0>)
 800acb8:	f001 fb48 	bl	800c34c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f7ff feb1 	bl	800aa24 <tcp_free_listen>
      break;
 800acc2:	e00f      	b.n	800ace4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800acc4:	6879      	ldr	r1, [r7, #4]
 800acc6:	480e      	ldr	r0, [pc, #56]	; (800ad00 <tcp_close_shutdown+0x1b0>)
 800acc8:	f001 fb40 	bl	800c34c <tcp_pcb_remove>
 800accc:	4b0d      	ldr	r3, [pc, #52]	; (800ad04 <tcp_close_shutdown+0x1b4>)
 800acce:	2201      	movs	r2, #1
 800acd0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f7ff fe8a 	bl	800a9ec <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800acd8:	e004      	b.n	800ace4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f000 f81a 	bl	800ad14 <tcp_close_shutdown_fin>
 800ace0:	4603      	mov	r3, r0
 800ace2:	e000      	b.n	800ace6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800ace4:	2300      	movs	r3, #0
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3710      	adds	r7, #16
 800acea:	46bd      	mov	sp, r7
 800acec:	bdb0      	pop	{r4, r5, r7, pc}
 800acee:	bf00      	nop
 800acf0:	0801526c 	.word	0x0801526c
 800acf4:	08015340 	.word	0x08015340
 800acf8:	080152b0 	.word	0x080152b0
 800acfc:	08015360 	.word	0x08015360
 800ad00:	200085d8 	.word	0x200085d8
 800ad04:	200085e0 	.word	0x200085e0
 800ad08:	20008618 	.word	0x20008618
 800ad0c:	200085d0 	.word	0x200085d0
 800ad10:	200085d4 	.word	0x200085d4

0800ad14 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d106      	bne.n	800ad30 <tcp_close_shutdown_fin+0x1c>
 800ad22:	4b2e      	ldr	r3, [pc, #184]	; (800addc <tcp_close_shutdown_fin+0xc8>)
 800ad24:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800ad28:	492d      	ldr	r1, [pc, #180]	; (800ade0 <tcp_close_shutdown_fin+0xcc>)
 800ad2a:	482e      	ldr	r0, [pc, #184]	; (800ade4 <tcp_close_shutdown_fin+0xd0>)
 800ad2c:	f008 fd48 	bl	80137c0 <iprintf>

  switch (pcb->state) {
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	7d1b      	ldrb	r3, [r3, #20]
 800ad34:	2b07      	cmp	r3, #7
 800ad36:	d020      	beq.n	800ad7a <tcp_close_shutdown_fin+0x66>
 800ad38:	2b07      	cmp	r3, #7
 800ad3a:	dc2b      	bgt.n	800ad94 <tcp_close_shutdown_fin+0x80>
 800ad3c:	2b03      	cmp	r3, #3
 800ad3e:	d002      	beq.n	800ad46 <tcp_close_shutdown_fin+0x32>
 800ad40:	2b04      	cmp	r3, #4
 800ad42:	d00d      	beq.n	800ad60 <tcp_close_shutdown_fin+0x4c>
 800ad44:	e026      	b.n	800ad94 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f004 fdde 	bl	800f908 <tcp_send_fin>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ad50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d11f      	bne.n	800ad98 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2205      	movs	r2, #5
 800ad5c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ad5e:	e01b      	b.n	800ad98 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f004 fdd1 	bl	800f908 <tcp_send_fin>
 800ad66:	4603      	mov	r3, r0
 800ad68:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ad6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d114      	bne.n	800ad9c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2205      	movs	r2, #5
 800ad76:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ad78:	e010      	b.n	800ad9c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f004 fdc4 	bl	800f908 <tcp_send_fin>
 800ad80:	4603      	mov	r3, r0
 800ad82:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ad84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d109      	bne.n	800ada0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2209      	movs	r2, #9
 800ad90:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ad92:	e005      	b.n	800ada0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800ad94:	2300      	movs	r3, #0
 800ad96:	e01c      	b.n	800add2 <tcp_close_shutdown_fin+0xbe>
      break;
 800ad98:	bf00      	nop
 800ad9a:	e002      	b.n	800ada2 <tcp_close_shutdown_fin+0x8e>
      break;
 800ad9c:	bf00      	nop
 800ad9e:	e000      	b.n	800ada2 <tcp_close_shutdown_fin+0x8e>
      break;
 800ada0:	bf00      	nop
  }

  if (err == ERR_OK) {
 800ada2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d103      	bne.n	800adb2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f004 feea 	bl	800fb84 <tcp_output>
 800adb0:	e00d      	b.n	800adce <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800adb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800adb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adba:	d108      	bne.n	800adce <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	8b5b      	ldrh	r3, [r3, #26]
 800adc0:	f043 0308 	orr.w	r3, r3, #8
 800adc4:	b29a      	uxth	r2, r3
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800adca:	2300      	movs	r3, #0
 800adcc:	e001      	b.n	800add2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800adce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800add2:	4618      	mov	r0, r3
 800add4:	3710      	adds	r7, #16
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}
 800adda:	bf00      	nop
 800addc:	0801526c 	.word	0x0801526c
 800ade0:	0801531c 	.word	0x0801531c
 800ade4:	080152b0 	.word	0x080152b0

0800ade8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b082      	sub	sp, #8
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d109      	bne.n	800ae0a <tcp_close+0x22>
 800adf6:	4b0f      	ldr	r3, [pc, #60]	; (800ae34 <tcp_close+0x4c>)
 800adf8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800adfc:	490e      	ldr	r1, [pc, #56]	; (800ae38 <tcp_close+0x50>)
 800adfe:	480f      	ldr	r0, [pc, #60]	; (800ae3c <tcp_close+0x54>)
 800ae00:	f008 fcde 	bl	80137c0 <iprintf>
 800ae04:	f06f 030f 	mvn.w	r3, #15
 800ae08:	e00f      	b.n	800ae2a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	7d1b      	ldrb	r3, [r3, #20]
 800ae0e:	2b01      	cmp	r3, #1
 800ae10:	d006      	beq.n	800ae20 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	8b5b      	ldrh	r3, [r3, #26]
 800ae16:	f043 0310 	orr.w	r3, r3, #16
 800ae1a:	b29a      	uxth	r2, r3
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800ae20:	2101      	movs	r1, #1
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f7ff fe94 	bl	800ab50 <tcp_close_shutdown>
 800ae28:	4603      	mov	r3, r0
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3708      	adds	r7, #8
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}
 800ae32:	bf00      	nop
 800ae34:	0801526c 	.word	0x0801526c
 800ae38:	0801537c 	.word	0x0801537c
 800ae3c:	080152b0 	.word	0x080152b0

0800ae40 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b08e      	sub	sp, #56	; 0x38
 800ae44:	af04      	add	r7, sp, #16
 800ae46:	6078      	str	r0, [r7, #4]
 800ae48:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d107      	bne.n	800ae60 <tcp_abandon+0x20>
 800ae50:	4b52      	ldr	r3, [pc, #328]	; (800af9c <tcp_abandon+0x15c>)
 800ae52:	f240 223d 	movw	r2, #573	; 0x23d
 800ae56:	4952      	ldr	r1, [pc, #328]	; (800afa0 <tcp_abandon+0x160>)
 800ae58:	4852      	ldr	r0, [pc, #328]	; (800afa4 <tcp_abandon+0x164>)
 800ae5a:	f008 fcb1 	bl	80137c0 <iprintf>
 800ae5e:	e099      	b.n	800af94 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	7d1b      	ldrb	r3, [r3, #20]
 800ae64:	2b01      	cmp	r3, #1
 800ae66:	d106      	bne.n	800ae76 <tcp_abandon+0x36>
 800ae68:	4b4c      	ldr	r3, [pc, #304]	; (800af9c <tcp_abandon+0x15c>)
 800ae6a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800ae6e:	494e      	ldr	r1, [pc, #312]	; (800afa8 <tcp_abandon+0x168>)
 800ae70:	484c      	ldr	r0, [pc, #304]	; (800afa4 <tcp_abandon+0x164>)
 800ae72:	f008 fca5 	bl	80137c0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	7d1b      	ldrb	r3, [r3, #20]
 800ae7a:	2b0a      	cmp	r3, #10
 800ae7c:	d107      	bne.n	800ae8e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800ae7e:	6879      	ldr	r1, [r7, #4]
 800ae80:	484a      	ldr	r0, [pc, #296]	; (800afac <tcp_abandon+0x16c>)
 800ae82:	f001 fa63 	bl	800c34c <tcp_pcb_remove>
    tcp_free(pcb);
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f7ff fdb0 	bl	800a9ec <tcp_free>
 800ae8c:	e082      	b.n	800af94 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800ae92:	2300      	movs	r3, #0
 800ae94:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae9a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aea8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	691b      	ldr	r3, [r3, #16]
 800aeae:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	7d1b      	ldrb	r3, [r3, #20]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d126      	bne.n	800af06 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	8adb      	ldrh	r3, [r3, #22]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d02e      	beq.n	800af1e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800aec0:	4b3b      	ldr	r3, [pc, #236]	; (800afb0 <tcp_abandon+0x170>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	687a      	ldr	r2, [r7, #4]
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d105      	bne.n	800aed6 <tcp_abandon+0x96>
 800aeca:	4b39      	ldr	r3, [pc, #228]	; (800afb0 <tcp_abandon+0x170>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	68db      	ldr	r3, [r3, #12]
 800aed0:	4a37      	ldr	r2, [pc, #220]	; (800afb0 <tcp_abandon+0x170>)
 800aed2:	6013      	str	r3, [r2, #0]
 800aed4:	e013      	b.n	800aefe <tcp_abandon+0xbe>
 800aed6:	4b36      	ldr	r3, [pc, #216]	; (800afb0 <tcp_abandon+0x170>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	61fb      	str	r3, [r7, #28]
 800aedc:	e00c      	b.n	800aef8 <tcp_abandon+0xb8>
 800aede:	69fb      	ldr	r3, [r7, #28]
 800aee0:	68db      	ldr	r3, [r3, #12]
 800aee2:	687a      	ldr	r2, [r7, #4]
 800aee4:	429a      	cmp	r2, r3
 800aee6:	d104      	bne.n	800aef2 <tcp_abandon+0xb2>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	68da      	ldr	r2, [r3, #12]
 800aeec:	69fb      	ldr	r3, [r7, #28]
 800aeee:	60da      	str	r2, [r3, #12]
 800aef0:	e005      	b.n	800aefe <tcp_abandon+0xbe>
 800aef2:	69fb      	ldr	r3, [r7, #28]
 800aef4:	68db      	ldr	r3, [r3, #12]
 800aef6:	61fb      	str	r3, [r7, #28]
 800aef8:	69fb      	ldr	r3, [r7, #28]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d1ef      	bne.n	800aede <tcp_abandon+0x9e>
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2200      	movs	r2, #0
 800af02:	60da      	str	r2, [r3, #12]
 800af04:	e00b      	b.n	800af1e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	8adb      	ldrh	r3, [r3, #22]
 800af0e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800af10:	6879      	ldr	r1, [r7, #4]
 800af12:	4828      	ldr	r0, [pc, #160]	; (800afb4 <tcp_abandon+0x174>)
 800af14:	f001 fa1a 	bl	800c34c <tcp_pcb_remove>
 800af18:	4b27      	ldr	r3, [pc, #156]	; (800afb8 <tcp_abandon+0x178>)
 800af1a:	2201      	movs	r2, #1
 800af1c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af22:	2b00      	cmp	r3, #0
 800af24:	d004      	beq.n	800af30 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af2a:	4618      	mov	r0, r3
 800af2c:	f000 fed6 	bl	800bcdc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af34:	2b00      	cmp	r3, #0
 800af36:	d004      	beq.n	800af42 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af3c:	4618      	mov	r0, r3
 800af3e:	f000 fecd 	bl	800bcdc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af46:	2b00      	cmp	r3, #0
 800af48:	d004      	beq.n	800af54 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af4e:	4618      	mov	r0, r3
 800af50:	f000 fec4 	bl	800bcdc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800af54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af56:	2b00      	cmp	r3, #0
 800af58:	d00e      	beq.n	800af78 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800af5a:	6879      	ldr	r1, [r7, #4]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	3304      	adds	r3, #4
 800af60:	687a      	ldr	r2, [r7, #4]
 800af62:	8b12      	ldrh	r2, [r2, #24]
 800af64:	9202      	str	r2, [sp, #8]
 800af66:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800af68:	9201      	str	r2, [sp, #4]
 800af6a:	9300      	str	r3, [sp, #0]
 800af6c:	460b      	mov	r3, r1
 800af6e:	697a      	ldr	r2, [r7, #20]
 800af70:	69b9      	ldr	r1, [r7, #24]
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f005 fbba 	bl	80106ec <tcp_rst>
    }
    last_state = pcb->state;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	7d1b      	ldrb	r3, [r3, #20]
 800af7c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f7ff fd34 	bl	800a9ec <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d004      	beq.n	800af94 <tcp_abandon+0x154>
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	f06f 010c 	mvn.w	r1, #12
 800af90:	68f8      	ldr	r0, [r7, #12]
 800af92:	4798      	blx	r3
  }
}
 800af94:	3728      	adds	r7, #40	; 0x28
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
 800af9a:	bf00      	nop
 800af9c:	0801526c 	.word	0x0801526c
 800afa0:	080153b0 	.word	0x080153b0
 800afa4:	080152b0 	.word	0x080152b0
 800afa8:	080153cc 	.word	0x080153cc
 800afac:	200085dc 	.word	0x200085dc
 800afb0:	200085d0 	.word	0x200085d0
 800afb4:	200085d8 	.word	0x200085d8
 800afb8:	200085e0 	.word	0x200085e0

0800afbc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b082      	sub	sp, #8
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800afc4:	2101      	movs	r1, #1
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f7ff ff3a 	bl	800ae40 <tcp_abandon>
}
 800afcc:	bf00      	nop
 800afce:	3708      	adds	r7, #8
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}

0800afd4 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b088      	sub	sp, #32
 800afd8:	af00      	add	r7, sp, #0
 800afda:	60f8      	str	r0, [r7, #12]
 800afdc:	60b9      	str	r1, [r7, #8]
 800afde:	4613      	mov	r3, r2
 800afe0:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800afe2:	2304      	movs	r3, #4
 800afe4:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d101      	bne.n	800aff0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800afec:	4b3e      	ldr	r3, [pc, #248]	; (800b0e8 <tcp_bind+0x114>)
 800afee:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d109      	bne.n	800b00a <tcp_bind+0x36>
 800aff6:	4b3d      	ldr	r3, [pc, #244]	; (800b0ec <tcp_bind+0x118>)
 800aff8:	f240 22a9 	movw	r2, #681	; 0x2a9
 800affc:	493c      	ldr	r1, [pc, #240]	; (800b0f0 <tcp_bind+0x11c>)
 800affe:	483d      	ldr	r0, [pc, #244]	; (800b0f4 <tcp_bind+0x120>)
 800b000:	f008 fbde 	bl	80137c0 <iprintf>
 800b004:	f06f 030f 	mvn.w	r3, #15
 800b008:	e06a      	b.n	800b0e0 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	7d1b      	ldrb	r3, [r3, #20]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d009      	beq.n	800b026 <tcp_bind+0x52>
 800b012:	4b36      	ldr	r3, [pc, #216]	; (800b0ec <tcp_bind+0x118>)
 800b014:	f240 22ab 	movw	r2, #683	; 0x2ab
 800b018:	4937      	ldr	r1, [pc, #220]	; (800b0f8 <tcp_bind+0x124>)
 800b01a:	4836      	ldr	r0, [pc, #216]	; (800b0f4 <tcp_bind+0x120>)
 800b01c:	f008 fbd0 	bl	80137c0 <iprintf>
 800b020:	f06f 0305 	mvn.w	r3, #5
 800b024:	e05c      	b.n	800b0e0 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800b026:	88fb      	ldrh	r3, [r7, #6]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d109      	bne.n	800b040 <tcp_bind+0x6c>
    port = tcp_new_port();
 800b02c:	f000 f9f0 	bl	800b410 <tcp_new_port>
 800b030:	4603      	mov	r3, r0
 800b032:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800b034:	88fb      	ldrh	r3, [r7, #6]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d135      	bne.n	800b0a6 <tcp_bind+0xd2>
      return ERR_BUF;
 800b03a:	f06f 0301 	mvn.w	r3, #1
 800b03e:	e04f      	b.n	800b0e0 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800b040:	2300      	movs	r3, #0
 800b042:	61fb      	str	r3, [r7, #28]
 800b044:	e02b      	b.n	800b09e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800b046:	4a2d      	ldr	r2, [pc, #180]	; (800b0fc <tcp_bind+0x128>)
 800b048:	69fb      	ldr	r3, [r7, #28]
 800b04a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	61bb      	str	r3, [r7, #24]
 800b052:	e01e      	b.n	800b092 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800b054:	69bb      	ldr	r3, [r7, #24]
 800b056:	8adb      	ldrh	r3, [r3, #22]
 800b058:	88fa      	ldrh	r2, [r7, #6]
 800b05a:	429a      	cmp	r2, r3
 800b05c:	d116      	bne.n	800b08c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800b05e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800b060:	2b00      	cmp	r3, #0
 800b062:	d010      	beq.n	800b086 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800b064:	69bb      	ldr	r3, [r7, #24]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d00c      	beq.n	800b086 <tcp_bind+0xb2>
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d009      	beq.n	800b086 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d005      	beq.n	800b086 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800b07a:	69bb      	ldr	r3, [r7, #24]
 800b07c:	681a      	ldr	r2, [r3, #0]
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800b082:	429a      	cmp	r2, r3
 800b084:	d102      	bne.n	800b08c <tcp_bind+0xb8>
              return ERR_USE;
 800b086:	f06f 0307 	mvn.w	r3, #7
 800b08a:	e029      	b.n	800b0e0 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800b08c:	69bb      	ldr	r3, [r7, #24]
 800b08e:	68db      	ldr	r3, [r3, #12]
 800b090:	61bb      	str	r3, [r7, #24]
 800b092:	69bb      	ldr	r3, [r7, #24]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d1dd      	bne.n	800b054 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800b098:	69fb      	ldr	r3, [r7, #28]
 800b09a:	3301      	adds	r3, #1
 800b09c:	61fb      	str	r3, [r7, #28]
 800b09e:	69fa      	ldr	r2, [r7, #28]
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	dbcf      	blt.n	800b046 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d00c      	beq.n	800b0c6 <tcp_bind+0xf2>
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d008      	beq.n	800b0c6 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d002      	beq.n	800b0c0 <tcp_bind+0xec>
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	e000      	b.n	800b0c2 <tcp_bind+0xee>
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	68fa      	ldr	r2, [r7, #12]
 800b0c4:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	88fa      	ldrh	r2, [r7, #6]
 800b0ca:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800b0cc:	4b0c      	ldr	r3, [pc, #48]	; (800b100 <tcp_bind+0x12c>)
 800b0ce:	681a      	ldr	r2, [r3, #0]
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	60da      	str	r2, [r3, #12]
 800b0d4:	4a0a      	ldr	r2, [pc, #40]	; (800b100 <tcp_bind+0x12c>)
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	6013      	str	r3, [r2, #0]
 800b0da:	f005 fcc9 	bl	8010a70 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800b0de:	2300      	movs	r3, #0
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3720      	adds	r7, #32
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}
 800b0e8:	08017274 	.word	0x08017274
 800b0ec:	0801526c 	.word	0x0801526c
 800b0f0:	08015400 	.word	0x08015400
 800b0f4:	080152b0 	.word	0x080152b0
 800b0f8:	08015418 	.word	0x08015418
 800b0fc:	0801724c 	.word	0x0801724c
 800b100:	200085d0 	.word	0x200085d0

0800b104 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b084      	sub	sp, #16
 800b108:	af00      	add	r7, sp, #0
 800b10a:	60f8      	str	r0, [r7, #12]
 800b10c:	60b9      	str	r1, [r7, #8]
 800b10e:	4613      	mov	r3, r2
 800b110:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d106      	bne.n	800b126 <tcp_accept_null+0x22>
 800b118:	4b07      	ldr	r3, [pc, #28]	; (800b138 <tcp_accept_null+0x34>)
 800b11a:	f240 320f 	movw	r2, #783	; 0x30f
 800b11e:	4907      	ldr	r1, [pc, #28]	; (800b13c <tcp_accept_null+0x38>)
 800b120:	4807      	ldr	r0, [pc, #28]	; (800b140 <tcp_accept_null+0x3c>)
 800b122:	f008 fb4d 	bl	80137c0 <iprintf>

  tcp_abort(pcb);
 800b126:	68b8      	ldr	r0, [r7, #8]
 800b128:	f7ff ff48 	bl	800afbc <tcp_abort>

  return ERR_ABRT;
 800b12c:	f06f 030c 	mvn.w	r3, #12
}
 800b130:	4618      	mov	r0, r3
 800b132:	3710      	adds	r7, #16
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}
 800b138:	0801526c 	.word	0x0801526c
 800b13c:	08015440 	.word	0x08015440
 800b140:	080152b0 	.word	0x080152b0

0800b144 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b082      	sub	sp, #8
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
 800b14c:	460b      	mov	r3, r1
 800b14e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800b150:	78fb      	ldrb	r3, [r7, #3]
 800b152:	2200      	movs	r2, #0
 800b154:	4619      	mov	r1, r3
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f000 f806 	bl	800b168 <tcp_listen_with_backlog_and_err>
 800b15c:	4603      	mov	r3, r0
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3708      	adds	r7, #8
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}
	...

0800b168 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b088      	sub	sp, #32
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	60f8      	str	r0, [r7, #12]
 800b170:	460b      	mov	r3, r1
 800b172:	607a      	str	r2, [r7, #4]
 800b174:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800b176:	2300      	movs	r3, #0
 800b178:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d109      	bne.n	800b194 <tcp_listen_with_backlog_and_err+0x2c>
 800b180:	4b47      	ldr	r3, [pc, #284]	; (800b2a0 <tcp_listen_with_backlog_and_err+0x138>)
 800b182:	f240 3259 	movw	r2, #857	; 0x359
 800b186:	4947      	ldr	r1, [pc, #284]	; (800b2a4 <tcp_listen_with_backlog_and_err+0x13c>)
 800b188:	4847      	ldr	r0, [pc, #284]	; (800b2a8 <tcp_listen_with_backlog_and_err+0x140>)
 800b18a:	f008 fb19 	bl	80137c0 <iprintf>
 800b18e:	23f0      	movs	r3, #240	; 0xf0
 800b190:	76fb      	strb	r3, [r7, #27]
 800b192:	e079      	b.n	800b288 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	7d1b      	ldrb	r3, [r3, #20]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d009      	beq.n	800b1b0 <tcp_listen_with_backlog_and_err+0x48>
 800b19c:	4b40      	ldr	r3, [pc, #256]	; (800b2a0 <tcp_listen_with_backlog_and_err+0x138>)
 800b19e:	f240 325a 	movw	r2, #858	; 0x35a
 800b1a2:	4942      	ldr	r1, [pc, #264]	; (800b2ac <tcp_listen_with_backlog_and_err+0x144>)
 800b1a4:	4840      	ldr	r0, [pc, #256]	; (800b2a8 <tcp_listen_with_backlog_and_err+0x140>)
 800b1a6:	f008 fb0b 	bl	80137c0 <iprintf>
 800b1aa:	23f1      	movs	r3, #241	; 0xf1
 800b1ac:	76fb      	strb	r3, [r7, #27]
 800b1ae:	e06b      	b.n	800b288 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	7d1b      	ldrb	r3, [r3, #20]
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	d104      	bne.n	800b1c2 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800b1bc:	23f7      	movs	r3, #247	; 0xf7
 800b1be:	76fb      	strb	r3, [r7, #27]
    goto done;
 800b1c0:	e062      	b.n	800b288 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800b1c2:	2002      	movs	r0, #2
 800b1c4:	f7fe fa7c 	bl	80096c0 <memp_malloc>
 800b1c8:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800b1ca:	69fb      	ldr	r3, [r7, #28]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d102      	bne.n	800b1d6 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800b1d0:	23ff      	movs	r3, #255	; 0xff
 800b1d2:	76fb      	strb	r3, [r7, #27]
    goto done;
 800b1d4:	e058      	b.n	800b288 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	691a      	ldr	r2, [r3, #16]
 800b1da:	69fb      	ldr	r3, [r7, #28]
 800b1dc:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	8ada      	ldrh	r2, [r3, #22]
 800b1e2:	69fb      	ldr	r3, [r7, #28]
 800b1e4:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800b1e6:	69fb      	ldr	r3, [r7, #28]
 800b1e8:	2201      	movs	r2, #1
 800b1ea:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	7d5a      	ldrb	r2, [r3, #21]
 800b1f0:	69fb      	ldr	r3, [r7, #28]
 800b1f2:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	7a5a      	ldrb	r2, [r3, #9]
 800b1f8:	69fb      	ldr	r3, [r7, #28]
 800b1fa:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800b1fc:	69fb      	ldr	r3, [r7, #28]
 800b1fe:	2200      	movs	r2, #0
 800b200:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	7ada      	ldrb	r2, [r3, #11]
 800b206:	69fb      	ldr	r3, [r7, #28]
 800b208:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	7a9a      	ldrb	r2, [r3, #10]
 800b20e:	69fb      	ldr	r3, [r7, #28]
 800b210:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681a      	ldr	r2, [r3, #0]
 800b216:	69fb      	ldr	r3, [r7, #28]
 800b218:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	8adb      	ldrh	r3, [r3, #22]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d021      	beq.n	800b266 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800b222:	4b23      	ldr	r3, [pc, #140]	; (800b2b0 <tcp_listen_with_backlog_and_err+0x148>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	68fa      	ldr	r2, [r7, #12]
 800b228:	429a      	cmp	r2, r3
 800b22a:	d105      	bne.n	800b238 <tcp_listen_with_backlog_and_err+0xd0>
 800b22c:	4b20      	ldr	r3, [pc, #128]	; (800b2b0 <tcp_listen_with_backlog_and_err+0x148>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	68db      	ldr	r3, [r3, #12]
 800b232:	4a1f      	ldr	r2, [pc, #124]	; (800b2b0 <tcp_listen_with_backlog_and_err+0x148>)
 800b234:	6013      	str	r3, [r2, #0]
 800b236:	e013      	b.n	800b260 <tcp_listen_with_backlog_and_err+0xf8>
 800b238:	4b1d      	ldr	r3, [pc, #116]	; (800b2b0 <tcp_listen_with_backlog_and_err+0x148>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	617b      	str	r3, [r7, #20]
 800b23e:	e00c      	b.n	800b25a <tcp_listen_with_backlog_and_err+0xf2>
 800b240:	697b      	ldr	r3, [r7, #20]
 800b242:	68db      	ldr	r3, [r3, #12]
 800b244:	68fa      	ldr	r2, [r7, #12]
 800b246:	429a      	cmp	r2, r3
 800b248:	d104      	bne.n	800b254 <tcp_listen_with_backlog_and_err+0xec>
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	68da      	ldr	r2, [r3, #12]
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	60da      	str	r2, [r3, #12]
 800b252:	e005      	b.n	800b260 <tcp_listen_with_backlog_and_err+0xf8>
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	68db      	ldr	r3, [r3, #12]
 800b258:	617b      	str	r3, [r7, #20]
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d1ef      	bne.n	800b240 <tcp_listen_with_backlog_and_err+0xd8>
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	2200      	movs	r2, #0
 800b264:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800b266:	68f8      	ldr	r0, [r7, #12]
 800b268:	f7ff fbc0 	bl	800a9ec <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800b26c:	69fb      	ldr	r3, [r7, #28]
 800b26e:	4a11      	ldr	r2, [pc, #68]	; (800b2b4 <tcp_listen_with_backlog_and_err+0x14c>)
 800b270:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800b272:	4b11      	ldr	r3, [pc, #68]	; (800b2b8 <tcp_listen_with_backlog_and_err+0x150>)
 800b274:	681a      	ldr	r2, [r3, #0]
 800b276:	69fb      	ldr	r3, [r7, #28]
 800b278:	60da      	str	r2, [r3, #12]
 800b27a:	4a0f      	ldr	r2, [pc, #60]	; (800b2b8 <tcp_listen_with_backlog_and_err+0x150>)
 800b27c:	69fb      	ldr	r3, [r7, #28]
 800b27e:	6013      	str	r3, [r2, #0]
 800b280:	f005 fbf6 	bl	8010a70 <tcp_timer_needed>
  res = ERR_OK;
 800b284:	2300      	movs	r3, #0
 800b286:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d002      	beq.n	800b294 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	7efa      	ldrb	r2, [r7, #27]
 800b292:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800b294:	69fb      	ldr	r3, [r7, #28]
}
 800b296:	4618      	mov	r0, r3
 800b298:	3720      	adds	r7, #32
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}
 800b29e:	bf00      	nop
 800b2a0:	0801526c 	.word	0x0801526c
 800b2a4:	08015460 	.word	0x08015460
 800b2a8:	080152b0 	.word	0x080152b0
 800b2ac:	08015490 	.word	0x08015490
 800b2b0:	200085d0 	.word	0x200085d0
 800b2b4:	0800b105 	.word	0x0800b105
 800b2b8:	200085d4 	.word	0x200085d4

0800b2bc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b084      	sub	sp, #16
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d106      	bne.n	800b2d8 <tcp_update_rcv_ann_wnd+0x1c>
 800b2ca:	4b25      	ldr	r3, [pc, #148]	; (800b360 <tcp_update_rcv_ann_wnd+0xa4>)
 800b2cc:	f240 32a6 	movw	r2, #934	; 0x3a6
 800b2d0:	4924      	ldr	r1, [pc, #144]	; (800b364 <tcp_update_rcv_ann_wnd+0xa8>)
 800b2d2:	4825      	ldr	r0, [pc, #148]	; (800b368 <tcp_update_rcv_ann_wnd+0xac>)
 800b2d4:	f008 fa74 	bl	80137c0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2dc:	687a      	ldr	r2, [r7, #4]
 800b2de:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800b2e0:	4413      	add	r3, r2
 800b2e2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2e8:	687a      	ldr	r2, [r7, #4]
 800b2ea:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800b2ec:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800b2f0:	bf28      	it	cs
 800b2f2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800b2f6:	b292      	uxth	r2, r2
 800b2f8:	4413      	add	r3, r2
 800b2fa:	68fa      	ldr	r2, [r7, #12]
 800b2fc:	1ad3      	subs	r3, r2, r3
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	db08      	blt.n	800b314 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b30e:	68fa      	ldr	r2, [r7, #12]
 800b310:	1ad3      	subs	r3, r2, r3
 800b312:	e020      	b.n	800b356 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b31c:	1ad3      	subs	r3, r2, r3
 800b31e:	2b00      	cmp	r3, #0
 800b320:	dd03      	ble.n	800b32a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2200      	movs	r2, #0
 800b326:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b328:	e014      	b.n	800b354 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b332:	1ad3      	subs	r3, r2, r3
 800b334:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b33c:	d306      	bcc.n	800b34c <tcp_update_rcv_ann_wnd+0x90>
 800b33e:	4b08      	ldr	r3, [pc, #32]	; (800b360 <tcp_update_rcv_ann_wnd+0xa4>)
 800b340:	f240 32b6 	movw	r2, #950	; 0x3b6
 800b344:	4909      	ldr	r1, [pc, #36]	; (800b36c <tcp_update_rcv_ann_wnd+0xb0>)
 800b346:	4808      	ldr	r0, [pc, #32]	; (800b368 <tcp_update_rcv_ann_wnd+0xac>)
 800b348:	f008 fa3a 	bl	80137c0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	b29a      	uxth	r2, r3
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800b354:	2300      	movs	r3, #0
  }
}
 800b356:	4618      	mov	r0, r3
 800b358:	3710      	adds	r7, #16
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	bf00      	nop
 800b360:	0801526c 	.word	0x0801526c
 800b364:	080154c8 	.word	0x080154c8
 800b368:	080152b0 	.word	0x080152b0
 800b36c:	080154ec 	.word	0x080154ec

0800b370 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b084      	sub	sp, #16
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	460b      	mov	r3, r1
 800b37a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d107      	bne.n	800b392 <tcp_recved+0x22>
 800b382:	4b1f      	ldr	r3, [pc, #124]	; (800b400 <tcp_recved+0x90>)
 800b384:	f240 32cf 	movw	r2, #975	; 0x3cf
 800b388:	491e      	ldr	r1, [pc, #120]	; (800b404 <tcp_recved+0x94>)
 800b38a:	481f      	ldr	r0, [pc, #124]	; (800b408 <tcp_recved+0x98>)
 800b38c:	f008 fa18 	bl	80137c0 <iprintf>
 800b390:	e032      	b.n	800b3f8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	7d1b      	ldrb	r3, [r3, #20]
 800b396:	2b01      	cmp	r3, #1
 800b398:	d106      	bne.n	800b3a8 <tcp_recved+0x38>
 800b39a:	4b19      	ldr	r3, [pc, #100]	; (800b400 <tcp_recved+0x90>)
 800b39c:	f240 32d2 	movw	r2, #978	; 0x3d2
 800b3a0:	491a      	ldr	r1, [pc, #104]	; (800b40c <tcp_recved+0x9c>)
 800b3a2:	4819      	ldr	r0, [pc, #100]	; (800b408 <tcp_recved+0x98>)
 800b3a4:	f008 fa0c 	bl	80137c0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b3ac:	887b      	ldrh	r3, [r7, #2]
 800b3ae:	4413      	add	r3, r2
 800b3b0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800b3b2:	89fb      	ldrh	r3, [r7, #14]
 800b3b4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b3b8:	d804      	bhi.n	800b3c4 <tcp_recved+0x54>
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3be:	89fa      	ldrh	r2, [r7, #14]
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	d204      	bcs.n	800b3ce <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b3ca:	851a      	strh	r2, [r3, #40]	; 0x28
 800b3cc:	e002      	b.n	800b3d4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	89fa      	ldrh	r2, [r7, #14]
 800b3d2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f7ff ff71 	bl	800b2bc <tcp_update_rcv_ann_wnd>
 800b3da:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b3e2:	d309      	bcc.n	800b3f8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	8b5b      	ldrh	r3, [r3, #26]
 800b3e8:	f043 0302 	orr.w	r3, r3, #2
 800b3ec:	b29a      	uxth	r2, r3
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f004 fbc6 	bl	800fb84 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800b3f8:	3710      	adds	r7, #16
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}
 800b3fe:	bf00      	nop
 800b400:	0801526c 	.word	0x0801526c
 800b404:	08015508 	.word	0x08015508
 800b408:	080152b0 	.word	0x080152b0
 800b40c:	08015520 	.word	0x08015520

0800b410 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800b410:	b480      	push	{r7}
 800b412:	b083      	sub	sp, #12
 800b414:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800b416:	2300      	movs	r3, #0
 800b418:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800b41a:	4b1e      	ldr	r3, [pc, #120]	; (800b494 <tcp_new_port+0x84>)
 800b41c:	881b      	ldrh	r3, [r3, #0]
 800b41e:	3301      	adds	r3, #1
 800b420:	b29a      	uxth	r2, r3
 800b422:	4b1c      	ldr	r3, [pc, #112]	; (800b494 <tcp_new_port+0x84>)
 800b424:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800b426:	4b1b      	ldr	r3, [pc, #108]	; (800b494 <tcp_new_port+0x84>)
 800b428:	881b      	ldrh	r3, [r3, #0]
 800b42a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b42e:	4293      	cmp	r3, r2
 800b430:	d103      	bne.n	800b43a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800b432:	4b18      	ldr	r3, [pc, #96]	; (800b494 <tcp_new_port+0x84>)
 800b434:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800b438:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800b43a:	2300      	movs	r3, #0
 800b43c:	71fb      	strb	r3, [r7, #7]
 800b43e:	e01e      	b.n	800b47e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800b440:	79fb      	ldrb	r3, [r7, #7]
 800b442:	4a15      	ldr	r2, [pc, #84]	; (800b498 <tcp_new_port+0x88>)
 800b444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	603b      	str	r3, [r7, #0]
 800b44c:	e011      	b.n	800b472 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	8ada      	ldrh	r2, [r3, #22]
 800b452:	4b10      	ldr	r3, [pc, #64]	; (800b494 <tcp_new_port+0x84>)
 800b454:	881b      	ldrh	r3, [r3, #0]
 800b456:	429a      	cmp	r2, r3
 800b458:	d108      	bne.n	800b46c <tcp_new_port+0x5c>
        n++;
 800b45a:	88bb      	ldrh	r3, [r7, #4]
 800b45c:	3301      	adds	r3, #1
 800b45e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800b460:	88bb      	ldrh	r3, [r7, #4]
 800b462:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b466:	d3d8      	bcc.n	800b41a <tcp_new_port+0xa>
          return 0;
 800b468:	2300      	movs	r3, #0
 800b46a:	e00d      	b.n	800b488 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	68db      	ldr	r3, [r3, #12]
 800b470:	603b      	str	r3, [r7, #0]
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d1ea      	bne.n	800b44e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800b478:	79fb      	ldrb	r3, [r7, #7]
 800b47a:	3301      	adds	r3, #1
 800b47c:	71fb      	strb	r3, [r7, #7]
 800b47e:	79fb      	ldrb	r3, [r7, #7]
 800b480:	2b03      	cmp	r3, #3
 800b482:	d9dd      	bls.n	800b440 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800b484:	4b03      	ldr	r3, [pc, #12]	; (800b494 <tcp_new_port+0x84>)
 800b486:	881b      	ldrh	r3, [r3, #0]
}
 800b488:	4618      	mov	r0, r3
 800b48a:	370c      	adds	r7, #12
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr
 800b494:	20000034 	.word	0x20000034
 800b498:	0801724c 	.word	0x0801724c

0800b49c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800b49c:	b5b0      	push	{r4, r5, r7, lr}
 800b49e:	b090      	sub	sp, #64	; 0x40
 800b4a0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800b4a8:	4b94      	ldr	r3, [pc, #592]	; (800b6fc <tcp_slowtmr+0x260>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	3301      	adds	r3, #1
 800b4ae:	4a93      	ldr	r2, [pc, #588]	; (800b6fc <tcp_slowtmr+0x260>)
 800b4b0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800b4b2:	4b93      	ldr	r3, [pc, #588]	; (800b700 <tcp_slowtmr+0x264>)
 800b4b4:	781b      	ldrb	r3, [r3, #0]
 800b4b6:	3301      	adds	r3, #1
 800b4b8:	b2da      	uxtb	r2, r3
 800b4ba:	4b91      	ldr	r3, [pc, #580]	; (800b700 <tcp_slowtmr+0x264>)
 800b4bc:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800b4c2:	4b90      	ldr	r3, [pc, #576]	; (800b704 <tcp_slowtmr+0x268>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800b4c8:	e29f      	b.n	800ba0a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800b4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4cc:	7d1b      	ldrb	r3, [r3, #20]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d106      	bne.n	800b4e0 <tcp_slowtmr+0x44>
 800b4d2:	4b8d      	ldr	r3, [pc, #564]	; (800b708 <tcp_slowtmr+0x26c>)
 800b4d4:	f240 42be 	movw	r2, #1214	; 0x4be
 800b4d8:	498c      	ldr	r1, [pc, #560]	; (800b70c <tcp_slowtmr+0x270>)
 800b4da:	488d      	ldr	r0, [pc, #564]	; (800b710 <tcp_slowtmr+0x274>)
 800b4dc:	f008 f970 	bl	80137c0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800b4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4e2:	7d1b      	ldrb	r3, [r3, #20]
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	d106      	bne.n	800b4f6 <tcp_slowtmr+0x5a>
 800b4e8:	4b87      	ldr	r3, [pc, #540]	; (800b708 <tcp_slowtmr+0x26c>)
 800b4ea:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800b4ee:	4989      	ldr	r1, [pc, #548]	; (800b714 <tcp_slowtmr+0x278>)
 800b4f0:	4887      	ldr	r0, [pc, #540]	; (800b710 <tcp_slowtmr+0x274>)
 800b4f2:	f008 f965 	bl	80137c0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800b4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4f8:	7d1b      	ldrb	r3, [r3, #20]
 800b4fa:	2b0a      	cmp	r3, #10
 800b4fc:	d106      	bne.n	800b50c <tcp_slowtmr+0x70>
 800b4fe:	4b82      	ldr	r3, [pc, #520]	; (800b708 <tcp_slowtmr+0x26c>)
 800b500:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800b504:	4984      	ldr	r1, [pc, #528]	; (800b718 <tcp_slowtmr+0x27c>)
 800b506:	4882      	ldr	r0, [pc, #520]	; (800b710 <tcp_slowtmr+0x274>)
 800b508:	f008 f95a 	bl	80137c0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800b50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b50e:	7f9a      	ldrb	r2, [r3, #30]
 800b510:	4b7b      	ldr	r3, [pc, #492]	; (800b700 <tcp_slowtmr+0x264>)
 800b512:	781b      	ldrb	r3, [r3, #0]
 800b514:	429a      	cmp	r2, r3
 800b516:	d105      	bne.n	800b524 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800b518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b51a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b51e:	68db      	ldr	r3, [r3, #12]
 800b520:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800b522:	e272      	b.n	800ba0a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800b524:	4b76      	ldr	r3, [pc, #472]	; (800b700 <tcp_slowtmr+0x264>)
 800b526:	781a      	ldrb	r2, [r3, #0]
 800b528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b52a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800b52c:	2300      	movs	r3, #0
 800b52e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800b532:	2300      	movs	r3, #0
 800b534:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800b538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b53a:	7d1b      	ldrb	r3, [r3, #20]
 800b53c:	2b02      	cmp	r3, #2
 800b53e:	d10a      	bne.n	800b556 <tcp_slowtmr+0xba>
 800b540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b542:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b546:	2b05      	cmp	r3, #5
 800b548:	d905      	bls.n	800b556 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800b54a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b54e:	3301      	adds	r3, #1
 800b550:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b554:	e11e      	b.n	800b794 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800b556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b558:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b55c:	2b0b      	cmp	r3, #11
 800b55e:	d905      	bls.n	800b56c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800b560:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b564:	3301      	adds	r3, #1
 800b566:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b56a:	e113      	b.n	800b794 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800b56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b56e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b572:	2b00      	cmp	r3, #0
 800b574:	d075      	beq.n	800b662 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800b576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d006      	beq.n	800b58c <tcp_slowtmr+0xf0>
 800b57e:	4b62      	ldr	r3, [pc, #392]	; (800b708 <tcp_slowtmr+0x26c>)
 800b580:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800b584:	4965      	ldr	r1, [pc, #404]	; (800b71c <tcp_slowtmr+0x280>)
 800b586:	4862      	ldr	r0, [pc, #392]	; (800b710 <tcp_slowtmr+0x274>)
 800b588:	f008 f91a 	bl	80137c0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800b58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b58e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b590:	2b00      	cmp	r3, #0
 800b592:	d106      	bne.n	800b5a2 <tcp_slowtmr+0x106>
 800b594:	4b5c      	ldr	r3, [pc, #368]	; (800b708 <tcp_slowtmr+0x26c>)
 800b596:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800b59a:	4961      	ldr	r1, [pc, #388]	; (800b720 <tcp_slowtmr+0x284>)
 800b59c:	485c      	ldr	r0, [pc, #368]	; (800b710 <tcp_slowtmr+0x274>)
 800b59e:	f008 f90f 	bl	80137c0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800b5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5a4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b5a8:	2b0b      	cmp	r3, #11
 800b5aa:	d905      	bls.n	800b5b8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800b5ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5b0:	3301      	adds	r3, #1
 800b5b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b5b6:	e0ed      	b.n	800b794 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800b5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ba:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b5be:	3b01      	subs	r3, #1
 800b5c0:	4a58      	ldr	r2, [pc, #352]	; (800b724 <tcp_slowtmr+0x288>)
 800b5c2:	5cd3      	ldrb	r3, [r2, r3]
 800b5c4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800b5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5c8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b5cc:	7c7a      	ldrb	r2, [r7, #17]
 800b5ce:	429a      	cmp	r2, r3
 800b5d0:	d907      	bls.n	800b5e2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800b5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5d4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b5d8:	3301      	adds	r3, #1
 800b5da:	b2da      	uxtb	r2, r3
 800b5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5de:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800b5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5e4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b5e8:	7c7a      	ldrb	r2, [r7, #17]
 800b5ea:	429a      	cmp	r2, r3
 800b5ec:	f200 80d2 	bhi.w	800b794 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800b5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d108      	bne.n	800b610 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800b5fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b600:	f005 f968 	bl	80108d4 <tcp_zero_window_probe>
 800b604:	4603      	mov	r3, r0
 800b606:	2b00      	cmp	r3, #0
 800b608:	d014      	beq.n	800b634 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800b60a:	2300      	movs	r3, #0
 800b60c:	623b      	str	r3, [r7, #32]
 800b60e:	e011      	b.n	800b634 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800b610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b612:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b616:	4619      	mov	r1, r3
 800b618:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b61a:	f004 f82d 	bl	800f678 <tcp_split_unsent_seg>
 800b61e:	4603      	mov	r3, r0
 800b620:	2b00      	cmp	r3, #0
 800b622:	d107      	bne.n	800b634 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800b624:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b626:	f004 faad 	bl	800fb84 <tcp_output>
 800b62a:	4603      	mov	r3, r0
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d101      	bne.n	800b634 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800b630:	2300      	movs	r3, #0
 800b632:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800b634:	6a3b      	ldr	r3, [r7, #32]
 800b636:	2b00      	cmp	r3, #0
 800b638:	f000 80ac 	beq.w	800b794 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800b63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b63e:	2200      	movs	r2, #0
 800b640:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b646:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b64a:	2b06      	cmp	r3, #6
 800b64c:	f200 80a2 	bhi.w	800b794 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800b650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b652:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b656:	3301      	adds	r3, #1
 800b658:	b2da      	uxtb	r2, r3
 800b65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b65c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800b660:	e098      	b.n	800b794 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800b662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b664:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b668:	2b00      	cmp	r3, #0
 800b66a:	db0f      	blt.n	800b68c <tcp_slowtmr+0x1f0>
 800b66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b66e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b672:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b676:	4293      	cmp	r3, r2
 800b678:	d008      	beq.n	800b68c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800b67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b67c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b680:	b29b      	uxth	r3, r3
 800b682:	3301      	adds	r3, #1
 800b684:	b29b      	uxth	r3, r3
 800b686:	b21a      	sxth	r2, r3
 800b688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b68a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800b68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b68e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800b692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b694:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b698:	429a      	cmp	r2, r3
 800b69a:	db7b      	blt.n	800b794 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800b69c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b69e:	f004 fd63 	bl	8010168 <tcp_rexmit_rto_prepare>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d007      	beq.n	800b6b8 <tcp_slowtmr+0x21c>
 800b6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d171      	bne.n	800b794 <tcp_slowtmr+0x2f8>
 800b6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d06d      	beq.n	800b794 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800b6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ba:	7d1b      	ldrb	r3, [r3, #20]
 800b6bc:	2b02      	cmp	r3, #2
 800b6be:	d03a      	beq.n	800b736 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800b6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b6c6:	2b0c      	cmp	r3, #12
 800b6c8:	bf28      	it	cs
 800b6ca:	230c      	movcs	r3, #12
 800b6cc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800b6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6d0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b6d4:	10db      	asrs	r3, r3, #3
 800b6d6:	b21b      	sxth	r3, r3
 800b6d8:	461a      	mov	r2, r3
 800b6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6dc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b6e0:	4413      	add	r3, r2
 800b6e2:	7efa      	ldrb	r2, [r7, #27]
 800b6e4:	4910      	ldr	r1, [pc, #64]	; (800b728 <tcp_slowtmr+0x28c>)
 800b6e6:	5c8a      	ldrb	r2, [r1, r2]
 800b6e8:	4093      	lsls	r3, r2
 800b6ea:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800b6ec:	697b      	ldr	r3, [r7, #20]
 800b6ee:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	dc1a      	bgt.n	800b72c <tcp_slowtmr+0x290>
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	b21a      	sxth	r2, r3
 800b6fa:	e019      	b.n	800b730 <tcp_slowtmr+0x294>
 800b6fc:	200085cc 	.word	0x200085cc
 800b700:	200085e2 	.word	0x200085e2
 800b704:	200085d8 	.word	0x200085d8
 800b708:	0801526c 	.word	0x0801526c
 800b70c:	080155b0 	.word	0x080155b0
 800b710:	080152b0 	.word	0x080152b0
 800b714:	080155dc 	.word	0x080155dc
 800b718:	08015608 	.word	0x08015608
 800b71c:	08015638 	.word	0x08015638
 800b720:	0801566c 	.word	0x0801566c
 800b724:	08017244 	.word	0x08017244
 800b728:	08017234 	.word	0x08017234
 800b72c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b732:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800b736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b738:	2200      	movs	r2, #0
 800b73a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800b73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b73e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b744:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b748:	4293      	cmp	r3, r2
 800b74a:	bf28      	it	cs
 800b74c:	4613      	movcs	r3, r2
 800b74e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800b750:	8a7b      	ldrh	r3, [r7, #18]
 800b752:	085b      	lsrs	r3, r3, #1
 800b754:	b29a      	uxth	r2, r3
 800b756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b758:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b75e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b764:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b766:	005b      	lsls	r3, r3, #1
 800b768:	b29b      	uxth	r3, r3
 800b76a:	429a      	cmp	r2, r3
 800b76c:	d206      	bcs.n	800b77c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800b76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b770:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b772:	005b      	lsls	r3, r3, #1
 800b774:	b29a      	uxth	r2, r3
 800b776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b778:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800b77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b77e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800b780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b782:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800b786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b788:	2200      	movs	r2, #0
 800b78a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800b78e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b790:	f004 fd5a 	bl	8010248 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800b794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b796:	7d1b      	ldrb	r3, [r3, #20]
 800b798:	2b06      	cmp	r3, #6
 800b79a:	d111      	bne.n	800b7c0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800b79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b79e:	8b5b      	ldrh	r3, [r3, #26]
 800b7a0:	f003 0310 	and.w	r3, r3, #16
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d00b      	beq.n	800b7c0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b7a8:	4b9d      	ldr	r3, [pc, #628]	; (800ba20 <tcp_slowtmr+0x584>)
 800b7aa:	681a      	ldr	r2, [r3, #0]
 800b7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ae:	6a1b      	ldr	r3, [r3, #32]
 800b7b0:	1ad3      	subs	r3, r2, r3
 800b7b2:	2b28      	cmp	r3, #40	; 0x28
 800b7b4:	d904      	bls.n	800b7c0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800b7b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7ba:	3301      	adds	r3, #1
 800b7bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7c2:	7a5b      	ldrb	r3, [r3, #9]
 800b7c4:	f003 0308 	and.w	r3, r3, #8
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d04c      	beq.n	800b866 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800b7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ce:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b7d0:	2b04      	cmp	r3, #4
 800b7d2:	d003      	beq.n	800b7dc <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800b7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7d6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800b7d8:	2b07      	cmp	r3, #7
 800b7da:	d144      	bne.n	800b866 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b7dc:	4b90      	ldr	r3, [pc, #576]	; (800ba20 <tcp_slowtmr+0x584>)
 800b7de:	681a      	ldr	r2, [r3, #0]
 800b7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7e2:	6a1b      	ldr	r3, [r3, #32]
 800b7e4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800b7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b7ec:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800b7f0:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800b7f4:	498b      	ldr	r1, [pc, #556]	; (800ba24 <tcp_slowtmr+0x588>)
 800b7f6:	fba1 1303 	umull	r1, r3, r1, r3
 800b7fa:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b7fc:	429a      	cmp	r2, r3
 800b7fe:	d90a      	bls.n	800b816 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800b800:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b804:	3301      	adds	r3, #1
 800b806:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800b80a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b80e:	3301      	adds	r3, #1
 800b810:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b814:	e027      	b.n	800b866 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b816:	4b82      	ldr	r3, [pc, #520]	; (800ba20 <tcp_slowtmr+0x584>)
 800b818:	681a      	ldr	r2, [r3, #0]
 800b81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b81c:	6a1b      	ldr	r3, [r3, #32]
 800b81e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800b820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b822:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800b826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b828:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800b82c:	4618      	mov	r0, r3
 800b82e:	4b7e      	ldr	r3, [pc, #504]	; (800ba28 <tcp_slowtmr+0x58c>)
 800b830:	fb00 f303 	mul.w	r3, r0, r3
 800b834:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800b836:	497b      	ldr	r1, [pc, #492]	; (800ba24 <tcp_slowtmr+0x588>)
 800b838:	fba1 1303 	umull	r1, r3, r1, r3
 800b83c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b83e:	429a      	cmp	r2, r3
 800b840:	d911      	bls.n	800b866 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800b842:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b844:	f005 f806 	bl	8010854 <tcp_keepalive>
 800b848:	4603      	mov	r3, r0
 800b84a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800b84e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800b852:	2b00      	cmp	r3, #0
 800b854:	d107      	bne.n	800b866 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800b856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b858:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800b85c:	3301      	adds	r3, #1
 800b85e:	b2da      	uxtb	r2, r3
 800b860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b862:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800b866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d011      	beq.n	800b892 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800b86e:	4b6c      	ldr	r3, [pc, #432]	; (800ba20 <tcp_slowtmr+0x584>)
 800b870:	681a      	ldr	r2, [r3, #0]
 800b872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b874:	6a1b      	ldr	r3, [r3, #32]
 800b876:	1ad2      	subs	r2, r2, r3
 800b878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b87a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b87e:	4619      	mov	r1, r3
 800b880:	460b      	mov	r3, r1
 800b882:	005b      	lsls	r3, r3, #1
 800b884:	440b      	add	r3, r1
 800b886:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800b888:	429a      	cmp	r2, r3
 800b88a:	d302      	bcc.n	800b892 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800b88c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b88e:	f000 fec1 	bl	800c614 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800b892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b894:	7d1b      	ldrb	r3, [r3, #20]
 800b896:	2b03      	cmp	r3, #3
 800b898:	d10b      	bne.n	800b8b2 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b89a:	4b61      	ldr	r3, [pc, #388]	; (800ba20 <tcp_slowtmr+0x584>)
 800b89c:	681a      	ldr	r2, [r3, #0]
 800b89e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a0:	6a1b      	ldr	r3, [r3, #32]
 800b8a2:	1ad3      	subs	r3, r2, r3
 800b8a4:	2b28      	cmp	r3, #40	; 0x28
 800b8a6:	d904      	bls.n	800b8b2 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800b8a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8ac:	3301      	adds	r3, #1
 800b8ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800b8b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8b4:	7d1b      	ldrb	r3, [r3, #20]
 800b8b6:	2b09      	cmp	r3, #9
 800b8b8:	d10b      	bne.n	800b8d2 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b8ba:	4b59      	ldr	r3, [pc, #356]	; (800ba20 <tcp_slowtmr+0x584>)
 800b8bc:	681a      	ldr	r2, [r3, #0]
 800b8be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8c0:	6a1b      	ldr	r3, [r3, #32]
 800b8c2:	1ad3      	subs	r3, r2, r3
 800b8c4:	2bf0      	cmp	r3, #240	; 0xf0
 800b8c6:	d904      	bls.n	800b8d2 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800b8c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8cc:	3301      	adds	r3, #1
 800b8ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b8d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d060      	beq.n	800b99c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800b8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8e0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800b8e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b8e4:	f000 fce2 	bl	800c2ac <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800b8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d010      	beq.n	800b910 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800b8ee:	4b4f      	ldr	r3, [pc, #316]	; (800ba2c <tcp_slowtmr+0x590>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	d106      	bne.n	800b906 <tcp_slowtmr+0x46a>
 800b8f8:	4b4d      	ldr	r3, [pc, #308]	; (800ba30 <tcp_slowtmr+0x594>)
 800b8fa:	f240 526d 	movw	r2, #1389	; 0x56d
 800b8fe:	494d      	ldr	r1, [pc, #308]	; (800ba34 <tcp_slowtmr+0x598>)
 800b900:	484d      	ldr	r0, [pc, #308]	; (800ba38 <tcp_slowtmr+0x59c>)
 800b902:	f007 ff5d 	bl	80137c0 <iprintf>
        prev->next = pcb->next;
 800b906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b908:	68da      	ldr	r2, [r3, #12]
 800b90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b90c:	60da      	str	r2, [r3, #12]
 800b90e:	e00f      	b.n	800b930 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800b910:	4b46      	ldr	r3, [pc, #280]	; (800ba2c <tcp_slowtmr+0x590>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b916:	429a      	cmp	r2, r3
 800b918:	d006      	beq.n	800b928 <tcp_slowtmr+0x48c>
 800b91a:	4b45      	ldr	r3, [pc, #276]	; (800ba30 <tcp_slowtmr+0x594>)
 800b91c:	f240 5271 	movw	r2, #1393	; 0x571
 800b920:	4946      	ldr	r1, [pc, #280]	; (800ba3c <tcp_slowtmr+0x5a0>)
 800b922:	4845      	ldr	r0, [pc, #276]	; (800ba38 <tcp_slowtmr+0x59c>)
 800b924:	f007 ff4c 	bl	80137c0 <iprintf>
        tcp_active_pcbs = pcb->next;
 800b928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b92a:	68db      	ldr	r3, [r3, #12]
 800b92c:	4a3f      	ldr	r2, [pc, #252]	; (800ba2c <tcp_slowtmr+0x590>)
 800b92e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800b930:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b934:	2b00      	cmp	r3, #0
 800b936:	d013      	beq.n	800b960 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b93a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b93e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b940:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800b942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b944:	3304      	adds	r3, #4
 800b946:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b948:	8ad2      	ldrh	r2, [r2, #22]
 800b94a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b94c:	8b09      	ldrh	r1, [r1, #24]
 800b94e:	9102      	str	r1, [sp, #8]
 800b950:	9201      	str	r2, [sp, #4]
 800b952:	9300      	str	r3, [sp, #0]
 800b954:	462b      	mov	r3, r5
 800b956:	4622      	mov	r2, r4
 800b958:	4601      	mov	r1, r0
 800b95a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b95c:	f004 fec6 	bl	80106ec <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800b960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b962:	691b      	ldr	r3, [r3, #16]
 800b964:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800b966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b968:	7d1b      	ldrb	r3, [r3, #20]
 800b96a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800b96c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b96e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800b970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b972:	68db      	ldr	r3, [r3, #12]
 800b974:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800b976:	6838      	ldr	r0, [r7, #0]
 800b978:	f7ff f838 	bl	800a9ec <tcp_free>

      tcp_active_pcbs_changed = 0;
 800b97c:	4b30      	ldr	r3, [pc, #192]	; (800ba40 <tcp_slowtmr+0x5a4>)
 800b97e:	2200      	movs	r2, #0
 800b980:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d004      	beq.n	800b992 <tcp_slowtmr+0x4f6>
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	f06f 010c 	mvn.w	r1, #12
 800b98e:	68b8      	ldr	r0, [r7, #8]
 800b990:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800b992:	4b2b      	ldr	r3, [pc, #172]	; (800ba40 <tcp_slowtmr+0x5a4>)
 800b994:	781b      	ldrb	r3, [r3, #0]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d037      	beq.n	800ba0a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800b99a:	e590      	b.n	800b4be <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800b99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b99e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9a2:	68db      	ldr	r3, [r3, #12]
 800b9a4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800b9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a8:	7f1b      	ldrb	r3, [r3, #28]
 800b9aa:	3301      	adds	r3, #1
 800b9ac:	b2da      	uxtb	r2, r3
 800b9ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9b0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800b9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9b4:	7f1a      	ldrb	r2, [r3, #28]
 800b9b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9b8:	7f5b      	ldrb	r3, [r3, #29]
 800b9ba:	429a      	cmp	r2, r3
 800b9bc:	d325      	bcc.n	800ba0a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800b9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800b9c4:	4b1e      	ldr	r3, [pc, #120]	; (800ba40 <tcp_slowtmr+0x5a4>)
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800b9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d00b      	beq.n	800b9ec <tcp_slowtmr+0x550>
 800b9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b9da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b9dc:	6912      	ldr	r2, [r2, #16]
 800b9de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b9e0:	4610      	mov	r0, r2
 800b9e2:	4798      	blx	r3
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800b9ea:	e002      	b.n	800b9f2 <tcp_slowtmr+0x556>
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800b9f2:	4b13      	ldr	r3, [pc, #76]	; (800ba40 <tcp_slowtmr+0x5a4>)
 800b9f4:	781b      	ldrb	r3, [r3, #0]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d000      	beq.n	800b9fc <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800b9fa:	e560      	b.n	800b4be <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800b9fc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d102      	bne.n	800ba0a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800ba04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba06:	f004 f8bd 	bl	800fb84 <tcp_output>
  while (pcb != NULL) {
 800ba0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	f47f ad5c 	bne.w	800b4ca <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ba12:	2300      	movs	r3, #0
 800ba14:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800ba16:	4b0b      	ldr	r3, [pc, #44]	; (800ba44 <tcp_slowtmr+0x5a8>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ba1c:	e067      	b.n	800baee <tcp_slowtmr+0x652>
 800ba1e:	bf00      	nop
 800ba20:	200085cc 	.word	0x200085cc
 800ba24:	10624dd3 	.word	0x10624dd3
 800ba28:	000124f8 	.word	0x000124f8
 800ba2c:	200085d8 	.word	0x200085d8
 800ba30:	0801526c 	.word	0x0801526c
 800ba34:	080156a4 	.word	0x080156a4
 800ba38:	080152b0 	.word	0x080152b0
 800ba3c:	080156d0 	.word	0x080156d0
 800ba40:	200085e0 	.word	0x200085e0
 800ba44:	200085dc 	.word	0x200085dc
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ba48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba4a:	7d1b      	ldrb	r3, [r3, #20]
 800ba4c:	2b0a      	cmp	r3, #10
 800ba4e:	d006      	beq.n	800ba5e <tcp_slowtmr+0x5c2>
 800ba50:	4b2b      	ldr	r3, [pc, #172]	; (800bb00 <tcp_slowtmr+0x664>)
 800ba52:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800ba56:	492b      	ldr	r1, [pc, #172]	; (800bb04 <tcp_slowtmr+0x668>)
 800ba58:	482b      	ldr	r0, [pc, #172]	; (800bb08 <tcp_slowtmr+0x66c>)
 800ba5a:	f007 feb1 	bl	80137c0 <iprintf>
    pcb_remove = 0;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ba64:	4b29      	ldr	r3, [pc, #164]	; (800bb0c <tcp_slowtmr+0x670>)
 800ba66:	681a      	ldr	r2, [r3, #0]
 800ba68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba6a:	6a1b      	ldr	r3, [r3, #32]
 800ba6c:	1ad3      	subs	r3, r2, r3
 800ba6e:	2bf0      	cmp	r3, #240	; 0xf0
 800ba70:	d904      	bls.n	800ba7c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800ba72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba76:	3301      	adds	r3, #1
 800ba78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ba7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d02f      	beq.n	800bae4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ba84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ba86:	f000 fc11 	bl	800c2ac <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ba8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d010      	beq.n	800bab2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ba90:	4b1f      	ldr	r3, [pc, #124]	; (800bb10 <tcp_slowtmr+0x674>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba96:	429a      	cmp	r2, r3
 800ba98:	d106      	bne.n	800baa8 <tcp_slowtmr+0x60c>
 800ba9a:	4b19      	ldr	r3, [pc, #100]	; (800bb00 <tcp_slowtmr+0x664>)
 800ba9c:	f240 52af 	movw	r2, #1455	; 0x5af
 800baa0:	491c      	ldr	r1, [pc, #112]	; (800bb14 <tcp_slowtmr+0x678>)
 800baa2:	4819      	ldr	r0, [pc, #100]	; (800bb08 <tcp_slowtmr+0x66c>)
 800baa4:	f007 fe8c 	bl	80137c0 <iprintf>
        prev->next = pcb->next;
 800baa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baaa:	68da      	ldr	r2, [r3, #12]
 800baac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baae:	60da      	str	r2, [r3, #12]
 800bab0:	e00f      	b.n	800bad2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800bab2:	4b17      	ldr	r3, [pc, #92]	; (800bb10 <tcp_slowtmr+0x674>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bab8:	429a      	cmp	r2, r3
 800baba:	d006      	beq.n	800baca <tcp_slowtmr+0x62e>
 800babc:	4b10      	ldr	r3, [pc, #64]	; (800bb00 <tcp_slowtmr+0x664>)
 800babe:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800bac2:	4915      	ldr	r1, [pc, #84]	; (800bb18 <tcp_slowtmr+0x67c>)
 800bac4:	4810      	ldr	r0, [pc, #64]	; (800bb08 <tcp_slowtmr+0x66c>)
 800bac6:	f007 fe7b 	bl	80137c0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800baca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bacc:	68db      	ldr	r3, [r3, #12]
 800bace:	4a10      	ldr	r2, [pc, #64]	; (800bb10 <tcp_slowtmr+0x674>)
 800bad0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800bad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bad4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800bad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bad8:	68db      	ldr	r3, [r3, #12]
 800bada:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800badc:	69f8      	ldr	r0, [r7, #28]
 800bade:	f7fe ff85 	bl	800a9ec <tcp_free>
 800bae2:	e004      	b.n	800baee <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800bae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bae6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800bae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baea:	68db      	ldr	r3, [r3, #12]
 800baec:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800baee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d1a9      	bne.n	800ba48 <tcp_slowtmr+0x5ac>
    }
  }
}
 800baf4:	bf00      	nop
 800baf6:	bf00      	nop
 800baf8:	3730      	adds	r7, #48	; 0x30
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bdb0      	pop	{r4, r5, r7, pc}
 800bafe:	bf00      	nop
 800bb00:	0801526c 	.word	0x0801526c
 800bb04:	080156fc 	.word	0x080156fc
 800bb08:	080152b0 	.word	0x080152b0
 800bb0c:	200085cc 	.word	0x200085cc
 800bb10:	200085dc 	.word	0x200085dc
 800bb14:	0801572c 	.word	0x0801572c
 800bb18:	08015754 	.word	0x08015754

0800bb1c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b082      	sub	sp, #8
 800bb20:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800bb22:	4b2d      	ldr	r3, [pc, #180]	; (800bbd8 <tcp_fasttmr+0xbc>)
 800bb24:	781b      	ldrb	r3, [r3, #0]
 800bb26:	3301      	adds	r3, #1
 800bb28:	b2da      	uxtb	r2, r3
 800bb2a:	4b2b      	ldr	r3, [pc, #172]	; (800bbd8 <tcp_fasttmr+0xbc>)
 800bb2c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800bb2e:	4b2b      	ldr	r3, [pc, #172]	; (800bbdc <tcp_fasttmr+0xc0>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800bb34:	e048      	b.n	800bbc8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	7f9a      	ldrb	r2, [r3, #30]
 800bb3a:	4b27      	ldr	r3, [pc, #156]	; (800bbd8 <tcp_fasttmr+0xbc>)
 800bb3c:	781b      	ldrb	r3, [r3, #0]
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d03f      	beq.n	800bbc2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800bb42:	4b25      	ldr	r3, [pc, #148]	; (800bbd8 <tcp_fasttmr+0xbc>)
 800bb44:	781a      	ldrb	r2, [r3, #0]
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	8b5b      	ldrh	r3, [r3, #26]
 800bb4e:	f003 0301 	and.w	r3, r3, #1
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d010      	beq.n	800bb78 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	8b5b      	ldrh	r3, [r3, #26]
 800bb5a:	f043 0302 	orr.w	r3, r3, #2
 800bb5e:	b29a      	uxth	r2, r3
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f004 f80d 	bl	800fb84 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	8b5b      	ldrh	r3, [r3, #26]
 800bb6e:	f023 0303 	bic.w	r3, r3, #3
 800bb72:	b29a      	uxth	r2, r3
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	8b5b      	ldrh	r3, [r3, #26]
 800bb7c:	f003 0308 	and.w	r3, r3, #8
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d009      	beq.n	800bb98 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	8b5b      	ldrh	r3, [r3, #26]
 800bb88:	f023 0308 	bic.w	r3, r3, #8
 800bb8c:	b29a      	uxth	r2, r3
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f7ff f8be 	bl	800ad14 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	68db      	ldr	r3, [r3, #12]
 800bb9c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d00a      	beq.n	800bbbc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800bba6:	4b0e      	ldr	r3, [pc, #56]	; (800bbe0 <tcp_fasttmr+0xc4>)
 800bba8:	2200      	movs	r2, #0
 800bbaa:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	f000 f819 	bl	800bbe4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800bbb2:	4b0b      	ldr	r3, [pc, #44]	; (800bbe0 <tcp_fasttmr+0xc4>)
 800bbb4:	781b      	ldrb	r3, [r3, #0]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d000      	beq.n	800bbbc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800bbba:	e7b8      	b.n	800bb2e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	607b      	str	r3, [r7, #4]
 800bbc0:	e002      	b.n	800bbc8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	68db      	ldr	r3, [r3, #12]
 800bbc6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d1b3      	bne.n	800bb36 <tcp_fasttmr+0x1a>
    }
  }
}
 800bbce:	bf00      	nop
 800bbd0:	bf00      	nop
 800bbd2:	3708      	adds	r7, #8
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}
 800bbd8:	200085e2 	.word	0x200085e2
 800bbdc:	200085d8 	.word	0x200085d8
 800bbe0:	200085e0 	.word	0x200085e0

0800bbe4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800bbe4:	b590      	push	{r4, r7, lr}
 800bbe6:	b085      	sub	sp, #20
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d109      	bne.n	800bc06 <tcp_process_refused_data+0x22>
 800bbf2:	4b37      	ldr	r3, [pc, #220]	; (800bcd0 <tcp_process_refused_data+0xec>)
 800bbf4:	f240 6209 	movw	r2, #1545	; 0x609
 800bbf8:	4936      	ldr	r1, [pc, #216]	; (800bcd4 <tcp_process_refused_data+0xf0>)
 800bbfa:	4837      	ldr	r0, [pc, #220]	; (800bcd8 <tcp_process_refused_data+0xf4>)
 800bbfc:	f007 fde0 	bl	80137c0 <iprintf>
 800bc00:	f06f 030f 	mvn.w	r3, #15
 800bc04:	e060      	b.n	800bcc8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc0a:	7b5b      	ldrb	r3, [r3, #13]
 800bc0c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc12:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2200      	movs	r2, #0
 800bc18:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d00b      	beq.n	800bc3c <tcp_process_refused_data+0x58>
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6918      	ldr	r0, [r3, #16]
 800bc2e:	2300      	movs	r3, #0
 800bc30:	68ba      	ldr	r2, [r7, #8]
 800bc32:	6879      	ldr	r1, [r7, #4]
 800bc34:	47a0      	blx	r4
 800bc36:	4603      	mov	r3, r0
 800bc38:	73fb      	strb	r3, [r7, #15]
 800bc3a:	e007      	b.n	800bc4c <tcp_process_refused_data+0x68>
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	68ba      	ldr	r2, [r7, #8]
 800bc40:	6879      	ldr	r1, [r7, #4]
 800bc42:	2000      	movs	r0, #0
 800bc44:	f000 f8c2 	bl	800bdcc <tcp_recv_null>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800bc4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d12a      	bne.n	800bcaa <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800bc54:	7bbb      	ldrb	r3, [r7, #14]
 800bc56:	f003 0320 	and.w	r3, r3, #32
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d033      	beq.n	800bcc6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc62:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bc66:	d005      	beq.n	800bc74 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc6c:	3301      	adds	r3, #1
 800bc6e:	b29a      	uxth	r2, r3
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d00b      	beq.n	800bc96 <tcp_process_refused_data+0xb2>
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6918      	ldr	r0, [r3, #16]
 800bc88:	2300      	movs	r3, #0
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	6879      	ldr	r1, [r7, #4]
 800bc8e:	47a0      	blx	r4
 800bc90:	4603      	mov	r3, r0
 800bc92:	73fb      	strb	r3, [r7, #15]
 800bc94:	e001      	b.n	800bc9a <tcp_process_refused_data+0xb6>
 800bc96:	2300      	movs	r3, #0
 800bc98:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800bc9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc9e:	f113 0f0d 	cmn.w	r3, #13
 800bca2:	d110      	bne.n	800bcc6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800bca4:	f06f 030c 	mvn.w	r3, #12
 800bca8:	e00e      	b.n	800bcc8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800bcaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bcae:	f113 0f0d 	cmn.w	r3, #13
 800bcb2:	d102      	bne.n	800bcba <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800bcb4:	f06f 030c 	mvn.w	r3, #12
 800bcb8:	e006      	b.n	800bcc8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	68ba      	ldr	r2, [r7, #8]
 800bcbe:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800bcc0:	f06f 0304 	mvn.w	r3, #4
 800bcc4:	e000      	b.n	800bcc8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800bcc6:	2300      	movs	r3, #0
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	3714      	adds	r7, #20
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd90      	pop	{r4, r7, pc}
 800bcd0:	0801526c 	.word	0x0801526c
 800bcd4:	0801577c 	.word	0x0801577c
 800bcd8:	080152b0 	.word	0x080152b0

0800bcdc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b084      	sub	sp, #16
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800bce4:	e007      	b.n	800bcf6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f000 f80a 	bl	800bd06 <tcp_seg_free>
    seg = next;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d1f4      	bne.n	800bce6 <tcp_segs_free+0xa>
  }
}
 800bcfc:	bf00      	nop
 800bcfe:	bf00      	nop
 800bd00:	3710      	adds	r7, #16
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}

0800bd06 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800bd06:	b580      	push	{r7, lr}
 800bd08:	b082      	sub	sp, #8
 800bd0a:	af00      	add	r7, sp, #0
 800bd0c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d00c      	beq.n	800bd2e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	685b      	ldr	r3, [r3, #4]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d004      	beq.n	800bd26 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	685b      	ldr	r3, [r3, #4]
 800bd20:	4618      	mov	r0, r3
 800bd22:	f7fe fbb3 	bl	800a48c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800bd26:	6879      	ldr	r1, [r7, #4]
 800bd28:	2003      	movs	r0, #3
 800bd2a:	f7fd fd39 	bl	80097a0 <memp_free>
  }
}
 800bd2e:	bf00      	nop
 800bd30:	3708      	adds	r7, #8
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}
	...

0800bd38 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b082      	sub	sp, #8
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
 800bd40:	460b      	mov	r3, r1
 800bd42:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d107      	bne.n	800bd5a <tcp_setprio+0x22>
 800bd4a:	4b07      	ldr	r3, [pc, #28]	; (800bd68 <tcp_setprio+0x30>)
 800bd4c:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800bd50:	4906      	ldr	r1, [pc, #24]	; (800bd6c <tcp_setprio+0x34>)
 800bd52:	4807      	ldr	r0, [pc, #28]	; (800bd70 <tcp_setprio+0x38>)
 800bd54:	f007 fd34 	bl	80137c0 <iprintf>
 800bd58:	e002      	b.n	800bd60 <tcp_setprio+0x28>

  pcb->prio = prio;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	78fa      	ldrb	r2, [r7, #3]
 800bd5e:	755a      	strb	r2, [r3, #21]
}
 800bd60:	3708      	adds	r7, #8
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}
 800bd66:	bf00      	nop
 800bd68:	0801526c 	.word	0x0801526c
 800bd6c:	080157a4 	.word	0x080157a4
 800bd70:	080152b0 	.word	0x080152b0

0800bd74 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b084      	sub	sp, #16
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d106      	bne.n	800bd90 <tcp_seg_copy+0x1c>
 800bd82:	4b0f      	ldr	r3, [pc, #60]	; (800bdc0 <tcp_seg_copy+0x4c>)
 800bd84:	f240 6282 	movw	r2, #1666	; 0x682
 800bd88:	490e      	ldr	r1, [pc, #56]	; (800bdc4 <tcp_seg_copy+0x50>)
 800bd8a:	480f      	ldr	r0, [pc, #60]	; (800bdc8 <tcp_seg_copy+0x54>)
 800bd8c:	f007 fd18 	bl	80137c0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800bd90:	2003      	movs	r0, #3
 800bd92:	f7fd fc95 	bl	80096c0 <memp_malloc>
 800bd96:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d101      	bne.n	800bda2 <tcp_seg_copy+0x2e>
    return NULL;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	e00a      	b.n	800bdb8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800bda2:	2210      	movs	r2, #16
 800bda4:	6879      	ldr	r1, [r7, #4]
 800bda6:	68f8      	ldr	r0, [r7, #12]
 800bda8:	f007 fc60 	bl	801366c <memcpy>
  pbuf_ref(cseg->p);
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	685b      	ldr	r3, [r3, #4]
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f7fe fc0b 	bl	800a5cc <pbuf_ref>
  return cseg;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3710      	adds	r7, #16
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}
 800bdc0:	0801526c 	.word	0x0801526c
 800bdc4:	080157c0 	.word	0x080157c0
 800bdc8:	080152b0 	.word	0x080152b0

0800bdcc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b084      	sub	sp, #16
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	60f8      	str	r0, [r7, #12]
 800bdd4:	60b9      	str	r1, [r7, #8]
 800bdd6:	607a      	str	r2, [r7, #4]
 800bdd8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d109      	bne.n	800bdf4 <tcp_recv_null+0x28>
 800bde0:	4b12      	ldr	r3, [pc, #72]	; (800be2c <tcp_recv_null+0x60>)
 800bde2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800bde6:	4912      	ldr	r1, [pc, #72]	; (800be30 <tcp_recv_null+0x64>)
 800bde8:	4812      	ldr	r0, [pc, #72]	; (800be34 <tcp_recv_null+0x68>)
 800bdea:	f007 fce9 	bl	80137c0 <iprintf>
 800bdee:	f06f 030f 	mvn.w	r3, #15
 800bdf2:	e016      	b.n	800be22 <tcp_recv_null+0x56>

  if (p != NULL) {
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d009      	beq.n	800be0e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	891b      	ldrh	r3, [r3, #8]
 800bdfe:	4619      	mov	r1, r3
 800be00:	68b8      	ldr	r0, [r7, #8]
 800be02:	f7ff fab5 	bl	800b370 <tcp_recved>
    pbuf_free(p);
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f7fe fb40 	bl	800a48c <pbuf_free>
 800be0c:	e008      	b.n	800be20 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800be0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d104      	bne.n	800be20 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800be16:	68b8      	ldr	r0, [r7, #8]
 800be18:	f7fe ffe6 	bl	800ade8 <tcp_close>
 800be1c:	4603      	mov	r3, r0
 800be1e:	e000      	b.n	800be22 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800be20:	2300      	movs	r3, #0
}
 800be22:	4618      	mov	r0, r3
 800be24:	3710      	adds	r7, #16
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}
 800be2a:	bf00      	nop
 800be2c:	0801526c 	.word	0x0801526c
 800be30:	080157dc 	.word	0x080157dc
 800be34:	080152b0 	.word	0x080152b0

0800be38 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b086      	sub	sp, #24
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	4603      	mov	r3, r0
 800be40:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800be42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be46:	2b00      	cmp	r3, #0
 800be48:	db01      	blt.n	800be4e <tcp_kill_prio+0x16>
 800be4a:	79fb      	ldrb	r3, [r7, #7]
 800be4c:	e000      	b.n	800be50 <tcp_kill_prio+0x18>
 800be4e:	237f      	movs	r3, #127	; 0x7f
 800be50:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800be52:	7afb      	ldrb	r3, [r7, #11]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d034      	beq.n	800bec2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800be58:	7afb      	ldrb	r3, [r7, #11]
 800be5a:	3b01      	subs	r3, #1
 800be5c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800be5e:	2300      	movs	r3, #0
 800be60:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800be62:	2300      	movs	r3, #0
 800be64:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800be66:	4b19      	ldr	r3, [pc, #100]	; (800becc <tcp_kill_prio+0x94>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	617b      	str	r3, [r7, #20]
 800be6c:	e01f      	b.n	800beae <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800be6e:	697b      	ldr	r3, [r7, #20]
 800be70:	7d5b      	ldrb	r3, [r3, #21]
 800be72:	7afa      	ldrb	r2, [r7, #11]
 800be74:	429a      	cmp	r2, r3
 800be76:	d80c      	bhi.n	800be92 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800be78:	697b      	ldr	r3, [r7, #20]
 800be7a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800be7c:	7afa      	ldrb	r2, [r7, #11]
 800be7e:	429a      	cmp	r2, r3
 800be80:	d112      	bne.n	800bea8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800be82:	4b13      	ldr	r3, [pc, #76]	; (800bed0 <tcp_kill_prio+0x98>)
 800be84:	681a      	ldr	r2, [r3, #0]
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	6a1b      	ldr	r3, [r3, #32]
 800be8a:	1ad3      	subs	r3, r2, r3
 800be8c:	68fa      	ldr	r2, [r7, #12]
 800be8e:	429a      	cmp	r2, r3
 800be90:	d80a      	bhi.n	800bea8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800be92:	4b0f      	ldr	r3, [pc, #60]	; (800bed0 <tcp_kill_prio+0x98>)
 800be94:	681a      	ldr	r2, [r3, #0]
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	6a1b      	ldr	r3, [r3, #32]
 800be9a:	1ad3      	subs	r3, r2, r3
 800be9c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800bea2:	697b      	ldr	r3, [r7, #20]
 800bea4:	7d5b      	ldrb	r3, [r3, #21]
 800bea6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bea8:	697b      	ldr	r3, [r7, #20]
 800beaa:	68db      	ldr	r3, [r3, #12]
 800beac:	617b      	str	r3, [r7, #20]
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d1dc      	bne.n	800be6e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800beb4:	693b      	ldr	r3, [r7, #16]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d004      	beq.n	800bec4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800beba:	6938      	ldr	r0, [r7, #16]
 800bebc:	f7ff f87e 	bl	800afbc <tcp_abort>
 800bec0:	e000      	b.n	800bec4 <tcp_kill_prio+0x8c>
    return;
 800bec2:	bf00      	nop
  }
}
 800bec4:	3718      	adds	r7, #24
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}
 800beca:	bf00      	nop
 800becc:	200085d8 	.word	0x200085d8
 800bed0:	200085cc 	.word	0x200085cc

0800bed4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b086      	sub	sp, #24
 800bed8:	af00      	add	r7, sp, #0
 800beda:	4603      	mov	r3, r0
 800bedc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800bede:	79fb      	ldrb	r3, [r7, #7]
 800bee0:	2b08      	cmp	r3, #8
 800bee2:	d009      	beq.n	800bef8 <tcp_kill_state+0x24>
 800bee4:	79fb      	ldrb	r3, [r7, #7]
 800bee6:	2b09      	cmp	r3, #9
 800bee8:	d006      	beq.n	800bef8 <tcp_kill_state+0x24>
 800beea:	4b1a      	ldr	r3, [pc, #104]	; (800bf54 <tcp_kill_state+0x80>)
 800beec:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800bef0:	4919      	ldr	r1, [pc, #100]	; (800bf58 <tcp_kill_state+0x84>)
 800bef2:	481a      	ldr	r0, [pc, #104]	; (800bf5c <tcp_kill_state+0x88>)
 800bef4:	f007 fc64 	bl	80137c0 <iprintf>

  inactivity = 0;
 800bef8:	2300      	movs	r3, #0
 800befa:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800befc:	2300      	movs	r3, #0
 800befe:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bf00:	4b17      	ldr	r3, [pc, #92]	; (800bf60 <tcp_kill_state+0x8c>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	617b      	str	r3, [r7, #20]
 800bf06:	e017      	b.n	800bf38 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	7d1b      	ldrb	r3, [r3, #20]
 800bf0c:	79fa      	ldrb	r2, [r7, #7]
 800bf0e:	429a      	cmp	r2, r3
 800bf10:	d10f      	bne.n	800bf32 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bf12:	4b14      	ldr	r3, [pc, #80]	; (800bf64 <tcp_kill_state+0x90>)
 800bf14:	681a      	ldr	r2, [r3, #0]
 800bf16:	697b      	ldr	r3, [r7, #20]
 800bf18:	6a1b      	ldr	r3, [r3, #32]
 800bf1a:	1ad3      	subs	r3, r2, r3
 800bf1c:	68fa      	ldr	r2, [r7, #12]
 800bf1e:	429a      	cmp	r2, r3
 800bf20:	d807      	bhi.n	800bf32 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800bf22:	4b10      	ldr	r3, [pc, #64]	; (800bf64 <tcp_kill_state+0x90>)
 800bf24:	681a      	ldr	r2, [r3, #0]
 800bf26:	697b      	ldr	r3, [r7, #20]
 800bf28:	6a1b      	ldr	r3, [r3, #32]
 800bf2a:	1ad3      	subs	r3, r2, r3
 800bf2c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800bf2e:	697b      	ldr	r3, [r7, #20]
 800bf30:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bf32:	697b      	ldr	r3, [r7, #20]
 800bf34:	68db      	ldr	r3, [r3, #12]
 800bf36:	617b      	str	r3, [r7, #20]
 800bf38:	697b      	ldr	r3, [r7, #20]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d1e4      	bne.n	800bf08 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800bf3e:	693b      	ldr	r3, [r7, #16]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d003      	beq.n	800bf4c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800bf44:	2100      	movs	r1, #0
 800bf46:	6938      	ldr	r0, [r7, #16]
 800bf48:	f7fe ff7a 	bl	800ae40 <tcp_abandon>
  }
}
 800bf4c:	bf00      	nop
 800bf4e:	3718      	adds	r7, #24
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}
 800bf54:	0801526c 	.word	0x0801526c
 800bf58:	080157f8 	.word	0x080157f8
 800bf5c:	080152b0 	.word	0x080152b0
 800bf60:	200085d8 	.word	0x200085d8
 800bf64:	200085cc 	.word	0x200085cc

0800bf68 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b084      	sub	sp, #16
 800bf6c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800bf72:	2300      	movs	r3, #0
 800bf74:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bf76:	4b12      	ldr	r3, [pc, #72]	; (800bfc0 <tcp_kill_timewait+0x58>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	60fb      	str	r3, [r7, #12]
 800bf7c:	e012      	b.n	800bfa4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bf7e:	4b11      	ldr	r3, [pc, #68]	; (800bfc4 <tcp_kill_timewait+0x5c>)
 800bf80:	681a      	ldr	r2, [r3, #0]
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	6a1b      	ldr	r3, [r3, #32]
 800bf86:	1ad3      	subs	r3, r2, r3
 800bf88:	687a      	ldr	r2, [r7, #4]
 800bf8a:	429a      	cmp	r2, r3
 800bf8c:	d807      	bhi.n	800bf9e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800bf8e:	4b0d      	ldr	r3, [pc, #52]	; (800bfc4 <tcp_kill_timewait+0x5c>)
 800bf90:	681a      	ldr	r2, [r3, #0]
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	6a1b      	ldr	r3, [r3, #32]
 800bf96:	1ad3      	subs	r3, r2, r3
 800bf98:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	68db      	ldr	r3, [r3, #12]
 800bfa2:	60fb      	str	r3, [r7, #12]
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d1e9      	bne.n	800bf7e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d002      	beq.n	800bfb6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800bfb0:	68b8      	ldr	r0, [r7, #8]
 800bfb2:	f7ff f803 	bl	800afbc <tcp_abort>
  }
}
 800bfb6:	bf00      	nop
 800bfb8:	3710      	adds	r7, #16
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bd80      	pop	{r7, pc}
 800bfbe:	bf00      	nop
 800bfc0:	200085dc 	.word	0x200085dc
 800bfc4:	200085cc 	.word	0x200085cc

0800bfc8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b082      	sub	sp, #8
 800bfcc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800bfce:	4b10      	ldr	r3, [pc, #64]	; (800c010 <tcp_handle_closepend+0x48>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800bfd4:	e014      	b.n	800c000 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	68db      	ldr	r3, [r3, #12]
 800bfda:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	8b5b      	ldrh	r3, [r3, #26]
 800bfe0:	f003 0308 	and.w	r3, r3, #8
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d009      	beq.n	800bffc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	8b5b      	ldrh	r3, [r3, #26]
 800bfec:	f023 0308 	bic.w	r3, r3, #8
 800bff0:	b29a      	uxth	r2, r3
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f7fe fe8c 	bl	800ad14 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d1e7      	bne.n	800bfd6 <tcp_handle_closepend+0xe>
  }
}
 800c006:	bf00      	nop
 800c008:	bf00      	nop
 800c00a:	3708      	adds	r7, #8
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}
 800c010:	200085d8 	.word	0x200085d8

0800c014 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b084      	sub	sp, #16
 800c018:	af00      	add	r7, sp, #0
 800c01a:	4603      	mov	r3, r0
 800c01c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c01e:	2001      	movs	r0, #1
 800c020:	f7fd fb4e 	bl	80096c0 <memp_malloc>
 800c024:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d126      	bne.n	800c07a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800c02c:	f7ff ffcc 	bl	800bfc8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800c030:	f7ff ff9a 	bl	800bf68 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c034:	2001      	movs	r0, #1
 800c036:	f7fd fb43 	bl	80096c0 <memp_malloc>
 800c03a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d11b      	bne.n	800c07a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800c042:	2009      	movs	r0, #9
 800c044:	f7ff ff46 	bl	800bed4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c048:	2001      	movs	r0, #1
 800c04a:	f7fd fb39 	bl	80096c0 <memp_malloc>
 800c04e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d111      	bne.n	800c07a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800c056:	2008      	movs	r0, #8
 800c058:	f7ff ff3c 	bl	800bed4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c05c:	2001      	movs	r0, #1
 800c05e:	f7fd fb2f 	bl	80096c0 <memp_malloc>
 800c062:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d107      	bne.n	800c07a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800c06a:	79fb      	ldrb	r3, [r7, #7]
 800c06c:	4618      	mov	r0, r3
 800c06e:	f7ff fee3 	bl	800be38 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c072:	2001      	movs	r0, #1
 800c074:	f7fd fb24 	bl	80096c0 <memp_malloc>
 800c078:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d03f      	beq.n	800c100 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800c080:	229c      	movs	r2, #156	; 0x9c
 800c082:	2100      	movs	r1, #0
 800c084:	68f8      	ldr	r0, [r7, #12]
 800c086:	f007 faff 	bl	8013688 <memset>
    pcb->prio = prio;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	79fa      	ldrb	r2, [r7, #7]
 800c08e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c096:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c0a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	22ff      	movs	r2, #255	; 0xff
 800c0ae:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c0b6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	2206      	movs	r2, #6
 800c0bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	2206      	movs	r2, #6
 800c0c4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c0cc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	2201      	movs	r2, #1
 800c0d2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800c0d6:	4b0d      	ldr	r3, [pc, #52]	; (800c10c <tcp_alloc+0xf8>)
 800c0d8:	681a      	ldr	r2, [r3, #0]
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800c0de:	4b0c      	ldr	r3, [pc, #48]	; (800c110 <tcp_alloc+0xfc>)
 800c0e0:	781a      	ldrb	r2, [r3, #0]
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c0ec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	4a08      	ldr	r2, [pc, #32]	; (800c114 <tcp_alloc+0x100>)
 800c0f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	4a07      	ldr	r2, [pc, #28]	; (800c118 <tcp_alloc+0x104>)
 800c0fc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800c100:	68fb      	ldr	r3, [r7, #12]
}
 800c102:	4618      	mov	r0, r3
 800c104:	3710      	adds	r7, #16
 800c106:	46bd      	mov	sp, r7
 800c108:	bd80      	pop	{r7, pc}
 800c10a:	bf00      	nop
 800c10c:	200085cc 	.word	0x200085cc
 800c110:	200085e2 	.word	0x200085e2
 800c114:	0800bdcd 	.word	0x0800bdcd
 800c118:	006ddd00 	.word	0x006ddd00

0800c11c <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800c120:	2040      	movs	r0, #64	; 0x40
 800c122:	f7ff ff77 	bl	800c014 <tcp_alloc>
 800c126:	4603      	mov	r3, r0
}
 800c128:	4618      	mov	r0, r3
 800c12a:	bd80      	pop	{r7, pc}

0800c12c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800c12c:	b480      	push	{r7}
 800c12e:	b083      	sub	sp, #12
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
 800c134:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d002      	beq.n	800c142 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	683a      	ldr	r2, [r7, #0]
 800c140:	611a      	str	r2, [r3, #16]
  }
}
 800c142:	bf00      	nop
 800c144:	370c      	adds	r7, #12
 800c146:	46bd      	mov	sp, r7
 800c148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14c:	4770      	bx	lr
	...

0800c150 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b082      	sub	sp, #8
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
 800c158:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d00e      	beq.n	800c17e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	7d1b      	ldrb	r3, [r3, #20]
 800c164:	2b01      	cmp	r3, #1
 800c166:	d106      	bne.n	800c176 <tcp_recv+0x26>
 800c168:	4b07      	ldr	r3, [pc, #28]	; (800c188 <tcp_recv+0x38>)
 800c16a:	f240 72df 	movw	r2, #2015	; 0x7df
 800c16e:	4907      	ldr	r1, [pc, #28]	; (800c18c <tcp_recv+0x3c>)
 800c170:	4807      	ldr	r0, [pc, #28]	; (800c190 <tcp_recv+0x40>)
 800c172:	f007 fb25 	bl	80137c0 <iprintf>
    pcb->recv = recv;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	683a      	ldr	r2, [r7, #0]
 800c17a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800c17e:	bf00      	nop
 800c180:	3708      	adds	r7, #8
 800c182:	46bd      	mov	sp, r7
 800c184:	bd80      	pop	{r7, pc}
 800c186:	bf00      	nop
 800c188:	0801526c 	.word	0x0801526c
 800c18c:	08015808 	.word	0x08015808
 800c190:	080152b0 	.word	0x080152b0

0800c194 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b082      	sub	sp, #8
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
 800c19c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d00e      	beq.n	800c1c2 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	7d1b      	ldrb	r3, [r3, #20]
 800c1a8:	2b01      	cmp	r3, #1
 800c1aa:	d106      	bne.n	800c1ba <tcp_sent+0x26>
 800c1ac:	4b07      	ldr	r3, [pc, #28]	; (800c1cc <tcp_sent+0x38>)
 800c1ae:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800c1b2:	4907      	ldr	r1, [pc, #28]	; (800c1d0 <tcp_sent+0x3c>)
 800c1b4:	4807      	ldr	r0, [pc, #28]	; (800c1d4 <tcp_sent+0x40>)
 800c1b6:	f007 fb03 	bl	80137c0 <iprintf>
    pcb->sent = sent;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	683a      	ldr	r2, [r7, #0]
 800c1be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800c1c2:	bf00      	nop
 800c1c4:	3708      	adds	r7, #8
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}
 800c1ca:	bf00      	nop
 800c1cc:	0801526c 	.word	0x0801526c
 800c1d0:	08015830 	.word	0x08015830
 800c1d4:	080152b0 	.word	0x080152b0

0800c1d8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b082      	sub	sp, #8
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
 800c1e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d00e      	beq.n	800c206 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	7d1b      	ldrb	r3, [r3, #20]
 800c1ec:	2b01      	cmp	r3, #1
 800c1ee:	d106      	bne.n	800c1fe <tcp_err+0x26>
 800c1f0:	4b07      	ldr	r3, [pc, #28]	; (800c210 <tcp_err+0x38>)
 800c1f2:	f640 020d 	movw	r2, #2061	; 0x80d
 800c1f6:	4907      	ldr	r1, [pc, #28]	; (800c214 <tcp_err+0x3c>)
 800c1f8:	4807      	ldr	r0, [pc, #28]	; (800c218 <tcp_err+0x40>)
 800c1fa:	f007 fae1 	bl	80137c0 <iprintf>
    pcb->errf = err;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	683a      	ldr	r2, [r7, #0]
 800c202:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800c206:	bf00      	nop
 800c208:	3708      	adds	r7, #8
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}
 800c20e:	bf00      	nop
 800c210:	0801526c 	.word	0x0801526c
 800c214:	08015858 	.word	0x08015858
 800c218:	080152b0 	.word	0x080152b0

0800c21c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800c21c:	b480      	push	{r7}
 800c21e:	b085      	sub	sp, #20
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
 800c224:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d008      	beq.n	800c23e <tcp_accept+0x22>
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	7d1b      	ldrb	r3, [r3, #20]
 800c230:	2b01      	cmp	r3, #1
 800c232:	d104      	bne.n	800c23e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	683a      	ldr	r2, [r7, #0]
 800c23c:	619a      	str	r2, [r3, #24]
  }
}
 800c23e:	bf00      	nop
 800c240:	3714      	adds	r7, #20
 800c242:	46bd      	mov	sp, r7
 800c244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c248:	4770      	bx	lr
	...

0800c24c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b084      	sub	sp, #16
 800c250:	af00      	add	r7, sp, #0
 800c252:	60f8      	str	r0, [r7, #12]
 800c254:	60b9      	str	r1, [r7, #8]
 800c256:	4613      	mov	r3, r2
 800c258:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d107      	bne.n	800c270 <tcp_poll+0x24>
 800c260:	4b0e      	ldr	r3, [pc, #56]	; (800c29c <tcp_poll+0x50>)
 800c262:	f640 023d 	movw	r2, #2109	; 0x83d
 800c266:	490e      	ldr	r1, [pc, #56]	; (800c2a0 <tcp_poll+0x54>)
 800c268:	480e      	ldr	r0, [pc, #56]	; (800c2a4 <tcp_poll+0x58>)
 800c26a:	f007 faa9 	bl	80137c0 <iprintf>
 800c26e:	e011      	b.n	800c294 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	7d1b      	ldrb	r3, [r3, #20]
 800c274:	2b01      	cmp	r3, #1
 800c276:	d106      	bne.n	800c286 <tcp_poll+0x3a>
 800c278:	4b08      	ldr	r3, [pc, #32]	; (800c29c <tcp_poll+0x50>)
 800c27a:	f640 023e 	movw	r2, #2110	; 0x83e
 800c27e:	490a      	ldr	r1, [pc, #40]	; (800c2a8 <tcp_poll+0x5c>)
 800c280:	4808      	ldr	r0, [pc, #32]	; (800c2a4 <tcp_poll+0x58>)
 800c282:	f007 fa9d 	bl	80137c0 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	68ba      	ldr	r2, [r7, #8]
 800c28a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	79fa      	ldrb	r2, [r7, #7]
 800c292:	775a      	strb	r2, [r3, #29]
}
 800c294:	3710      	adds	r7, #16
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}
 800c29a:	bf00      	nop
 800c29c:	0801526c 	.word	0x0801526c
 800c2a0:	08015880 	.word	0x08015880
 800c2a4:	080152b0 	.word	0x080152b0
 800c2a8:	08015898 	.word	0x08015898

0800c2ac <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b082      	sub	sp, #8
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d107      	bne.n	800c2ca <tcp_pcb_purge+0x1e>
 800c2ba:	4b21      	ldr	r3, [pc, #132]	; (800c340 <tcp_pcb_purge+0x94>)
 800c2bc:	f640 0251 	movw	r2, #2129	; 0x851
 800c2c0:	4920      	ldr	r1, [pc, #128]	; (800c344 <tcp_pcb_purge+0x98>)
 800c2c2:	4821      	ldr	r0, [pc, #132]	; (800c348 <tcp_pcb_purge+0x9c>)
 800c2c4:	f007 fa7c 	bl	80137c0 <iprintf>
 800c2c8:	e037      	b.n	800c33a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	7d1b      	ldrb	r3, [r3, #20]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d033      	beq.n	800c33a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800c2d6:	2b0a      	cmp	r3, #10
 800c2d8:	d02f      	beq.n	800c33a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800c2de:	2b01      	cmp	r3, #1
 800c2e0:	d02b      	beq.n	800c33a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d007      	beq.n	800c2fa <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f7fe f8cc 	bl	800a48c <pbuf_free>
      pcb->refused_data = NULL;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d002      	beq.n	800c308 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	f000 f986 	bl	800c614 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c30e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c314:	4618      	mov	r0, r3
 800c316:	f7ff fce1 	bl	800bcdc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c31e:	4618      	mov	r0, r3
 800c320:	f7ff fcdc 	bl	800bcdc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2200      	movs	r2, #0
 800c328:	66da      	str	r2, [r3, #108]	; 0x6c
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2200      	movs	r2, #0
 800c336:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800c33a:	3708      	adds	r7, #8
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}
 800c340:	0801526c 	.word	0x0801526c
 800c344:	080158b8 	.word	0x080158b8
 800c348:	080152b0 	.word	0x080152b0

0800c34c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b084      	sub	sp, #16
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
 800c354:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d106      	bne.n	800c36a <tcp_pcb_remove+0x1e>
 800c35c:	4b3e      	ldr	r3, [pc, #248]	; (800c458 <tcp_pcb_remove+0x10c>)
 800c35e:	f640 0283 	movw	r2, #2179	; 0x883
 800c362:	493e      	ldr	r1, [pc, #248]	; (800c45c <tcp_pcb_remove+0x110>)
 800c364:	483e      	ldr	r0, [pc, #248]	; (800c460 <tcp_pcb_remove+0x114>)
 800c366:	f007 fa2b 	bl	80137c0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d106      	bne.n	800c37e <tcp_pcb_remove+0x32>
 800c370:	4b39      	ldr	r3, [pc, #228]	; (800c458 <tcp_pcb_remove+0x10c>)
 800c372:	f640 0284 	movw	r2, #2180	; 0x884
 800c376:	493b      	ldr	r1, [pc, #236]	; (800c464 <tcp_pcb_remove+0x118>)
 800c378:	4839      	ldr	r0, [pc, #228]	; (800c460 <tcp_pcb_remove+0x114>)
 800c37a:	f007 fa21 	bl	80137c0 <iprintf>

  TCP_RMV(pcblist, pcb);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	683a      	ldr	r2, [r7, #0]
 800c384:	429a      	cmp	r2, r3
 800c386:	d105      	bne.n	800c394 <tcp_pcb_remove+0x48>
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	68da      	ldr	r2, [r3, #12]
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	601a      	str	r2, [r3, #0]
 800c392:	e013      	b.n	800c3bc <tcp_pcb_remove+0x70>
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	60fb      	str	r3, [r7, #12]
 800c39a:	e00c      	b.n	800c3b6 <tcp_pcb_remove+0x6a>
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	68db      	ldr	r3, [r3, #12]
 800c3a0:	683a      	ldr	r2, [r7, #0]
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	d104      	bne.n	800c3b0 <tcp_pcb_remove+0x64>
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	68da      	ldr	r2, [r3, #12]
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	60da      	str	r2, [r3, #12]
 800c3ae:	e005      	b.n	800c3bc <tcp_pcb_remove+0x70>
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	68db      	ldr	r3, [r3, #12]
 800c3b4:	60fb      	str	r3, [r7, #12]
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d1ef      	bne.n	800c39c <tcp_pcb_remove+0x50>
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800c3c2:	6838      	ldr	r0, [r7, #0]
 800c3c4:	f7ff ff72 	bl	800c2ac <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	7d1b      	ldrb	r3, [r3, #20]
 800c3cc:	2b0a      	cmp	r3, #10
 800c3ce:	d013      	beq.n	800c3f8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800c3d4:	2b01      	cmp	r3, #1
 800c3d6:	d00f      	beq.n	800c3f8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	8b5b      	ldrh	r3, [r3, #26]
 800c3dc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d009      	beq.n	800c3f8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	8b5b      	ldrh	r3, [r3, #26]
 800c3e8:	f043 0302 	orr.w	r3, r3, #2
 800c3ec:	b29a      	uxth	r2, r3
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c3f2:	6838      	ldr	r0, [r7, #0]
 800c3f4:	f003 fbc6 	bl	800fb84 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	7d1b      	ldrb	r3, [r3, #20]
 800c3fc:	2b01      	cmp	r3, #1
 800c3fe:	d020      	beq.n	800c442 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c404:	2b00      	cmp	r3, #0
 800c406:	d006      	beq.n	800c416 <tcp_pcb_remove+0xca>
 800c408:	4b13      	ldr	r3, [pc, #76]	; (800c458 <tcp_pcb_remove+0x10c>)
 800c40a:	f640 0293 	movw	r2, #2195	; 0x893
 800c40e:	4916      	ldr	r1, [pc, #88]	; (800c468 <tcp_pcb_remove+0x11c>)
 800c410:	4813      	ldr	r0, [pc, #76]	; (800c460 <tcp_pcb_remove+0x114>)
 800c412:	f007 f9d5 	bl	80137c0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d006      	beq.n	800c42c <tcp_pcb_remove+0xe0>
 800c41e:	4b0e      	ldr	r3, [pc, #56]	; (800c458 <tcp_pcb_remove+0x10c>)
 800c420:	f640 0294 	movw	r2, #2196	; 0x894
 800c424:	4911      	ldr	r1, [pc, #68]	; (800c46c <tcp_pcb_remove+0x120>)
 800c426:	480e      	ldr	r0, [pc, #56]	; (800c460 <tcp_pcb_remove+0x114>)
 800c428:	f007 f9ca 	bl	80137c0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c430:	2b00      	cmp	r3, #0
 800c432:	d006      	beq.n	800c442 <tcp_pcb_remove+0xf6>
 800c434:	4b08      	ldr	r3, [pc, #32]	; (800c458 <tcp_pcb_remove+0x10c>)
 800c436:	f640 0296 	movw	r2, #2198	; 0x896
 800c43a:	490d      	ldr	r1, [pc, #52]	; (800c470 <tcp_pcb_remove+0x124>)
 800c43c:	4808      	ldr	r0, [pc, #32]	; (800c460 <tcp_pcb_remove+0x114>)
 800c43e:	f007 f9bf 	bl	80137c0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	2200      	movs	r2, #0
 800c446:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	2200      	movs	r2, #0
 800c44c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800c44e:	bf00      	nop
 800c450:	3710      	adds	r7, #16
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}
 800c456:	bf00      	nop
 800c458:	0801526c 	.word	0x0801526c
 800c45c:	080158d4 	.word	0x080158d4
 800c460:	080152b0 	.word	0x080152b0
 800c464:	080158f0 	.word	0x080158f0
 800c468:	08015910 	.word	0x08015910
 800c46c:	08015928 	.word	0x08015928
 800c470:	08015944 	.word	0x08015944

0800c474 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b082      	sub	sp, #8
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d106      	bne.n	800c490 <tcp_next_iss+0x1c>
 800c482:	4b0a      	ldr	r3, [pc, #40]	; (800c4ac <tcp_next_iss+0x38>)
 800c484:	f640 02af 	movw	r2, #2223	; 0x8af
 800c488:	4909      	ldr	r1, [pc, #36]	; (800c4b0 <tcp_next_iss+0x3c>)
 800c48a:	480a      	ldr	r0, [pc, #40]	; (800c4b4 <tcp_next_iss+0x40>)
 800c48c:	f007 f998 	bl	80137c0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800c490:	4b09      	ldr	r3, [pc, #36]	; (800c4b8 <tcp_next_iss+0x44>)
 800c492:	681a      	ldr	r2, [r3, #0]
 800c494:	4b09      	ldr	r3, [pc, #36]	; (800c4bc <tcp_next_iss+0x48>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	4413      	add	r3, r2
 800c49a:	4a07      	ldr	r2, [pc, #28]	; (800c4b8 <tcp_next_iss+0x44>)
 800c49c:	6013      	str	r3, [r2, #0]
  return iss;
 800c49e:	4b06      	ldr	r3, [pc, #24]	; (800c4b8 <tcp_next_iss+0x44>)
 800c4a0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3708      	adds	r7, #8
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}
 800c4aa:	bf00      	nop
 800c4ac:	0801526c 	.word	0x0801526c
 800c4b0:	0801595c 	.word	0x0801595c
 800c4b4:	080152b0 	.word	0x080152b0
 800c4b8:	20000038 	.word	0x20000038
 800c4bc:	200085cc 	.word	0x200085cc

0800c4c0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b086      	sub	sp, #24
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	60b9      	str	r1, [r7, #8]
 800c4ca:	607a      	str	r2, [r7, #4]
 800c4cc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d106      	bne.n	800c4e2 <tcp_eff_send_mss_netif+0x22>
 800c4d4:	4b14      	ldr	r3, [pc, #80]	; (800c528 <tcp_eff_send_mss_netif+0x68>)
 800c4d6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800c4da:	4914      	ldr	r1, [pc, #80]	; (800c52c <tcp_eff_send_mss_netif+0x6c>)
 800c4dc:	4814      	ldr	r0, [pc, #80]	; (800c530 <tcp_eff_send_mss_netif+0x70>)
 800c4de:	f007 f96f 	bl	80137c0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800c4e2:	68bb      	ldr	r3, [r7, #8]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d101      	bne.n	800c4ec <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800c4e8:	89fb      	ldrh	r3, [r7, #14]
 800c4ea:	e019      	b.n	800c520 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c4f0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800c4f2:	8afb      	ldrh	r3, [r7, #22]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d012      	beq.n	800c51e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800c4f8:	2328      	movs	r3, #40	; 0x28
 800c4fa:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800c4fc:	8afa      	ldrh	r2, [r7, #22]
 800c4fe:	8abb      	ldrh	r3, [r7, #20]
 800c500:	429a      	cmp	r2, r3
 800c502:	d904      	bls.n	800c50e <tcp_eff_send_mss_netif+0x4e>
 800c504:	8afa      	ldrh	r2, [r7, #22]
 800c506:	8abb      	ldrh	r3, [r7, #20]
 800c508:	1ad3      	subs	r3, r2, r3
 800c50a:	b29b      	uxth	r3, r3
 800c50c:	e000      	b.n	800c510 <tcp_eff_send_mss_netif+0x50>
 800c50e:	2300      	movs	r3, #0
 800c510:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800c512:	8a7a      	ldrh	r2, [r7, #18]
 800c514:	89fb      	ldrh	r3, [r7, #14]
 800c516:	4293      	cmp	r3, r2
 800c518:	bf28      	it	cs
 800c51a:	4613      	movcs	r3, r2
 800c51c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800c51e:	89fb      	ldrh	r3, [r7, #14]
}
 800c520:	4618      	mov	r0, r3
 800c522:	3718      	adds	r7, #24
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}
 800c528:	0801526c 	.word	0x0801526c
 800c52c:	08015978 	.word	0x08015978
 800c530:	080152b0 	.word	0x080152b0

0800c534 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b084      	sub	sp, #16
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
 800c53c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d119      	bne.n	800c57c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800c548:	4b10      	ldr	r3, [pc, #64]	; (800c58c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800c54a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800c54e:	4910      	ldr	r1, [pc, #64]	; (800c590 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800c550:	4810      	ldr	r0, [pc, #64]	; (800c594 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800c552:	f007 f935 	bl	80137c0 <iprintf>

  while (pcb != NULL) {
 800c556:	e011      	b.n	800c57c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	681a      	ldr	r2, [r3, #0]
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	429a      	cmp	r2, r3
 800c562:	d108      	bne.n	800c576 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	68db      	ldr	r3, [r3, #12]
 800c568:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800c56a:	68f8      	ldr	r0, [r7, #12]
 800c56c:	f7fe fd26 	bl	800afbc <tcp_abort>
      pcb = next;
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	60fb      	str	r3, [r7, #12]
 800c574:	e002      	b.n	800c57c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	68db      	ldr	r3, [r3, #12]
 800c57a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d1ea      	bne.n	800c558 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800c582:	bf00      	nop
 800c584:	bf00      	nop
 800c586:	3710      	adds	r7, #16
 800c588:	46bd      	mov	sp, r7
 800c58a:	bd80      	pop	{r7, pc}
 800c58c:	0801526c 	.word	0x0801526c
 800c590:	080159a0 	.word	0x080159a0
 800c594:	080152b0 	.word	0x080152b0

0800c598 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b084      	sub	sp, #16
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
 800c5a0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d02a      	beq.n	800c5fe <tcp_netif_ip_addr_changed+0x66>
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d026      	beq.n	800c5fe <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800c5b0:	4b15      	ldr	r3, [pc, #84]	; (800c608 <tcp_netif_ip_addr_changed+0x70>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	4619      	mov	r1, r3
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	f7ff ffbc 	bl	800c534 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800c5bc:	4b13      	ldr	r3, [pc, #76]	; (800c60c <tcp_netif_ip_addr_changed+0x74>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	4619      	mov	r1, r3
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	f7ff ffb6 	bl	800c534 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d017      	beq.n	800c5fe <tcp_netif_ip_addr_changed+0x66>
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d013      	beq.n	800c5fe <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c5d6:	4b0e      	ldr	r3, [pc, #56]	; (800c610 <tcp_netif_ip_addr_changed+0x78>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	60fb      	str	r3, [r7, #12]
 800c5dc:	e00c      	b.n	800c5f8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	681a      	ldr	r2, [r3, #0]
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	429a      	cmp	r2, r3
 800c5e8:	d103      	bne.n	800c5f2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	681a      	ldr	r2, [r3, #0]
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	68db      	ldr	r3, [r3, #12]
 800c5f6:	60fb      	str	r3, [r7, #12]
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d1ef      	bne.n	800c5de <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800c5fe:	bf00      	nop
 800c600:	3710      	adds	r7, #16
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}
 800c606:	bf00      	nop
 800c608:	200085d8 	.word	0x200085d8
 800c60c:	200085d0 	.word	0x200085d0
 800c610:	200085d4 	.word	0x200085d4

0800c614 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b082      	sub	sp, #8
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c620:	2b00      	cmp	r3, #0
 800c622:	d007      	beq.n	800c634 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c628:	4618      	mov	r0, r3
 800c62a:	f7ff fb57 	bl	800bcdc <tcp_segs_free>
    pcb->ooseq = NULL;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2200      	movs	r2, #0
 800c632:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800c634:	bf00      	nop
 800c636:	3708      	adds	r7, #8
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}

0800c63c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800c63c:	b590      	push	{r4, r7, lr}
 800c63e:	b08d      	sub	sp, #52	; 0x34
 800c640:	af04      	add	r7, sp, #16
 800c642:	6078      	str	r0, [r7, #4]
 800c644:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d105      	bne.n	800c658 <tcp_input+0x1c>
 800c64c:	4b9b      	ldr	r3, [pc, #620]	; (800c8bc <tcp_input+0x280>)
 800c64e:	2283      	movs	r2, #131	; 0x83
 800c650:	499b      	ldr	r1, [pc, #620]	; (800c8c0 <tcp_input+0x284>)
 800c652:	489c      	ldr	r0, [pc, #624]	; (800c8c4 <tcp_input+0x288>)
 800c654:	f007 f8b4 	bl	80137c0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	685b      	ldr	r3, [r3, #4]
 800c65c:	4a9a      	ldr	r2, [pc, #616]	; (800c8c8 <tcp_input+0x28c>)
 800c65e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	895b      	ldrh	r3, [r3, #10]
 800c664:	2b13      	cmp	r3, #19
 800c666:	f240 83d1 	bls.w	800ce0c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c66a:	4b98      	ldr	r3, [pc, #608]	; (800c8cc <tcp_input+0x290>)
 800c66c:	695b      	ldr	r3, [r3, #20]
 800c66e:	4a97      	ldr	r2, [pc, #604]	; (800c8cc <tcp_input+0x290>)
 800c670:	6812      	ldr	r2, [r2, #0]
 800c672:	4611      	mov	r1, r2
 800c674:	4618      	mov	r0, r3
 800c676:	f006 f86f 	bl	8012758 <ip4_addr_isbroadcast_u32>
 800c67a:	4603      	mov	r3, r0
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	f040 83c7 	bne.w	800ce10 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800c682:	4b92      	ldr	r3, [pc, #584]	; (800c8cc <tcp_input+0x290>)
 800c684:	695b      	ldr	r3, [r3, #20]
 800c686:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c68a:	2be0      	cmp	r3, #224	; 0xe0
 800c68c:	f000 83c0 	beq.w	800ce10 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800c690:	4b8d      	ldr	r3, [pc, #564]	; (800c8c8 <tcp_input+0x28c>)
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	899b      	ldrh	r3, [r3, #12]
 800c696:	b29b      	uxth	r3, r3
 800c698:	4618      	mov	r0, r3
 800c69a:	f7fc fb99 	bl	8008dd0 <lwip_htons>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	0b1b      	lsrs	r3, r3, #12
 800c6a2:	b29b      	uxth	r3, r3
 800c6a4:	b2db      	uxtb	r3, r3
 800c6a6:	009b      	lsls	r3, r3, #2
 800c6a8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800c6aa:	7cbb      	ldrb	r3, [r7, #18]
 800c6ac:	2b13      	cmp	r3, #19
 800c6ae:	f240 83b1 	bls.w	800ce14 <tcp_input+0x7d8>
 800c6b2:	7cbb      	ldrb	r3, [r7, #18]
 800c6b4:	b29a      	uxth	r2, r3
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	891b      	ldrh	r3, [r3, #8]
 800c6ba:	429a      	cmp	r2, r3
 800c6bc:	f200 83aa 	bhi.w	800ce14 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800c6c0:	7cbb      	ldrb	r3, [r7, #18]
 800c6c2:	b29b      	uxth	r3, r3
 800c6c4:	3b14      	subs	r3, #20
 800c6c6:	b29a      	uxth	r2, r3
 800c6c8:	4b81      	ldr	r3, [pc, #516]	; (800c8d0 <tcp_input+0x294>)
 800c6ca:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800c6cc:	4b81      	ldr	r3, [pc, #516]	; (800c8d4 <tcp_input+0x298>)
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	895a      	ldrh	r2, [r3, #10]
 800c6d6:	7cbb      	ldrb	r3, [r7, #18]
 800c6d8:	b29b      	uxth	r3, r3
 800c6da:	429a      	cmp	r2, r3
 800c6dc:	d309      	bcc.n	800c6f2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800c6de:	4b7c      	ldr	r3, [pc, #496]	; (800c8d0 <tcp_input+0x294>)
 800c6e0:	881a      	ldrh	r2, [r3, #0]
 800c6e2:	4b7d      	ldr	r3, [pc, #500]	; (800c8d8 <tcp_input+0x29c>)
 800c6e4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800c6e6:	7cbb      	ldrb	r3, [r7, #18]
 800c6e8:	4619      	mov	r1, r3
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f7fd fe48 	bl	800a380 <pbuf_remove_header>
 800c6f0:	e04e      	b.n	800c790 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d105      	bne.n	800c706 <tcp_input+0xca>
 800c6fa:	4b70      	ldr	r3, [pc, #448]	; (800c8bc <tcp_input+0x280>)
 800c6fc:	22c2      	movs	r2, #194	; 0xc2
 800c6fe:	4977      	ldr	r1, [pc, #476]	; (800c8dc <tcp_input+0x2a0>)
 800c700:	4870      	ldr	r0, [pc, #448]	; (800c8c4 <tcp_input+0x288>)
 800c702:	f007 f85d 	bl	80137c0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800c706:	2114      	movs	r1, #20
 800c708:	6878      	ldr	r0, [r7, #4]
 800c70a:	f7fd fe39 	bl	800a380 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	895a      	ldrh	r2, [r3, #10]
 800c712:	4b71      	ldr	r3, [pc, #452]	; (800c8d8 <tcp_input+0x29c>)
 800c714:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800c716:	4b6e      	ldr	r3, [pc, #440]	; (800c8d0 <tcp_input+0x294>)
 800c718:	881a      	ldrh	r2, [r3, #0]
 800c71a:	4b6f      	ldr	r3, [pc, #444]	; (800c8d8 <tcp_input+0x29c>)
 800c71c:	881b      	ldrh	r3, [r3, #0]
 800c71e:	1ad3      	subs	r3, r2, r3
 800c720:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800c722:	4b6d      	ldr	r3, [pc, #436]	; (800c8d8 <tcp_input+0x29c>)
 800c724:	881b      	ldrh	r3, [r3, #0]
 800c726:	4619      	mov	r1, r3
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f7fd fe29 	bl	800a380 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	895b      	ldrh	r3, [r3, #10]
 800c734:	8a3a      	ldrh	r2, [r7, #16]
 800c736:	429a      	cmp	r2, r3
 800c738:	f200 836e 	bhi.w	800ce18 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	685b      	ldr	r3, [r3, #4]
 800c742:	4a64      	ldr	r2, [pc, #400]	; (800c8d4 <tcp_input+0x298>)
 800c744:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	8a3a      	ldrh	r2, [r7, #16]
 800c74c:	4611      	mov	r1, r2
 800c74e:	4618      	mov	r0, r3
 800c750:	f7fd fe16 	bl	800a380 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	891a      	ldrh	r2, [r3, #8]
 800c758:	8a3b      	ldrh	r3, [r7, #16]
 800c75a:	1ad3      	subs	r3, r2, r3
 800c75c:	b29a      	uxth	r2, r3
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	895b      	ldrh	r3, [r3, #10]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d005      	beq.n	800c776 <tcp_input+0x13a>
 800c76a:	4b54      	ldr	r3, [pc, #336]	; (800c8bc <tcp_input+0x280>)
 800c76c:	22df      	movs	r2, #223	; 0xdf
 800c76e:	495c      	ldr	r1, [pc, #368]	; (800c8e0 <tcp_input+0x2a4>)
 800c770:	4854      	ldr	r0, [pc, #336]	; (800c8c4 <tcp_input+0x288>)
 800c772:	f007 f825 	bl	80137c0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	891a      	ldrh	r2, [r3, #8]
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	891b      	ldrh	r3, [r3, #8]
 800c780:	429a      	cmp	r2, r3
 800c782:	d005      	beq.n	800c790 <tcp_input+0x154>
 800c784:	4b4d      	ldr	r3, [pc, #308]	; (800c8bc <tcp_input+0x280>)
 800c786:	22e0      	movs	r2, #224	; 0xe0
 800c788:	4956      	ldr	r1, [pc, #344]	; (800c8e4 <tcp_input+0x2a8>)
 800c78a:	484e      	ldr	r0, [pc, #312]	; (800c8c4 <tcp_input+0x288>)
 800c78c:	f007 f818 	bl	80137c0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800c790:	4b4d      	ldr	r3, [pc, #308]	; (800c8c8 <tcp_input+0x28c>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	881b      	ldrh	r3, [r3, #0]
 800c796:	b29b      	uxth	r3, r3
 800c798:	4a4b      	ldr	r2, [pc, #300]	; (800c8c8 <tcp_input+0x28c>)
 800c79a:	6814      	ldr	r4, [r2, #0]
 800c79c:	4618      	mov	r0, r3
 800c79e:	f7fc fb17 	bl	8008dd0 <lwip_htons>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800c7a6:	4b48      	ldr	r3, [pc, #288]	; (800c8c8 <tcp_input+0x28c>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	885b      	ldrh	r3, [r3, #2]
 800c7ac:	b29b      	uxth	r3, r3
 800c7ae:	4a46      	ldr	r2, [pc, #280]	; (800c8c8 <tcp_input+0x28c>)
 800c7b0:	6814      	ldr	r4, [r2, #0]
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f7fc fb0c 	bl	8008dd0 <lwip_htons>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800c7bc:	4b42      	ldr	r3, [pc, #264]	; (800c8c8 <tcp_input+0x28c>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	685b      	ldr	r3, [r3, #4]
 800c7c2:	4a41      	ldr	r2, [pc, #260]	; (800c8c8 <tcp_input+0x28c>)
 800c7c4:	6814      	ldr	r4, [r2, #0]
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	f7fc fb17 	bl	8008dfa <lwip_htonl>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	6063      	str	r3, [r4, #4]
 800c7d0:	6863      	ldr	r3, [r4, #4]
 800c7d2:	4a45      	ldr	r2, [pc, #276]	; (800c8e8 <tcp_input+0x2ac>)
 800c7d4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800c7d6:	4b3c      	ldr	r3, [pc, #240]	; (800c8c8 <tcp_input+0x28c>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	689b      	ldr	r3, [r3, #8]
 800c7dc:	4a3a      	ldr	r2, [pc, #232]	; (800c8c8 <tcp_input+0x28c>)
 800c7de:	6814      	ldr	r4, [r2, #0]
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f7fc fb0a 	bl	8008dfa <lwip_htonl>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	60a3      	str	r3, [r4, #8]
 800c7ea:	68a3      	ldr	r3, [r4, #8]
 800c7ec:	4a3f      	ldr	r2, [pc, #252]	; (800c8ec <tcp_input+0x2b0>)
 800c7ee:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800c7f0:	4b35      	ldr	r3, [pc, #212]	; (800c8c8 <tcp_input+0x28c>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	89db      	ldrh	r3, [r3, #14]
 800c7f6:	b29b      	uxth	r3, r3
 800c7f8:	4a33      	ldr	r2, [pc, #204]	; (800c8c8 <tcp_input+0x28c>)
 800c7fa:	6814      	ldr	r4, [r2, #0]
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f7fc fae7 	bl	8008dd0 <lwip_htons>
 800c802:	4603      	mov	r3, r0
 800c804:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800c806:	4b30      	ldr	r3, [pc, #192]	; (800c8c8 <tcp_input+0x28c>)
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	899b      	ldrh	r3, [r3, #12]
 800c80c:	b29b      	uxth	r3, r3
 800c80e:	4618      	mov	r0, r3
 800c810:	f7fc fade 	bl	8008dd0 <lwip_htons>
 800c814:	4603      	mov	r3, r0
 800c816:	b2db      	uxtb	r3, r3
 800c818:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c81c:	b2da      	uxtb	r2, r3
 800c81e:	4b34      	ldr	r3, [pc, #208]	; (800c8f0 <tcp_input+0x2b4>)
 800c820:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	891a      	ldrh	r2, [r3, #8]
 800c826:	4b33      	ldr	r3, [pc, #204]	; (800c8f4 <tcp_input+0x2b8>)
 800c828:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800c82a:	4b31      	ldr	r3, [pc, #196]	; (800c8f0 <tcp_input+0x2b4>)
 800c82c:	781b      	ldrb	r3, [r3, #0]
 800c82e:	f003 0303 	and.w	r3, r3, #3
 800c832:	2b00      	cmp	r3, #0
 800c834:	d00c      	beq.n	800c850 <tcp_input+0x214>
    tcplen++;
 800c836:	4b2f      	ldr	r3, [pc, #188]	; (800c8f4 <tcp_input+0x2b8>)
 800c838:	881b      	ldrh	r3, [r3, #0]
 800c83a:	3301      	adds	r3, #1
 800c83c:	b29a      	uxth	r2, r3
 800c83e:	4b2d      	ldr	r3, [pc, #180]	; (800c8f4 <tcp_input+0x2b8>)
 800c840:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	891a      	ldrh	r2, [r3, #8]
 800c846:	4b2b      	ldr	r3, [pc, #172]	; (800c8f4 <tcp_input+0x2b8>)
 800c848:	881b      	ldrh	r3, [r3, #0]
 800c84a:	429a      	cmp	r2, r3
 800c84c:	f200 82e6 	bhi.w	800ce1c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800c850:	2300      	movs	r3, #0
 800c852:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c854:	4b28      	ldr	r3, [pc, #160]	; (800c8f8 <tcp_input+0x2bc>)
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	61fb      	str	r3, [r7, #28]
 800c85a:	e09d      	b.n	800c998 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800c85c:	69fb      	ldr	r3, [r7, #28]
 800c85e:	7d1b      	ldrb	r3, [r3, #20]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d105      	bne.n	800c870 <tcp_input+0x234>
 800c864:	4b15      	ldr	r3, [pc, #84]	; (800c8bc <tcp_input+0x280>)
 800c866:	22fb      	movs	r2, #251	; 0xfb
 800c868:	4924      	ldr	r1, [pc, #144]	; (800c8fc <tcp_input+0x2c0>)
 800c86a:	4816      	ldr	r0, [pc, #88]	; (800c8c4 <tcp_input+0x288>)
 800c86c:	f006 ffa8 	bl	80137c0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800c870:	69fb      	ldr	r3, [r7, #28]
 800c872:	7d1b      	ldrb	r3, [r3, #20]
 800c874:	2b0a      	cmp	r3, #10
 800c876:	d105      	bne.n	800c884 <tcp_input+0x248>
 800c878:	4b10      	ldr	r3, [pc, #64]	; (800c8bc <tcp_input+0x280>)
 800c87a:	22fc      	movs	r2, #252	; 0xfc
 800c87c:	4920      	ldr	r1, [pc, #128]	; (800c900 <tcp_input+0x2c4>)
 800c87e:	4811      	ldr	r0, [pc, #68]	; (800c8c4 <tcp_input+0x288>)
 800c880:	f006 ff9e 	bl	80137c0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800c884:	69fb      	ldr	r3, [r7, #28]
 800c886:	7d1b      	ldrb	r3, [r3, #20]
 800c888:	2b01      	cmp	r3, #1
 800c88a:	d105      	bne.n	800c898 <tcp_input+0x25c>
 800c88c:	4b0b      	ldr	r3, [pc, #44]	; (800c8bc <tcp_input+0x280>)
 800c88e:	22fd      	movs	r2, #253	; 0xfd
 800c890:	491c      	ldr	r1, [pc, #112]	; (800c904 <tcp_input+0x2c8>)
 800c892:	480c      	ldr	r0, [pc, #48]	; (800c8c4 <tcp_input+0x288>)
 800c894:	f006 ff94 	bl	80137c0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c898:	69fb      	ldr	r3, [r7, #28]
 800c89a:	7a1b      	ldrb	r3, [r3, #8]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d033      	beq.n	800c908 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c8a0:	69fb      	ldr	r3, [r7, #28]
 800c8a2:	7a1a      	ldrb	r2, [r3, #8]
 800c8a4:	4b09      	ldr	r3, [pc, #36]	; (800c8cc <tcp_input+0x290>)
 800c8a6:	685b      	ldr	r3, [r3, #4]
 800c8a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c8ac:	3301      	adds	r3, #1
 800c8ae:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c8b0:	429a      	cmp	r2, r3
 800c8b2:	d029      	beq.n	800c908 <tcp_input+0x2cc>
      prev = pcb;
 800c8b4:	69fb      	ldr	r3, [r7, #28]
 800c8b6:	61bb      	str	r3, [r7, #24]
      continue;
 800c8b8:	e06b      	b.n	800c992 <tcp_input+0x356>
 800c8ba:	bf00      	nop
 800c8bc:	080159d4 	.word	0x080159d4
 800c8c0:	08015a08 	.word	0x08015a08
 800c8c4:	08015a20 	.word	0x08015a20
 800c8c8:	200085f4 	.word	0x200085f4
 800c8cc:	2000505c 	.word	0x2000505c
 800c8d0:	200085f8 	.word	0x200085f8
 800c8d4:	200085fc 	.word	0x200085fc
 800c8d8:	200085fa 	.word	0x200085fa
 800c8dc:	08015a48 	.word	0x08015a48
 800c8e0:	08015a58 	.word	0x08015a58
 800c8e4:	08015a64 	.word	0x08015a64
 800c8e8:	20008604 	.word	0x20008604
 800c8ec:	20008608 	.word	0x20008608
 800c8f0:	20008610 	.word	0x20008610
 800c8f4:	2000860e 	.word	0x2000860e
 800c8f8:	200085d8 	.word	0x200085d8
 800c8fc:	08015a84 	.word	0x08015a84
 800c900:	08015aac 	.word	0x08015aac
 800c904:	08015ad8 	.word	0x08015ad8
    }

    if (pcb->remote_port == tcphdr->src &&
 800c908:	69fb      	ldr	r3, [r7, #28]
 800c90a:	8b1a      	ldrh	r2, [r3, #24]
 800c90c:	4b72      	ldr	r3, [pc, #456]	; (800cad8 <tcp_input+0x49c>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	881b      	ldrh	r3, [r3, #0]
 800c912:	b29b      	uxth	r3, r3
 800c914:	429a      	cmp	r2, r3
 800c916:	d13a      	bne.n	800c98e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800c918:	69fb      	ldr	r3, [r7, #28]
 800c91a:	8ada      	ldrh	r2, [r3, #22]
 800c91c:	4b6e      	ldr	r3, [pc, #440]	; (800cad8 <tcp_input+0x49c>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	885b      	ldrh	r3, [r3, #2]
 800c922:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800c924:	429a      	cmp	r2, r3
 800c926:	d132      	bne.n	800c98e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c928:	69fb      	ldr	r3, [r7, #28]
 800c92a:	685a      	ldr	r2, [r3, #4]
 800c92c:	4b6b      	ldr	r3, [pc, #428]	; (800cadc <tcp_input+0x4a0>)
 800c92e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800c930:	429a      	cmp	r2, r3
 800c932:	d12c      	bne.n	800c98e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c934:	69fb      	ldr	r3, [r7, #28]
 800c936:	681a      	ldr	r2, [r3, #0]
 800c938:	4b68      	ldr	r3, [pc, #416]	; (800cadc <tcp_input+0x4a0>)
 800c93a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c93c:	429a      	cmp	r2, r3
 800c93e:	d126      	bne.n	800c98e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800c940:	69fb      	ldr	r3, [r7, #28]
 800c942:	68db      	ldr	r3, [r3, #12]
 800c944:	69fa      	ldr	r2, [r7, #28]
 800c946:	429a      	cmp	r2, r3
 800c948:	d106      	bne.n	800c958 <tcp_input+0x31c>
 800c94a:	4b65      	ldr	r3, [pc, #404]	; (800cae0 <tcp_input+0x4a4>)
 800c94c:	f240 120d 	movw	r2, #269	; 0x10d
 800c950:	4964      	ldr	r1, [pc, #400]	; (800cae4 <tcp_input+0x4a8>)
 800c952:	4865      	ldr	r0, [pc, #404]	; (800cae8 <tcp_input+0x4ac>)
 800c954:	f006 ff34 	bl	80137c0 <iprintf>
      if (prev != NULL) {
 800c958:	69bb      	ldr	r3, [r7, #24]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d00a      	beq.n	800c974 <tcp_input+0x338>
        prev->next = pcb->next;
 800c95e:	69fb      	ldr	r3, [r7, #28]
 800c960:	68da      	ldr	r2, [r3, #12]
 800c962:	69bb      	ldr	r3, [r7, #24]
 800c964:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800c966:	4b61      	ldr	r3, [pc, #388]	; (800caec <tcp_input+0x4b0>)
 800c968:	681a      	ldr	r2, [r3, #0]
 800c96a:	69fb      	ldr	r3, [r7, #28]
 800c96c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800c96e:	4a5f      	ldr	r2, [pc, #380]	; (800caec <tcp_input+0x4b0>)
 800c970:	69fb      	ldr	r3, [r7, #28]
 800c972:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800c974:	69fb      	ldr	r3, [r7, #28]
 800c976:	68db      	ldr	r3, [r3, #12]
 800c978:	69fa      	ldr	r2, [r7, #28]
 800c97a:	429a      	cmp	r2, r3
 800c97c:	d111      	bne.n	800c9a2 <tcp_input+0x366>
 800c97e:	4b58      	ldr	r3, [pc, #352]	; (800cae0 <tcp_input+0x4a4>)
 800c980:	f240 1215 	movw	r2, #277	; 0x115
 800c984:	495a      	ldr	r1, [pc, #360]	; (800caf0 <tcp_input+0x4b4>)
 800c986:	4858      	ldr	r0, [pc, #352]	; (800cae8 <tcp_input+0x4ac>)
 800c988:	f006 ff1a 	bl	80137c0 <iprintf>
      break;
 800c98c:	e009      	b.n	800c9a2 <tcp_input+0x366>
    }
    prev = pcb;
 800c98e:	69fb      	ldr	r3, [r7, #28]
 800c990:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c992:	69fb      	ldr	r3, [r7, #28]
 800c994:	68db      	ldr	r3, [r3, #12]
 800c996:	61fb      	str	r3, [r7, #28]
 800c998:	69fb      	ldr	r3, [r7, #28]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	f47f af5e 	bne.w	800c85c <tcp_input+0x220>
 800c9a0:	e000      	b.n	800c9a4 <tcp_input+0x368>
      break;
 800c9a2:	bf00      	nop
  }

  if (pcb == NULL) {
 800c9a4:	69fb      	ldr	r3, [r7, #28]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	f040 80aa 	bne.w	800cb00 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c9ac:	4b51      	ldr	r3, [pc, #324]	; (800caf4 <tcp_input+0x4b8>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	61fb      	str	r3, [r7, #28]
 800c9b2:	e03f      	b.n	800ca34 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c9b4:	69fb      	ldr	r3, [r7, #28]
 800c9b6:	7d1b      	ldrb	r3, [r3, #20]
 800c9b8:	2b0a      	cmp	r3, #10
 800c9ba:	d006      	beq.n	800c9ca <tcp_input+0x38e>
 800c9bc:	4b48      	ldr	r3, [pc, #288]	; (800cae0 <tcp_input+0x4a4>)
 800c9be:	f240 121f 	movw	r2, #287	; 0x11f
 800c9c2:	494d      	ldr	r1, [pc, #308]	; (800caf8 <tcp_input+0x4bc>)
 800c9c4:	4848      	ldr	r0, [pc, #288]	; (800cae8 <tcp_input+0x4ac>)
 800c9c6:	f006 fefb 	bl	80137c0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c9ca:	69fb      	ldr	r3, [r7, #28]
 800c9cc:	7a1b      	ldrb	r3, [r3, #8]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d009      	beq.n	800c9e6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c9d2:	69fb      	ldr	r3, [r7, #28]
 800c9d4:	7a1a      	ldrb	r2, [r3, #8]
 800c9d6:	4b41      	ldr	r3, [pc, #260]	; (800cadc <tcp_input+0x4a0>)
 800c9d8:	685b      	ldr	r3, [r3, #4]
 800c9da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c9de:	3301      	adds	r3, #1
 800c9e0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c9e2:	429a      	cmp	r2, r3
 800c9e4:	d122      	bne.n	800ca2c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800c9e6:	69fb      	ldr	r3, [r7, #28]
 800c9e8:	8b1a      	ldrh	r2, [r3, #24]
 800c9ea:	4b3b      	ldr	r3, [pc, #236]	; (800cad8 <tcp_input+0x49c>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	881b      	ldrh	r3, [r3, #0]
 800c9f0:	b29b      	uxth	r3, r3
 800c9f2:	429a      	cmp	r2, r3
 800c9f4:	d11b      	bne.n	800ca2e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800c9f6:	69fb      	ldr	r3, [r7, #28]
 800c9f8:	8ada      	ldrh	r2, [r3, #22]
 800c9fa:	4b37      	ldr	r3, [pc, #220]	; (800cad8 <tcp_input+0x49c>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	885b      	ldrh	r3, [r3, #2]
 800ca00:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800ca02:	429a      	cmp	r2, r3
 800ca04:	d113      	bne.n	800ca2e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ca06:	69fb      	ldr	r3, [r7, #28]
 800ca08:	685a      	ldr	r2, [r3, #4]
 800ca0a:	4b34      	ldr	r3, [pc, #208]	; (800cadc <tcp_input+0x4a0>)
 800ca0c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800ca0e:	429a      	cmp	r2, r3
 800ca10:	d10d      	bne.n	800ca2e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ca12:	69fb      	ldr	r3, [r7, #28]
 800ca14:	681a      	ldr	r2, [r3, #0]
 800ca16:	4b31      	ldr	r3, [pc, #196]	; (800cadc <tcp_input+0x4a0>)
 800ca18:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ca1a:	429a      	cmp	r2, r3
 800ca1c:	d107      	bne.n	800ca2e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800ca1e:	69f8      	ldr	r0, [r7, #28]
 800ca20:	f000 fb56 	bl	800d0d0 <tcp_timewait_input>
        }
        pbuf_free(p);
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	f7fd fd31 	bl	800a48c <pbuf_free>
        return;
 800ca2a:	e1fd      	b.n	800ce28 <tcp_input+0x7ec>
        continue;
 800ca2c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ca2e:	69fb      	ldr	r3, [r7, #28]
 800ca30:	68db      	ldr	r3, [r3, #12]
 800ca32:	61fb      	str	r3, [r7, #28]
 800ca34:	69fb      	ldr	r3, [r7, #28]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d1bc      	bne.n	800c9b4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ca3e:	4b2f      	ldr	r3, [pc, #188]	; (800cafc <tcp_input+0x4c0>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	617b      	str	r3, [r7, #20]
 800ca44:	e02a      	b.n	800ca9c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ca46:	697b      	ldr	r3, [r7, #20]
 800ca48:	7a1b      	ldrb	r3, [r3, #8]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d00c      	beq.n	800ca68 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ca4e:	697b      	ldr	r3, [r7, #20]
 800ca50:	7a1a      	ldrb	r2, [r3, #8]
 800ca52:	4b22      	ldr	r3, [pc, #136]	; (800cadc <tcp_input+0x4a0>)
 800ca54:	685b      	ldr	r3, [r3, #4]
 800ca56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ca5a:	3301      	adds	r3, #1
 800ca5c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ca5e:	429a      	cmp	r2, r3
 800ca60:	d002      	beq.n	800ca68 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800ca62:	697b      	ldr	r3, [r7, #20]
 800ca64:	61bb      	str	r3, [r7, #24]
        continue;
 800ca66:	e016      	b.n	800ca96 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800ca68:	697b      	ldr	r3, [r7, #20]
 800ca6a:	8ada      	ldrh	r2, [r3, #22]
 800ca6c:	4b1a      	ldr	r3, [pc, #104]	; (800cad8 <tcp_input+0x49c>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	885b      	ldrh	r3, [r3, #2]
 800ca72:	b29b      	uxth	r3, r3
 800ca74:	429a      	cmp	r2, r3
 800ca76:	d10c      	bne.n	800ca92 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	681a      	ldr	r2, [r3, #0]
 800ca7c:	4b17      	ldr	r3, [pc, #92]	; (800cadc <tcp_input+0x4a0>)
 800ca7e:	695b      	ldr	r3, [r3, #20]
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d00f      	beq.n	800caa4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800ca84:	697b      	ldr	r3, [r7, #20]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d00d      	beq.n	800caa6 <tcp_input+0x46a>
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d009      	beq.n	800caa6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ca96:	697b      	ldr	r3, [r7, #20]
 800ca98:	68db      	ldr	r3, [r3, #12]
 800ca9a:	617b      	str	r3, [r7, #20]
 800ca9c:	697b      	ldr	r3, [r7, #20]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d1d1      	bne.n	800ca46 <tcp_input+0x40a>
 800caa2:	e000      	b.n	800caa6 <tcp_input+0x46a>
            break;
 800caa4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800caa6:	697b      	ldr	r3, [r7, #20]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d029      	beq.n	800cb00 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800caac:	69bb      	ldr	r3, [r7, #24]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d00a      	beq.n	800cac8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800cab2:	697b      	ldr	r3, [r7, #20]
 800cab4:	68da      	ldr	r2, [r3, #12]
 800cab6:	69bb      	ldr	r3, [r7, #24]
 800cab8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800caba:	4b10      	ldr	r3, [pc, #64]	; (800cafc <tcp_input+0x4c0>)
 800cabc:	681a      	ldr	r2, [r3, #0]
 800cabe:	697b      	ldr	r3, [r7, #20]
 800cac0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800cac2:	4a0e      	ldr	r2, [pc, #56]	; (800cafc <tcp_input+0x4c0>)
 800cac4:	697b      	ldr	r3, [r7, #20]
 800cac6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800cac8:	6978      	ldr	r0, [r7, #20]
 800caca:	f000 fa03 	bl	800ced4 <tcp_listen_input>
      }
      pbuf_free(p);
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f7fd fcdc 	bl	800a48c <pbuf_free>
      return;
 800cad4:	e1a8      	b.n	800ce28 <tcp_input+0x7ec>
 800cad6:	bf00      	nop
 800cad8:	200085f4 	.word	0x200085f4
 800cadc:	2000505c 	.word	0x2000505c
 800cae0:	080159d4 	.word	0x080159d4
 800cae4:	08015b00 	.word	0x08015b00
 800cae8:	08015a20 	.word	0x08015a20
 800caec:	200085d8 	.word	0x200085d8
 800caf0:	08015b2c 	.word	0x08015b2c
 800caf4:	200085dc 	.word	0x200085dc
 800caf8:	08015b58 	.word	0x08015b58
 800cafc:	200085d4 	.word	0x200085d4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800cb00:	69fb      	ldr	r3, [r7, #28]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	f000 8158 	beq.w	800cdb8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800cb08:	4b95      	ldr	r3, [pc, #596]	; (800cd60 <tcp_input+0x724>)
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	891a      	ldrh	r2, [r3, #8]
 800cb12:	4b93      	ldr	r3, [pc, #588]	; (800cd60 <tcp_input+0x724>)
 800cb14:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800cb16:	4a92      	ldr	r2, [pc, #584]	; (800cd60 <tcp_input+0x724>)
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800cb1c:	4b91      	ldr	r3, [pc, #580]	; (800cd64 <tcp_input+0x728>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	4a8f      	ldr	r2, [pc, #572]	; (800cd60 <tcp_input+0x724>)
 800cb22:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800cb24:	4b90      	ldr	r3, [pc, #576]	; (800cd68 <tcp_input+0x72c>)
 800cb26:	2200      	movs	r2, #0
 800cb28:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800cb2a:	4b90      	ldr	r3, [pc, #576]	; (800cd6c <tcp_input+0x730>)
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800cb30:	4b8f      	ldr	r3, [pc, #572]	; (800cd70 <tcp_input+0x734>)
 800cb32:	2200      	movs	r2, #0
 800cb34:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800cb36:	4b8f      	ldr	r3, [pc, #572]	; (800cd74 <tcp_input+0x738>)
 800cb38:	781b      	ldrb	r3, [r3, #0]
 800cb3a:	f003 0308 	and.w	r3, r3, #8
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d006      	beq.n	800cb50 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	7b5b      	ldrb	r3, [r3, #13]
 800cb46:	f043 0301 	orr.w	r3, r3, #1
 800cb4a:	b2da      	uxtb	r2, r3
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800cb50:	69fb      	ldr	r3, [r7, #28]
 800cb52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d017      	beq.n	800cb88 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800cb58:	69f8      	ldr	r0, [r7, #28]
 800cb5a:	f7ff f843 	bl	800bbe4 <tcp_process_refused_data>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	f113 0f0d 	cmn.w	r3, #13
 800cb64:	d007      	beq.n	800cb76 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800cb66:	69fb      	ldr	r3, [r7, #28]
 800cb68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d00c      	beq.n	800cb88 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800cb6e:	4b82      	ldr	r3, [pc, #520]	; (800cd78 <tcp_input+0x73c>)
 800cb70:	881b      	ldrh	r3, [r3, #0]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d008      	beq.n	800cb88 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800cb76:	69fb      	ldr	r3, [r7, #28]
 800cb78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	f040 80e3 	bne.w	800cd46 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800cb80:	69f8      	ldr	r0, [r7, #28]
 800cb82:	f003 fe05 	bl	8010790 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800cb86:	e0de      	b.n	800cd46 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800cb88:	4a7c      	ldr	r2, [pc, #496]	; (800cd7c <tcp_input+0x740>)
 800cb8a:	69fb      	ldr	r3, [r7, #28]
 800cb8c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800cb8e:	69f8      	ldr	r0, [r7, #28]
 800cb90:	f000 fb18 	bl	800d1c4 <tcp_process>
 800cb94:	4603      	mov	r3, r0
 800cb96:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800cb98:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cb9c:	f113 0f0d 	cmn.w	r3, #13
 800cba0:	f000 80d3 	beq.w	800cd4a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800cba4:	4b71      	ldr	r3, [pc, #452]	; (800cd6c <tcp_input+0x730>)
 800cba6:	781b      	ldrb	r3, [r3, #0]
 800cba8:	f003 0308 	and.w	r3, r3, #8
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d015      	beq.n	800cbdc <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800cbb0:	69fb      	ldr	r3, [r7, #28]
 800cbb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d008      	beq.n	800cbcc <tcp_input+0x590>
 800cbba:	69fb      	ldr	r3, [r7, #28]
 800cbbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cbc0:	69fa      	ldr	r2, [r7, #28]
 800cbc2:	6912      	ldr	r2, [r2, #16]
 800cbc4:	f06f 010d 	mvn.w	r1, #13
 800cbc8:	4610      	mov	r0, r2
 800cbca:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800cbcc:	69f9      	ldr	r1, [r7, #28]
 800cbce:	486c      	ldr	r0, [pc, #432]	; (800cd80 <tcp_input+0x744>)
 800cbd0:	f7ff fbbc 	bl	800c34c <tcp_pcb_remove>
        tcp_free(pcb);
 800cbd4:	69f8      	ldr	r0, [r7, #28]
 800cbd6:	f7fd ff09 	bl	800a9ec <tcp_free>
 800cbda:	e0da      	b.n	800cd92 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800cbdc:	2300      	movs	r3, #0
 800cbde:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800cbe0:	4b63      	ldr	r3, [pc, #396]	; (800cd70 <tcp_input+0x734>)
 800cbe2:	881b      	ldrh	r3, [r3, #0]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d01d      	beq.n	800cc24 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800cbe8:	4b61      	ldr	r3, [pc, #388]	; (800cd70 <tcp_input+0x734>)
 800cbea:	881b      	ldrh	r3, [r3, #0]
 800cbec:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800cbee:	69fb      	ldr	r3, [r7, #28]
 800cbf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d00a      	beq.n	800cc0e <tcp_input+0x5d2>
 800cbf8:	69fb      	ldr	r3, [r7, #28]
 800cbfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cbfe:	69fa      	ldr	r2, [r7, #28]
 800cc00:	6910      	ldr	r0, [r2, #16]
 800cc02:	89fa      	ldrh	r2, [r7, #14]
 800cc04:	69f9      	ldr	r1, [r7, #28]
 800cc06:	4798      	blx	r3
 800cc08:	4603      	mov	r3, r0
 800cc0a:	74fb      	strb	r3, [r7, #19]
 800cc0c:	e001      	b.n	800cc12 <tcp_input+0x5d6>
 800cc0e:	2300      	movs	r3, #0
 800cc10:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800cc12:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cc16:	f113 0f0d 	cmn.w	r3, #13
 800cc1a:	f000 8098 	beq.w	800cd4e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800cc1e:	4b54      	ldr	r3, [pc, #336]	; (800cd70 <tcp_input+0x734>)
 800cc20:	2200      	movs	r2, #0
 800cc22:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800cc24:	69f8      	ldr	r0, [r7, #28]
 800cc26:	f000 f915 	bl	800ce54 <tcp_input_delayed_close>
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	f040 8090 	bne.w	800cd52 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800cc32:	4b4d      	ldr	r3, [pc, #308]	; (800cd68 <tcp_input+0x72c>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d041      	beq.n	800ccbe <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800cc3a:	69fb      	ldr	r3, [r7, #28]
 800cc3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d006      	beq.n	800cc50 <tcp_input+0x614>
 800cc42:	4b50      	ldr	r3, [pc, #320]	; (800cd84 <tcp_input+0x748>)
 800cc44:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800cc48:	494f      	ldr	r1, [pc, #316]	; (800cd88 <tcp_input+0x74c>)
 800cc4a:	4850      	ldr	r0, [pc, #320]	; (800cd8c <tcp_input+0x750>)
 800cc4c:	f006 fdb8 	bl	80137c0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800cc50:	69fb      	ldr	r3, [r7, #28]
 800cc52:	8b5b      	ldrh	r3, [r3, #26]
 800cc54:	f003 0310 	and.w	r3, r3, #16
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d008      	beq.n	800cc6e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800cc5c:	4b42      	ldr	r3, [pc, #264]	; (800cd68 <tcp_input+0x72c>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	4618      	mov	r0, r3
 800cc62:	f7fd fc13 	bl	800a48c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800cc66:	69f8      	ldr	r0, [r7, #28]
 800cc68:	f7fe f9a8 	bl	800afbc <tcp_abort>
            goto aborted;
 800cc6c:	e091      	b.n	800cd92 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800cc6e:	69fb      	ldr	r3, [r7, #28]
 800cc70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d00c      	beq.n	800cc92 <tcp_input+0x656>
 800cc78:	69fb      	ldr	r3, [r7, #28]
 800cc7a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cc7e:	69fb      	ldr	r3, [r7, #28]
 800cc80:	6918      	ldr	r0, [r3, #16]
 800cc82:	4b39      	ldr	r3, [pc, #228]	; (800cd68 <tcp_input+0x72c>)
 800cc84:	681a      	ldr	r2, [r3, #0]
 800cc86:	2300      	movs	r3, #0
 800cc88:	69f9      	ldr	r1, [r7, #28]
 800cc8a:	47a0      	blx	r4
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	74fb      	strb	r3, [r7, #19]
 800cc90:	e008      	b.n	800cca4 <tcp_input+0x668>
 800cc92:	4b35      	ldr	r3, [pc, #212]	; (800cd68 <tcp_input+0x72c>)
 800cc94:	681a      	ldr	r2, [r3, #0]
 800cc96:	2300      	movs	r3, #0
 800cc98:	69f9      	ldr	r1, [r7, #28]
 800cc9a:	2000      	movs	r0, #0
 800cc9c:	f7ff f896 	bl	800bdcc <tcp_recv_null>
 800cca0:	4603      	mov	r3, r0
 800cca2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800cca4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cca8:	f113 0f0d 	cmn.w	r3, #13
 800ccac:	d053      	beq.n	800cd56 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800ccae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d003      	beq.n	800ccbe <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800ccb6:	4b2c      	ldr	r3, [pc, #176]	; (800cd68 <tcp_input+0x72c>)
 800ccb8:	681a      	ldr	r2, [r3, #0]
 800ccba:	69fb      	ldr	r3, [r7, #28]
 800ccbc:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800ccbe:	4b2b      	ldr	r3, [pc, #172]	; (800cd6c <tcp_input+0x730>)
 800ccc0:	781b      	ldrb	r3, [r3, #0]
 800ccc2:	f003 0320 	and.w	r3, r3, #32
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d030      	beq.n	800cd2c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800ccca:	69fb      	ldr	r3, [r7, #28]
 800cccc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d009      	beq.n	800cce6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800ccd2:	69fb      	ldr	r3, [r7, #28]
 800ccd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ccd6:	7b5a      	ldrb	r2, [r3, #13]
 800ccd8:	69fb      	ldr	r3, [r7, #28]
 800ccda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ccdc:	f042 0220 	orr.w	r2, r2, #32
 800cce0:	b2d2      	uxtb	r2, r2
 800cce2:	735a      	strb	r2, [r3, #13]
 800cce4:	e022      	b.n	800cd2c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800cce6:	69fb      	ldr	r3, [r7, #28]
 800cce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccea:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ccee:	d005      	beq.n	800ccfc <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800ccf0:	69fb      	ldr	r3, [r7, #28]
 800ccf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccf4:	3301      	adds	r3, #1
 800ccf6:	b29a      	uxth	r2, r3
 800ccf8:	69fb      	ldr	r3, [r7, #28]
 800ccfa:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800ccfc:	69fb      	ldr	r3, [r7, #28]
 800ccfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d00b      	beq.n	800cd1e <tcp_input+0x6e2>
 800cd06:	69fb      	ldr	r3, [r7, #28]
 800cd08:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cd0c:	69fb      	ldr	r3, [r7, #28]
 800cd0e:	6918      	ldr	r0, [r3, #16]
 800cd10:	2300      	movs	r3, #0
 800cd12:	2200      	movs	r2, #0
 800cd14:	69f9      	ldr	r1, [r7, #28]
 800cd16:	47a0      	blx	r4
 800cd18:	4603      	mov	r3, r0
 800cd1a:	74fb      	strb	r3, [r7, #19]
 800cd1c:	e001      	b.n	800cd22 <tcp_input+0x6e6>
 800cd1e:	2300      	movs	r3, #0
 800cd20:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800cd22:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cd26:	f113 0f0d 	cmn.w	r3, #13
 800cd2a:	d016      	beq.n	800cd5a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800cd2c:	4b13      	ldr	r3, [pc, #76]	; (800cd7c <tcp_input+0x740>)
 800cd2e:	2200      	movs	r2, #0
 800cd30:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800cd32:	69f8      	ldr	r0, [r7, #28]
 800cd34:	f000 f88e 	bl	800ce54 <tcp_input_delayed_close>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d128      	bne.n	800cd90 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800cd3e:	69f8      	ldr	r0, [r7, #28]
 800cd40:	f002 ff20 	bl	800fb84 <tcp_output>
 800cd44:	e025      	b.n	800cd92 <tcp_input+0x756>
        goto aborted;
 800cd46:	bf00      	nop
 800cd48:	e023      	b.n	800cd92 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800cd4a:	bf00      	nop
 800cd4c:	e021      	b.n	800cd92 <tcp_input+0x756>
              goto aborted;
 800cd4e:	bf00      	nop
 800cd50:	e01f      	b.n	800cd92 <tcp_input+0x756>
          goto aborted;
 800cd52:	bf00      	nop
 800cd54:	e01d      	b.n	800cd92 <tcp_input+0x756>
            goto aborted;
 800cd56:	bf00      	nop
 800cd58:	e01b      	b.n	800cd92 <tcp_input+0x756>
              goto aborted;
 800cd5a:	bf00      	nop
 800cd5c:	e019      	b.n	800cd92 <tcp_input+0x756>
 800cd5e:	bf00      	nop
 800cd60:	200085e4 	.word	0x200085e4
 800cd64:	200085f4 	.word	0x200085f4
 800cd68:	20008614 	.word	0x20008614
 800cd6c:	20008611 	.word	0x20008611
 800cd70:	2000860c 	.word	0x2000860c
 800cd74:	20008610 	.word	0x20008610
 800cd78:	2000860e 	.word	0x2000860e
 800cd7c:	20008618 	.word	0x20008618
 800cd80:	200085d8 	.word	0x200085d8
 800cd84:	080159d4 	.word	0x080159d4
 800cd88:	08015b88 	.word	0x08015b88
 800cd8c:	08015a20 	.word	0x08015a20
          goto aborted;
 800cd90:	bf00      	nop
    tcp_input_pcb = NULL;
 800cd92:	4b27      	ldr	r3, [pc, #156]	; (800ce30 <tcp_input+0x7f4>)
 800cd94:	2200      	movs	r2, #0
 800cd96:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800cd98:	4b26      	ldr	r3, [pc, #152]	; (800ce34 <tcp_input+0x7f8>)
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800cd9e:	4b26      	ldr	r3, [pc, #152]	; (800ce38 <tcp_input+0x7fc>)
 800cda0:	685b      	ldr	r3, [r3, #4]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d03f      	beq.n	800ce26 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800cda6:	4b24      	ldr	r3, [pc, #144]	; (800ce38 <tcp_input+0x7fc>)
 800cda8:	685b      	ldr	r3, [r3, #4]
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f7fd fb6e 	bl	800a48c <pbuf_free>
      inseg.p = NULL;
 800cdb0:	4b21      	ldr	r3, [pc, #132]	; (800ce38 <tcp_input+0x7fc>)
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800cdb6:	e036      	b.n	800ce26 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800cdb8:	4b20      	ldr	r3, [pc, #128]	; (800ce3c <tcp_input+0x800>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	899b      	ldrh	r3, [r3, #12]
 800cdbe:	b29b      	uxth	r3, r3
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f7fc f805 	bl	8008dd0 <lwip_htons>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	b2db      	uxtb	r3, r3
 800cdca:	f003 0304 	and.w	r3, r3, #4
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d118      	bne.n	800ce04 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cdd2:	4b1b      	ldr	r3, [pc, #108]	; (800ce40 <tcp_input+0x804>)
 800cdd4:	6819      	ldr	r1, [r3, #0]
 800cdd6:	4b1b      	ldr	r3, [pc, #108]	; (800ce44 <tcp_input+0x808>)
 800cdd8:	881b      	ldrh	r3, [r3, #0]
 800cdda:	461a      	mov	r2, r3
 800cddc:	4b1a      	ldr	r3, [pc, #104]	; (800ce48 <tcp_input+0x80c>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cde2:	4b16      	ldr	r3, [pc, #88]	; (800ce3c <tcp_input+0x800>)
 800cde4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cde6:	885b      	ldrh	r3, [r3, #2]
 800cde8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cdea:	4a14      	ldr	r2, [pc, #80]	; (800ce3c <tcp_input+0x800>)
 800cdec:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cdee:	8812      	ldrh	r2, [r2, #0]
 800cdf0:	b292      	uxth	r2, r2
 800cdf2:	9202      	str	r2, [sp, #8]
 800cdf4:	9301      	str	r3, [sp, #4]
 800cdf6:	4b15      	ldr	r3, [pc, #84]	; (800ce4c <tcp_input+0x810>)
 800cdf8:	9300      	str	r3, [sp, #0]
 800cdfa:	4b15      	ldr	r3, [pc, #84]	; (800ce50 <tcp_input+0x814>)
 800cdfc:	4602      	mov	r2, r0
 800cdfe:	2000      	movs	r0, #0
 800ce00:	f003 fc74 	bl	80106ec <tcp_rst>
    pbuf_free(p);
 800ce04:	6878      	ldr	r0, [r7, #4]
 800ce06:	f7fd fb41 	bl	800a48c <pbuf_free>
  return;
 800ce0a:	e00c      	b.n	800ce26 <tcp_input+0x7ea>
    goto dropped;
 800ce0c:	bf00      	nop
 800ce0e:	e006      	b.n	800ce1e <tcp_input+0x7e2>
    goto dropped;
 800ce10:	bf00      	nop
 800ce12:	e004      	b.n	800ce1e <tcp_input+0x7e2>
    goto dropped;
 800ce14:	bf00      	nop
 800ce16:	e002      	b.n	800ce1e <tcp_input+0x7e2>
      goto dropped;
 800ce18:	bf00      	nop
 800ce1a:	e000      	b.n	800ce1e <tcp_input+0x7e2>
      goto dropped;
 800ce1c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	f7fd fb34 	bl	800a48c <pbuf_free>
 800ce24:	e000      	b.n	800ce28 <tcp_input+0x7ec>
  return;
 800ce26:	bf00      	nop
}
 800ce28:	3724      	adds	r7, #36	; 0x24
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd90      	pop	{r4, r7, pc}
 800ce2e:	bf00      	nop
 800ce30:	20008618 	.word	0x20008618
 800ce34:	20008614 	.word	0x20008614
 800ce38:	200085e4 	.word	0x200085e4
 800ce3c:	200085f4 	.word	0x200085f4
 800ce40:	20008608 	.word	0x20008608
 800ce44:	2000860e 	.word	0x2000860e
 800ce48:	20008604 	.word	0x20008604
 800ce4c:	2000506c 	.word	0x2000506c
 800ce50:	20005070 	.word	0x20005070

0800ce54 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b082      	sub	sp, #8
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d106      	bne.n	800ce70 <tcp_input_delayed_close+0x1c>
 800ce62:	4b17      	ldr	r3, [pc, #92]	; (800cec0 <tcp_input_delayed_close+0x6c>)
 800ce64:	f240 225a 	movw	r2, #602	; 0x25a
 800ce68:	4916      	ldr	r1, [pc, #88]	; (800cec4 <tcp_input_delayed_close+0x70>)
 800ce6a:	4817      	ldr	r0, [pc, #92]	; (800cec8 <tcp_input_delayed_close+0x74>)
 800ce6c:	f006 fca8 	bl	80137c0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800ce70:	4b16      	ldr	r3, [pc, #88]	; (800cecc <tcp_input_delayed_close+0x78>)
 800ce72:	781b      	ldrb	r3, [r3, #0]
 800ce74:	f003 0310 	and.w	r3, r3, #16
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d01c      	beq.n	800ceb6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	8b5b      	ldrh	r3, [r3, #26]
 800ce80:	f003 0310 	and.w	r3, r3, #16
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d10d      	bne.n	800cea4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d008      	beq.n	800cea4 <tcp_input_delayed_close+0x50>
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce98:	687a      	ldr	r2, [r7, #4]
 800ce9a:	6912      	ldr	r2, [r2, #16]
 800ce9c:	f06f 010e 	mvn.w	r1, #14
 800cea0:	4610      	mov	r0, r2
 800cea2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800cea4:	6879      	ldr	r1, [r7, #4]
 800cea6:	480a      	ldr	r0, [pc, #40]	; (800ced0 <tcp_input_delayed_close+0x7c>)
 800cea8:	f7ff fa50 	bl	800c34c <tcp_pcb_remove>
    tcp_free(pcb);
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f7fd fd9d 	bl	800a9ec <tcp_free>
    return 1;
 800ceb2:	2301      	movs	r3, #1
 800ceb4:	e000      	b.n	800ceb8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ceb6:	2300      	movs	r3, #0
}
 800ceb8:	4618      	mov	r0, r3
 800ceba:	3708      	adds	r7, #8
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}
 800cec0:	080159d4 	.word	0x080159d4
 800cec4:	08015ba4 	.word	0x08015ba4
 800cec8:	08015a20 	.word	0x08015a20
 800cecc:	20008611 	.word	0x20008611
 800ced0:	200085d8 	.word	0x200085d8

0800ced4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ced4:	b590      	push	{r4, r7, lr}
 800ced6:	b08b      	sub	sp, #44	; 0x2c
 800ced8:	af04      	add	r7, sp, #16
 800ceda:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800cedc:	4b6f      	ldr	r3, [pc, #444]	; (800d09c <tcp_listen_input+0x1c8>)
 800cede:	781b      	ldrb	r3, [r3, #0]
 800cee0:	f003 0304 	and.w	r3, r3, #4
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	f040 80d2 	bne.w	800d08e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d106      	bne.n	800cefe <tcp_listen_input+0x2a>
 800cef0:	4b6b      	ldr	r3, [pc, #428]	; (800d0a0 <tcp_listen_input+0x1cc>)
 800cef2:	f240 2281 	movw	r2, #641	; 0x281
 800cef6:	496b      	ldr	r1, [pc, #428]	; (800d0a4 <tcp_listen_input+0x1d0>)
 800cef8:	486b      	ldr	r0, [pc, #428]	; (800d0a8 <tcp_listen_input+0x1d4>)
 800cefa:	f006 fc61 	bl	80137c0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800cefe:	4b67      	ldr	r3, [pc, #412]	; (800d09c <tcp_listen_input+0x1c8>)
 800cf00:	781b      	ldrb	r3, [r3, #0]
 800cf02:	f003 0310 	and.w	r3, r3, #16
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d019      	beq.n	800cf3e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cf0a:	4b68      	ldr	r3, [pc, #416]	; (800d0ac <tcp_listen_input+0x1d8>)
 800cf0c:	6819      	ldr	r1, [r3, #0]
 800cf0e:	4b68      	ldr	r3, [pc, #416]	; (800d0b0 <tcp_listen_input+0x1dc>)
 800cf10:	881b      	ldrh	r3, [r3, #0]
 800cf12:	461a      	mov	r2, r3
 800cf14:	4b67      	ldr	r3, [pc, #412]	; (800d0b4 <tcp_listen_input+0x1e0>)
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cf1a:	4b67      	ldr	r3, [pc, #412]	; (800d0b8 <tcp_listen_input+0x1e4>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cf1e:	885b      	ldrh	r3, [r3, #2]
 800cf20:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cf22:	4a65      	ldr	r2, [pc, #404]	; (800d0b8 <tcp_listen_input+0x1e4>)
 800cf24:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cf26:	8812      	ldrh	r2, [r2, #0]
 800cf28:	b292      	uxth	r2, r2
 800cf2a:	9202      	str	r2, [sp, #8]
 800cf2c:	9301      	str	r3, [sp, #4]
 800cf2e:	4b63      	ldr	r3, [pc, #396]	; (800d0bc <tcp_listen_input+0x1e8>)
 800cf30:	9300      	str	r3, [sp, #0]
 800cf32:	4b63      	ldr	r3, [pc, #396]	; (800d0c0 <tcp_listen_input+0x1ec>)
 800cf34:	4602      	mov	r2, r0
 800cf36:	6878      	ldr	r0, [r7, #4]
 800cf38:	f003 fbd8 	bl	80106ec <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800cf3c:	e0a9      	b.n	800d092 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800cf3e:	4b57      	ldr	r3, [pc, #348]	; (800d09c <tcp_listen_input+0x1c8>)
 800cf40:	781b      	ldrb	r3, [r3, #0]
 800cf42:	f003 0302 	and.w	r3, r3, #2
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	f000 80a3 	beq.w	800d092 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	7d5b      	ldrb	r3, [r3, #21]
 800cf50:	4618      	mov	r0, r3
 800cf52:	f7ff f85f 	bl	800c014 <tcp_alloc>
 800cf56:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800cf58:	697b      	ldr	r3, [r7, #20]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d111      	bne.n	800cf82 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	699b      	ldr	r3, [r3, #24]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d00a      	beq.n	800cf7c <tcp_listen_input+0xa8>
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	699b      	ldr	r3, [r3, #24]
 800cf6a:	687a      	ldr	r2, [r7, #4]
 800cf6c:	6910      	ldr	r0, [r2, #16]
 800cf6e:	f04f 32ff 	mov.w	r2, #4294967295
 800cf72:	2100      	movs	r1, #0
 800cf74:	4798      	blx	r3
 800cf76:	4603      	mov	r3, r0
 800cf78:	73bb      	strb	r3, [r7, #14]
      return;
 800cf7a:	e08b      	b.n	800d094 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800cf7c:	23f0      	movs	r3, #240	; 0xf0
 800cf7e:	73bb      	strb	r3, [r7, #14]
      return;
 800cf80:	e088      	b.n	800d094 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800cf82:	4b50      	ldr	r3, [pc, #320]	; (800d0c4 <tcp_listen_input+0x1f0>)
 800cf84:	695a      	ldr	r2, [r3, #20]
 800cf86:	697b      	ldr	r3, [r7, #20]
 800cf88:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800cf8a:	4b4e      	ldr	r3, [pc, #312]	; (800d0c4 <tcp_listen_input+0x1f0>)
 800cf8c:	691a      	ldr	r2, [r3, #16]
 800cf8e:	697b      	ldr	r3, [r7, #20]
 800cf90:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	8ada      	ldrh	r2, [r3, #22]
 800cf96:	697b      	ldr	r3, [r7, #20]
 800cf98:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800cf9a:	4b47      	ldr	r3, [pc, #284]	; (800d0b8 <tcp_listen_input+0x1e4>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	881b      	ldrh	r3, [r3, #0]
 800cfa0:	b29a      	uxth	r2, r3
 800cfa2:	697b      	ldr	r3, [r7, #20]
 800cfa4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	2203      	movs	r2, #3
 800cfaa:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800cfac:	4b41      	ldr	r3, [pc, #260]	; (800d0b4 <tcp_listen_input+0x1e0>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	1c5a      	adds	r2, r3, #1
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800cfb6:	697b      	ldr	r3, [r7, #20]
 800cfb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cfba:	697b      	ldr	r3, [r7, #20]
 800cfbc:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800cfbe:	6978      	ldr	r0, [r7, #20]
 800cfc0:	f7ff fa58 	bl	800c474 <tcp_next_iss>
 800cfc4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800cfc6:	697b      	ldr	r3, [r7, #20]
 800cfc8:	693a      	ldr	r2, [r7, #16]
 800cfca:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800cfcc:	697b      	ldr	r3, [r7, #20]
 800cfce:	693a      	ldr	r2, [r7, #16]
 800cfd0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800cfd2:	697b      	ldr	r3, [r7, #20]
 800cfd4:	693a      	ldr	r2, [r7, #16]
 800cfd6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800cfd8:	697b      	ldr	r3, [r7, #20]
 800cfda:	693a      	ldr	r2, [r7, #16]
 800cfdc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800cfde:	4b35      	ldr	r3, [pc, #212]	; (800d0b4 <tcp_listen_input+0x1e0>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	1e5a      	subs	r2, r3, #1
 800cfe4:	697b      	ldr	r3, [r7, #20]
 800cfe6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	691a      	ldr	r2, [r3, #16]
 800cfec:	697b      	ldr	r3, [r7, #20]
 800cfee:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800cff0:	697b      	ldr	r3, [r7, #20]
 800cff2:	687a      	ldr	r2, [r7, #4]
 800cff4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	7a5b      	ldrb	r3, [r3, #9]
 800cffa:	f003 030c 	and.w	r3, r3, #12
 800cffe:	b2da      	uxtb	r2, r3
 800d000:	697b      	ldr	r3, [r7, #20]
 800d002:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	7a1a      	ldrb	r2, [r3, #8]
 800d008:	697b      	ldr	r3, [r7, #20]
 800d00a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800d00c:	4b2e      	ldr	r3, [pc, #184]	; (800d0c8 <tcp_listen_input+0x1f4>)
 800d00e:	681a      	ldr	r2, [r3, #0]
 800d010:	697b      	ldr	r3, [r7, #20]
 800d012:	60da      	str	r2, [r3, #12]
 800d014:	4a2c      	ldr	r2, [pc, #176]	; (800d0c8 <tcp_listen_input+0x1f4>)
 800d016:	697b      	ldr	r3, [r7, #20]
 800d018:	6013      	str	r3, [r2, #0]
 800d01a:	f003 fd29 	bl	8010a70 <tcp_timer_needed>
 800d01e:	4b2b      	ldr	r3, [pc, #172]	; (800d0cc <tcp_listen_input+0x1f8>)
 800d020:	2201      	movs	r2, #1
 800d022:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800d024:	6978      	ldr	r0, [r7, #20]
 800d026:	f001 fd8f 	bl	800eb48 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800d02a:	4b23      	ldr	r3, [pc, #140]	; (800d0b8 <tcp_listen_input+0x1e4>)
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	89db      	ldrh	r3, [r3, #14]
 800d030:	b29a      	uxth	r2, r3
 800d032:	697b      	ldr	r3, [r7, #20]
 800d034:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800d038:	697b      	ldr	r3, [r7, #20]
 800d03a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d03e:	697b      	ldr	r3, [r7, #20]
 800d040:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800d044:	697b      	ldr	r3, [r7, #20]
 800d046:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	3304      	adds	r3, #4
 800d04c:	4618      	mov	r0, r3
 800d04e:	f005 f8ed 	bl	801222c <ip4_route>
 800d052:	4601      	mov	r1, r0
 800d054:	697b      	ldr	r3, [r7, #20]
 800d056:	3304      	adds	r3, #4
 800d058:	461a      	mov	r2, r3
 800d05a:	4620      	mov	r0, r4
 800d05c:	f7ff fa30 	bl	800c4c0 <tcp_eff_send_mss_netif>
 800d060:	4603      	mov	r3, r0
 800d062:	461a      	mov	r2, r3
 800d064:	697b      	ldr	r3, [r7, #20]
 800d066:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800d068:	2112      	movs	r1, #18
 800d06a:	6978      	ldr	r0, [r7, #20]
 800d06c:	f002 fc9c 	bl	800f9a8 <tcp_enqueue_flags>
 800d070:	4603      	mov	r3, r0
 800d072:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800d074:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d004      	beq.n	800d086 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800d07c:	2100      	movs	r1, #0
 800d07e:	6978      	ldr	r0, [r7, #20]
 800d080:	f7fd fede 	bl	800ae40 <tcp_abandon>
      return;
 800d084:	e006      	b.n	800d094 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800d086:	6978      	ldr	r0, [r7, #20]
 800d088:	f002 fd7c 	bl	800fb84 <tcp_output>
  return;
 800d08c:	e001      	b.n	800d092 <tcp_listen_input+0x1be>
    return;
 800d08e:	bf00      	nop
 800d090:	e000      	b.n	800d094 <tcp_listen_input+0x1c0>
  return;
 800d092:	bf00      	nop
}
 800d094:	371c      	adds	r7, #28
 800d096:	46bd      	mov	sp, r7
 800d098:	bd90      	pop	{r4, r7, pc}
 800d09a:	bf00      	nop
 800d09c:	20008610 	.word	0x20008610
 800d0a0:	080159d4 	.word	0x080159d4
 800d0a4:	08015bcc 	.word	0x08015bcc
 800d0a8:	08015a20 	.word	0x08015a20
 800d0ac:	20008608 	.word	0x20008608
 800d0b0:	2000860e 	.word	0x2000860e
 800d0b4:	20008604 	.word	0x20008604
 800d0b8:	200085f4 	.word	0x200085f4
 800d0bc:	2000506c 	.word	0x2000506c
 800d0c0:	20005070 	.word	0x20005070
 800d0c4:	2000505c 	.word	0x2000505c
 800d0c8:	200085d8 	.word	0x200085d8
 800d0cc:	200085e0 	.word	0x200085e0

0800d0d0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b086      	sub	sp, #24
 800d0d4:	af04      	add	r7, sp, #16
 800d0d6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800d0d8:	4b2f      	ldr	r3, [pc, #188]	; (800d198 <tcp_timewait_input+0xc8>)
 800d0da:	781b      	ldrb	r3, [r3, #0]
 800d0dc:	f003 0304 	and.w	r3, r3, #4
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d153      	bne.n	800d18c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d106      	bne.n	800d0f8 <tcp_timewait_input+0x28>
 800d0ea:	4b2c      	ldr	r3, [pc, #176]	; (800d19c <tcp_timewait_input+0xcc>)
 800d0ec:	f240 22ee 	movw	r2, #750	; 0x2ee
 800d0f0:	492b      	ldr	r1, [pc, #172]	; (800d1a0 <tcp_timewait_input+0xd0>)
 800d0f2:	482c      	ldr	r0, [pc, #176]	; (800d1a4 <tcp_timewait_input+0xd4>)
 800d0f4:	f006 fb64 	bl	80137c0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800d0f8:	4b27      	ldr	r3, [pc, #156]	; (800d198 <tcp_timewait_input+0xc8>)
 800d0fa:	781b      	ldrb	r3, [r3, #0]
 800d0fc:	f003 0302 	and.w	r3, r3, #2
 800d100:	2b00      	cmp	r3, #0
 800d102:	d02a      	beq.n	800d15a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800d104:	4b28      	ldr	r3, [pc, #160]	; (800d1a8 <tcp_timewait_input+0xd8>)
 800d106:	681a      	ldr	r2, [r3, #0]
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d10c:	1ad3      	subs	r3, r2, r3
 800d10e:	2b00      	cmp	r3, #0
 800d110:	db2d      	blt.n	800d16e <tcp_timewait_input+0x9e>
 800d112:	4b25      	ldr	r3, [pc, #148]	; (800d1a8 <tcp_timewait_input+0xd8>)
 800d114:	681a      	ldr	r2, [r3, #0]
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d11a:	6879      	ldr	r1, [r7, #4]
 800d11c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d11e:	440b      	add	r3, r1
 800d120:	1ad3      	subs	r3, r2, r3
 800d122:	2b00      	cmp	r3, #0
 800d124:	dc23      	bgt.n	800d16e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d126:	4b21      	ldr	r3, [pc, #132]	; (800d1ac <tcp_timewait_input+0xdc>)
 800d128:	6819      	ldr	r1, [r3, #0]
 800d12a:	4b21      	ldr	r3, [pc, #132]	; (800d1b0 <tcp_timewait_input+0xe0>)
 800d12c:	881b      	ldrh	r3, [r3, #0]
 800d12e:	461a      	mov	r2, r3
 800d130:	4b1d      	ldr	r3, [pc, #116]	; (800d1a8 <tcp_timewait_input+0xd8>)
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d136:	4b1f      	ldr	r3, [pc, #124]	; (800d1b4 <tcp_timewait_input+0xe4>)
 800d138:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d13a:	885b      	ldrh	r3, [r3, #2]
 800d13c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d13e:	4a1d      	ldr	r2, [pc, #116]	; (800d1b4 <tcp_timewait_input+0xe4>)
 800d140:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d142:	8812      	ldrh	r2, [r2, #0]
 800d144:	b292      	uxth	r2, r2
 800d146:	9202      	str	r2, [sp, #8]
 800d148:	9301      	str	r3, [sp, #4]
 800d14a:	4b1b      	ldr	r3, [pc, #108]	; (800d1b8 <tcp_timewait_input+0xe8>)
 800d14c:	9300      	str	r3, [sp, #0]
 800d14e:	4b1b      	ldr	r3, [pc, #108]	; (800d1bc <tcp_timewait_input+0xec>)
 800d150:	4602      	mov	r2, r0
 800d152:	6878      	ldr	r0, [r7, #4]
 800d154:	f003 faca 	bl	80106ec <tcp_rst>
      return;
 800d158:	e01b      	b.n	800d192 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800d15a:	4b0f      	ldr	r3, [pc, #60]	; (800d198 <tcp_timewait_input+0xc8>)
 800d15c:	781b      	ldrb	r3, [r3, #0]
 800d15e:	f003 0301 	and.w	r3, r3, #1
 800d162:	2b00      	cmp	r3, #0
 800d164:	d003      	beq.n	800d16e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800d166:	4b16      	ldr	r3, [pc, #88]	; (800d1c0 <tcp_timewait_input+0xf0>)
 800d168:	681a      	ldr	r2, [r3, #0]
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800d16e:	4b10      	ldr	r3, [pc, #64]	; (800d1b0 <tcp_timewait_input+0xe0>)
 800d170:	881b      	ldrh	r3, [r3, #0]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d00c      	beq.n	800d190 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	8b5b      	ldrh	r3, [r3, #26]
 800d17a:	f043 0302 	orr.w	r3, r3, #2
 800d17e:	b29a      	uxth	r2, r3
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f002 fcfd 	bl	800fb84 <tcp_output>
  }
  return;
 800d18a:	e001      	b.n	800d190 <tcp_timewait_input+0xc0>
    return;
 800d18c:	bf00      	nop
 800d18e:	e000      	b.n	800d192 <tcp_timewait_input+0xc2>
  return;
 800d190:	bf00      	nop
}
 800d192:	3708      	adds	r7, #8
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}
 800d198:	20008610 	.word	0x20008610
 800d19c:	080159d4 	.word	0x080159d4
 800d1a0:	08015bec 	.word	0x08015bec
 800d1a4:	08015a20 	.word	0x08015a20
 800d1a8:	20008604 	.word	0x20008604
 800d1ac:	20008608 	.word	0x20008608
 800d1b0:	2000860e 	.word	0x2000860e
 800d1b4:	200085f4 	.word	0x200085f4
 800d1b8:	2000506c 	.word	0x2000506c
 800d1bc:	20005070 	.word	0x20005070
 800d1c0:	200085cc 	.word	0x200085cc

0800d1c4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800d1c4:	b590      	push	{r4, r7, lr}
 800d1c6:	b08d      	sub	sp, #52	; 0x34
 800d1c8:	af04      	add	r7, sp, #16
 800d1ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d106      	bne.n	800d1e8 <tcp_process+0x24>
 800d1da:	4b9d      	ldr	r3, [pc, #628]	; (800d450 <tcp_process+0x28c>)
 800d1dc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800d1e0:	499c      	ldr	r1, [pc, #624]	; (800d454 <tcp_process+0x290>)
 800d1e2:	489d      	ldr	r0, [pc, #628]	; (800d458 <tcp_process+0x294>)
 800d1e4:	f006 faec 	bl	80137c0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800d1e8:	4b9c      	ldr	r3, [pc, #624]	; (800d45c <tcp_process+0x298>)
 800d1ea:	781b      	ldrb	r3, [r3, #0]
 800d1ec:	f003 0304 	and.w	r3, r3, #4
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d04e      	beq.n	800d292 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	7d1b      	ldrb	r3, [r3, #20]
 800d1f8:	2b02      	cmp	r3, #2
 800d1fa:	d108      	bne.n	800d20e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d200:	4b97      	ldr	r3, [pc, #604]	; (800d460 <tcp_process+0x29c>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	429a      	cmp	r2, r3
 800d206:	d123      	bne.n	800d250 <tcp_process+0x8c>
        acceptable = 1;
 800d208:	2301      	movs	r3, #1
 800d20a:	76fb      	strb	r3, [r7, #27]
 800d20c:	e020      	b.n	800d250 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d212:	4b94      	ldr	r3, [pc, #592]	; (800d464 <tcp_process+0x2a0>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	429a      	cmp	r2, r3
 800d218:	d102      	bne.n	800d220 <tcp_process+0x5c>
        acceptable = 1;
 800d21a:	2301      	movs	r3, #1
 800d21c:	76fb      	strb	r3, [r7, #27]
 800d21e:	e017      	b.n	800d250 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d220:	4b90      	ldr	r3, [pc, #576]	; (800d464 <tcp_process+0x2a0>)
 800d222:	681a      	ldr	r2, [r3, #0]
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d228:	1ad3      	subs	r3, r2, r3
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	db10      	blt.n	800d250 <tcp_process+0x8c>
 800d22e:	4b8d      	ldr	r3, [pc, #564]	; (800d464 <tcp_process+0x2a0>)
 800d230:	681a      	ldr	r2, [r3, #0]
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d236:	6879      	ldr	r1, [r7, #4]
 800d238:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d23a:	440b      	add	r3, r1
 800d23c:	1ad3      	subs	r3, r2, r3
 800d23e:	2b00      	cmp	r3, #0
 800d240:	dc06      	bgt.n	800d250 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	8b5b      	ldrh	r3, [r3, #26]
 800d246:	f043 0302 	orr.w	r3, r3, #2
 800d24a:	b29a      	uxth	r2, r3
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800d250:	7efb      	ldrb	r3, [r7, #27]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d01b      	beq.n	800d28e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	7d1b      	ldrb	r3, [r3, #20]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d106      	bne.n	800d26c <tcp_process+0xa8>
 800d25e:	4b7c      	ldr	r3, [pc, #496]	; (800d450 <tcp_process+0x28c>)
 800d260:	f44f 724e 	mov.w	r2, #824	; 0x338
 800d264:	4980      	ldr	r1, [pc, #512]	; (800d468 <tcp_process+0x2a4>)
 800d266:	487c      	ldr	r0, [pc, #496]	; (800d458 <tcp_process+0x294>)
 800d268:	f006 faaa 	bl	80137c0 <iprintf>
      recv_flags |= TF_RESET;
 800d26c:	4b7f      	ldr	r3, [pc, #508]	; (800d46c <tcp_process+0x2a8>)
 800d26e:	781b      	ldrb	r3, [r3, #0]
 800d270:	f043 0308 	orr.w	r3, r3, #8
 800d274:	b2da      	uxtb	r2, r3
 800d276:	4b7d      	ldr	r3, [pc, #500]	; (800d46c <tcp_process+0x2a8>)
 800d278:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	8b5b      	ldrh	r3, [r3, #26]
 800d27e:	f023 0301 	bic.w	r3, r3, #1
 800d282:	b29a      	uxth	r2, r3
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800d288:	f06f 030d 	mvn.w	r3, #13
 800d28c:	e37a      	b.n	800d984 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800d28e:	2300      	movs	r3, #0
 800d290:	e378      	b.n	800d984 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800d292:	4b72      	ldr	r3, [pc, #456]	; (800d45c <tcp_process+0x298>)
 800d294:	781b      	ldrb	r3, [r3, #0]
 800d296:	f003 0302 	and.w	r3, r3, #2
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d010      	beq.n	800d2c0 <tcp_process+0xfc>
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	7d1b      	ldrb	r3, [r3, #20]
 800d2a2:	2b02      	cmp	r3, #2
 800d2a4:	d00c      	beq.n	800d2c0 <tcp_process+0xfc>
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	7d1b      	ldrb	r3, [r3, #20]
 800d2aa:	2b03      	cmp	r3, #3
 800d2ac:	d008      	beq.n	800d2c0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	8b5b      	ldrh	r3, [r3, #26]
 800d2b2:	f043 0302 	orr.w	r3, r3, #2
 800d2b6:	b29a      	uxth	r2, r3
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800d2bc:	2300      	movs	r3, #0
 800d2be:	e361      	b.n	800d984 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	8b5b      	ldrh	r3, [r3, #26]
 800d2c4:	f003 0310 	and.w	r3, r3, #16
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d103      	bne.n	800d2d4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800d2cc:	4b68      	ldr	r3, [pc, #416]	; (800d470 <tcp_process+0x2ac>)
 800d2ce:	681a      	ldr	r2, [r3, #0]
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2200      	movs	r2, #0
 800d2e0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f001 fc2f 	bl	800eb48 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	7d1b      	ldrb	r3, [r3, #20]
 800d2ee:	3b02      	subs	r3, #2
 800d2f0:	2b07      	cmp	r3, #7
 800d2f2:	f200 8337 	bhi.w	800d964 <tcp_process+0x7a0>
 800d2f6:	a201      	add	r2, pc, #4	; (adr r2, 800d2fc <tcp_process+0x138>)
 800d2f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2fc:	0800d31d 	.word	0x0800d31d
 800d300:	0800d54d 	.word	0x0800d54d
 800d304:	0800d6c5 	.word	0x0800d6c5
 800d308:	0800d6ef 	.word	0x0800d6ef
 800d30c:	0800d813 	.word	0x0800d813
 800d310:	0800d6c5 	.word	0x0800d6c5
 800d314:	0800d89f 	.word	0x0800d89f
 800d318:	0800d92f 	.word	0x0800d92f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800d31c:	4b4f      	ldr	r3, [pc, #316]	; (800d45c <tcp_process+0x298>)
 800d31e:	781b      	ldrb	r3, [r3, #0]
 800d320:	f003 0310 	and.w	r3, r3, #16
 800d324:	2b00      	cmp	r3, #0
 800d326:	f000 80e4 	beq.w	800d4f2 <tcp_process+0x32e>
 800d32a:	4b4c      	ldr	r3, [pc, #304]	; (800d45c <tcp_process+0x298>)
 800d32c:	781b      	ldrb	r3, [r3, #0]
 800d32e:	f003 0302 	and.w	r3, r3, #2
 800d332:	2b00      	cmp	r3, #0
 800d334:	f000 80dd 	beq.w	800d4f2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d33c:	1c5a      	adds	r2, r3, #1
 800d33e:	4b48      	ldr	r3, [pc, #288]	; (800d460 <tcp_process+0x29c>)
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	429a      	cmp	r2, r3
 800d344:	f040 80d5 	bne.w	800d4f2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800d348:	4b46      	ldr	r3, [pc, #280]	; (800d464 <tcp_process+0x2a0>)
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	1c5a      	adds	r2, r3, #1
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800d35a:	4b41      	ldr	r3, [pc, #260]	; (800d460 <tcp_process+0x29c>)
 800d35c:	681a      	ldr	r2, [r3, #0]
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800d362:	4b44      	ldr	r3, [pc, #272]	; (800d474 <tcp_process+0x2b0>)
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	89db      	ldrh	r3, [r3, #14]
 800d368:	b29a      	uxth	r2, r3
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800d37c:	4b39      	ldr	r3, [pc, #228]	; (800d464 <tcp_process+0x2a0>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	1e5a      	subs	r2, r3, #1
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	2204      	movs	r2, #4
 800d38a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	3304      	adds	r3, #4
 800d394:	4618      	mov	r0, r3
 800d396:	f004 ff49 	bl	801222c <ip4_route>
 800d39a:	4601      	mov	r1, r0
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	3304      	adds	r3, #4
 800d3a0:	461a      	mov	r2, r3
 800d3a2:	4620      	mov	r0, r4
 800d3a4:	f7ff f88c 	bl	800c4c0 <tcp_eff_send_mss_netif>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	461a      	mov	r2, r3
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d3b4:	009a      	lsls	r2, r3, #2
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d3ba:	005b      	lsls	r3, r3, #1
 800d3bc:	f241 111c 	movw	r1, #4380	; 0x111c
 800d3c0:	428b      	cmp	r3, r1
 800d3c2:	bf38      	it	cc
 800d3c4:	460b      	movcc	r3, r1
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	d204      	bcs.n	800d3d4 <tcp_process+0x210>
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d3ce:	009b      	lsls	r3, r3, #2
 800d3d0:	b29b      	uxth	r3, r3
 800d3d2:	e00d      	b.n	800d3f0 <tcp_process+0x22c>
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d3d8:	005b      	lsls	r3, r3, #1
 800d3da:	f241 121c 	movw	r2, #4380	; 0x111c
 800d3de:	4293      	cmp	r3, r2
 800d3e0:	d904      	bls.n	800d3ec <tcp_process+0x228>
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d3e6:	005b      	lsls	r3, r3, #1
 800d3e8:	b29b      	uxth	r3, r3
 800d3ea:	e001      	b.n	800d3f0 <tcp_process+0x22c>
 800d3ec:	f241 131c 	movw	r3, #4380	; 0x111c
 800d3f0:	687a      	ldr	r2, [r7, #4]
 800d3f2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d106      	bne.n	800d40e <tcp_process+0x24a>
 800d400:	4b13      	ldr	r3, [pc, #76]	; (800d450 <tcp_process+0x28c>)
 800d402:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800d406:	491c      	ldr	r1, [pc, #112]	; (800d478 <tcp_process+0x2b4>)
 800d408:	4813      	ldr	r0, [pc, #76]	; (800d458 <tcp_process+0x294>)
 800d40a:	f006 f9d9 	bl	80137c0 <iprintf>
        --pcb->snd_queuelen;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d414:	3b01      	subs	r3, #1
 800d416:	b29a      	uxth	r2, r3
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d422:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800d424:	69fb      	ldr	r3, [r7, #28]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d12a      	bne.n	800d480 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d42e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800d430:	69fb      	ldr	r3, [r7, #28]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d106      	bne.n	800d444 <tcp_process+0x280>
 800d436:	4b06      	ldr	r3, [pc, #24]	; (800d450 <tcp_process+0x28c>)
 800d438:	f44f 725d 	mov.w	r2, #884	; 0x374
 800d43c:	490f      	ldr	r1, [pc, #60]	; (800d47c <tcp_process+0x2b8>)
 800d43e:	4806      	ldr	r0, [pc, #24]	; (800d458 <tcp_process+0x294>)
 800d440:	f006 f9be 	bl	80137c0 <iprintf>
          pcb->unsent = rseg->next;
 800d444:	69fb      	ldr	r3, [r7, #28]
 800d446:	681a      	ldr	r2, [r3, #0]
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	66da      	str	r2, [r3, #108]	; 0x6c
 800d44c:	e01c      	b.n	800d488 <tcp_process+0x2c4>
 800d44e:	bf00      	nop
 800d450:	080159d4 	.word	0x080159d4
 800d454:	08015c0c 	.word	0x08015c0c
 800d458:	08015a20 	.word	0x08015a20
 800d45c:	20008610 	.word	0x20008610
 800d460:	20008608 	.word	0x20008608
 800d464:	20008604 	.word	0x20008604
 800d468:	08015c28 	.word	0x08015c28
 800d46c:	20008611 	.word	0x20008611
 800d470:	200085cc 	.word	0x200085cc
 800d474:	200085f4 	.word	0x200085f4
 800d478:	08015c48 	.word	0x08015c48
 800d47c:	08015c60 	.word	0x08015c60
        } else {
          pcb->unacked = rseg->next;
 800d480:	69fb      	ldr	r3, [r7, #28]
 800d482:	681a      	ldr	r2, [r3, #0]
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800d488:	69f8      	ldr	r0, [r7, #28]
 800d48a:	f7fe fc3c 	bl	800bd06 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d492:	2b00      	cmp	r3, #0
 800d494:	d104      	bne.n	800d4a0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d49c:	861a      	strh	r2, [r3, #48]	; 0x30
 800d49e:	e006      	b.n	800d4ae <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d00a      	beq.n	800d4ce <tcp_process+0x30a>
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4be:	687a      	ldr	r2, [r7, #4]
 800d4c0:	6910      	ldr	r0, [r2, #16]
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	6879      	ldr	r1, [r7, #4]
 800d4c6:	4798      	blx	r3
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	76bb      	strb	r3, [r7, #26]
 800d4cc:	e001      	b.n	800d4d2 <tcp_process+0x30e>
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800d4d2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d4d6:	f113 0f0d 	cmn.w	r3, #13
 800d4da:	d102      	bne.n	800d4e2 <tcp_process+0x31e>
          return ERR_ABRT;
 800d4dc:	f06f 030c 	mvn.w	r3, #12
 800d4e0:	e250      	b.n	800d984 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	8b5b      	ldrh	r3, [r3, #26]
 800d4e6:	f043 0302 	orr.w	r3, r3, #2
 800d4ea:	b29a      	uxth	r2, r3
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800d4f0:	e23a      	b.n	800d968 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800d4f2:	4b98      	ldr	r3, [pc, #608]	; (800d754 <tcp_process+0x590>)
 800d4f4:	781b      	ldrb	r3, [r3, #0]
 800d4f6:	f003 0310 	and.w	r3, r3, #16
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	f000 8234 	beq.w	800d968 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d500:	4b95      	ldr	r3, [pc, #596]	; (800d758 <tcp_process+0x594>)
 800d502:	6819      	ldr	r1, [r3, #0]
 800d504:	4b95      	ldr	r3, [pc, #596]	; (800d75c <tcp_process+0x598>)
 800d506:	881b      	ldrh	r3, [r3, #0]
 800d508:	461a      	mov	r2, r3
 800d50a:	4b95      	ldr	r3, [pc, #596]	; (800d760 <tcp_process+0x59c>)
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d510:	4b94      	ldr	r3, [pc, #592]	; (800d764 <tcp_process+0x5a0>)
 800d512:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d514:	885b      	ldrh	r3, [r3, #2]
 800d516:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d518:	4a92      	ldr	r2, [pc, #584]	; (800d764 <tcp_process+0x5a0>)
 800d51a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d51c:	8812      	ldrh	r2, [r2, #0]
 800d51e:	b292      	uxth	r2, r2
 800d520:	9202      	str	r2, [sp, #8]
 800d522:	9301      	str	r3, [sp, #4]
 800d524:	4b90      	ldr	r3, [pc, #576]	; (800d768 <tcp_process+0x5a4>)
 800d526:	9300      	str	r3, [sp, #0]
 800d528:	4b90      	ldr	r3, [pc, #576]	; (800d76c <tcp_process+0x5a8>)
 800d52a:	4602      	mov	r2, r0
 800d52c:	6878      	ldr	r0, [r7, #4]
 800d52e:	f003 f8dd 	bl	80106ec <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d538:	2b05      	cmp	r3, #5
 800d53a:	f200 8215 	bhi.w	800d968 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	2200      	movs	r2, #0
 800d542:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800d544:	6878      	ldr	r0, [r7, #4]
 800d546:	f002 fea7 	bl	8010298 <tcp_rexmit_rto>
      break;
 800d54a:	e20d      	b.n	800d968 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800d54c:	4b81      	ldr	r3, [pc, #516]	; (800d754 <tcp_process+0x590>)
 800d54e:	781b      	ldrb	r3, [r3, #0]
 800d550:	f003 0310 	and.w	r3, r3, #16
 800d554:	2b00      	cmp	r3, #0
 800d556:	f000 80a1 	beq.w	800d69c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d55a:	4b7f      	ldr	r3, [pc, #508]	; (800d758 <tcp_process+0x594>)
 800d55c:	681a      	ldr	r2, [r3, #0]
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d562:	1ad3      	subs	r3, r2, r3
 800d564:	3b01      	subs	r3, #1
 800d566:	2b00      	cmp	r3, #0
 800d568:	db7e      	blt.n	800d668 <tcp_process+0x4a4>
 800d56a:	4b7b      	ldr	r3, [pc, #492]	; (800d758 <tcp_process+0x594>)
 800d56c:	681a      	ldr	r2, [r3, #0]
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d572:	1ad3      	subs	r3, r2, r3
 800d574:	2b00      	cmp	r3, #0
 800d576:	dc77      	bgt.n	800d668 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2204      	movs	r2, #4
 800d57c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d582:	2b00      	cmp	r3, #0
 800d584:	d102      	bne.n	800d58c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800d586:	23fa      	movs	r3, #250	; 0xfa
 800d588:	76bb      	strb	r3, [r7, #26]
 800d58a:	e01d      	b.n	800d5c8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d590:	699b      	ldr	r3, [r3, #24]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d106      	bne.n	800d5a4 <tcp_process+0x3e0>
 800d596:	4b76      	ldr	r3, [pc, #472]	; (800d770 <tcp_process+0x5ac>)
 800d598:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800d59c:	4975      	ldr	r1, [pc, #468]	; (800d774 <tcp_process+0x5b0>)
 800d59e:	4876      	ldr	r0, [pc, #472]	; (800d778 <tcp_process+0x5b4>)
 800d5a0:	f006 f90e 	bl	80137c0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d5a8:	699b      	ldr	r3, [r3, #24]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d00a      	beq.n	800d5c4 <tcp_process+0x400>
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d5b2:	699b      	ldr	r3, [r3, #24]
 800d5b4:	687a      	ldr	r2, [r7, #4]
 800d5b6:	6910      	ldr	r0, [r2, #16]
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	6879      	ldr	r1, [r7, #4]
 800d5bc:	4798      	blx	r3
 800d5be:	4603      	mov	r3, r0
 800d5c0:	76bb      	strb	r3, [r7, #26]
 800d5c2:	e001      	b.n	800d5c8 <tcp_process+0x404>
 800d5c4:	23f0      	movs	r3, #240	; 0xf0
 800d5c6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800d5c8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d00a      	beq.n	800d5e6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800d5d0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d5d4:	f113 0f0d 	cmn.w	r3, #13
 800d5d8:	d002      	beq.n	800d5e0 <tcp_process+0x41c>
              tcp_abort(pcb);
 800d5da:	6878      	ldr	r0, [r7, #4]
 800d5dc:	f7fd fcee 	bl	800afbc <tcp_abort>
            }
            return ERR_ABRT;
 800d5e0:	f06f 030c 	mvn.w	r3, #12
 800d5e4:	e1ce      	b.n	800d984 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800d5e6:	6878      	ldr	r0, [r7, #4]
 800d5e8:	f000 fae0 	bl	800dbac <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800d5ec:	4b63      	ldr	r3, [pc, #396]	; (800d77c <tcp_process+0x5b8>)
 800d5ee:	881b      	ldrh	r3, [r3, #0]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d005      	beq.n	800d600 <tcp_process+0x43c>
            recv_acked--;
 800d5f4:	4b61      	ldr	r3, [pc, #388]	; (800d77c <tcp_process+0x5b8>)
 800d5f6:	881b      	ldrh	r3, [r3, #0]
 800d5f8:	3b01      	subs	r3, #1
 800d5fa:	b29a      	uxth	r2, r3
 800d5fc:	4b5f      	ldr	r3, [pc, #380]	; (800d77c <tcp_process+0x5b8>)
 800d5fe:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d604:	009a      	lsls	r2, r3, #2
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d60a:	005b      	lsls	r3, r3, #1
 800d60c:	f241 111c 	movw	r1, #4380	; 0x111c
 800d610:	428b      	cmp	r3, r1
 800d612:	bf38      	it	cc
 800d614:	460b      	movcc	r3, r1
 800d616:	429a      	cmp	r2, r3
 800d618:	d204      	bcs.n	800d624 <tcp_process+0x460>
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d61e:	009b      	lsls	r3, r3, #2
 800d620:	b29b      	uxth	r3, r3
 800d622:	e00d      	b.n	800d640 <tcp_process+0x47c>
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d628:	005b      	lsls	r3, r3, #1
 800d62a:	f241 121c 	movw	r2, #4380	; 0x111c
 800d62e:	4293      	cmp	r3, r2
 800d630:	d904      	bls.n	800d63c <tcp_process+0x478>
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d636:	005b      	lsls	r3, r3, #1
 800d638:	b29b      	uxth	r3, r3
 800d63a:	e001      	b.n	800d640 <tcp_process+0x47c>
 800d63c:	f241 131c 	movw	r3, #4380	; 0x111c
 800d640:	687a      	ldr	r2, [r7, #4]
 800d642:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800d646:	4b4e      	ldr	r3, [pc, #312]	; (800d780 <tcp_process+0x5bc>)
 800d648:	781b      	ldrb	r3, [r3, #0]
 800d64a:	f003 0320 	and.w	r3, r3, #32
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d037      	beq.n	800d6c2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	8b5b      	ldrh	r3, [r3, #26]
 800d656:	f043 0302 	orr.w	r3, r3, #2
 800d65a:	b29a      	uxth	r2, r3
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	2207      	movs	r2, #7
 800d664:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800d666:	e02c      	b.n	800d6c2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d668:	4b3b      	ldr	r3, [pc, #236]	; (800d758 <tcp_process+0x594>)
 800d66a:	6819      	ldr	r1, [r3, #0]
 800d66c:	4b3b      	ldr	r3, [pc, #236]	; (800d75c <tcp_process+0x598>)
 800d66e:	881b      	ldrh	r3, [r3, #0]
 800d670:	461a      	mov	r2, r3
 800d672:	4b3b      	ldr	r3, [pc, #236]	; (800d760 <tcp_process+0x59c>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d678:	4b3a      	ldr	r3, [pc, #232]	; (800d764 <tcp_process+0x5a0>)
 800d67a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d67c:	885b      	ldrh	r3, [r3, #2]
 800d67e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d680:	4a38      	ldr	r2, [pc, #224]	; (800d764 <tcp_process+0x5a0>)
 800d682:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d684:	8812      	ldrh	r2, [r2, #0]
 800d686:	b292      	uxth	r2, r2
 800d688:	9202      	str	r2, [sp, #8]
 800d68a:	9301      	str	r3, [sp, #4]
 800d68c:	4b36      	ldr	r3, [pc, #216]	; (800d768 <tcp_process+0x5a4>)
 800d68e:	9300      	str	r3, [sp, #0]
 800d690:	4b36      	ldr	r3, [pc, #216]	; (800d76c <tcp_process+0x5a8>)
 800d692:	4602      	mov	r2, r0
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f003 f829 	bl	80106ec <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800d69a:	e167      	b.n	800d96c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800d69c:	4b2d      	ldr	r3, [pc, #180]	; (800d754 <tcp_process+0x590>)
 800d69e:	781b      	ldrb	r3, [r3, #0]
 800d6a0:	f003 0302 	and.w	r3, r3, #2
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	f000 8161 	beq.w	800d96c <tcp_process+0x7a8>
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6ae:	1e5a      	subs	r2, r3, #1
 800d6b0:	4b2b      	ldr	r3, [pc, #172]	; (800d760 <tcp_process+0x59c>)
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	f040 8159 	bne.w	800d96c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800d6ba:	6878      	ldr	r0, [r7, #4]
 800d6bc:	f002 fe0e 	bl	80102dc <tcp_rexmit>
      break;
 800d6c0:	e154      	b.n	800d96c <tcp_process+0x7a8>
 800d6c2:	e153      	b.n	800d96c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f000 fa71 	bl	800dbac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800d6ca:	4b2d      	ldr	r3, [pc, #180]	; (800d780 <tcp_process+0x5bc>)
 800d6cc:	781b      	ldrb	r3, [r3, #0]
 800d6ce:	f003 0320 	and.w	r3, r3, #32
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	f000 814c 	beq.w	800d970 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	8b5b      	ldrh	r3, [r3, #26]
 800d6dc:	f043 0302 	orr.w	r3, r3, #2
 800d6e0:	b29a      	uxth	r2, r3
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	2207      	movs	r2, #7
 800d6ea:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d6ec:	e140      	b.n	800d970 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800d6ee:	6878      	ldr	r0, [r7, #4]
 800d6f0:	f000 fa5c 	bl	800dbac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d6f4:	4b22      	ldr	r3, [pc, #136]	; (800d780 <tcp_process+0x5bc>)
 800d6f6:	781b      	ldrb	r3, [r3, #0]
 800d6f8:	f003 0320 	and.w	r3, r3, #32
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d071      	beq.n	800d7e4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d700:	4b14      	ldr	r3, [pc, #80]	; (800d754 <tcp_process+0x590>)
 800d702:	781b      	ldrb	r3, [r3, #0]
 800d704:	f003 0310 	and.w	r3, r3, #16
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d060      	beq.n	800d7ce <tcp_process+0x60a>
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d710:	4b11      	ldr	r3, [pc, #68]	; (800d758 <tcp_process+0x594>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	429a      	cmp	r2, r3
 800d716:	d15a      	bne.n	800d7ce <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d156      	bne.n	800d7ce <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	8b5b      	ldrh	r3, [r3, #26]
 800d724:	f043 0302 	orr.w	r3, r3, #2
 800d728:	b29a      	uxth	r2, r3
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800d72e:	6878      	ldr	r0, [r7, #4]
 800d730:	f7fe fdbc 	bl	800c2ac <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800d734:	4b13      	ldr	r3, [pc, #76]	; (800d784 <tcp_process+0x5c0>)
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	687a      	ldr	r2, [r7, #4]
 800d73a:	429a      	cmp	r2, r3
 800d73c:	d105      	bne.n	800d74a <tcp_process+0x586>
 800d73e:	4b11      	ldr	r3, [pc, #68]	; (800d784 <tcp_process+0x5c0>)
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	68db      	ldr	r3, [r3, #12]
 800d744:	4a0f      	ldr	r2, [pc, #60]	; (800d784 <tcp_process+0x5c0>)
 800d746:	6013      	str	r3, [r2, #0]
 800d748:	e02e      	b.n	800d7a8 <tcp_process+0x5e4>
 800d74a:	4b0e      	ldr	r3, [pc, #56]	; (800d784 <tcp_process+0x5c0>)
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	617b      	str	r3, [r7, #20]
 800d750:	e027      	b.n	800d7a2 <tcp_process+0x5de>
 800d752:	bf00      	nop
 800d754:	20008610 	.word	0x20008610
 800d758:	20008608 	.word	0x20008608
 800d75c:	2000860e 	.word	0x2000860e
 800d760:	20008604 	.word	0x20008604
 800d764:	200085f4 	.word	0x200085f4
 800d768:	2000506c 	.word	0x2000506c
 800d76c:	20005070 	.word	0x20005070
 800d770:	080159d4 	.word	0x080159d4
 800d774:	08015c74 	.word	0x08015c74
 800d778:	08015a20 	.word	0x08015a20
 800d77c:	2000860c 	.word	0x2000860c
 800d780:	20008611 	.word	0x20008611
 800d784:	200085d8 	.word	0x200085d8
 800d788:	697b      	ldr	r3, [r7, #20]
 800d78a:	68db      	ldr	r3, [r3, #12]
 800d78c:	687a      	ldr	r2, [r7, #4]
 800d78e:	429a      	cmp	r2, r3
 800d790:	d104      	bne.n	800d79c <tcp_process+0x5d8>
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	68da      	ldr	r2, [r3, #12]
 800d796:	697b      	ldr	r3, [r7, #20]
 800d798:	60da      	str	r2, [r3, #12]
 800d79a:	e005      	b.n	800d7a8 <tcp_process+0x5e4>
 800d79c:	697b      	ldr	r3, [r7, #20]
 800d79e:	68db      	ldr	r3, [r3, #12]
 800d7a0:	617b      	str	r3, [r7, #20]
 800d7a2:	697b      	ldr	r3, [r7, #20]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d1ef      	bne.n	800d788 <tcp_process+0x5c4>
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	60da      	str	r2, [r3, #12]
 800d7ae:	4b77      	ldr	r3, [pc, #476]	; (800d98c <tcp_process+0x7c8>)
 800d7b0:	2201      	movs	r2, #1
 800d7b2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	220a      	movs	r2, #10
 800d7b8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800d7ba:	4b75      	ldr	r3, [pc, #468]	; (800d990 <tcp_process+0x7cc>)
 800d7bc:	681a      	ldr	r2, [r3, #0]
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	60da      	str	r2, [r3, #12]
 800d7c2:	4a73      	ldr	r2, [pc, #460]	; (800d990 <tcp_process+0x7cc>)
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	6013      	str	r3, [r2, #0]
 800d7c8:	f003 f952 	bl	8010a70 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800d7cc:	e0d2      	b.n	800d974 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	8b5b      	ldrh	r3, [r3, #26]
 800d7d2:	f043 0302 	orr.w	r3, r3, #2
 800d7d6:	b29a      	uxth	r2, r3
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2208      	movs	r2, #8
 800d7e0:	751a      	strb	r2, [r3, #20]
      break;
 800d7e2:	e0c7      	b.n	800d974 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d7e4:	4b6b      	ldr	r3, [pc, #428]	; (800d994 <tcp_process+0x7d0>)
 800d7e6:	781b      	ldrb	r3, [r3, #0]
 800d7e8:	f003 0310 	and.w	r3, r3, #16
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	f000 80c1 	beq.w	800d974 <tcp_process+0x7b0>
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d7f6:	4b68      	ldr	r3, [pc, #416]	; (800d998 <tcp_process+0x7d4>)
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	429a      	cmp	r2, r3
 800d7fc:	f040 80ba 	bne.w	800d974 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d804:	2b00      	cmp	r3, #0
 800d806:	f040 80b5 	bne.w	800d974 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2206      	movs	r2, #6
 800d80e:	751a      	strb	r2, [r3, #20]
      break;
 800d810:	e0b0      	b.n	800d974 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800d812:	6878      	ldr	r0, [r7, #4]
 800d814:	f000 f9ca 	bl	800dbac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d818:	4b60      	ldr	r3, [pc, #384]	; (800d99c <tcp_process+0x7d8>)
 800d81a:	781b      	ldrb	r3, [r3, #0]
 800d81c:	f003 0320 	and.w	r3, r3, #32
 800d820:	2b00      	cmp	r3, #0
 800d822:	f000 80a9 	beq.w	800d978 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	8b5b      	ldrh	r3, [r3, #26]
 800d82a:	f043 0302 	orr.w	r3, r3, #2
 800d82e:	b29a      	uxth	r2, r3
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800d834:	6878      	ldr	r0, [r7, #4]
 800d836:	f7fe fd39 	bl	800c2ac <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d83a:	4b59      	ldr	r3, [pc, #356]	; (800d9a0 <tcp_process+0x7dc>)
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	687a      	ldr	r2, [r7, #4]
 800d840:	429a      	cmp	r2, r3
 800d842:	d105      	bne.n	800d850 <tcp_process+0x68c>
 800d844:	4b56      	ldr	r3, [pc, #344]	; (800d9a0 <tcp_process+0x7dc>)
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	68db      	ldr	r3, [r3, #12]
 800d84a:	4a55      	ldr	r2, [pc, #340]	; (800d9a0 <tcp_process+0x7dc>)
 800d84c:	6013      	str	r3, [r2, #0]
 800d84e:	e013      	b.n	800d878 <tcp_process+0x6b4>
 800d850:	4b53      	ldr	r3, [pc, #332]	; (800d9a0 <tcp_process+0x7dc>)
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	613b      	str	r3, [r7, #16]
 800d856:	e00c      	b.n	800d872 <tcp_process+0x6ae>
 800d858:	693b      	ldr	r3, [r7, #16]
 800d85a:	68db      	ldr	r3, [r3, #12]
 800d85c:	687a      	ldr	r2, [r7, #4]
 800d85e:	429a      	cmp	r2, r3
 800d860:	d104      	bne.n	800d86c <tcp_process+0x6a8>
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	68da      	ldr	r2, [r3, #12]
 800d866:	693b      	ldr	r3, [r7, #16]
 800d868:	60da      	str	r2, [r3, #12]
 800d86a:	e005      	b.n	800d878 <tcp_process+0x6b4>
 800d86c:	693b      	ldr	r3, [r7, #16]
 800d86e:	68db      	ldr	r3, [r3, #12]
 800d870:	613b      	str	r3, [r7, #16]
 800d872:	693b      	ldr	r3, [r7, #16]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d1ef      	bne.n	800d858 <tcp_process+0x694>
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2200      	movs	r2, #0
 800d87c:	60da      	str	r2, [r3, #12]
 800d87e:	4b43      	ldr	r3, [pc, #268]	; (800d98c <tcp_process+0x7c8>)
 800d880:	2201      	movs	r2, #1
 800d882:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	220a      	movs	r2, #10
 800d888:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d88a:	4b41      	ldr	r3, [pc, #260]	; (800d990 <tcp_process+0x7cc>)
 800d88c:	681a      	ldr	r2, [r3, #0]
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	60da      	str	r2, [r3, #12]
 800d892:	4a3f      	ldr	r2, [pc, #252]	; (800d990 <tcp_process+0x7cc>)
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	6013      	str	r3, [r2, #0]
 800d898:	f003 f8ea 	bl	8010a70 <tcp_timer_needed>
      }
      break;
 800d89c:	e06c      	b.n	800d978 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	f000 f984 	bl	800dbac <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d8a4:	4b3b      	ldr	r3, [pc, #236]	; (800d994 <tcp_process+0x7d0>)
 800d8a6:	781b      	ldrb	r3, [r3, #0]
 800d8a8:	f003 0310 	and.w	r3, r3, #16
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d065      	beq.n	800d97c <tcp_process+0x7b8>
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d8b4:	4b38      	ldr	r3, [pc, #224]	; (800d998 <tcp_process+0x7d4>)
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	429a      	cmp	r2, r3
 800d8ba:	d15f      	bne.n	800d97c <tcp_process+0x7b8>
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d15b      	bne.n	800d97c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800d8c4:	6878      	ldr	r0, [r7, #4]
 800d8c6:	f7fe fcf1 	bl	800c2ac <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d8ca:	4b35      	ldr	r3, [pc, #212]	; (800d9a0 <tcp_process+0x7dc>)
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	687a      	ldr	r2, [r7, #4]
 800d8d0:	429a      	cmp	r2, r3
 800d8d2:	d105      	bne.n	800d8e0 <tcp_process+0x71c>
 800d8d4:	4b32      	ldr	r3, [pc, #200]	; (800d9a0 <tcp_process+0x7dc>)
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	68db      	ldr	r3, [r3, #12]
 800d8da:	4a31      	ldr	r2, [pc, #196]	; (800d9a0 <tcp_process+0x7dc>)
 800d8dc:	6013      	str	r3, [r2, #0]
 800d8de:	e013      	b.n	800d908 <tcp_process+0x744>
 800d8e0:	4b2f      	ldr	r3, [pc, #188]	; (800d9a0 <tcp_process+0x7dc>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	60fb      	str	r3, [r7, #12]
 800d8e6:	e00c      	b.n	800d902 <tcp_process+0x73e>
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	68db      	ldr	r3, [r3, #12]
 800d8ec:	687a      	ldr	r2, [r7, #4]
 800d8ee:	429a      	cmp	r2, r3
 800d8f0:	d104      	bne.n	800d8fc <tcp_process+0x738>
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	68da      	ldr	r2, [r3, #12]
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	60da      	str	r2, [r3, #12]
 800d8fa:	e005      	b.n	800d908 <tcp_process+0x744>
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	68db      	ldr	r3, [r3, #12]
 800d900:	60fb      	str	r3, [r7, #12]
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d1ef      	bne.n	800d8e8 <tcp_process+0x724>
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2200      	movs	r2, #0
 800d90c:	60da      	str	r2, [r3, #12]
 800d90e:	4b1f      	ldr	r3, [pc, #124]	; (800d98c <tcp_process+0x7c8>)
 800d910:	2201      	movs	r2, #1
 800d912:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	220a      	movs	r2, #10
 800d918:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d91a:	4b1d      	ldr	r3, [pc, #116]	; (800d990 <tcp_process+0x7cc>)
 800d91c:	681a      	ldr	r2, [r3, #0]
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	60da      	str	r2, [r3, #12]
 800d922:	4a1b      	ldr	r2, [pc, #108]	; (800d990 <tcp_process+0x7cc>)
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	6013      	str	r3, [r2, #0]
 800d928:	f003 f8a2 	bl	8010a70 <tcp_timer_needed>
      }
      break;
 800d92c:	e026      	b.n	800d97c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800d92e:	6878      	ldr	r0, [r7, #4]
 800d930:	f000 f93c 	bl	800dbac <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d934:	4b17      	ldr	r3, [pc, #92]	; (800d994 <tcp_process+0x7d0>)
 800d936:	781b      	ldrb	r3, [r3, #0]
 800d938:	f003 0310 	and.w	r3, r3, #16
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d01f      	beq.n	800d980 <tcp_process+0x7bc>
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d944:	4b14      	ldr	r3, [pc, #80]	; (800d998 <tcp_process+0x7d4>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	429a      	cmp	r2, r3
 800d94a:	d119      	bne.n	800d980 <tcp_process+0x7bc>
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d950:	2b00      	cmp	r3, #0
 800d952:	d115      	bne.n	800d980 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800d954:	4b11      	ldr	r3, [pc, #68]	; (800d99c <tcp_process+0x7d8>)
 800d956:	781b      	ldrb	r3, [r3, #0]
 800d958:	f043 0310 	orr.w	r3, r3, #16
 800d95c:	b2da      	uxtb	r2, r3
 800d95e:	4b0f      	ldr	r3, [pc, #60]	; (800d99c <tcp_process+0x7d8>)
 800d960:	701a      	strb	r2, [r3, #0]
      }
      break;
 800d962:	e00d      	b.n	800d980 <tcp_process+0x7bc>
    default:
      break;
 800d964:	bf00      	nop
 800d966:	e00c      	b.n	800d982 <tcp_process+0x7be>
      break;
 800d968:	bf00      	nop
 800d96a:	e00a      	b.n	800d982 <tcp_process+0x7be>
      break;
 800d96c:	bf00      	nop
 800d96e:	e008      	b.n	800d982 <tcp_process+0x7be>
      break;
 800d970:	bf00      	nop
 800d972:	e006      	b.n	800d982 <tcp_process+0x7be>
      break;
 800d974:	bf00      	nop
 800d976:	e004      	b.n	800d982 <tcp_process+0x7be>
      break;
 800d978:	bf00      	nop
 800d97a:	e002      	b.n	800d982 <tcp_process+0x7be>
      break;
 800d97c:	bf00      	nop
 800d97e:	e000      	b.n	800d982 <tcp_process+0x7be>
      break;
 800d980:	bf00      	nop
  }
  return ERR_OK;
 800d982:	2300      	movs	r3, #0
}
 800d984:	4618      	mov	r0, r3
 800d986:	3724      	adds	r7, #36	; 0x24
 800d988:	46bd      	mov	sp, r7
 800d98a:	bd90      	pop	{r4, r7, pc}
 800d98c:	200085e0 	.word	0x200085e0
 800d990:	200085dc 	.word	0x200085dc
 800d994:	20008610 	.word	0x20008610
 800d998:	20008608 	.word	0x20008608
 800d99c:	20008611 	.word	0x20008611
 800d9a0:	200085d8 	.word	0x200085d8

0800d9a4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800d9a4:	b590      	push	{r4, r7, lr}
 800d9a6:	b085      	sub	sp, #20
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
 800d9ac:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d106      	bne.n	800d9c2 <tcp_oos_insert_segment+0x1e>
 800d9b4:	4b3b      	ldr	r3, [pc, #236]	; (800daa4 <tcp_oos_insert_segment+0x100>)
 800d9b6:	f240 421f 	movw	r2, #1055	; 0x41f
 800d9ba:	493b      	ldr	r1, [pc, #236]	; (800daa8 <tcp_oos_insert_segment+0x104>)
 800d9bc:	483b      	ldr	r0, [pc, #236]	; (800daac <tcp_oos_insert_segment+0x108>)
 800d9be:	f005 feff 	bl	80137c0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	68db      	ldr	r3, [r3, #12]
 800d9c6:	899b      	ldrh	r3, [r3, #12]
 800d9c8:	b29b      	uxth	r3, r3
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	f7fb fa00 	bl	8008dd0 <lwip_htons>
 800d9d0:	4603      	mov	r3, r0
 800d9d2:	b2db      	uxtb	r3, r3
 800d9d4:	f003 0301 	and.w	r3, r3, #1
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d028      	beq.n	800da2e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800d9dc:	6838      	ldr	r0, [r7, #0]
 800d9de:	f7fe f97d 	bl	800bcdc <tcp_segs_free>
    next = NULL;
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	603b      	str	r3, [r7, #0]
 800d9e6:	e056      	b.n	800da96 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d9e8:	683b      	ldr	r3, [r7, #0]
 800d9ea:	68db      	ldr	r3, [r3, #12]
 800d9ec:	899b      	ldrh	r3, [r3, #12]
 800d9ee:	b29b      	uxth	r3, r3
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	f7fb f9ed 	bl	8008dd0 <lwip_htons>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	b2db      	uxtb	r3, r3
 800d9fa:	f003 0301 	and.w	r3, r3, #1
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d00d      	beq.n	800da1e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	68db      	ldr	r3, [r3, #12]
 800da06:	899b      	ldrh	r3, [r3, #12]
 800da08:	b29c      	uxth	r4, r3
 800da0a:	2001      	movs	r0, #1
 800da0c:	f7fb f9e0 	bl	8008dd0 <lwip_htons>
 800da10:	4603      	mov	r3, r0
 800da12:	461a      	mov	r2, r3
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	68db      	ldr	r3, [r3, #12]
 800da18:	4322      	orrs	r2, r4
 800da1a:	b292      	uxth	r2, r2
 800da1c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800da1e:	683b      	ldr	r3, [r7, #0]
 800da20:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800da28:	68f8      	ldr	r0, [r7, #12]
 800da2a:	f7fe f96c 	bl	800bd06 <tcp_seg_free>
    while (next &&
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d00e      	beq.n	800da52 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	891b      	ldrh	r3, [r3, #8]
 800da38:	461a      	mov	r2, r3
 800da3a:	4b1d      	ldr	r3, [pc, #116]	; (800dab0 <tcp_oos_insert_segment+0x10c>)
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	441a      	add	r2, r3
 800da40:	683b      	ldr	r3, [r7, #0]
 800da42:	68db      	ldr	r3, [r3, #12]
 800da44:	685b      	ldr	r3, [r3, #4]
 800da46:	6839      	ldr	r1, [r7, #0]
 800da48:	8909      	ldrh	r1, [r1, #8]
 800da4a:	440b      	add	r3, r1
 800da4c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800da4e:	2b00      	cmp	r3, #0
 800da50:	daca      	bge.n	800d9e8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d01e      	beq.n	800da96 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	891b      	ldrh	r3, [r3, #8]
 800da5c:	461a      	mov	r2, r3
 800da5e:	4b14      	ldr	r3, [pc, #80]	; (800dab0 <tcp_oos_insert_segment+0x10c>)
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	441a      	add	r2, r3
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	68db      	ldr	r3, [r3, #12]
 800da68:	685b      	ldr	r3, [r3, #4]
 800da6a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	dd12      	ble.n	800da96 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	68db      	ldr	r3, [r3, #12]
 800da74:	685b      	ldr	r3, [r3, #4]
 800da76:	b29a      	uxth	r2, r3
 800da78:	4b0d      	ldr	r3, [pc, #52]	; (800dab0 <tcp_oos_insert_segment+0x10c>)
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	b29b      	uxth	r3, r3
 800da7e:	1ad3      	subs	r3, r2, r3
 800da80:	b29a      	uxth	r2, r3
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	685a      	ldr	r2, [r3, #4]
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	891b      	ldrh	r3, [r3, #8]
 800da8e:	4619      	mov	r1, r3
 800da90:	4610      	mov	r0, r2
 800da92:	f7fc fb75 	bl	800a180 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	683a      	ldr	r2, [r7, #0]
 800da9a:	601a      	str	r2, [r3, #0]
}
 800da9c:	bf00      	nop
 800da9e:	3714      	adds	r7, #20
 800daa0:	46bd      	mov	sp, r7
 800daa2:	bd90      	pop	{r4, r7, pc}
 800daa4:	080159d4 	.word	0x080159d4
 800daa8:	08015c94 	.word	0x08015c94
 800daac:	08015a20 	.word	0x08015a20
 800dab0:	20008604 	.word	0x20008604

0800dab4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800dab4:	b5b0      	push	{r4, r5, r7, lr}
 800dab6:	b086      	sub	sp, #24
 800dab8:	af00      	add	r7, sp, #0
 800daba:	60f8      	str	r0, [r7, #12]
 800dabc:	60b9      	str	r1, [r7, #8]
 800dabe:	607a      	str	r2, [r7, #4]
 800dac0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800dac2:	e03e      	b.n	800db42 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800dac4:	68bb      	ldr	r3, [r7, #8]
 800dac6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800dac8:	68bb      	ldr	r3, [r7, #8]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800dace:	697b      	ldr	r3, [r7, #20]
 800dad0:	685b      	ldr	r3, [r3, #4]
 800dad2:	4618      	mov	r0, r3
 800dad4:	f7fc fd62 	bl	800a59c <pbuf_clen>
 800dad8:	4603      	mov	r3, r0
 800dada:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dae2:	8a7a      	ldrh	r2, [r7, #18]
 800dae4:	429a      	cmp	r2, r3
 800dae6:	d906      	bls.n	800daf6 <tcp_free_acked_segments+0x42>
 800dae8:	4b2a      	ldr	r3, [pc, #168]	; (800db94 <tcp_free_acked_segments+0xe0>)
 800daea:	f240 4257 	movw	r2, #1111	; 0x457
 800daee:	492a      	ldr	r1, [pc, #168]	; (800db98 <tcp_free_acked_segments+0xe4>)
 800daf0:	482a      	ldr	r0, [pc, #168]	; (800db9c <tcp_free_acked_segments+0xe8>)
 800daf2:	f005 fe65 	bl	80137c0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800dafc:	8a7b      	ldrh	r3, [r7, #18]
 800dafe:	1ad3      	subs	r3, r2, r3
 800db00:	b29a      	uxth	r2, r3
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800db08:	697b      	ldr	r3, [r7, #20]
 800db0a:	891a      	ldrh	r2, [r3, #8]
 800db0c:	4b24      	ldr	r3, [pc, #144]	; (800dba0 <tcp_free_acked_segments+0xec>)
 800db0e:	881b      	ldrh	r3, [r3, #0]
 800db10:	4413      	add	r3, r2
 800db12:	b29a      	uxth	r2, r3
 800db14:	4b22      	ldr	r3, [pc, #136]	; (800dba0 <tcp_free_acked_segments+0xec>)
 800db16:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800db18:	6978      	ldr	r0, [r7, #20]
 800db1a:	f7fe f8f4 	bl	800bd06 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800db24:	2b00      	cmp	r3, #0
 800db26:	d00c      	beq.n	800db42 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800db28:	68bb      	ldr	r3, [r7, #8]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d109      	bne.n	800db42 <tcp_free_acked_segments+0x8e>
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d106      	bne.n	800db42 <tcp_free_acked_segments+0x8e>
 800db34:	4b17      	ldr	r3, [pc, #92]	; (800db94 <tcp_free_acked_segments+0xe0>)
 800db36:	f240 4261 	movw	r2, #1121	; 0x461
 800db3a:	491a      	ldr	r1, [pc, #104]	; (800dba4 <tcp_free_acked_segments+0xf0>)
 800db3c:	4817      	ldr	r0, [pc, #92]	; (800db9c <tcp_free_acked_segments+0xe8>)
 800db3e:	f005 fe3f 	bl	80137c0 <iprintf>
  while (seg_list != NULL &&
 800db42:	68bb      	ldr	r3, [r7, #8]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d020      	beq.n	800db8a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800db48:	68bb      	ldr	r3, [r7, #8]
 800db4a:	68db      	ldr	r3, [r3, #12]
 800db4c:	685b      	ldr	r3, [r3, #4]
 800db4e:	4618      	mov	r0, r3
 800db50:	f7fb f953 	bl	8008dfa <lwip_htonl>
 800db54:	4604      	mov	r4, r0
 800db56:	68bb      	ldr	r3, [r7, #8]
 800db58:	891b      	ldrh	r3, [r3, #8]
 800db5a:	461d      	mov	r5, r3
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	68db      	ldr	r3, [r3, #12]
 800db60:	899b      	ldrh	r3, [r3, #12]
 800db62:	b29b      	uxth	r3, r3
 800db64:	4618      	mov	r0, r3
 800db66:	f7fb f933 	bl	8008dd0 <lwip_htons>
 800db6a:	4603      	mov	r3, r0
 800db6c:	b2db      	uxtb	r3, r3
 800db6e:	f003 0303 	and.w	r3, r3, #3
 800db72:	2b00      	cmp	r3, #0
 800db74:	d001      	beq.n	800db7a <tcp_free_acked_segments+0xc6>
 800db76:	2301      	movs	r3, #1
 800db78:	e000      	b.n	800db7c <tcp_free_acked_segments+0xc8>
 800db7a:	2300      	movs	r3, #0
 800db7c:	442b      	add	r3, r5
 800db7e:	18e2      	adds	r2, r4, r3
 800db80:	4b09      	ldr	r3, [pc, #36]	; (800dba8 <tcp_free_acked_segments+0xf4>)
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800db86:	2b00      	cmp	r3, #0
 800db88:	dd9c      	ble.n	800dac4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800db8a:	68bb      	ldr	r3, [r7, #8]
}
 800db8c:	4618      	mov	r0, r3
 800db8e:	3718      	adds	r7, #24
 800db90:	46bd      	mov	sp, r7
 800db92:	bdb0      	pop	{r4, r5, r7, pc}
 800db94:	080159d4 	.word	0x080159d4
 800db98:	08015cbc 	.word	0x08015cbc
 800db9c:	08015a20 	.word	0x08015a20
 800dba0:	2000860c 	.word	0x2000860c
 800dba4:	08015ce4 	.word	0x08015ce4
 800dba8:	20008608 	.word	0x20008608

0800dbac <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800dbac:	b5b0      	push	{r4, r5, r7, lr}
 800dbae:	b094      	sub	sp, #80	; 0x50
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d106      	bne.n	800dbcc <tcp_receive+0x20>
 800dbbe:	4b91      	ldr	r3, [pc, #580]	; (800de04 <tcp_receive+0x258>)
 800dbc0:	f240 427b 	movw	r2, #1147	; 0x47b
 800dbc4:	4990      	ldr	r1, [pc, #576]	; (800de08 <tcp_receive+0x25c>)
 800dbc6:	4891      	ldr	r0, [pc, #580]	; (800de0c <tcp_receive+0x260>)
 800dbc8:	f005 fdfa 	bl	80137c0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	7d1b      	ldrb	r3, [r3, #20]
 800dbd0:	2b03      	cmp	r3, #3
 800dbd2:	d806      	bhi.n	800dbe2 <tcp_receive+0x36>
 800dbd4:	4b8b      	ldr	r3, [pc, #556]	; (800de04 <tcp_receive+0x258>)
 800dbd6:	f240 427c 	movw	r2, #1148	; 0x47c
 800dbda:	498d      	ldr	r1, [pc, #564]	; (800de10 <tcp_receive+0x264>)
 800dbdc:	488b      	ldr	r0, [pc, #556]	; (800de0c <tcp_receive+0x260>)
 800dbde:	f005 fdef 	bl	80137c0 <iprintf>

  if (flags & TCP_ACK) {
 800dbe2:	4b8c      	ldr	r3, [pc, #560]	; (800de14 <tcp_receive+0x268>)
 800dbe4:	781b      	ldrb	r3, [r3, #0]
 800dbe6:	f003 0310 	and.w	r3, r3, #16
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	f000 8264 	beq.w	800e0b8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dbf6:	461a      	mov	r2, r3
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbfc:	4413      	add	r3, r2
 800dbfe:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dc04:	4b84      	ldr	r3, [pc, #528]	; (800de18 <tcp_receive+0x26c>)
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	1ad3      	subs	r3, r2, r3
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	db1b      	blt.n	800dc46 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dc12:	4b81      	ldr	r3, [pc, #516]	; (800de18 <tcp_receive+0x26c>)
 800dc14:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800dc16:	429a      	cmp	r2, r3
 800dc18:	d106      	bne.n	800dc28 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dc1e:	4b7f      	ldr	r3, [pc, #508]	; (800de1c <tcp_receive+0x270>)
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	1ad3      	subs	r3, r2, r3
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	db0e      	blt.n	800dc46 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dc2c:	4b7b      	ldr	r3, [pc, #492]	; (800de1c <tcp_receive+0x270>)
 800dc2e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800dc30:	429a      	cmp	r2, r3
 800dc32:	d125      	bne.n	800dc80 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800dc34:	4b7a      	ldr	r3, [pc, #488]	; (800de20 <tcp_receive+0x274>)
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	89db      	ldrh	r3, [r3, #14]
 800dc3a:	b29a      	uxth	r2, r3
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dc42:	429a      	cmp	r2, r3
 800dc44:	d91c      	bls.n	800dc80 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800dc46:	4b76      	ldr	r3, [pc, #472]	; (800de20 <tcp_receive+0x274>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	89db      	ldrh	r3, [r3, #14]
 800dc4c:	b29a      	uxth	r2, r3
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dc60:	429a      	cmp	r2, r3
 800dc62:	d205      	bcs.n	800dc70 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800dc70:	4b69      	ldr	r3, [pc, #420]	; (800de18 <tcp_receive+0x26c>)
 800dc72:	681a      	ldr	r2, [r3, #0]
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800dc78:	4b68      	ldr	r3, [pc, #416]	; (800de1c <tcp_receive+0x270>)
 800dc7a:	681a      	ldr	r2, [r3, #0]
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800dc80:	4b66      	ldr	r3, [pc, #408]	; (800de1c <tcp_receive+0x270>)
 800dc82:	681a      	ldr	r2, [r3, #0]
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc88:	1ad3      	subs	r3, r2, r3
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	dc58      	bgt.n	800dd40 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800dc8e:	4b65      	ldr	r3, [pc, #404]	; (800de24 <tcp_receive+0x278>)
 800dc90:	881b      	ldrh	r3, [r3, #0]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d14b      	bne.n	800dd2e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc9a:	687a      	ldr	r2, [r7, #4]
 800dc9c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800dca0:	4413      	add	r3, r2
 800dca2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dca4:	429a      	cmp	r2, r3
 800dca6:	d142      	bne.n	800dd2e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	db3d      	blt.n	800dd2e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dcb6:	4b59      	ldr	r3, [pc, #356]	; (800de1c <tcp_receive+0x270>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	429a      	cmp	r2, r3
 800dcbc:	d137      	bne.n	800dd2e <tcp_receive+0x182>
              found_dupack = 1;
 800dcbe:	2301      	movs	r3, #1
 800dcc0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800dcc8:	2bff      	cmp	r3, #255	; 0xff
 800dcca:	d007      	beq.n	800dcdc <tcp_receive+0x130>
                ++pcb->dupacks;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800dcd2:	3301      	adds	r3, #1
 800dcd4:	b2da      	uxtb	r2, r3
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800dce2:	2b03      	cmp	r3, #3
 800dce4:	d91b      	bls.n	800dd1e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dcf0:	4413      	add	r3, r2
 800dcf2:	b29a      	uxth	r2, r3
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dcfa:	429a      	cmp	r2, r3
 800dcfc:	d30a      	bcc.n	800dd14 <tcp_receive+0x168>
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd08:	4413      	add	r3, r2
 800dd0a:	b29a      	uxth	r2, r3
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800dd12:	e004      	b.n	800dd1e <tcp_receive+0x172>
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd1a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800dd24:	2b02      	cmp	r3, #2
 800dd26:	d902      	bls.n	800dd2e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800dd28:	6878      	ldr	r0, [r7, #4]
 800dd2a:	f002 fb43 	bl	80103b4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800dd2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	f040 8161 	bne.w	800dff8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	2200      	movs	r2, #0
 800dd3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dd3e:	e15b      	b.n	800dff8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800dd40:	4b36      	ldr	r3, [pc, #216]	; (800de1c <tcp_receive+0x270>)
 800dd42:	681a      	ldr	r2, [r3, #0]
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd48:	1ad3      	subs	r3, r2, r3
 800dd4a:	3b01      	subs	r3, #1
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	f2c0 814e 	blt.w	800dfee <tcp_receive+0x442>
 800dd52:	4b32      	ldr	r3, [pc, #200]	; (800de1c <tcp_receive+0x270>)
 800dd54:	681a      	ldr	r2, [r3, #0]
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd5a:	1ad3      	subs	r3, r2, r3
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	f300 8146 	bgt.w	800dfee <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	8b5b      	ldrh	r3, [r3, #26]
 800dd66:	f003 0304 	and.w	r3, r3, #4
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d010      	beq.n	800dd90 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	8b5b      	ldrh	r3, [r3, #26]
 800dd72:	f023 0304 	bic.w	r3, r3, #4
 800dd76:	b29a      	uxth	r2, r3
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2200      	movs	r2, #0
 800dd94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800dd9e:	10db      	asrs	r3, r3, #3
 800dda0:	b21b      	sxth	r3, r3
 800dda2:	b29a      	uxth	r2, r3
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ddaa:	b29b      	uxth	r3, r3
 800ddac:	4413      	add	r3, r2
 800ddae:	b29b      	uxth	r3, r3
 800ddb0:	b21a      	sxth	r2, r3
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800ddb8:	4b18      	ldr	r3, [pc, #96]	; (800de1c <tcp_receive+0x270>)
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	b29a      	uxth	r2, r3
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddc2:	b29b      	uxth	r3, r3
 800ddc4:	1ad3      	subs	r3, r2, r3
 800ddc6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	2200      	movs	r2, #0
 800ddcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800ddd0:	4b12      	ldr	r3, [pc, #72]	; (800de1c <tcp_receive+0x270>)
 800ddd2:	681a      	ldr	r2, [r3, #0]
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	7d1b      	ldrb	r3, [r3, #20]
 800dddc:	2b03      	cmp	r3, #3
 800ddde:	f240 8097 	bls.w	800df10 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ddee:	429a      	cmp	r2, r3
 800ddf0:	d245      	bcs.n	800de7e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	8b5b      	ldrh	r3, [r3, #26]
 800ddf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d014      	beq.n	800de28 <tcp_receive+0x27c>
 800ddfe:	2301      	movs	r3, #1
 800de00:	e013      	b.n	800de2a <tcp_receive+0x27e>
 800de02:	bf00      	nop
 800de04:	080159d4 	.word	0x080159d4
 800de08:	08015d04 	.word	0x08015d04
 800de0c:	08015a20 	.word	0x08015a20
 800de10:	08015d20 	.word	0x08015d20
 800de14:	20008610 	.word	0x20008610
 800de18:	20008604 	.word	0x20008604
 800de1c:	20008608 	.word	0x20008608
 800de20:	200085f4 	.word	0x200085f4
 800de24:	2000860e 	.word	0x2000860e
 800de28:	2302      	movs	r3, #2
 800de2a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800de2e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800de32:	b29a      	uxth	r2, r3
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800de38:	fb12 f303 	smulbb	r3, r2, r3
 800de3c:	b29b      	uxth	r3, r3
 800de3e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800de40:	4293      	cmp	r3, r2
 800de42:	bf28      	it	cs
 800de44:	4613      	movcs	r3, r2
 800de46:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800de4e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800de50:	4413      	add	r3, r2
 800de52:	b29a      	uxth	r2, r3
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800de5a:	429a      	cmp	r2, r3
 800de5c:	d309      	bcc.n	800de72 <tcp_receive+0x2c6>
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800de64:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800de66:	4413      	add	r3, r2
 800de68:	b29a      	uxth	r2, r3
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800de70:	e04e      	b.n	800df10 <tcp_receive+0x364>
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de78:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800de7c:	e048      	b.n	800df10 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800de84:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800de86:	4413      	add	r3, r2
 800de88:	b29a      	uxth	r2, r3
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800de90:	429a      	cmp	r2, r3
 800de92:	d309      	bcc.n	800dea8 <tcp_receive+0x2fc>
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800de9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800de9c:	4413      	add	r3, r2
 800de9e:	b29a      	uxth	r2, r3
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dea6:	e004      	b.n	800deb2 <tcp_receive+0x306>
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800deae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800debe:	429a      	cmp	r2, r3
 800dec0:	d326      	bcc.n	800df10 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dece:	1ad3      	subs	r3, r2, r3
 800ded0:	b29a      	uxth	r2, r3
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dee2:	4413      	add	r3, r2
 800dee4:	b29a      	uxth	r2, r3
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800deec:	429a      	cmp	r2, r3
 800deee:	d30a      	bcc.n	800df06 <tcp_receive+0x35a>
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800defa:	4413      	add	r3, r2
 800defc:	b29a      	uxth	r2, r3
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800df04:	e004      	b.n	800df10 <tcp_receive+0x364>
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800df0c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df18:	4a98      	ldr	r2, [pc, #608]	; (800e17c <tcp_receive+0x5d0>)
 800df1a:	6878      	ldr	r0, [r7, #4]
 800df1c:	f7ff fdca 	bl	800dab4 <tcp_free_acked_segments>
 800df20:	4602      	mov	r2, r0
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df2e:	4a94      	ldr	r2, [pc, #592]	; (800e180 <tcp_receive+0x5d4>)
 800df30:	6878      	ldr	r0, [r7, #4]
 800df32:	f7ff fdbf 	bl	800dab4 <tcp_free_acked_segments>
 800df36:	4602      	mov	r2, r0
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df40:	2b00      	cmp	r3, #0
 800df42:	d104      	bne.n	800df4e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800df4a:	861a      	strh	r2, [r3, #48]	; 0x30
 800df4c:	e002      	b.n	800df54 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	2200      	movs	r2, #0
 800df52:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	2200      	movs	r2, #0
 800df58:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d103      	bne.n	800df6a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	2200      	movs	r2, #0
 800df66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800df70:	4b84      	ldr	r3, [pc, #528]	; (800e184 <tcp_receive+0x5d8>)
 800df72:	881b      	ldrh	r3, [r3, #0]
 800df74:	4413      	add	r3, r2
 800df76:	b29a      	uxth	r2, r3
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	8b5b      	ldrh	r3, [r3, #26]
 800df82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800df86:	2b00      	cmp	r3, #0
 800df88:	d035      	beq.n	800dff6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d118      	bne.n	800dfc4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df96:	2b00      	cmp	r3, #0
 800df98:	d00c      	beq.n	800dfb4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfa2:	68db      	ldr	r3, [r3, #12]
 800dfa4:	685b      	ldr	r3, [r3, #4]
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	f7fa ff27 	bl	8008dfa <lwip_htonl>
 800dfac:	4603      	mov	r3, r0
 800dfae:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	dc20      	bgt.n	800dff6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	8b5b      	ldrh	r3, [r3, #26]
 800dfb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dfbc:	b29a      	uxth	r2, r3
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800dfc2:	e018      	b.n	800dff6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dfcc:	68db      	ldr	r3, [r3, #12]
 800dfce:	685b      	ldr	r3, [r3, #4]
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f7fa ff12 	bl	8008dfa <lwip_htonl>
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	1ae3      	subs	r3, r4, r3
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	dc0b      	bgt.n	800dff6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	8b5b      	ldrh	r3, [r3, #26]
 800dfe2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dfe6:	b29a      	uxth	r2, r3
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800dfec:	e003      	b.n	800dff6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800dfee:	6878      	ldr	r0, [r7, #4]
 800dff0:	f002 fbce 	bl	8010790 <tcp_send_empty_ack>
 800dff4:	e000      	b.n	800dff8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800dff6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d05b      	beq.n	800e0b8 <tcp_receive+0x50c>
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e004:	4b60      	ldr	r3, [pc, #384]	; (800e188 <tcp_receive+0x5dc>)
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	1ad3      	subs	r3, r2, r3
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	da54      	bge.n	800e0b8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800e00e:	4b5f      	ldr	r3, [pc, #380]	; (800e18c <tcp_receive+0x5e0>)
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	b29a      	uxth	r2, r3
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e018:	b29b      	uxth	r3, r3
 800e01a:	1ad3      	subs	r3, r2, r3
 800e01c:	b29b      	uxth	r3, r3
 800e01e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800e022:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e02c:	10db      	asrs	r3, r3, #3
 800e02e:	b21b      	sxth	r3, r3
 800e030:	b29b      	uxth	r3, r3
 800e032:	1ad3      	subs	r3, r2, r3
 800e034:	b29b      	uxth	r3, r3
 800e036:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e040:	b29a      	uxth	r2, r3
 800e042:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e046:	4413      	add	r3, r2
 800e048:	b29b      	uxth	r3, r3
 800e04a:	b21a      	sxth	r2, r3
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800e050:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800e054:	2b00      	cmp	r3, #0
 800e056:	da05      	bge.n	800e064 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800e058:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e05c:	425b      	negs	r3, r3
 800e05e:	b29b      	uxth	r3, r3
 800e060:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800e064:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e06e:	109b      	asrs	r3, r3, #2
 800e070:	b21b      	sxth	r3, r3
 800e072:	b29b      	uxth	r3, r3
 800e074:	1ad3      	subs	r3, r2, r3
 800e076:	b29b      	uxth	r3, r3
 800e078:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e082:	b29a      	uxth	r2, r3
 800e084:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e088:	4413      	add	r3, r2
 800e08a:	b29b      	uxth	r3, r3
 800e08c:	b21a      	sxth	r2, r3
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e098:	10db      	asrs	r3, r3, #3
 800e09a:	b21b      	sxth	r3, r3
 800e09c:	b29a      	uxth	r2, r3
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e0a4:	b29b      	uxth	r3, r3
 800e0a6:	4413      	add	r3, r2
 800e0a8:	b29b      	uxth	r3, r3
 800e0aa:	b21a      	sxth	r2, r3
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800e0b8:	4b35      	ldr	r3, [pc, #212]	; (800e190 <tcp_receive+0x5e4>)
 800e0ba:	881b      	ldrh	r3, [r3, #0]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	f000 84e2 	beq.w	800ea86 <tcp_receive+0xeda>
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	7d1b      	ldrb	r3, [r3, #20]
 800e0c6:	2b06      	cmp	r3, #6
 800e0c8:	f200 84dd 	bhi.w	800ea86 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e0d0:	4b30      	ldr	r3, [pc, #192]	; (800e194 <tcp_receive+0x5e8>)
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	1ad3      	subs	r3, r2, r3
 800e0d6:	3b01      	subs	r3, #1
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	f2c0 808f 	blt.w	800e1fc <tcp_receive+0x650>
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e0e2:	4b2b      	ldr	r3, [pc, #172]	; (800e190 <tcp_receive+0x5e4>)
 800e0e4:	881b      	ldrh	r3, [r3, #0]
 800e0e6:	4619      	mov	r1, r3
 800e0e8:	4b2a      	ldr	r3, [pc, #168]	; (800e194 <tcp_receive+0x5e8>)
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	440b      	add	r3, r1
 800e0ee:	1ad3      	subs	r3, r2, r3
 800e0f0:	3301      	adds	r3, #1
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	f300 8082 	bgt.w	800e1fc <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800e0f8:	4b27      	ldr	r3, [pc, #156]	; (800e198 <tcp_receive+0x5ec>)
 800e0fa:	685b      	ldr	r3, [r3, #4]
 800e0fc:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e102:	4b24      	ldr	r3, [pc, #144]	; (800e194 <tcp_receive+0x5e8>)
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	1ad3      	subs	r3, r2, r3
 800e108:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800e10a:	4b23      	ldr	r3, [pc, #140]	; (800e198 <tcp_receive+0x5ec>)
 800e10c:	685b      	ldr	r3, [r3, #4]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d106      	bne.n	800e120 <tcp_receive+0x574>
 800e112:	4b22      	ldr	r3, [pc, #136]	; (800e19c <tcp_receive+0x5f0>)
 800e114:	f240 5294 	movw	r2, #1428	; 0x594
 800e118:	4921      	ldr	r1, [pc, #132]	; (800e1a0 <tcp_receive+0x5f4>)
 800e11a:	4822      	ldr	r0, [pc, #136]	; (800e1a4 <tcp_receive+0x5f8>)
 800e11c:	f005 fb50 	bl	80137c0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800e120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e122:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e126:	4293      	cmp	r3, r2
 800e128:	d906      	bls.n	800e138 <tcp_receive+0x58c>
 800e12a:	4b1c      	ldr	r3, [pc, #112]	; (800e19c <tcp_receive+0x5f0>)
 800e12c:	f240 5295 	movw	r2, #1429	; 0x595
 800e130:	491d      	ldr	r1, [pc, #116]	; (800e1a8 <tcp_receive+0x5fc>)
 800e132:	481c      	ldr	r0, [pc, #112]	; (800e1a4 <tcp_receive+0x5f8>)
 800e134:	f005 fb44 	bl	80137c0 <iprintf>
      off = (u16_t)off32;
 800e138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e13a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800e13e:	4b16      	ldr	r3, [pc, #88]	; (800e198 <tcp_receive+0x5ec>)
 800e140:	685b      	ldr	r3, [r3, #4]
 800e142:	891b      	ldrh	r3, [r3, #8]
 800e144:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e148:	429a      	cmp	r2, r3
 800e14a:	d906      	bls.n	800e15a <tcp_receive+0x5ae>
 800e14c:	4b13      	ldr	r3, [pc, #76]	; (800e19c <tcp_receive+0x5f0>)
 800e14e:	f240 5297 	movw	r2, #1431	; 0x597
 800e152:	4916      	ldr	r1, [pc, #88]	; (800e1ac <tcp_receive+0x600>)
 800e154:	4813      	ldr	r0, [pc, #76]	; (800e1a4 <tcp_receive+0x5f8>)
 800e156:	f005 fb33 	bl	80137c0 <iprintf>
      inseg.len -= off;
 800e15a:	4b0f      	ldr	r3, [pc, #60]	; (800e198 <tcp_receive+0x5ec>)
 800e15c:	891a      	ldrh	r2, [r3, #8]
 800e15e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e162:	1ad3      	subs	r3, r2, r3
 800e164:	b29a      	uxth	r2, r3
 800e166:	4b0c      	ldr	r3, [pc, #48]	; (800e198 <tcp_receive+0x5ec>)
 800e168:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800e16a:	4b0b      	ldr	r3, [pc, #44]	; (800e198 <tcp_receive+0x5ec>)
 800e16c:	685b      	ldr	r3, [r3, #4]
 800e16e:	891a      	ldrh	r2, [r3, #8]
 800e170:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e174:	1ad3      	subs	r3, r2, r3
 800e176:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800e178:	e02a      	b.n	800e1d0 <tcp_receive+0x624>
 800e17a:	bf00      	nop
 800e17c:	08015d3c 	.word	0x08015d3c
 800e180:	08015d44 	.word	0x08015d44
 800e184:	2000860c 	.word	0x2000860c
 800e188:	20008608 	.word	0x20008608
 800e18c:	200085cc 	.word	0x200085cc
 800e190:	2000860e 	.word	0x2000860e
 800e194:	20008604 	.word	0x20008604
 800e198:	200085e4 	.word	0x200085e4
 800e19c:	080159d4 	.word	0x080159d4
 800e1a0:	08015d4c 	.word	0x08015d4c
 800e1a4:	08015a20 	.word	0x08015a20
 800e1a8:	08015d5c 	.word	0x08015d5c
 800e1ac:	08015d6c 	.word	0x08015d6c
        off -= p->len;
 800e1b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e1b2:	895b      	ldrh	r3, [r3, #10]
 800e1b4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e1b8:	1ad3      	subs	r3, r2, r3
 800e1ba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800e1be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e1c0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e1c2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800e1c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800e1ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800e1d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e1d2:	895b      	ldrh	r3, [r3, #10]
 800e1d4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e1d8:	429a      	cmp	r2, r3
 800e1da:	d8e9      	bhi.n	800e1b0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800e1dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e1e0:	4619      	mov	r1, r3
 800e1e2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e1e4:	f7fc f8cc 	bl	800a380 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1ec:	4a91      	ldr	r2, [pc, #580]	; (800e434 <tcp_receive+0x888>)
 800e1ee:	6013      	str	r3, [r2, #0]
 800e1f0:	4b91      	ldr	r3, [pc, #580]	; (800e438 <tcp_receive+0x88c>)
 800e1f2:	68db      	ldr	r3, [r3, #12]
 800e1f4:	4a8f      	ldr	r2, [pc, #572]	; (800e434 <tcp_receive+0x888>)
 800e1f6:	6812      	ldr	r2, [r2, #0]
 800e1f8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e1fa:	e00d      	b.n	800e218 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800e1fc:	4b8d      	ldr	r3, [pc, #564]	; (800e434 <tcp_receive+0x888>)
 800e1fe:	681a      	ldr	r2, [r3, #0]
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e204:	1ad3      	subs	r3, r2, r3
 800e206:	2b00      	cmp	r3, #0
 800e208:	da06      	bge.n	800e218 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	8b5b      	ldrh	r3, [r3, #26]
 800e20e:	f043 0302 	orr.w	r3, r3, #2
 800e212:	b29a      	uxth	r2, r3
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e218:	4b86      	ldr	r3, [pc, #536]	; (800e434 <tcp_receive+0x888>)
 800e21a:	681a      	ldr	r2, [r3, #0]
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e220:	1ad3      	subs	r3, r2, r3
 800e222:	2b00      	cmp	r3, #0
 800e224:	f2c0 842a 	blt.w	800ea7c <tcp_receive+0xed0>
 800e228:	4b82      	ldr	r3, [pc, #520]	; (800e434 <tcp_receive+0x888>)
 800e22a:	681a      	ldr	r2, [r3, #0]
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e230:	6879      	ldr	r1, [r7, #4]
 800e232:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e234:	440b      	add	r3, r1
 800e236:	1ad3      	subs	r3, r2, r3
 800e238:	3301      	adds	r3, #1
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	f300 841e 	bgt.w	800ea7c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e244:	4b7b      	ldr	r3, [pc, #492]	; (800e434 <tcp_receive+0x888>)
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	429a      	cmp	r2, r3
 800e24a:	f040 829a 	bne.w	800e782 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800e24e:	4b7a      	ldr	r3, [pc, #488]	; (800e438 <tcp_receive+0x88c>)
 800e250:	891c      	ldrh	r4, [r3, #8]
 800e252:	4b79      	ldr	r3, [pc, #484]	; (800e438 <tcp_receive+0x88c>)
 800e254:	68db      	ldr	r3, [r3, #12]
 800e256:	899b      	ldrh	r3, [r3, #12]
 800e258:	b29b      	uxth	r3, r3
 800e25a:	4618      	mov	r0, r3
 800e25c:	f7fa fdb8 	bl	8008dd0 <lwip_htons>
 800e260:	4603      	mov	r3, r0
 800e262:	b2db      	uxtb	r3, r3
 800e264:	f003 0303 	and.w	r3, r3, #3
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d001      	beq.n	800e270 <tcp_receive+0x6c4>
 800e26c:	2301      	movs	r3, #1
 800e26e:	e000      	b.n	800e272 <tcp_receive+0x6c6>
 800e270:	2300      	movs	r3, #0
 800e272:	4423      	add	r3, r4
 800e274:	b29a      	uxth	r2, r3
 800e276:	4b71      	ldr	r3, [pc, #452]	; (800e43c <tcp_receive+0x890>)
 800e278:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e27e:	4b6f      	ldr	r3, [pc, #444]	; (800e43c <tcp_receive+0x890>)
 800e280:	881b      	ldrh	r3, [r3, #0]
 800e282:	429a      	cmp	r2, r3
 800e284:	d275      	bcs.n	800e372 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e286:	4b6c      	ldr	r3, [pc, #432]	; (800e438 <tcp_receive+0x88c>)
 800e288:	68db      	ldr	r3, [r3, #12]
 800e28a:	899b      	ldrh	r3, [r3, #12]
 800e28c:	b29b      	uxth	r3, r3
 800e28e:	4618      	mov	r0, r3
 800e290:	f7fa fd9e 	bl	8008dd0 <lwip_htons>
 800e294:	4603      	mov	r3, r0
 800e296:	b2db      	uxtb	r3, r3
 800e298:	f003 0301 	and.w	r3, r3, #1
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d01f      	beq.n	800e2e0 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800e2a0:	4b65      	ldr	r3, [pc, #404]	; (800e438 <tcp_receive+0x88c>)
 800e2a2:	68db      	ldr	r3, [r3, #12]
 800e2a4:	899b      	ldrh	r3, [r3, #12]
 800e2a6:	b29b      	uxth	r3, r3
 800e2a8:	b21b      	sxth	r3, r3
 800e2aa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e2ae:	b21c      	sxth	r4, r3
 800e2b0:	4b61      	ldr	r3, [pc, #388]	; (800e438 <tcp_receive+0x88c>)
 800e2b2:	68db      	ldr	r3, [r3, #12]
 800e2b4:	899b      	ldrh	r3, [r3, #12]
 800e2b6:	b29b      	uxth	r3, r3
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	f7fa fd89 	bl	8008dd0 <lwip_htons>
 800e2be:	4603      	mov	r3, r0
 800e2c0:	b2db      	uxtb	r3, r3
 800e2c2:	b29b      	uxth	r3, r3
 800e2c4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e2c8:	b29b      	uxth	r3, r3
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	f7fa fd80 	bl	8008dd0 <lwip_htons>
 800e2d0:	4603      	mov	r3, r0
 800e2d2:	b21b      	sxth	r3, r3
 800e2d4:	4323      	orrs	r3, r4
 800e2d6:	b21a      	sxth	r2, r3
 800e2d8:	4b57      	ldr	r3, [pc, #348]	; (800e438 <tcp_receive+0x88c>)
 800e2da:	68db      	ldr	r3, [r3, #12]
 800e2dc:	b292      	uxth	r2, r2
 800e2de:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e2e4:	4b54      	ldr	r3, [pc, #336]	; (800e438 <tcp_receive+0x88c>)
 800e2e6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e2e8:	4b53      	ldr	r3, [pc, #332]	; (800e438 <tcp_receive+0x88c>)
 800e2ea:	68db      	ldr	r3, [r3, #12]
 800e2ec:	899b      	ldrh	r3, [r3, #12]
 800e2ee:	b29b      	uxth	r3, r3
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	f7fa fd6d 	bl	8008dd0 <lwip_htons>
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	b2db      	uxtb	r3, r3
 800e2fa:	f003 0302 	and.w	r3, r3, #2
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d005      	beq.n	800e30e <tcp_receive+0x762>
            inseg.len -= 1;
 800e302:	4b4d      	ldr	r3, [pc, #308]	; (800e438 <tcp_receive+0x88c>)
 800e304:	891b      	ldrh	r3, [r3, #8]
 800e306:	3b01      	subs	r3, #1
 800e308:	b29a      	uxth	r2, r3
 800e30a:	4b4b      	ldr	r3, [pc, #300]	; (800e438 <tcp_receive+0x88c>)
 800e30c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800e30e:	4b4a      	ldr	r3, [pc, #296]	; (800e438 <tcp_receive+0x88c>)
 800e310:	685b      	ldr	r3, [r3, #4]
 800e312:	4a49      	ldr	r2, [pc, #292]	; (800e438 <tcp_receive+0x88c>)
 800e314:	8912      	ldrh	r2, [r2, #8]
 800e316:	4611      	mov	r1, r2
 800e318:	4618      	mov	r0, r3
 800e31a:	f7fb ff31 	bl	800a180 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800e31e:	4b46      	ldr	r3, [pc, #280]	; (800e438 <tcp_receive+0x88c>)
 800e320:	891c      	ldrh	r4, [r3, #8]
 800e322:	4b45      	ldr	r3, [pc, #276]	; (800e438 <tcp_receive+0x88c>)
 800e324:	68db      	ldr	r3, [r3, #12]
 800e326:	899b      	ldrh	r3, [r3, #12]
 800e328:	b29b      	uxth	r3, r3
 800e32a:	4618      	mov	r0, r3
 800e32c:	f7fa fd50 	bl	8008dd0 <lwip_htons>
 800e330:	4603      	mov	r3, r0
 800e332:	b2db      	uxtb	r3, r3
 800e334:	f003 0303 	and.w	r3, r3, #3
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d001      	beq.n	800e340 <tcp_receive+0x794>
 800e33c:	2301      	movs	r3, #1
 800e33e:	e000      	b.n	800e342 <tcp_receive+0x796>
 800e340:	2300      	movs	r3, #0
 800e342:	4423      	add	r3, r4
 800e344:	b29a      	uxth	r2, r3
 800e346:	4b3d      	ldr	r3, [pc, #244]	; (800e43c <tcp_receive+0x890>)
 800e348:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e34a:	4b3c      	ldr	r3, [pc, #240]	; (800e43c <tcp_receive+0x890>)
 800e34c:	881b      	ldrh	r3, [r3, #0]
 800e34e:	461a      	mov	r2, r3
 800e350:	4b38      	ldr	r3, [pc, #224]	; (800e434 <tcp_receive+0x888>)
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	441a      	add	r2, r3
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e35a:	6879      	ldr	r1, [r7, #4]
 800e35c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e35e:	440b      	add	r3, r1
 800e360:	429a      	cmp	r2, r3
 800e362:	d006      	beq.n	800e372 <tcp_receive+0x7c6>
 800e364:	4b36      	ldr	r3, [pc, #216]	; (800e440 <tcp_receive+0x894>)
 800e366:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800e36a:	4936      	ldr	r1, [pc, #216]	; (800e444 <tcp_receive+0x898>)
 800e36c:	4836      	ldr	r0, [pc, #216]	; (800e448 <tcp_receive+0x89c>)
 800e36e:	f005 fa27 	bl	80137c0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e376:	2b00      	cmp	r3, #0
 800e378:	f000 80e7 	beq.w	800e54a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e37c:	4b2e      	ldr	r3, [pc, #184]	; (800e438 <tcp_receive+0x88c>)
 800e37e:	68db      	ldr	r3, [r3, #12]
 800e380:	899b      	ldrh	r3, [r3, #12]
 800e382:	b29b      	uxth	r3, r3
 800e384:	4618      	mov	r0, r3
 800e386:	f7fa fd23 	bl	8008dd0 <lwip_htons>
 800e38a:	4603      	mov	r3, r0
 800e38c:	b2db      	uxtb	r3, r3
 800e38e:	f003 0301 	and.w	r3, r3, #1
 800e392:	2b00      	cmp	r3, #0
 800e394:	d010      	beq.n	800e3b8 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800e396:	e00a      	b.n	800e3ae <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e39c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3a2:	681a      	ldr	r2, [r3, #0]
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800e3a8:	68f8      	ldr	r0, [r7, #12]
 800e3aa:	f7fd fcac 	bl	800bd06 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d1f0      	bne.n	800e398 <tcp_receive+0x7ec>
 800e3b6:	e0c8      	b.n	800e54a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3bc:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800e3be:	e052      	b.n	800e466 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e3c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3c2:	68db      	ldr	r3, [r3, #12]
 800e3c4:	899b      	ldrh	r3, [r3, #12]
 800e3c6:	b29b      	uxth	r3, r3
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	f7fa fd01 	bl	8008dd0 <lwip_htons>
 800e3ce:	4603      	mov	r3, r0
 800e3d0:	b2db      	uxtb	r3, r3
 800e3d2:	f003 0301 	and.w	r3, r3, #1
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d03d      	beq.n	800e456 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800e3da:	4b17      	ldr	r3, [pc, #92]	; (800e438 <tcp_receive+0x88c>)
 800e3dc:	68db      	ldr	r3, [r3, #12]
 800e3de:	899b      	ldrh	r3, [r3, #12]
 800e3e0:	b29b      	uxth	r3, r3
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	f7fa fcf4 	bl	8008dd0 <lwip_htons>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	b2db      	uxtb	r3, r3
 800e3ec:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d130      	bne.n	800e456 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800e3f4:	4b10      	ldr	r3, [pc, #64]	; (800e438 <tcp_receive+0x88c>)
 800e3f6:	68db      	ldr	r3, [r3, #12]
 800e3f8:	899b      	ldrh	r3, [r3, #12]
 800e3fa:	b29c      	uxth	r4, r3
 800e3fc:	2001      	movs	r0, #1
 800e3fe:	f7fa fce7 	bl	8008dd0 <lwip_htons>
 800e402:	4603      	mov	r3, r0
 800e404:	461a      	mov	r2, r3
 800e406:	4b0c      	ldr	r3, [pc, #48]	; (800e438 <tcp_receive+0x88c>)
 800e408:	68db      	ldr	r3, [r3, #12]
 800e40a:	4322      	orrs	r2, r4
 800e40c:	b292      	uxth	r2, r2
 800e40e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800e410:	4b09      	ldr	r3, [pc, #36]	; (800e438 <tcp_receive+0x88c>)
 800e412:	891c      	ldrh	r4, [r3, #8]
 800e414:	4b08      	ldr	r3, [pc, #32]	; (800e438 <tcp_receive+0x88c>)
 800e416:	68db      	ldr	r3, [r3, #12]
 800e418:	899b      	ldrh	r3, [r3, #12]
 800e41a:	b29b      	uxth	r3, r3
 800e41c:	4618      	mov	r0, r3
 800e41e:	f7fa fcd7 	bl	8008dd0 <lwip_htons>
 800e422:	4603      	mov	r3, r0
 800e424:	b2db      	uxtb	r3, r3
 800e426:	f003 0303 	and.w	r3, r3, #3
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d00e      	beq.n	800e44c <tcp_receive+0x8a0>
 800e42e:	2301      	movs	r3, #1
 800e430:	e00d      	b.n	800e44e <tcp_receive+0x8a2>
 800e432:	bf00      	nop
 800e434:	20008604 	.word	0x20008604
 800e438:	200085e4 	.word	0x200085e4
 800e43c:	2000860e 	.word	0x2000860e
 800e440:	080159d4 	.word	0x080159d4
 800e444:	08015d7c 	.word	0x08015d7c
 800e448:	08015a20 	.word	0x08015a20
 800e44c:	2300      	movs	r3, #0
 800e44e:	4423      	add	r3, r4
 800e450:	b29a      	uxth	r2, r3
 800e452:	4b98      	ldr	r3, [pc, #608]	; (800e6b4 <tcp_receive+0xb08>)
 800e454:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800e456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e458:	613b      	str	r3, [r7, #16]
              next = next->next;
 800e45a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800e460:	6938      	ldr	r0, [r7, #16]
 800e462:	f7fd fc50 	bl	800bd06 <tcp_seg_free>
            while (next &&
 800e466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d00e      	beq.n	800e48a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800e46c:	4b91      	ldr	r3, [pc, #580]	; (800e6b4 <tcp_receive+0xb08>)
 800e46e:	881b      	ldrh	r3, [r3, #0]
 800e470:	461a      	mov	r2, r3
 800e472:	4b91      	ldr	r3, [pc, #580]	; (800e6b8 <tcp_receive+0xb0c>)
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	441a      	add	r2, r3
 800e478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e47a:	68db      	ldr	r3, [r3, #12]
 800e47c:	685b      	ldr	r3, [r3, #4]
 800e47e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e480:	8909      	ldrh	r1, [r1, #8]
 800e482:	440b      	add	r3, r1
 800e484:	1ad3      	subs	r3, r2, r3
            while (next &&
 800e486:	2b00      	cmp	r3, #0
 800e488:	da9a      	bge.n	800e3c0 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800e48a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d059      	beq.n	800e544 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800e490:	4b88      	ldr	r3, [pc, #544]	; (800e6b4 <tcp_receive+0xb08>)
 800e492:	881b      	ldrh	r3, [r3, #0]
 800e494:	461a      	mov	r2, r3
 800e496:	4b88      	ldr	r3, [pc, #544]	; (800e6b8 <tcp_receive+0xb0c>)
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	441a      	add	r2, r3
 800e49c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e49e:	68db      	ldr	r3, [r3, #12]
 800e4a0:	685b      	ldr	r3, [r3, #4]
 800e4a2:	1ad3      	subs	r3, r2, r3
            if (next &&
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	dd4d      	ble.n	800e544 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800e4a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4aa:	68db      	ldr	r3, [r3, #12]
 800e4ac:	685b      	ldr	r3, [r3, #4]
 800e4ae:	b29a      	uxth	r2, r3
 800e4b0:	4b81      	ldr	r3, [pc, #516]	; (800e6b8 <tcp_receive+0xb0c>)
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	b29b      	uxth	r3, r3
 800e4b6:	1ad3      	subs	r3, r2, r3
 800e4b8:	b29a      	uxth	r2, r3
 800e4ba:	4b80      	ldr	r3, [pc, #512]	; (800e6bc <tcp_receive+0xb10>)
 800e4bc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e4be:	4b7f      	ldr	r3, [pc, #508]	; (800e6bc <tcp_receive+0xb10>)
 800e4c0:	68db      	ldr	r3, [r3, #12]
 800e4c2:	899b      	ldrh	r3, [r3, #12]
 800e4c4:	b29b      	uxth	r3, r3
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f7fa fc82 	bl	8008dd0 <lwip_htons>
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	b2db      	uxtb	r3, r3
 800e4d0:	f003 0302 	and.w	r3, r3, #2
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d005      	beq.n	800e4e4 <tcp_receive+0x938>
                inseg.len -= 1;
 800e4d8:	4b78      	ldr	r3, [pc, #480]	; (800e6bc <tcp_receive+0xb10>)
 800e4da:	891b      	ldrh	r3, [r3, #8]
 800e4dc:	3b01      	subs	r3, #1
 800e4de:	b29a      	uxth	r2, r3
 800e4e0:	4b76      	ldr	r3, [pc, #472]	; (800e6bc <tcp_receive+0xb10>)
 800e4e2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800e4e4:	4b75      	ldr	r3, [pc, #468]	; (800e6bc <tcp_receive+0xb10>)
 800e4e6:	685b      	ldr	r3, [r3, #4]
 800e4e8:	4a74      	ldr	r2, [pc, #464]	; (800e6bc <tcp_receive+0xb10>)
 800e4ea:	8912      	ldrh	r2, [r2, #8]
 800e4ec:	4611      	mov	r1, r2
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f7fb fe46 	bl	800a180 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800e4f4:	4b71      	ldr	r3, [pc, #452]	; (800e6bc <tcp_receive+0xb10>)
 800e4f6:	891c      	ldrh	r4, [r3, #8]
 800e4f8:	4b70      	ldr	r3, [pc, #448]	; (800e6bc <tcp_receive+0xb10>)
 800e4fa:	68db      	ldr	r3, [r3, #12]
 800e4fc:	899b      	ldrh	r3, [r3, #12]
 800e4fe:	b29b      	uxth	r3, r3
 800e500:	4618      	mov	r0, r3
 800e502:	f7fa fc65 	bl	8008dd0 <lwip_htons>
 800e506:	4603      	mov	r3, r0
 800e508:	b2db      	uxtb	r3, r3
 800e50a:	f003 0303 	and.w	r3, r3, #3
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d001      	beq.n	800e516 <tcp_receive+0x96a>
 800e512:	2301      	movs	r3, #1
 800e514:	e000      	b.n	800e518 <tcp_receive+0x96c>
 800e516:	2300      	movs	r3, #0
 800e518:	4423      	add	r3, r4
 800e51a:	b29a      	uxth	r2, r3
 800e51c:	4b65      	ldr	r3, [pc, #404]	; (800e6b4 <tcp_receive+0xb08>)
 800e51e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800e520:	4b64      	ldr	r3, [pc, #400]	; (800e6b4 <tcp_receive+0xb08>)
 800e522:	881b      	ldrh	r3, [r3, #0]
 800e524:	461a      	mov	r2, r3
 800e526:	4b64      	ldr	r3, [pc, #400]	; (800e6b8 <tcp_receive+0xb0c>)
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	441a      	add	r2, r3
 800e52c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e52e:	68db      	ldr	r3, [r3, #12]
 800e530:	685b      	ldr	r3, [r3, #4]
 800e532:	429a      	cmp	r2, r3
 800e534:	d006      	beq.n	800e544 <tcp_receive+0x998>
 800e536:	4b62      	ldr	r3, [pc, #392]	; (800e6c0 <tcp_receive+0xb14>)
 800e538:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800e53c:	4961      	ldr	r1, [pc, #388]	; (800e6c4 <tcp_receive+0xb18>)
 800e53e:	4862      	ldr	r0, [pc, #392]	; (800e6c8 <tcp_receive+0xb1c>)
 800e540:	f005 f93e 	bl	80137c0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e548:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800e54a:	4b5a      	ldr	r3, [pc, #360]	; (800e6b4 <tcp_receive+0xb08>)
 800e54c:	881b      	ldrh	r3, [r3, #0]
 800e54e:	461a      	mov	r2, r3
 800e550:	4b59      	ldr	r3, [pc, #356]	; (800e6b8 <tcp_receive+0xb0c>)
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	441a      	add	r2, r3
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e55e:	4b55      	ldr	r3, [pc, #340]	; (800e6b4 <tcp_receive+0xb08>)
 800e560:	881b      	ldrh	r3, [r3, #0]
 800e562:	429a      	cmp	r2, r3
 800e564:	d206      	bcs.n	800e574 <tcp_receive+0x9c8>
 800e566:	4b56      	ldr	r3, [pc, #344]	; (800e6c0 <tcp_receive+0xb14>)
 800e568:	f240 6207 	movw	r2, #1543	; 0x607
 800e56c:	4957      	ldr	r1, [pc, #348]	; (800e6cc <tcp_receive+0xb20>)
 800e56e:	4856      	ldr	r0, [pc, #344]	; (800e6c8 <tcp_receive+0xb1c>)
 800e570:	f005 f926 	bl	80137c0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e578:	4b4e      	ldr	r3, [pc, #312]	; (800e6b4 <tcp_receive+0xb08>)
 800e57a:	881b      	ldrh	r3, [r3, #0]
 800e57c:	1ad3      	subs	r3, r2, r3
 800e57e:	b29a      	uxth	r2, r3
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800e584:	6878      	ldr	r0, [r7, #4]
 800e586:	f7fc fe99 	bl	800b2bc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800e58a:	4b4c      	ldr	r3, [pc, #304]	; (800e6bc <tcp_receive+0xb10>)
 800e58c:	685b      	ldr	r3, [r3, #4]
 800e58e:	891b      	ldrh	r3, [r3, #8]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d006      	beq.n	800e5a2 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800e594:	4b49      	ldr	r3, [pc, #292]	; (800e6bc <tcp_receive+0xb10>)
 800e596:	685b      	ldr	r3, [r3, #4]
 800e598:	4a4d      	ldr	r2, [pc, #308]	; (800e6d0 <tcp_receive+0xb24>)
 800e59a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800e59c:	4b47      	ldr	r3, [pc, #284]	; (800e6bc <tcp_receive+0xb10>)
 800e59e:	2200      	movs	r2, #0
 800e5a0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e5a2:	4b46      	ldr	r3, [pc, #280]	; (800e6bc <tcp_receive+0xb10>)
 800e5a4:	68db      	ldr	r3, [r3, #12]
 800e5a6:	899b      	ldrh	r3, [r3, #12]
 800e5a8:	b29b      	uxth	r3, r3
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f7fa fc10 	bl	8008dd0 <lwip_htons>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	b2db      	uxtb	r3, r3
 800e5b4:	f003 0301 	and.w	r3, r3, #1
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	f000 80b8 	beq.w	800e72e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800e5be:	4b45      	ldr	r3, [pc, #276]	; (800e6d4 <tcp_receive+0xb28>)
 800e5c0:	781b      	ldrb	r3, [r3, #0]
 800e5c2:	f043 0320 	orr.w	r3, r3, #32
 800e5c6:	b2da      	uxtb	r2, r3
 800e5c8:	4b42      	ldr	r3, [pc, #264]	; (800e6d4 <tcp_receive+0xb28>)
 800e5ca:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800e5cc:	e0af      	b.n	800e72e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e5d2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e5d8:	68db      	ldr	r3, [r3, #12]
 800e5da:	685b      	ldr	r3, [r3, #4]
 800e5dc:	4a36      	ldr	r2, [pc, #216]	; (800e6b8 <tcp_receive+0xb0c>)
 800e5de:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800e5e0:	68bb      	ldr	r3, [r7, #8]
 800e5e2:	891b      	ldrh	r3, [r3, #8]
 800e5e4:	461c      	mov	r4, r3
 800e5e6:	68bb      	ldr	r3, [r7, #8]
 800e5e8:	68db      	ldr	r3, [r3, #12]
 800e5ea:	899b      	ldrh	r3, [r3, #12]
 800e5ec:	b29b      	uxth	r3, r3
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	f7fa fbee 	bl	8008dd0 <lwip_htons>
 800e5f4:	4603      	mov	r3, r0
 800e5f6:	b2db      	uxtb	r3, r3
 800e5f8:	f003 0303 	and.w	r3, r3, #3
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d001      	beq.n	800e604 <tcp_receive+0xa58>
 800e600:	2301      	movs	r3, #1
 800e602:	e000      	b.n	800e606 <tcp_receive+0xa5a>
 800e604:	2300      	movs	r3, #0
 800e606:	191a      	adds	r2, r3, r4
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e60c:	441a      	add	r2, r3
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e616:	461c      	mov	r4, r3
 800e618:	68bb      	ldr	r3, [r7, #8]
 800e61a:	891b      	ldrh	r3, [r3, #8]
 800e61c:	461d      	mov	r5, r3
 800e61e:	68bb      	ldr	r3, [r7, #8]
 800e620:	68db      	ldr	r3, [r3, #12]
 800e622:	899b      	ldrh	r3, [r3, #12]
 800e624:	b29b      	uxth	r3, r3
 800e626:	4618      	mov	r0, r3
 800e628:	f7fa fbd2 	bl	8008dd0 <lwip_htons>
 800e62c:	4603      	mov	r3, r0
 800e62e:	b2db      	uxtb	r3, r3
 800e630:	f003 0303 	and.w	r3, r3, #3
 800e634:	2b00      	cmp	r3, #0
 800e636:	d001      	beq.n	800e63c <tcp_receive+0xa90>
 800e638:	2301      	movs	r3, #1
 800e63a:	e000      	b.n	800e63e <tcp_receive+0xa92>
 800e63c:	2300      	movs	r3, #0
 800e63e:	442b      	add	r3, r5
 800e640:	429c      	cmp	r4, r3
 800e642:	d206      	bcs.n	800e652 <tcp_receive+0xaa6>
 800e644:	4b1e      	ldr	r3, [pc, #120]	; (800e6c0 <tcp_receive+0xb14>)
 800e646:	f240 622b 	movw	r2, #1579	; 0x62b
 800e64a:	4923      	ldr	r1, [pc, #140]	; (800e6d8 <tcp_receive+0xb2c>)
 800e64c:	481e      	ldr	r0, [pc, #120]	; (800e6c8 <tcp_receive+0xb1c>)
 800e64e:	f005 f8b7 	bl	80137c0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800e652:	68bb      	ldr	r3, [r7, #8]
 800e654:	891b      	ldrh	r3, [r3, #8]
 800e656:	461c      	mov	r4, r3
 800e658:	68bb      	ldr	r3, [r7, #8]
 800e65a:	68db      	ldr	r3, [r3, #12]
 800e65c:	899b      	ldrh	r3, [r3, #12]
 800e65e:	b29b      	uxth	r3, r3
 800e660:	4618      	mov	r0, r3
 800e662:	f7fa fbb5 	bl	8008dd0 <lwip_htons>
 800e666:	4603      	mov	r3, r0
 800e668:	b2db      	uxtb	r3, r3
 800e66a:	f003 0303 	and.w	r3, r3, #3
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d001      	beq.n	800e676 <tcp_receive+0xaca>
 800e672:	2301      	movs	r3, #1
 800e674:	e000      	b.n	800e678 <tcp_receive+0xacc>
 800e676:	2300      	movs	r3, #0
 800e678:	1919      	adds	r1, r3, r4
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e67e:	b28b      	uxth	r3, r1
 800e680:	1ad3      	subs	r3, r2, r3
 800e682:	b29a      	uxth	r2, r3
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800e688:	6878      	ldr	r0, [r7, #4]
 800e68a:	f7fc fe17 	bl	800b2bc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800e68e:	68bb      	ldr	r3, [r7, #8]
 800e690:	685b      	ldr	r3, [r3, #4]
 800e692:	891b      	ldrh	r3, [r3, #8]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d028      	beq.n	800e6ea <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800e698:	4b0d      	ldr	r3, [pc, #52]	; (800e6d0 <tcp_receive+0xb24>)
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d01d      	beq.n	800e6dc <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800e6a0:	4b0b      	ldr	r3, [pc, #44]	; (800e6d0 <tcp_receive+0xb24>)
 800e6a2:	681a      	ldr	r2, [r3, #0]
 800e6a4:	68bb      	ldr	r3, [r7, #8]
 800e6a6:	685b      	ldr	r3, [r3, #4]
 800e6a8:	4619      	mov	r1, r3
 800e6aa:	4610      	mov	r0, r2
 800e6ac:	f7fb ffb0 	bl	800a610 <pbuf_cat>
 800e6b0:	e018      	b.n	800e6e4 <tcp_receive+0xb38>
 800e6b2:	bf00      	nop
 800e6b4:	2000860e 	.word	0x2000860e
 800e6b8:	20008604 	.word	0x20008604
 800e6bc:	200085e4 	.word	0x200085e4
 800e6c0:	080159d4 	.word	0x080159d4
 800e6c4:	08015db4 	.word	0x08015db4
 800e6c8:	08015a20 	.word	0x08015a20
 800e6cc:	08015df0 	.word	0x08015df0
 800e6d0:	20008614 	.word	0x20008614
 800e6d4:	20008611 	.word	0x20008611
 800e6d8:	08015e10 	.word	0x08015e10
            } else {
              recv_data = cseg->p;
 800e6dc:	68bb      	ldr	r3, [r7, #8]
 800e6de:	685b      	ldr	r3, [r3, #4]
 800e6e0:	4a70      	ldr	r2, [pc, #448]	; (800e8a4 <tcp_receive+0xcf8>)
 800e6e2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800e6e4:	68bb      	ldr	r3, [r7, #8]
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e6ea:	68bb      	ldr	r3, [r7, #8]
 800e6ec:	68db      	ldr	r3, [r3, #12]
 800e6ee:	899b      	ldrh	r3, [r3, #12]
 800e6f0:	b29b      	uxth	r3, r3
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	f7fa fb6c 	bl	8008dd0 <lwip_htons>
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	b2db      	uxtb	r3, r3
 800e6fc:	f003 0301 	and.w	r3, r3, #1
 800e700:	2b00      	cmp	r3, #0
 800e702:	d00d      	beq.n	800e720 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800e704:	4b68      	ldr	r3, [pc, #416]	; (800e8a8 <tcp_receive+0xcfc>)
 800e706:	781b      	ldrb	r3, [r3, #0]
 800e708:	f043 0320 	orr.w	r3, r3, #32
 800e70c:	b2da      	uxtb	r2, r3
 800e70e:	4b66      	ldr	r3, [pc, #408]	; (800e8a8 <tcp_receive+0xcfc>)
 800e710:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	7d1b      	ldrb	r3, [r3, #20]
 800e716:	2b04      	cmp	r3, #4
 800e718:	d102      	bne.n	800e720 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	2207      	movs	r2, #7
 800e71e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800e720:	68bb      	ldr	r3, [r7, #8]
 800e722:	681a      	ldr	r2, [r3, #0]
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800e728:	68b8      	ldr	r0, [r7, #8]
 800e72a:	f7fd faec 	bl	800bd06 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e732:	2b00      	cmp	r3, #0
 800e734:	d008      	beq.n	800e748 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e73a:	68db      	ldr	r3, [r3, #12]
 800e73c:	685a      	ldr	r2, [r3, #4]
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800e742:	429a      	cmp	r2, r3
 800e744:	f43f af43 	beq.w	800e5ce <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	8b5b      	ldrh	r3, [r3, #26]
 800e74c:	f003 0301 	and.w	r3, r3, #1
 800e750:	2b00      	cmp	r3, #0
 800e752:	d00e      	beq.n	800e772 <tcp_receive+0xbc6>
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	8b5b      	ldrh	r3, [r3, #26]
 800e758:	f023 0301 	bic.w	r3, r3, #1
 800e75c:	b29a      	uxth	r2, r3
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	835a      	strh	r2, [r3, #26]
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	8b5b      	ldrh	r3, [r3, #26]
 800e766:	f043 0302 	orr.w	r3, r3, #2
 800e76a:	b29a      	uxth	r2, r3
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e770:	e188      	b.n	800ea84 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	8b5b      	ldrh	r3, [r3, #26]
 800e776:	f043 0301 	orr.w	r3, r3, #1
 800e77a:	b29a      	uxth	r2, r3
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e780:	e180      	b.n	800ea84 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e786:	2b00      	cmp	r3, #0
 800e788:	d106      	bne.n	800e798 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800e78a:	4848      	ldr	r0, [pc, #288]	; (800e8ac <tcp_receive+0xd00>)
 800e78c:	f7fd faf2 	bl	800bd74 <tcp_seg_copy>
 800e790:	4602      	mov	r2, r0
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	675a      	str	r2, [r3, #116]	; 0x74
 800e796:	e16d      	b.n	800ea74 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800e798:	2300      	movs	r3, #0
 800e79a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e7a0:	63bb      	str	r3, [r7, #56]	; 0x38
 800e7a2:	e157      	b.n	800ea54 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800e7a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7a6:	68db      	ldr	r3, [r3, #12]
 800e7a8:	685a      	ldr	r2, [r3, #4]
 800e7aa:	4b41      	ldr	r3, [pc, #260]	; (800e8b0 <tcp_receive+0xd04>)
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	429a      	cmp	r2, r3
 800e7b0:	d11d      	bne.n	800e7ee <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800e7b2:	4b3e      	ldr	r3, [pc, #248]	; (800e8ac <tcp_receive+0xd00>)
 800e7b4:	891a      	ldrh	r2, [r3, #8]
 800e7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7b8:	891b      	ldrh	r3, [r3, #8]
 800e7ba:	429a      	cmp	r2, r3
 800e7bc:	f240 814f 	bls.w	800ea5e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e7c0:	483a      	ldr	r0, [pc, #232]	; (800e8ac <tcp_receive+0xd00>)
 800e7c2:	f7fd fad7 	bl	800bd74 <tcp_seg_copy>
 800e7c6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800e7c8:	697b      	ldr	r3, [r7, #20]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	f000 8149 	beq.w	800ea62 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800e7d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d003      	beq.n	800e7de <tcp_receive+0xc32>
                    prev->next = cseg;
 800e7d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7d8:	697a      	ldr	r2, [r7, #20]
 800e7da:	601a      	str	r2, [r3, #0]
 800e7dc:	e002      	b.n	800e7e4 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	697a      	ldr	r2, [r7, #20]
 800e7e2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800e7e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e7e6:	6978      	ldr	r0, [r7, #20]
 800e7e8:	f7ff f8dc 	bl	800d9a4 <tcp_oos_insert_segment>
                }
                break;
 800e7ec:	e139      	b.n	800ea62 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800e7ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d117      	bne.n	800e824 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800e7f4:	4b2e      	ldr	r3, [pc, #184]	; (800e8b0 <tcp_receive+0xd04>)
 800e7f6:	681a      	ldr	r2, [r3, #0]
 800e7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7fa:	68db      	ldr	r3, [r3, #12]
 800e7fc:	685b      	ldr	r3, [r3, #4]
 800e7fe:	1ad3      	subs	r3, r2, r3
 800e800:	2b00      	cmp	r3, #0
 800e802:	da57      	bge.n	800e8b4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e804:	4829      	ldr	r0, [pc, #164]	; (800e8ac <tcp_receive+0xd00>)
 800e806:	f7fd fab5 	bl	800bd74 <tcp_seg_copy>
 800e80a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800e80c:	69bb      	ldr	r3, [r7, #24]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	f000 8129 	beq.w	800ea66 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	69ba      	ldr	r2, [r7, #24]
 800e818:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800e81a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e81c:	69b8      	ldr	r0, [r7, #24]
 800e81e:	f7ff f8c1 	bl	800d9a4 <tcp_oos_insert_segment>
                  }
                  break;
 800e822:	e120      	b.n	800ea66 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800e824:	4b22      	ldr	r3, [pc, #136]	; (800e8b0 <tcp_receive+0xd04>)
 800e826:	681a      	ldr	r2, [r3, #0]
 800e828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e82a:	68db      	ldr	r3, [r3, #12]
 800e82c:	685b      	ldr	r3, [r3, #4]
 800e82e:	1ad3      	subs	r3, r2, r3
 800e830:	3b01      	subs	r3, #1
 800e832:	2b00      	cmp	r3, #0
 800e834:	db3e      	blt.n	800e8b4 <tcp_receive+0xd08>
 800e836:	4b1e      	ldr	r3, [pc, #120]	; (800e8b0 <tcp_receive+0xd04>)
 800e838:	681a      	ldr	r2, [r3, #0]
 800e83a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e83c:	68db      	ldr	r3, [r3, #12]
 800e83e:	685b      	ldr	r3, [r3, #4]
 800e840:	1ad3      	subs	r3, r2, r3
 800e842:	3301      	adds	r3, #1
 800e844:	2b00      	cmp	r3, #0
 800e846:	dc35      	bgt.n	800e8b4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e848:	4818      	ldr	r0, [pc, #96]	; (800e8ac <tcp_receive+0xd00>)
 800e84a:	f7fd fa93 	bl	800bd74 <tcp_seg_copy>
 800e84e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800e850:	69fb      	ldr	r3, [r7, #28]
 800e852:	2b00      	cmp	r3, #0
 800e854:	f000 8109 	beq.w	800ea6a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800e858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e85a:	68db      	ldr	r3, [r3, #12]
 800e85c:	685b      	ldr	r3, [r3, #4]
 800e85e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e860:	8912      	ldrh	r2, [r2, #8]
 800e862:	441a      	add	r2, r3
 800e864:	4b12      	ldr	r3, [pc, #72]	; (800e8b0 <tcp_receive+0xd04>)
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	1ad3      	subs	r3, r2, r3
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	dd12      	ble.n	800e894 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800e86e:	4b10      	ldr	r3, [pc, #64]	; (800e8b0 <tcp_receive+0xd04>)
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	b29a      	uxth	r2, r3
 800e874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e876:	68db      	ldr	r3, [r3, #12]
 800e878:	685b      	ldr	r3, [r3, #4]
 800e87a:	b29b      	uxth	r3, r3
 800e87c:	1ad3      	subs	r3, r2, r3
 800e87e:	b29a      	uxth	r2, r3
 800e880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e882:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800e884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e886:	685a      	ldr	r2, [r3, #4]
 800e888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e88a:	891b      	ldrh	r3, [r3, #8]
 800e88c:	4619      	mov	r1, r3
 800e88e:	4610      	mov	r0, r2
 800e890:	f7fb fc76 	bl	800a180 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800e894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e896:	69fa      	ldr	r2, [r7, #28]
 800e898:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800e89a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e89c:	69f8      	ldr	r0, [r7, #28]
 800e89e:	f7ff f881 	bl	800d9a4 <tcp_oos_insert_segment>
                  }
                  break;
 800e8a2:	e0e2      	b.n	800ea6a <tcp_receive+0xebe>
 800e8a4:	20008614 	.word	0x20008614
 800e8a8:	20008611 	.word	0x20008611
 800e8ac:	200085e4 	.word	0x200085e4
 800e8b0:	20008604 	.word	0x20008604
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800e8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8b6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800e8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	f040 80c6 	bne.w	800ea4e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800e8c2:	4b80      	ldr	r3, [pc, #512]	; (800eac4 <tcp_receive+0xf18>)
 800e8c4:	681a      	ldr	r2, [r3, #0]
 800e8c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8c8:	68db      	ldr	r3, [r3, #12]
 800e8ca:	685b      	ldr	r3, [r3, #4]
 800e8cc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	f340 80bd 	ble.w	800ea4e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e8d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8d6:	68db      	ldr	r3, [r3, #12]
 800e8d8:	899b      	ldrh	r3, [r3, #12]
 800e8da:	b29b      	uxth	r3, r3
 800e8dc:	4618      	mov	r0, r3
 800e8de:	f7fa fa77 	bl	8008dd0 <lwip_htons>
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	b2db      	uxtb	r3, r3
 800e8e6:	f003 0301 	and.w	r3, r3, #1
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	f040 80bf 	bne.w	800ea6e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800e8f0:	4875      	ldr	r0, [pc, #468]	; (800eac8 <tcp_receive+0xf1c>)
 800e8f2:	f7fd fa3f 	bl	800bd74 <tcp_seg_copy>
 800e8f6:	4602      	mov	r2, r0
 800e8f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8fa:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800e8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	2b00      	cmp	r3, #0
 800e902:	f000 80b6 	beq.w	800ea72 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800e906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e908:	68db      	ldr	r3, [r3, #12]
 800e90a:	685b      	ldr	r3, [r3, #4]
 800e90c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e90e:	8912      	ldrh	r2, [r2, #8]
 800e910:	441a      	add	r2, r3
 800e912:	4b6c      	ldr	r3, [pc, #432]	; (800eac4 <tcp_receive+0xf18>)
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	1ad3      	subs	r3, r2, r3
 800e918:	2b00      	cmp	r3, #0
 800e91a:	dd12      	ble.n	800e942 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800e91c:	4b69      	ldr	r3, [pc, #420]	; (800eac4 <tcp_receive+0xf18>)
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	b29a      	uxth	r2, r3
 800e922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e924:	68db      	ldr	r3, [r3, #12]
 800e926:	685b      	ldr	r3, [r3, #4]
 800e928:	b29b      	uxth	r3, r3
 800e92a:	1ad3      	subs	r3, r2, r3
 800e92c:	b29a      	uxth	r2, r3
 800e92e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e930:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800e932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e934:	685a      	ldr	r2, [r3, #4]
 800e936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e938:	891b      	ldrh	r3, [r3, #8]
 800e93a:	4619      	mov	r1, r3
 800e93c:	4610      	mov	r0, r2
 800e93e:	f7fb fc1f 	bl	800a180 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800e942:	4b62      	ldr	r3, [pc, #392]	; (800eacc <tcp_receive+0xf20>)
 800e944:	881b      	ldrh	r3, [r3, #0]
 800e946:	461a      	mov	r2, r3
 800e948:	4b5e      	ldr	r3, [pc, #376]	; (800eac4 <tcp_receive+0xf18>)
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	441a      	add	r2, r3
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e952:	6879      	ldr	r1, [r7, #4]
 800e954:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e956:	440b      	add	r3, r1
 800e958:	1ad3      	subs	r3, r2, r3
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	f340 8089 	ble.w	800ea72 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800e960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	68db      	ldr	r3, [r3, #12]
 800e966:	899b      	ldrh	r3, [r3, #12]
 800e968:	b29b      	uxth	r3, r3
 800e96a:	4618      	mov	r0, r3
 800e96c:	f7fa fa30 	bl	8008dd0 <lwip_htons>
 800e970:	4603      	mov	r3, r0
 800e972:	b2db      	uxtb	r3, r3
 800e974:	f003 0301 	and.w	r3, r3, #1
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d022      	beq.n	800e9c2 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800e97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	68db      	ldr	r3, [r3, #12]
 800e982:	899b      	ldrh	r3, [r3, #12]
 800e984:	b29b      	uxth	r3, r3
 800e986:	b21b      	sxth	r3, r3
 800e988:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e98c:	b21c      	sxth	r4, r3
 800e98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	68db      	ldr	r3, [r3, #12]
 800e994:	899b      	ldrh	r3, [r3, #12]
 800e996:	b29b      	uxth	r3, r3
 800e998:	4618      	mov	r0, r3
 800e99a:	f7fa fa19 	bl	8008dd0 <lwip_htons>
 800e99e:	4603      	mov	r3, r0
 800e9a0:	b2db      	uxtb	r3, r3
 800e9a2:	b29b      	uxth	r3, r3
 800e9a4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e9a8:	b29b      	uxth	r3, r3
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	f7fa fa10 	bl	8008dd0 <lwip_htons>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	b21b      	sxth	r3, r3
 800e9b4:	4323      	orrs	r3, r4
 800e9b6:	b21a      	sxth	r2, r3
 800e9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	68db      	ldr	r3, [r3, #12]
 800e9be:	b292      	uxth	r2, r2
 800e9c0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9c6:	b29a      	uxth	r2, r3
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e9cc:	4413      	add	r3, r2
 800e9ce:	b299      	uxth	r1, r3
 800e9d0:	4b3c      	ldr	r3, [pc, #240]	; (800eac4 <tcp_receive+0xf18>)
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	b29a      	uxth	r2, r3
 800e9d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	1a8a      	subs	r2, r1, r2
 800e9dc:	b292      	uxth	r2, r2
 800e9de:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800e9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	685a      	ldr	r2, [r3, #4]
 800e9e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	891b      	ldrh	r3, [r3, #8]
 800e9ec:	4619      	mov	r1, r3
 800e9ee:	4610      	mov	r0, r2
 800e9f0:	f7fb fbc6 	bl	800a180 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800e9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	891c      	ldrh	r4, [r3, #8]
 800e9fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	68db      	ldr	r3, [r3, #12]
 800ea00:	899b      	ldrh	r3, [r3, #12]
 800ea02:	b29b      	uxth	r3, r3
 800ea04:	4618      	mov	r0, r3
 800ea06:	f7fa f9e3 	bl	8008dd0 <lwip_htons>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	b2db      	uxtb	r3, r3
 800ea0e:	f003 0303 	and.w	r3, r3, #3
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d001      	beq.n	800ea1a <tcp_receive+0xe6e>
 800ea16:	2301      	movs	r3, #1
 800ea18:	e000      	b.n	800ea1c <tcp_receive+0xe70>
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	4423      	add	r3, r4
 800ea1e:	b29a      	uxth	r2, r3
 800ea20:	4b2a      	ldr	r3, [pc, #168]	; (800eacc <tcp_receive+0xf20>)
 800ea22:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ea24:	4b29      	ldr	r3, [pc, #164]	; (800eacc <tcp_receive+0xf20>)
 800ea26:	881b      	ldrh	r3, [r3, #0]
 800ea28:	461a      	mov	r2, r3
 800ea2a:	4b26      	ldr	r3, [pc, #152]	; (800eac4 <tcp_receive+0xf18>)
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	441a      	add	r2, r3
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea34:	6879      	ldr	r1, [r7, #4]
 800ea36:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ea38:	440b      	add	r3, r1
 800ea3a:	429a      	cmp	r2, r3
 800ea3c:	d019      	beq.n	800ea72 <tcp_receive+0xec6>
 800ea3e:	4b24      	ldr	r3, [pc, #144]	; (800ead0 <tcp_receive+0xf24>)
 800ea40:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800ea44:	4923      	ldr	r1, [pc, #140]	; (800ead4 <tcp_receive+0xf28>)
 800ea46:	4824      	ldr	r0, [pc, #144]	; (800ead8 <tcp_receive+0xf2c>)
 800ea48:	f004 feba 	bl	80137c0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800ea4c:	e011      	b.n	800ea72 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ea4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	63bb      	str	r3, [r7, #56]	; 0x38
 800ea54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	f47f aea4 	bne.w	800e7a4 <tcp_receive+0xbf8>
 800ea5c:	e00a      	b.n	800ea74 <tcp_receive+0xec8>
                break;
 800ea5e:	bf00      	nop
 800ea60:	e008      	b.n	800ea74 <tcp_receive+0xec8>
                break;
 800ea62:	bf00      	nop
 800ea64:	e006      	b.n	800ea74 <tcp_receive+0xec8>
                  break;
 800ea66:	bf00      	nop
 800ea68:	e004      	b.n	800ea74 <tcp_receive+0xec8>
                  break;
 800ea6a:	bf00      	nop
 800ea6c:	e002      	b.n	800ea74 <tcp_receive+0xec8>
                  break;
 800ea6e:	bf00      	nop
 800ea70:	e000      	b.n	800ea74 <tcp_receive+0xec8>
                break;
 800ea72:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f001 fe8b 	bl	8010790 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800ea7a:	e003      	b.n	800ea84 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800ea7c:	6878      	ldr	r0, [r7, #4]
 800ea7e:	f001 fe87 	bl	8010790 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ea82:	e01a      	b.n	800eaba <tcp_receive+0xf0e>
 800ea84:	e019      	b.n	800eaba <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800ea86:	4b0f      	ldr	r3, [pc, #60]	; (800eac4 <tcp_receive+0xf18>)
 800ea88:	681a      	ldr	r2, [r3, #0]
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea8e:	1ad3      	subs	r3, r2, r3
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	db0a      	blt.n	800eaaa <tcp_receive+0xefe>
 800ea94:	4b0b      	ldr	r3, [pc, #44]	; (800eac4 <tcp_receive+0xf18>)
 800ea96:	681a      	ldr	r2, [r3, #0]
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea9c:	6879      	ldr	r1, [r7, #4]
 800ea9e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800eaa0:	440b      	add	r3, r1
 800eaa2:	1ad3      	subs	r3, r2, r3
 800eaa4:	3301      	adds	r3, #1
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	dd07      	ble.n	800eaba <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	8b5b      	ldrh	r3, [r3, #26]
 800eaae:	f043 0302 	orr.w	r3, r3, #2
 800eab2:	b29a      	uxth	r2, r3
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800eab8:	e7ff      	b.n	800eaba <tcp_receive+0xf0e>
 800eaba:	bf00      	nop
 800eabc:	3750      	adds	r7, #80	; 0x50
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bdb0      	pop	{r4, r5, r7, pc}
 800eac2:	bf00      	nop
 800eac4:	20008604 	.word	0x20008604
 800eac8:	200085e4 	.word	0x200085e4
 800eacc:	2000860e 	.word	0x2000860e
 800ead0:	080159d4 	.word	0x080159d4
 800ead4:	08015d7c 	.word	0x08015d7c
 800ead8:	08015a20 	.word	0x08015a20

0800eadc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800eadc:	b480      	push	{r7}
 800eade:	b083      	sub	sp, #12
 800eae0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800eae2:	4b15      	ldr	r3, [pc, #84]	; (800eb38 <tcp_get_next_optbyte+0x5c>)
 800eae4:	881b      	ldrh	r3, [r3, #0]
 800eae6:	1c5a      	adds	r2, r3, #1
 800eae8:	b291      	uxth	r1, r2
 800eaea:	4a13      	ldr	r2, [pc, #76]	; (800eb38 <tcp_get_next_optbyte+0x5c>)
 800eaec:	8011      	strh	r1, [r2, #0]
 800eaee:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800eaf0:	4b12      	ldr	r3, [pc, #72]	; (800eb3c <tcp_get_next_optbyte+0x60>)
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d004      	beq.n	800eb02 <tcp_get_next_optbyte+0x26>
 800eaf8:	4b11      	ldr	r3, [pc, #68]	; (800eb40 <tcp_get_next_optbyte+0x64>)
 800eafa:	881b      	ldrh	r3, [r3, #0]
 800eafc:	88fa      	ldrh	r2, [r7, #6]
 800eafe:	429a      	cmp	r2, r3
 800eb00:	d208      	bcs.n	800eb14 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800eb02:	4b10      	ldr	r3, [pc, #64]	; (800eb44 <tcp_get_next_optbyte+0x68>)
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	3314      	adds	r3, #20
 800eb08:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800eb0a:	88fb      	ldrh	r3, [r7, #6]
 800eb0c:	683a      	ldr	r2, [r7, #0]
 800eb0e:	4413      	add	r3, r2
 800eb10:	781b      	ldrb	r3, [r3, #0]
 800eb12:	e00b      	b.n	800eb2c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800eb14:	88fb      	ldrh	r3, [r7, #6]
 800eb16:	b2da      	uxtb	r2, r3
 800eb18:	4b09      	ldr	r3, [pc, #36]	; (800eb40 <tcp_get_next_optbyte+0x64>)
 800eb1a:	881b      	ldrh	r3, [r3, #0]
 800eb1c:	b2db      	uxtb	r3, r3
 800eb1e:	1ad3      	subs	r3, r2, r3
 800eb20:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800eb22:	4b06      	ldr	r3, [pc, #24]	; (800eb3c <tcp_get_next_optbyte+0x60>)
 800eb24:	681a      	ldr	r2, [r3, #0]
 800eb26:	797b      	ldrb	r3, [r7, #5]
 800eb28:	4413      	add	r3, r2
 800eb2a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	370c      	adds	r7, #12
 800eb30:	46bd      	mov	sp, r7
 800eb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb36:	4770      	bx	lr
 800eb38:	20008600 	.word	0x20008600
 800eb3c:	200085fc 	.word	0x200085fc
 800eb40:	200085fa 	.word	0x200085fa
 800eb44:	200085f4 	.word	0x200085f4

0800eb48 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b084      	sub	sp, #16
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d106      	bne.n	800eb64 <tcp_parseopt+0x1c>
 800eb56:	4b32      	ldr	r3, [pc, #200]	; (800ec20 <tcp_parseopt+0xd8>)
 800eb58:	f240 727d 	movw	r2, #1917	; 0x77d
 800eb5c:	4931      	ldr	r1, [pc, #196]	; (800ec24 <tcp_parseopt+0xdc>)
 800eb5e:	4832      	ldr	r0, [pc, #200]	; (800ec28 <tcp_parseopt+0xe0>)
 800eb60:	f004 fe2e 	bl	80137c0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800eb64:	4b31      	ldr	r3, [pc, #196]	; (800ec2c <tcp_parseopt+0xe4>)
 800eb66:	881b      	ldrh	r3, [r3, #0]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d055      	beq.n	800ec18 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800eb6c:	4b30      	ldr	r3, [pc, #192]	; (800ec30 <tcp_parseopt+0xe8>)
 800eb6e:	2200      	movs	r2, #0
 800eb70:	801a      	strh	r2, [r3, #0]
 800eb72:	e045      	b.n	800ec00 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800eb74:	f7ff ffb2 	bl	800eadc <tcp_get_next_optbyte>
 800eb78:	4603      	mov	r3, r0
 800eb7a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800eb7c:	7bfb      	ldrb	r3, [r7, #15]
 800eb7e:	2b02      	cmp	r3, #2
 800eb80:	d006      	beq.n	800eb90 <tcp_parseopt+0x48>
 800eb82:	2b02      	cmp	r3, #2
 800eb84:	dc2b      	bgt.n	800ebde <tcp_parseopt+0x96>
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d041      	beq.n	800ec0e <tcp_parseopt+0xc6>
 800eb8a:	2b01      	cmp	r3, #1
 800eb8c:	d127      	bne.n	800ebde <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800eb8e:	e037      	b.n	800ec00 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800eb90:	f7ff ffa4 	bl	800eadc <tcp_get_next_optbyte>
 800eb94:	4603      	mov	r3, r0
 800eb96:	2b04      	cmp	r3, #4
 800eb98:	d13b      	bne.n	800ec12 <tcp_parseopt+0xca>
 800eb9a:	4b25      	ldr	r3, [pc, #148]	; (800ec30 <tcp_parseopt+0xe8>)
 800eb9c:	881b      	ldrh	r3, [r3, #0]
 800eb9e:	3301      	adds	r3, #1
 800eba0:	4a22      	ldr	r2, [pc, #136]	; (800ec2c <tcp_parseopt+0xe4>)
 800eba2:	8812      	ldrh	r2, [r2, #0]
 800eba4:	4293      	cmp	r3, r2
 800eba6:	da34      	bge.n	800ec12 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800eba8:	f7ff ff98 	bl	800eadc <tcp_get_next_optbyte>
 800ebac:	4603      	mov	r3, r0
 800ebae:	b29b      	uxth	r3, r3
 800ebb0:	021b      	lsls	r3, r3, #8
 800ebb2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800ebb4:	f7ff ff92 	bl	800eadc <tcp_get_next_optbyte>
 800ebb8:	4603      	mov	r3, r0
 800ebba:	b29a      	uxth	r2, r3
 800ebbc:	89bb      	ldrh	r3, [r7, #12]
 800ebbe:	4313      	orrs	r3, r2
 800ebc0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800ebc2:	89bb      	ldrh	r3, [r7, #12]
 800ebc4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ebc8:	d804      	bhi.n	800ebd4 <tcp_parseopt+0x8c>
 800ebca:	89bb      	ldrh	r3, [r7, #12]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d001      	beq.n	800ebd4 <tcp_parseopt+0x8c>
 800ebd0:	89ba      	ldrh	r2, [r7, #12]
 800ebd2:	e001      	b.n	800ebd8 <tcp_parseopt+0x90>
 800ebd4:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800ebdc:	e010      	b.n	800ec00 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800ebde:	f7ff ff7d 	bl	800eadc <tcp_get_next_optbyte>
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800ebe6:	7afb      	ldrb	r3, [r7, #11]
 800ebe8:	2b01      	cmp	r3, #1
 800ebea:	d914      	bls.n	800ec16 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800ebec:	7afb      	ldrb	r3, [r7, #11]
 800ebee:	b29a      	uxth	r2, r3
 800ebf0:	4b0f      	ldr	r3, [pc, #60]	; (800ec30 <tcp_parseopt+0xe8>)
 800ebf2:	881b      	ldrh	r3, [r3, #0]
 800ebf4:	4413      	add	r3, r2
 800ebf6:	b29b      	uxth	r3, r3
 800ebf8:	3b02      	subs	r3, #2
 800ebfa:	b29a      	uxth	r2, r3
 800ebfc:	4b0c      	ldr	r3, [pc, #48]	; (800ec30 <tcp_parseopt+0xe8>)
 800ebfe:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ec00:	4b0b      	ldr	r3, [pc, #44]	; (800ec30 <tcp_parseopt+0xe8>)
 800ec02:	881a      	ldrh	r2, [r3, #0]
 800ec04:	4b09      	ldr	r3, [pc, #36]	; (800ec2c <tcp_parseopt+0xe4>)
 800ec06:	881b      	ldrh	r3, [r3, #0]
 800ec08:	429a      	cmp	r2, r3
 800ec0a:	d3b3      	bcc.n	800eb74 <tcp_parseopt+0x2c>
 800ec0c:	e004      	b.n	800ec18 <tcp_parseopt+0xd0>
          return;
 800ec0e:	bf00      	nop
 800ec10:	e002      	b.n	800ec18 <tcp_parseopt+0xd0>
            return;
 800ec12:	bf00      	nop
 800ec14:	e000      	b.n	800ec18 <tcp_parseopt+0xd0>
            return;
 800ec16:	bf00      	nop
      }
    }
  }
}
 800ec18:	3710      	adds	r7, #16
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bd80      	pop	{r7, pc}
 800ec1e:	bf00      	nop
 800ec20:	080159d4 	.word	0x080159d4
 800ec24:	08015e38 	.word	0x08015e38
 800ec28:	08015a20 	.word	0x08015a20
 800ec2c:	200085f8 	.word	0x200085f8
 800ec30:	20008600 	.word	0x20008600

0800ec34 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800ec34:	b480      	push	{r7}
 800ec36:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800ec38:	4b05      	ldr	r3, [pc, #20]	; (800ec50 <tcp_trigger_input_pcb_close+0x1c>)
 800ec3a:	781b      	ldrb	r3, [r3, #0]
 800ec3c:	f043 0310 	orr.w	r3, r3, #16
 800ec40:	b2da      	uxtb	r2, r3
 800ec42:	4b03      	ldr	r3, [pc, #12]	; (800ec50 <tcp_trigger_input_pcb_close+0x1c>)
 800ec44:	701a      	strb	r2, [r3, #0]
}
 800ec46:	bf00      	nop
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4e:	4770      	bx	lr
 800ec50:	20008611 	.word	0x20008611

0800ec54 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b084      	sub	sp, #16
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	60f8      	str	r0, [r7, #12]
 800ec5c:	60b9      	str	r1, [r7, #8]
 800ec5e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d00a      	beq.n	800ec7c <tcp_route+0x28>
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	7a1b      	ldrb	r3, [r3, #8]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d006      	beq.n	800ec7c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	7a1b      	ldrb	r3, [r3, #8]
 800ec72:	4618      	mov	r0, r3
 800ec74:	f7fb f8aa 	bl	8009dcc <netif_get_by_index>
 800ec78:	4603      	mov	r3, r0
 800ec7a:	e003      	b.n	800ec84 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800ec7c:	6878      	ldr	r0, [r7, #4]
 800ec7e:	f003 fad5 	bl	801222c <ip4_route>
 800ec82:	4603      	mov	r3, r0
  }
}
 800ec84:	4618      	mov	r0, r3
 800ec86:	3710      	adds	r7, #16
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	bd80      	pop	{r7, pc}

0800ec8c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800ec8c:	b590      	push	{r4, r7, lr}
 800ec8e:	b087      	sub	sp, #28
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	60f8      	str	r0, [r7, #12]
 800ec94:	60b9      	str	r1, [r7, #8]
 800ec96:	603b      	str	r3, [r7, #0]
 800ec98:	4613      	mov	r3, r2
 800ec9a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d105      	bne.n	800ecae <tcp_create_segment+0x22>
 800eca2:	4b44      	ldr	r3, [pc, #272]	; (800edb4 <tcp_create_segment+0x128>)
 800eca4:	22a3      	movs	r2, #163	; 0xa3
 800eca6:	4944      	ldr	r1, [pc, #272]	; (800edb8 <tcp_create_segment+0x12c>)
 800eca8:	4844      	ldr	r0, [pc, #272]	; (800edbc <tcp_create_segment+0x130>)
 800ecaa:	f004 fd89 	bl	80137c0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800ecae:	68bb      	ldr	r3, [r7, #8]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d105      	bne.n	800ecc0 <tcp_create_segment+0x34>
 800ecb4:	4b3f      	ldr	r3, [pc, #252]	; (800edb4 <tcp_create_segment+0x128>)
 800ecb6:	22a4      	movs	r2, #164	; 0xa4
 800ecb8:	4941      	ldr	r1, [pc, #260]	; (800edc0 <tcp_create_segment+0x134>)
 800ecba:	4840      	ldr	r0, [pc, #256]	; (800edbc <tcp_create_segment+0x130>)
 800ecbc:	f004 fd80 	bl	80137c0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ecc0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ecc4:	009b      	lsls	r3, r3, #2
 800ecc6:	b2db      	uxtb	r3, r3
 800ecc8:	f003 0304 	and.w	r3, r3, #4
 800eccc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800ecce:	2003      	movs	r0, #3
 800ecd0:	f7fa fcf6 	bl	80096c0 <memp_malloc>
 800ecd4:	6138      	str	r0, [r7, #16]
 800ecd6:	693b      	ldr	r3, [r7, #16]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d104      	bne.n	800ece6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800ecdc:	68b8      	ldr	r0, [r7, #8]
 800ecde:	f7fb fbd5 	bl	800a48c <pbuf_free>
    return NULL;
 800ece2:	2300      	movs	r3, #0
 800ece4:	e061      	b.n	800edaa <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800ece6:	693b      	ldr	r3, [r7, #16]
 800ece8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ecec:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800ecee:	693b      	ldr	r3, [r7, #16]
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800ecf4:	693b      	ldr	r3, [r7, #16]
 800ecf6:	68ba      	ldr	r2, [r7, #8]
 800ecf8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800ecfa:	68bb      	ldr	r3, [r7, #8]
 800ecfc:	891a      	ldrh	r2, [r3, #8]
 800ecfe:	7dfb      	ldrb	r3, [r7, #23]
 800ed00:	b29b      	uxth	r3, r3
 800ed02:	429a      	cmp	r2, r3
 800ed04:	d205      	bcs.n	800ed12 <tcp_create_segment+0x86>
 800ed06:	4b2b      	ldr	r3, [pc, #172]	; (800edb4 <tcp_create_segment+0x128>)
 800ed08:	22b0      	movs	r2, #176	; 0xb0
 800ed0a:	492e      	ldr	r1, [pc, #184]	; (800edc4 <tcp_create_segment+0x138>)
 800ed0c:	482b      	ldr	r0, [pc, #172]	; (800edbc <tcp_create_segment+0x130>)
 800ed0e:	f004 fd57 	bl	80137c0 <iprintf>
  seg->len = p->tot_len - optlen;
 800ed12:	68bb      	ldr	r3, [r7, #8]
 800ed14:	891a      	ldrh	r2, [r3, #8]
 800ed16:	7dfb      	ldrb	r3, [r7, #23]
 800ed18:	b29b      	uxth	r3, r3
 800ed1a:	1ad3      	subs	r3, r2, r3
 800ed1c:	b29a      	uxth	r2, r3
 800ed1e:	693b      	ldr	r3, [r7, #16]
 800ed20:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800ed22:	2114      	movs	r1, #20
 800ed24:	68b8      	ldr	r0, [r7, #8]
 800ed26:	f7fb fb1b 	bl	800a360 <pbuf_add_header>
 800ed2a:	4603      	mov	r3, r0
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d004      	beq.n	800ed3a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800ed30:	6938      	ldr	r0, [r7, #16]
 800ed32:	f7fc ffe8 	bl	800bd06 <tcp_seg_free>
    return NULL;
 800ed36:	2300      	movs	r3, #0
 800ed38:	e037      	b.n	800edaa <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800ed3a:	693b      	ldr	r3, [r7, #16]
 800ed3c:	685b      	ldr	r3, [r3, #4]
 800ed3e:	685a      	ldr	r2, [r3, #4]
 800ed40:	693b      	ldr	r3, [r7, #16]
 800ed42:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	8ada      	ldrh	r2, [r3, #22]
 800ed48:	693b      	ldr	r3, [r7, #16]
 800ed4a:	68dc      	ldr	r4, [r3, #12]
 800ed4c:	4610      	mov	r0, r2
 800ed4e:	f7fa f83f 	bl	8008dd0 <lwip_htons>
 800ed52:	4603      	mov	r3, r0
 800ed54:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	8b1a      	ldrh	r2, [r3, #24]
 800ed5a:	693b      	ldr	r3, [r7, #16]
 800ed5c:	68dc      	ldr	r4, [r3, #12]
 800ed5e:	4610      	mov	r0, r2
 800ed60:	f7fa f836 	bl	8008dd0 <lwip_htons>
 800ed64:	4603      	mov	r3, r0
 800ed66:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800ed68:	693b      	ldr	r3, [r7, #16]
 800ed6a:	68dc      	ldr	r4, [r3, #12]
 800ed6c:	6838      	ldr	r0, [r7, #0]
 800ed6e:	f7fa f844 	bl	8008dfa <lwip_htonl>
 800ed72:	4603      	mov	r3, r0
 800ed74:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800ed76:	7dfb      	ldrb	r3, [r7, #23]
 800ed78:	089b      	lsrs	r3, r3, #2
 800ed7a:	b2db      	uxtb	r3, r3
 800ed7c:	b29b      	uxth	r3, r3
 800ed7e:	3305      	adds	r3, #5
 800ed80:	b29b      	uxth	r3, r3
 800ed82:	031b      	lsls	r3, r3, #12
 800ed84:	b29a      	uxth	r2, r3
 800ed86:	79fb      	ldrb	r3, [r7, #7]
 800ed88:	b29b      	uxth	r3, r3
 800ed8a:	4313      	orrs	r3, r2
 800ed8c:	b29a      	uxth	r2, r3
 800ed8e:	693b      	ldr	r3, [r7, #16]
 800ed90:	68dc      	ldr	r4, [r3, #12]
 800ed92:	4610      	mov	r0, r2
 800ed94:	f7fa f81c 	bl	8008dd0 <lwip_htons>
 800ed98:	4603      	mov	r3, r0
 800ed9a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800ed9c:	693b      	ldr	r3, [r7, #16]
 800ed9e:	68db      	ldr	r3, [r3, #12]
 800eda0:	2200      	movs	r2, #0
 800eda2:	749a      	strb	r2, [r3, #18]
 800eda4:	2200      	movs	r2, #0
 800eda6:	74da      	strb	r2, [r3, #19]
  return seg;
 800eda8:	693b      	ldr	r3, [r7, #16]
}
 800edaa:	4618      	mov	r0, r3
 800edac:	371c      	adds	r7, #28
 800edae:	46bd      	mov	sp, r7
 800edb0:	bd90      	pop	{r4, r7, pc}
 800edb2:	bf00      	nop
 800edb4:	08015e54 	.word	0x08015e54
 800edb8:	08015e88 	.word	0x08015e88
 800edbc:	08015ea8 	.word	0x08015ea8
 800edc0:	08015ed0 	.word	0x08015ed0
 800edc4:	08015ef4 	.word	0x08015ef4

0800edc8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	b086      	sub	sp, #24
 800edcc:	af00      	add	r7, sp, #0
 800edce:	607b      	str	r3, [r7, #4]
 800edd0:	4603      	mov	r3, r0
 800edd2:	73fb      	strb	r3, [r7, #15]
 800edd4:	460b      	mov	r3, r1
 800edd6:	81bb      	strh	r3, [r7, #12]
 800edd8:	4613      	mov	r3, r2
 800edda:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800eddc:	89bb      	ldrh	r3, [r7, #12]
 800edde:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d105      	bne.n	800edf2 <tcp_pbuf_prealloc+0x2a>
 800ede6:	4b30      	ldr	r3, [pc, #192]	; (800eea8 <tcp_pbuf_prealloc+0xe0>)
 800ede8:	22e8      	movs	r2, #232	; 0xe8
 800edea:	4930      	ldr	r1, [pc, #192]	; (800eeac <tcp_pbuf_prealloc+0xe4>)
 800edec:	4830      	ldr	r0, [pc, #192]	; (800eeb0 <tcp_pbuf_prealloc+0xe8>)
 800edee:	f004 fce7 	bl	80137c0 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800edf2:	6a3b      	ldr	r3, [r7, #32]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d105      	bne.n	800ee04 <tcp_pbuf_prealloc+0x3c>
 800edf8:	4b2b      	ldr	r3, [pc, #172]	; (800eea8 <tcp_pbuf_prealloc+0xe0>)
 800edfa:	22e9      	movs	r2, #233	; 0xe9
 800edfc:	492d      	ldr	r1, [pc, #180]	; (800eeb4 <tcp_pbuf_prealloc+0xec>)
 800edfe:	482c      	ldr	r0, [pc, #176]	; (800eeb0 <tcp_pbuf_prealloc+0xe8>)
 800ee00:	f004 fcde 	bl	80137c0 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800ee04:	89ba      	ldrh	r2, [r7, #12]
 800ee06:	897b      	ldrh	r3, [r7, #10]
 800ee08:	429a      	cmp	r2, r3
 800ee0a:	d221      	bcs.n	800ee50 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800ee0c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ee10:	f003 0302 	and.w	r3, r3, #2
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d111      	bne.n	800ee3c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800ee18:	6a3b      	ldr	r3, [r7, #32]
 800ee1a:	8b5b      	ldrh	r3, [r3, #26]
 800ee1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d115      	bne.n	800ee50 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800ee24:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d007      	beq.n	800ee3c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800ee2c:	6a3b      	ldr	r3, [r7, #32]
 800ee2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d103      	bne.n	800ee3c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800ee34:	6a3b      	ldr	r3, [r7, #32]
 800ee36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d009      	beq.n	800ee50 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800ee3c:	89bb      	ldrh	r3, [r7, #12]
 800ee3e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800ee42:	f023 0203 	bic.w	r2, r3, #3
 800ee46:	897b      	ldrh	r3, [r7, #10]
 800ee48:	4293      	cmp	r3, r2
 800ee4a:	bf28      	it	cs
 800ee4c:	4613      	movcs	r3, r2
 800ee4e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800ee50:	8af9      	ldrh	r1, [r7, #22]
 800ee52:	7bfb      	ldrb	r3, [r7, #15]
 800ee54:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ee58:	4618      	mov	r0, r3
 800ee5a:	f7fb f833 	bl	8009ec4 <pbuf_alloc>
 800ee5e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ee60:	693b      	ldr	r3, [r7, #16]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d101      	bne.n	800ee6a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800ee66:	2300      	movs	r3, #0
 800ee68:	e019      	b.n	800ee9e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800ee6a:	693b      	ldr	r3, [r7, #16]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d006      	beq.n	800ee80 <tcp_pbuf_prealloc+0xb8>
 800ee72:	4b0d      	ldr	r3, [pc, #52]	; (800eea8 <tcp_pbuf_prealloc+0xe0>)
 800ee74:	f240 120b 	movw	r2, #267	; 0x10b
 800ee78:	490f      	ldr	r1, [pc, #60]	; (800eeb8 <tcp_pbuf_prealloc+0xf0>)
 800ee7a:	480d      	ldr	r0, [pc, #52]	; (800eeb0 <tcp_pbuf_prealloc+0xe8>)
 800ee7c:	f004 fca0 	bl	80137c0 <iprintf>
  *oversize = p->len - length;
 800ee80:	693b      	ldr	r3, [r7, #16]
 800ee82:	895a      	ldrh	r2, [r3, #10]
 800ee84:	89bb      	ldrh	r3, [r7, #12]
 800ee86:	1ad3      	subs	r3, r2, r3
 800ee88:	b29a      	uxth	r2, r3
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800ee8e:	693b      	ldr	r3, [r7, #16]
 800ee90:	89ba      	ldrh	r2, [r7, #12]
 800ee92:	811a      	strh	r2, [r3, #8]
 800ee94:	693b      	ldr	r3, [r7, #16]
 800ee96:	891a      	ldrh	r2, [r3, #8]
 800ee98:	693b      	ldr	r3, [r7, #16]
 800ee9a:	815a      	strh	r2, [r3, #10]
  return p;
 800ee9c:	693b      	ldr	r3, [r7, #16]
}
 800ee9e:	4618      	mov	r0, r3
 800eea0:	3718      	adds	r7, #24
 800eea2:	46bd      	mov	sp, r7
 800eea4:	bd80      	pop	{r7, pc}
 800eea6:	bf00      	nop
 800eea8:	08015e54 	.word	0x08015e54
 800eeac:	08015f0c 	.word	0x08015f0c
 800eeb0:	08015ea8 	.word	0x08015ea8
 800eeb4:	08015f30 	.word	0x08015f30
 800eeb8:	08015f50 	.word	0x08015f50

0800eebc <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b082      	sub	sp, #8
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
 800eec4:	460b      	mov	r3, r1
 800eec6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d106      	bne.n	800eedc <tcp_write_checks+0x20>
 800eece:	4b33      	ldr	r3, [pc, #204]	; (800ef9c <tcp_write_checks+0xe0>)
 800eed0:	f240 1233 	movw	r2, #307	; 0x133
 800eed4:	4932      	ldr	r1, [pc, #200]	; (800efa0 <tcp_write_checks+0xe4>)
 800eed6:	4833      	ldr	r0, [pc, #204]	; (800efa4 <tcp_write_checks+0xe8>)
 800eed8:	f004 fc72 	bl	80137c0 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	7d1b      	ldrb	r3, [r3, #20]
 800eee0:	2b04      	cmp	r3, #4
 800eee2:	d00e      	beq.n	800ef02 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800eee8:	2b07      	cmp	r3, #7
 800eeea:	d00a      	beq.n	800ef02 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800eef0:	2b02      	cmp	r3, #2
 800eef2:	d006      	beq.n	800ef02 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800eef8:	2b03      	cmp	r3, #3
 800eefa:	d002      	beq.n	800ef02 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800eefc:	f06f 030a 	mvn.w	r3, #10
 800ef00:	e048      	b.n	800ef94 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800ef02:	887b      	ldrh	r3, [r7, #2]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d101      	bne.n	800ef0c <tcp_write_checks+0x50>
    return ERR_OK;
 800ef08:	2300      	movs	r3, #0
 800ef0a:	e043      	b.n	800ef94 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ef12:	887a      	ldrh	r2, [r7, #2]
 800ef14:	429a      	cmp	r2, r3
 800ef16:	d909      	bls.n	800ef2c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	8b5b      	ldrh	r3, [r3, #26]
 800ef1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef20:	b29a      	uxth	r2, r3
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800ef26:	f04f 33ff 	mov.w	r3, #4294967295
 800ef2a:	e033      	b.n	800ef94 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ef32:	2b08      	cmp	r3, #8
 800ef34:	d909      	bls.n	800ef4a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	8b5b      	ldrh	r3, [r3, #26]
 800ef3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef3e:	b29a      	uxth	r2, r3
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800ef44:	f04f 33ff 	mov.w	r3, #4294967295
 800ef48:	e024      	b.n	800ef94 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d00f      	beq.n	800ef74 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d11a      	bne.n	800ef92 <tcp_write_checks+0xd6>
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d116      	bne.n	800ef92 <tcp_write_checks+0xd6>
 800ef64:	4b0d      	ldr	r3, [pc, #52]	; (800ef9c <tcp_write_checks+0xe0>)
 800ef66:	f240 1255 	movw	r2, #341	; 0x155
 800ef6a:	490f      	ldr	r1, [pc, #60]	; (800efa8 <tcp_write_checks+0xec>)
 800ef6c:	480d      	ldr	r0, [pc, #52]	; (800efa4 <tcp_write_checks+0xe8>)
 800ef6e:	f004 fc27 	bl	80137c0 <iprintf>
 800ef72:	e00e      	b.n	800ef92 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d103      	bne.n	800ef84 <tcp_write_checks+0xc8>
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d006      	beq.n	800ef92 <tcp_write_checks+0xd6>
 800ef84:	4b05      	ldr	r3, [pc, #20]	; (800ef9c <tcp_write_checks+0xe0>)
 800ef86:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800ef8a:	4908      	ldr	r1, [pc, #32]	; (800efac <tcp_write_checks+0xf0>)
 800ef8c:	4805      	ldr	r0, [pc, #20]	; (800efa4 <tcp_write_checks+0xe8>)
 800ef8e:	f004 fc17 	bl	80137c0 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800ef92:	2300      	movs	r3, #0
}
 800ef94:	4618      	mov	r0, r3
 800ef96:	3708      	adds	r7, #8
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	bd80      	pop	{r7, pc}
 800ef9c:	08015e54 	.word	0x08015e54
 800efa0:	08015f64 	.word	0x08015f64
 800efa4:	08015ea8 	.word	0x08015ea8
 800efa8:	08015f84 	.word	0x08015f84
 800efac:	08015fc0 	.word	0x08015fc0

0800efb0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800efb0:	b590      	push	{r4, r7, lr}
 800efb2:	b09b      	sub	sp, #108	; 0x6c
 800efb4:	af04      	add	r7, sp, #16
 800efb6:	60f8      	str	r0, [r7, #12]
 800efb8:	60b9      	str	r1, [r7, #8]
 800efba:	4611      	mov	r1, r2
 800efbc:	461a      	mov	r2, r3
 800efbe:	460b      	mov	r3, r1
 800efc0:	80fb      	strh	r3, [r7, #6]
 800efc2:	4613      	mov	r3, r2
 800efc4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800efc6:	2300      	movs	r3, #0
 800efc8:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800efca:	2300      	movs	r3, #0
 800efcc:	653b      	str	r3, [r7, #80]	; 0x50
 800efce:	2300      	movs	r3, #0
 800efd0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800efd2:	2300      	movs	r3, #0
 800efd4:	64bb      	str	r3, [r7, #72]	; 0x48
 800efd6:	2300      	movs	r3, #0
 800efd8:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800efda:	2300      	movs	r3, #0
 800efdc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800efe0:	2300      	movs	r3, #0
 800efe2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800efe6:	2300      	movs	r3, #0
 800efe8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800efea:	2300      	movs	r3, #0
 800efec:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800efee:	2300      	movs	r3, #0
 800eff0:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d109      	bne.n	800f00c <tcp_write+0x5c>
 800eff8:	4ba4      	ldr	r3, [pc, #656]	; (800f28c <tcp_write+0x2dc>)
 800effa:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800effe:	49a4      	ldr	r1, [pc, #656]	; (800f290 <tcp_write+0x2e0>)
 800f000:	48a4      	ldr	r0, [pc, #656]	; (800f294 <tcp_write+0x2e4>)
 800f002:	f004 fbdd 	bl	80137c0 <iprintf>
 800f006:	f06f 030f 	mvn.w	r3, #15
 800f00a:	e32a      	b.n	800f662 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f012:	085b      	lsrs	r3, r3, #1
 800f014:	b29a      	uxth	r2, r3
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f01a:	4293      	cmp	r3, r2
 800f01c:	bf28      	it	cs
 800f01e:	4613      	movcs	r3, r2
 800f020:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800f022:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f024:	2b00      	cmp	r3, #0
 800f026:	d102      	bne.n	800f02e <tcp_write+0x7e>
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f02c:	e000      	b.n	800f030 <tcp_write+0x80>
 800f02e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f030:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800f032:	68bb      	ldr	r3, [r7, #8]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d109      	bne.n	800f04c <tcp_write+0x9c>
 800f038:	4b94      	ldr	r3, [pc, #592]	; (800f28c <tcp_write+0x2dc>)
 800f03a:	f240 12ad 	movw	r2, #429	; 0x1ad
 800f03e:	4996      	ldr	r1, [pc, #600]	; (800f298 <tcp_write+0x2e8>)
 800f040:	4894      	ldr	r0, [pc, #592]	; (800f294 <tcp_write+0x2e4>)
 800f042:	f004 fbbd 	bl	80137c0 <iprintf>
 800f046:	f06f 030f 	mvn.w	r3, #15
 800f04a:	e30a      	b.n	800f662 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800f04c:	88fb      	ldrh	r3, [r7, #6]
 800f04e:	4619      	mov	r1, r3
 800f050:	68f8      	ldr	r0, [r7, #12]
 800f052:	f7ff ff33 	bl	800eebc <tcp_write_checks>
 800f056:	4603      	mov	r3, r0
 800f058:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800f05c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800f060:	2b00      	cmp	r3, #0
 800f062:	d002      	beq.n	800f06a <tcp_write+0xba>
    return err;
 800f064:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800f068:	e2fb      	b.n	800f662 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f070:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f074:	2300      	movs	r3, #0
 800f076:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f07e:	2b00      	cmp	r3, #0
 800f080:	f000 80f6 	beq.w	800f270 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f088:	653b      	str	r3, [r7, #80]	; 0x50
 800f08a:	e002      	b.n	800f092 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800f08c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f092:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d1f8      	bne.n	800f08c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800f09a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f09c:	7a9b      	ldrb	r3, [r3, #10]
 800f09e:	009b      	lsls	r3, r3, #2
 800f0a0:	b29b      	uxth	r3, r3
 800f0a2:	f003 0304 	and.w	r3, r3, #4
 800f0a6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800f0a8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f0aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0ac:	891b      	ldrh	r3, [r3, #8]
 800f0ae:	4619      	mov	r1, r3
 800f0b0:	8c3b      	ldrh	r3, [r7, #32]
 800f0b2:	440b      	add	r3, r1
 800f0b4:	429a      	cmp	r2, r3
 800f0b6:	da06      	bge.n	800f0c6 <tcp_write+0x116>
 800f0b8:	4b74      	ldr	r3, [pc, #464]	; (800f28c <tcp_write+0x2dc>)
 800f0ba:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f0be:	4977      	ldr	r1, [pc, #476]	; (800f29c <tcp_write+0x2ec>)
 800f0c0:	4874      	ldr	r0, [pc, #464]	; (800f294 <tcp_write+0x2e4>)
 800f0c2:	f004 fb7d 	bl	80137c0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800f0c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0c8:	891a      	ldrh	r2, [r3, #8]
 800f0ca:	8c3b      	ldrh	r3, [r7, #32]
 800f0cc:	4413      	add	r3, r2
 800f0ce:	b29b      	uxth	r3, r3
 800f0d0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f0d2:	1ad3      	subs	r3, r2, r3
 800f0d4:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f0dc:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800f0de:	8a7b      	ldrh	r3, [r7, #18]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d026      	beq.n	800f132 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800f0e4:	8a7b      	ldrh	r3, [r7, #18]
 800f0e6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f0e8:	429a      	cmp	r2, r3
 800f0ea:	d206      	bcs.n	800f0fa <tcp_write+0x14a>
 800f0ec:	4b67      	ldr	r3, [pc, #412]	; (800f28c <tcp_write+0x2dc>)
 800f0ee:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800f0f2:	496b      	ldr	r1, [pc, #428]	; (800f2a0 <tcp_write+0x2f0>)
 800f0f4:	4867      	ldr	r0, [pc, #412]	; (800f294 <tcp_write+0x2e4>)
 800f0f6:	f004 fb63 	bl	80137c0 <iprintf>
      seg = last_unsent;
 800f0fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0fc:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800f0fe:	8a7b      	ldrh	r3, [r7, #18]
 800f100:	88fa      	ldrh	r2, [r7, #6]
 800f102:	4293      	cmp	r3, r2
 800f104:	bf28      	it	cs
 800f106:	4613      	movcs	r3, r2
 800f108:	b29b      	uxth	r3, r3
 800f10a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f10c:	4293      	cmp	r3, r2
 800f10e:	bf28      	it	cs
 800f110:	4613      	movcs	r3, r2
 800f112:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800f114:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f118:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f11a:	4413      	add	r3, r2
 800f11c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800f120:	8a7a      	ldrh	r2, [r7, #18]
 800f122:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f124:	1ad3      	subs	r3, r2, r3
 800f126:	b29b      	uxth	r3, r3
 800f128:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800f12a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f12c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f12e:	1ad3      	subs	r3, r2, r3
 800f130:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800f132:	8a7b      	ldrh	r3, [r7, #18]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d00b      	beq.n	800f150 <tcp_write+0x1a0>
 800f138:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f13c:	88fb      	ldrh	r3, [r7, #6]
 800f13e:	429a      	cmp	r2, r3
 800f140:	d006      	beq.n	800f150 <tcp_write+0x1a0>
 800f142:	4b52      	ldr	r3, [pc, #328]	; (800f28c <tcp_write+0x2dc>)
 800f144:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f148:	4956      	ldr	r1, [pc, #344]	; (800f2a4 <tcp_write+0x2f4>)
 800f14a:	4852      	ldr	r0, [pc, #328]	; (800f294 <tcp_write+0x2e4>)
 800f14c:	f004 fb38 	bl	80137c0 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800f150:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f154:	88fb      	ldrh	r3, [r7, #6]
 800f156:	429a      	cmp	r2, r3
 800f158:	f080 8167 	bcs.w	800f42a <tcp_write+0x47a>
 800f15c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f15e:	2b00      	cmp	r3, #0
 800f160:	f000 8163 	beq.w	800f42a <tcp_write+0x47a>
 800f164:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f166:	891b      	ldrh	r3, [r3, #8]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	f000 815e 	beq.w	800f42a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800f16e:	88fa      	ldrh	r2, [r7, #6]
 800f170:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f174:	1ad2      	subs	r2, r2, r3
 800f176:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f178:	4293      	cmp	r3, r2
 800f17a:	bfa8      	it	ge
 800f17c:	4613      	movge	r3, r2
 800f17e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800f180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f182:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800f184:	797b      	ldrb	r3, [r7, #5]
 800f186:	f003 0301 	and.w	r3, r3, #1
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d027      	beq.n	800f1de <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800f18e:	f107 0012 	add.w	r0, r7, #18
 800f192:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f194:	8bf9      	ldrh	r1, [r7, #30]
 800f196:	2301      	movs	r3, #1
 800f198:	9302      	str	r3, [sp, #8]
 800f19a:	797b      	ldrb	r3, [r7, #5]
 800f19c:	9301      	str	r3, [sp, #4]
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	9300      	str	r3, [sp, #0]
 800f1a2:	4603      	mov	r3, r0
 800f1a4:	2000      	movs	r0, #0
 800f1a6:	f7ff fe0f 	bl	800edc8 <tcp_pbuf_prealloc>
 800f1aa:	6578      	str	r0, [r7, #84]	; 0x54
 800f1ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	f000 8225 	beq.w	800f5fe <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800f1b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f1b6:	6858      	ldr	r0, [r3, #4]
 800f1b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f1bc:	68ba      	ldr	r2, [r7, #8]
 800f1be:	4413      	add	r3, r2
 800f1c0:	8bfa      	ldrh	r2, [r7, #30]
 800f1c2:	4619      	mov	r1, r3
 800f1c4:	f004 fa52 	bl	801366c <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800f1c8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f1ca:	f7fb f9e7 	bl	800a59c <pbuf_clen>
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	461a      	mov	r2, r3
 800f1d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f1d6:	4413      	add	r3, r2
 800f1d8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800f1dc:	e041      	b.n	800f262 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800f1de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1e0:	685b      	ldr	r3, [r3, #4]
 800f1e2:	637b      	str	r3, [r7, #52]	; 0x34
 800f1e4:	e002      	b.n	800f1ec <tcp_write+0x23c>
 800f1e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	637b      	str	r3, [r7, #52]	; 0x34
 800f1ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d1f8      	bne.n	800f1e6 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800f1f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1f6:	7b1b      	ldrb	r3, [r3, #12]
 800f1f8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d115      	bne.n	800f22c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800f200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f202:	685b      	ldr	r3, [r3, #4]
 800f204:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f206:	8952      	ldrh	r2, [r2, #10]
 800f208:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800f20a:	68ba      	ldr	r2, [r7, #8]
 800f20c:	429a      	cmp	r2, r3
 800f20e:	d10d      	bne.n	800f22c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800f210:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f214:	2b00      	cmp	r3, #0
 800f216:	d006      	beq.n	800f226 <tcp_write+0x276>
 800f218:	4b1c      	ldr	r3, [pc, #112]	; (800f28c <tcp_write+0x2dc>)
 800f21a:	f240 2231 	movw	r2, #561	; 0x231
 800f21e:	4922      	ldr	r1, [pc, #136]	; (800f2a8 <tcp_write+0x2f8>)
 800f220:	481c      	ldr	r0, [pc, #112]	; (800f294 <tcp_write+0x2e4>)
 800f222:	f004 facd 	bl	80137c0 <iprintf>
          extendlen = seglen;
 800f226:	8bfb      	ldrh	r3, [r7, #30]
 800f228:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800f22a:	e01a      	b.n	800f262 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800f22c:	8bfb      	ldrh	r3, [r7, #30]
 800f22e:	2201      	movs	r2, #1
 800f230:	4619      	mov	r1, r3
 800f232:	2000      	movs	r0, #0
 800f234:	f7fa fe46 	bl	8009ec4 <pbuf_alloc>
 800f238:	6578      	str	r0, [r7, #84]	; 0x54
 800f23a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	f000 81e0 	beq.w	800f602 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800f242:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f246:	68ba      	ldr	r2, [r7, #8]
 800f248:	441a      	add	r2, r3
 800f24a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f24c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800f24e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f250:	f7fb f9a4 	bl	800a59c <pbuf_clen>
 800f254:	4603      	mov	r3, r0
 800f256:	461a      	mov	r2, r3
 800f258:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f25c:	4413      	add	r3, r2
 800f25e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800f262:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f266:	8bfb      	ldrh	r3, [r7, #30]
 800f268:	4413      	add	r3, r2
 800f26a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800f26e:	e0dc      	b.n	800f42a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f276:	2b00      	cmp	r3, #0
 800f278:	f000 80d7 	beq.w	800f42a <tcp_write+0x47a>
 800f27c:	4b03      	ldr	r3, [pc, #12]	; (800f28c <tcp_write+0x2dc>)
 800f27e:	f240 224a 	movw	r2, #586	; 0x24a
 800f282:	490a      	ldr	r1, [pc, #40]	; (800f2ac <tcp_write+0x2fc>)
 800f284:	4803      	ldr	r0, [pc, #12]	; (800f294 <tcp_write+0x2e4>)
 800f286:	f004 fa9b 	bl	80137c0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800f28a:	e0ce      	b.n	800f42a <tcp_write+0x47a>
 800f28c:	08015e54 	.word	0x08015e54
 800f290:	08015ff4 	.word	0x08015ff4
 800f294:	08015ea8 	.word	0x08015ea8
 800f298:	0801600c 	.word	0x0801600c
 800f29c:	08016040 	.word	0x08016040
 800f2a0:	08016058 	.word	0x08016058
 800f2a4:	08016078 	.word	0x08016078
 800f2a8:	08016098 	.word	0x08016098
 800f2ac:	080160c4 	.word	0x080160c4
    struct pbuf *p;
    u16_t left = len - pos;
 800f2b0:	88fa      	ldrh	r2, [r7, #6]
 800f2b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f2b6:	1ad3      	subs	r3, r2, r3
 800f2b8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800f2ba:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f2be:	b29b      	uxth	r3, r3
 800f2c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f2c2:	1ad3      	subs	r3, r2, r3
 800f2c4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800f2c6:	8b7a      	ldrh	r2, [r7, #26]
 800f2c8:	8bbb      	ldrh	r3, [r7, #28]
 800f2ca:	4293      	cmp	r3, r2
 800f2cc:	bf28      	it	cs
 800f2ce:	4613      	movcs	r3, r2
 800f2d0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800f2d2:	797b      	ldrb	r3, [r7, #5]
 800f2d4:	f003 0301 	and.w	r3, r3, #1
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d036      	beq.n	800f34a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800f2dc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f2e0:	b29a      	uxth	r2, r3
 800f2e2:	8b3b      	ldrh	r3, [r7, #24]
 800f2e4:	4413      	add	r3, r2
 800f2e6:	b299      	uxth	r1, r3
 800f2e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	bf0c      	ite	eq
 800f2ee:	2301      	moveq	r3, #1
 800f2f0:	2300      	movne	r3, #0
 800f2f2:	b2db      	uxtb	r3, r3
 800f2f4:	f107 0012 	add.w	r0, r7, #18
 800f2f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f2fa:	9302      	str	r3, [sp, #8]
 800f2fc:	797b      	ldrb	r3, [r7, #5]
 800f2fe:	9301      	str	r3, [sp, #4]
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	9300      	str	r3, [sp, #0]
 800f304:	4603      	mov	r3, r0
 800f306:	2036      	movs	r0, #54	; 0x36
 800f308:	f7ff fd5e 	bl	800edc8 <tcp_pbuf_prealloc>
 800f30c:	6338      	str	r0, [r7, #48]	; 0x30
 800f30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f310:	2b00      	cmp	r3, #0
 800f312:	f000 8178 	beq.w	800f606 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800f316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f318:	895b      	ldrh	r3, [r3, #10]
 800f31a:	8b3a      	ldrh	r2, [r7, #24]
 800f31c:	429a      	cmp	r2, r3
 800f31e:	d906      	bls.n	800f32e <tcp_write+0x37e>
 800f320:	4b8c      	ldr	r3, [pc, #560]	; (800f554 <tcp_write+0x5a4>)
 800f322:	f240 2266 	movw	r2, #614	; 0x266
 800f326:	498c      	ldr	r1, [pc, #560]	; (800f558 <tcp_write+0x5a8>)
 800f328:	488c      	ldr	r0, [pc, #560]	; (800f55c <tcp_write+0x5ac>)
 800f32a:	f004 fa49 	bl	80137c0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800f32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f330:	685a      	ldr	r2, [r3, #4]
 800f332:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f336:	18d0      	adds	r0, r2, r3
 800f338:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f33c:	68ba      	ldr	r2, [r7, #8]
 800f33e:	4413      	add	r3, r2
 800f340:	8b3a      	ldrh	r2, [r7, #24]
 800f342:	4619      	mov	r1, r3
 800f344:	f004 f992 	bl	801366c <memcpy>
 800f348:	e02f      	b.n	800f3aa <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800f34a:	8a7b      	ldrh	r3, [r7, #18]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d006      	beq.n	800f35e <tcp_write+0x3ae>
 800f350:	4b80      	ldr	r3, [pc, #512]	; (800f554 <tcp_write+0x5a4>)
 800f352:	f240 2271 	movw	r2, #625	; 0x271
 800f356:	4982      	ldr	r1, [pc, #520]	; (800f560 <tcp_write+0x5b0>)
 800f358:	4880      	ldr	r0, [pc, #512]	; (800f55c <tcp_write+0x5ac>)
 800f35a:	f004 fa31 	bl	80137c0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800f35e:	8b3b      	ldrh	r3, [r7, #24]
 800f360:	2201      	movs	r2, #1
 800f362:	4619      	mov	r1, r3
 800f364:	2036      	movs	r0, #54	; 0x36
 800f366:	f7fa fdad 	bl	8009ec4 <pbuf_alloc>
 800f36a:	6178      	str	r0, [r7, #20]
 800f36c:	697b      	ldr	r3, [r7, #20]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	f000 814b 	beq.w	800f60a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800f374:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f378:	68ba      	ldr	r2, [r7, #8]
 800f37a:	441a      	add	r2, r3
 800f37c:	697b      	ldr	r3, [r7, #20]
 800f37e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800f380:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f384:	b29b      	uxth	r3, r3
 800f386:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f38a:	4619      	mov	r1, r3
 800f38c:	2036      	movs	r0, #54	; 0x36
 800f38e:	f7fa fd99 	bl	8009ec4 <pbuf_alloc>
 800f392:	6338      	str	r0, [r7, #48]	; 0x30
 800f394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f396:	2b00      	cmp	r3, #0
 800f398:	d103      	bne.n	800f3a2 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800f39a:	6978      	ldr	r0, [r7, #20]
 800f39c:	f7fb f876 	bl	800a48c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800f3a0:	e136      	b.n	800f610 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800f3a2:	6979      	ldr	r1, [r7, #20]
 800f3a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f3a6:	f7fb f933 	bl	800a610 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800f3aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f3ac:	f7fb f8f6 	bl	800a59c <pbuf_clen>
 800f3b0:	4603      	mov	r3, r0
 800f3b2:	461a      	mov	r2, r3
 800f3b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f3b8:	4413      	add	r3, r2
 800f3ba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800f3be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f3c2:	2b09      	cmp	r3, #9
 800f3c4:	d903      	bls.n	800f3ce <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800f3c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f3c8:	f7fb f860 	bl	800a48c <pbuf_free>
      goto memerr;
 800f3cc:	e120      	b.n	800f610 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f3d2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f3d6:	441a      	add	r2, r3
 800f3d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f3dc:	9300      	str	r3, [sp, #0]
 800f3de:	4613      	mov	r3, r2
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f3e4:	68f8      	ldr	r0, [r7, #12]
 800f3e6:	f7ff fc51 	bl	800ec8c <tcp_create_segment>
 800f3ea:	64f8      	str	r0, [r7, #76]	; 0x4c
 800f3ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	f000 810d 	beq.w	800f60e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800f3f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d102      	bne.n	800f400 <tcp_write+0x450>
      queue = seg;
 800f3fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f3fc:	647b      	str	r3, [r7, #68]	; 0x44
 800f3fe:	e00c      	b.n	800f41a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800f400:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f402:	2b00      	cmp	r3, #0
 800f404:	d106      	bne.n	800f414 <tcp_write+0x464>
 800f406:	4b53      	ldr	r3, [pc, #332]	; (800f554 <tcp_write+0x5a4>)
 800f408:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f40c:	4955      	ldr	r1, [pc, #340]	; (800f564 <tcp_write+0x5b4>)
 800f40e:	4853      	ldr	r0, [pc, #332]	; (800f55c <tcp_write+0x5ac>)
 800f410:	f004 f9d6 	bl	80137c0 <iprintf>
      prev_seg->next = seg;
 800f414:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f416:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f418:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800f41a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f41c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800f41e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f422:	8b3b      	ldrh	r3, [r7, #24]
 800f424:	4413      	add	r3, r2
 800f426:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800f42a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f42e:	88fb      	ldrh	r3, [r7, #6]
 800f430:	429a      	cmp	r2, r3
 800f432:	f4ff af3d 	bcc.w	800f2b0 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800f436:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d02c      	beq.n	800f496 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800f43c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f43e:	685b      	ldr	r3, [r3, #4]
 800f440:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f442:	e01e      	b.n	800f482 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800f444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f446:	891a      	ldrh	r2, [r3, #8]
 800f448:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f44a:	4413      	add	r3, r2
 800f44c:	b29a      	uxth	r2, r3
 800f44e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f450:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800f452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d110      	bne.n	800f47c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800f45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f45c:	685b      	ldr	r3, [r3, #4]
 800f45e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f460:	8952      	ldrh	r2, [r2, #10]
 800f462:	4413      	add	r3, r2
 800f464:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f466:	68b9      	ldr	r1, [r7, #8]
 800f468:	4618      	mov	r0, r3
 800f46a:	f004 f8ff 	bl	801366c <memcpy>
        p->len += oversize_used;
 800f46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f470:	895a      	ldrh	r2, [r3, #10]
 800f472:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f474:	4413      	add	r3, r2
 800f476:	b29a      	uxth	r2, r3
 800f478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f47a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800f47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f484:	2b00      	cmp	r3, #0
 800f486:	d1dd      	bne.n	800f444 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800f488:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f48a:	891a      	ldrh	r2, [r3, #8]
 800f48c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f48e:	4413      	add	r3, r2
 800f490:	b29a      	uxth	r2, r3
 800f492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f494:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800f496:	8a7a      	ldrh	r2, [r7, #18]
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800f49e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d018      	beq.n	800f4d6 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800f4a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d106      	bne.n	800f4b8 <tcp_write+0x508>
 800f4aa:	4b2a      	ldr	r3, [pc, #168]	; (800f554 <tcp_write+0x5a4>)
 800f4ac:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800f4b0:	492d      	ldr	r1, [pc, #180]	; (800f568 <tcp_write+0x5b8>)
 800f4b2:	482a      	ldr	r0, [pc, #168]	; (800f55c <tcp_write+0x5ac>)
 800f4b4:	f004 f984 	bl	80137c0 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800f4b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4ba:	685b      	ldr	r3, [r3, #4]
 800f4bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f4be:	4618      	mov	r0, r3
 800f4c0:	f7fb f8a6 	bl	800a610 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800f4c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4c6:	891a      	ldrh	r2, [r3, #8]
 800f4c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f4ca:	891b      	ldrh	r3, [r3, #8]
 800f4cc:	4413      	add	r3, r2
 800f4ce:	b29a      	uxth	r2, r3
 800f4d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4d2:	811a      	strh	r2, [r3, #8]
 800f4d4:	e037      	b.n	800f546 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800f4d6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d034      	beq.n	800f546 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800f4dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d003      	beq.n	800f4ea <tcp_write+0x53a>
 800f4e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4e4:	685b      	ldr	r3, [r3, #4]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d106      	bne.n	800f4f8 <tcp_write+0x548>
 800f4ea:	4b1a      	ldr	r3, [pc, #104]	; (800f554 <tcp_write+0x5a4>)
 800f4ec:	f240 22e6 	movw	r2, #742	; 0x2e6
 800f4f0:	491e      	ldr	r1, [pc, #120]	; (800f56c <tcp_write+0x5bc>)
 800f4f2:	481a      	ldr	r0, [pc, #104]	; (800f55c <tcp_write+0x5ac>)
 800f4f4:	f004 f964 	bl	80137c0 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800f4f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4fa:	685b      	ldr	r3, [r3, #4]
 800f4fc:	62bb      	str	r3, [r7, #40]	; 0x28
 800f4fe:	e009      	b.n	800f514 <tcp_write+0x564>
      p->tot_len += extendlen;
 800f500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f502:	891a      	ldrh	r2, [r3, #8]
 800f504:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f506:	4413      	add	r3, r2
 800f508:	b29a      	uxth	r2, r3
 800f50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f50c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800f50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	62bb      	str	r3, [r7, #40]	; 0x28
 800f514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d1f1      	bne.n	800f500 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800f51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f51e:	891a      	ldrh	r2, [r3, #8]
 800f520:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f522:	4413      	add	r3, r2
 800f524:	b29a      	uxth	r2, r3
 800f526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f528:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800f52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f52c:	895a      	ldrh	r2, [r3, #10]
 800f52e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f530:	4413      	add	r3, r2
 800f532:	b29a      	uxth	r2, r3
 800f534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f536:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800f538:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f53a:	891a      	ldrh	r2, [r3, #8]
 800f53c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f53e:	4413      	add	r3, r2
 800f540:	b29a      	uxth	r2, r3
 800f542:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f544:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800f546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d111      	bne.n	800f570 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f550:	66da      	str	r2, [r3, #108]	; 0x6c
 800f552:	e010      	b.n	800f576 <tcp_write+0x5c6>
 800f554:	08015e54 	.word	0x08015e54
 800f558:	080160f4 	.word	0x080160f4
 800f55c:	08015ea8 	.word	0x08015ea8
 800f560:	08016134 	.word	0x08016134
 800f564:	08016144 	.word	0x08016144
 800f568:	08016158 	.word	0x08016158
 800f56c:	08016190 	.word	0x08016190
  } else {
    last_unsent->next = queue;
 800f570:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f572:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f574:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f57a:	88fb      	ldrh	r3, [r7, #6]
 800f57c:	441a      	add	r2, r3
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800f588:	88fb      	ldrh	r3, [r7, #6]
 800f58a:	1ad3      	subs	r3, r2, r3
 800f58c:	b29a      	uxth	r2, r3
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800f59a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d00e      	beq.n	800f5c6 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d10a      	bne.n	800f5c6 <tcp_write+0x616>
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d106      	bne.n	800f5c6 <tcp_write+0x616>
 800f5b8:	4b2c      	ldr	r3, [pc, #176]	; (800f66c <tcp_write+0x6bc>)
 800f5ba:	f240 3212 	movw	r2, #786	; 0x312
 800f5be:	492c      	ldr	r1, [pc, #176]	; (800f670 <tcp_write+0x6c0>)
 800f5c0:	482c      	ldr	r0, [pc, #176]	; (800f674 <tcp_write+0x6c4>)
 800f5c2:	f004 f8fd 	bl	80137c0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800f5c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d016      	beq.n	800f5fa <tcp_write+0x64a>
 800f5cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5ce:	68db      	ldr	r3, [r3, #12]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d012      	beq.n	800f5fa <tcp_write+0x64a>
 800f5d4:	797b      	ldrb	r3, [r7, #5]
 800f5d6:	f003 0302 	and.w	r3, r3, #2
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d10d      	bne.n	800f5fa <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800f5de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5e0:	68db      	ldr	r3, [r3, #12]
 800f5e2:	899b      	ldrh	r3, [r3, #12]
 800f5e4:	b29c      	uxth	r4, r3
 800f5e6:	2008      	movs	r0, #8
 800f5e8:	f7f9 fbf2 	bl	8008dd0 <lwip_htons>
 800f5ec:	4603      	mov	r3, r0
 800f5ee:	461a      	mov	r2, r3
 800f5f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5f2:	68db      	ldr	r3, [r3, #12]
 800f5f4:	4322      	orrs	r2, r4
 800f5f6:	b292      	uxth	r2, r2
 800f5f8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	e031      	b.n	800f662 <tcp_write+0x6b2>
          goto memerr;
 800f5fe:	bf00      	nop
 800f600:	e006      	b.n	800f610 <tcp_write+0x660>
            goto memerr;
 800f602:	bf00      	nop
 800f604:	e004      	b.n	800f610 <tcp_write+0x660>
        goto memerr;
 800f606:	bf00      	nop
 800f608:	e002      	b.n	800f610 <tcp_write+0x660>
        goto memerr;
 800f60a:	bf00      	nop
 800f60c:	e000      	b.n	800f610 <tcp_write+0x660>
      goto memerr;
 800f60e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	8b5b      	ldrh	r3, [r3, #26]
 800f614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f618:	b29a      	uxth	r2, r3
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800f61e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f620:	2b00      	cmp	r3, #0
 800f622:	d002      	beq.n	800f62a <tcp_write+0x67a>
    pbuf_free(concat_p);
 800f624:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f626:	f7fa ff31 	bl	800a48c <pbuf_free>
  }
  if (queue != NULL) {
 800f62a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d002      	beq.n	800f636 <tcp_write+0x686>
    tcp_segs_free(queue);
 800f630:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f632:	f7fc fb53 	bl	800bcdc <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d00e      	beq.n	800f65e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f644:	2b00      	cmp	r3, #0
 800f646:	d10a      	bne.n	800f65e <tcp_write+0x6ae>
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d106      	bne.n	800f65e <tcp_write+0x6ae>
 800f650:	4b06      	ldr	r3, [pc, #24]	; (800f66c <tcp_write+0x6bc>)
 800f652:	f240 3227 	movw	r2, #807	; 0x327
 800f656:	4906      	ldr	r1, [pc, #24]	; (800f670 <tcp_write+0x6c0>)
 800f658:	4806      	ldr	r0, [pc, #24]	; (800f674 <tcp_write+0x6c4>)
 800f65a:	f004 f8b1 	bl	80137c0 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800f65e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f662:	4618      	mov	r0, r3
 800f664:	375c      	adds	r7, #92	; 0x5c
 800f666:	46bd      	mov	sp, r7
 800f668:	bd90      	pop	{r4, r7, pc}
 800f66a:	bf00      	nop
 800f66c:	08015e54 	.word	0x08015e54
 800f670:	080161c8 	.word	0x080161c8
 800f674:	08015ea8 	.word	0x08015ea8

0800f678 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800f678:	b590      	push	{r4, r7, lr}
 800f67a:	b08b      	sub	sp, #44	; 0x2c
 800f67c:	af02      	add	r7, sp, #8
 800f67e:	6078      	str	r0, [r7, #4]
 800f680:	460b      	mov	r3, r1
 800f682:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800f684:	2300      	movs	r3, #0
 800f686:	61fb      	str	r3, [r7, #28]
 800f688:	2300      	movs	r3, #0
 800f68a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800f68c:	2300      	movs	r3, #0
 800f68e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	2b00      	cmp	r3, #0
 800f694:	d106      	bne.n	800f6a4 <tcp_split_unsent_seg+0x2c>
 800f696:	4b95      	ldr	r3, [pc, #596]	; (800f8ec <tcp_split_unsent_seg+0x274>)
 800f698:	f240 324b 	movw	r2, #843	; 0x34b
 800f69c:	4994      	ldr	r1, [pc, #592]	; (800f8f0 <tcp_split_unsent_seg+0x278>)
 800f69e:	4895      	ldr	r0, [pc, #596]	; (800f8f4 <tcp_split_unsent_seg+0x27c>)
 800f6a0:	f004 f88e 	bl	80137c0 <iprintf>

  useg = pcb->unsent;
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6a8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800f6aa:	697b      	ldr	r3, [r7, #20]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d102      	bne.n	800f6b6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800f6b0:	f04f 33ff 	mov.w	r3, #4294967295
 800f6b4:	e116      	b.n	800f8e4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800f6b6:	887b      	ldrh	r3, [r7, #2]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d109      	bne.n	800f6d0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800f6bc:	4b8b      	ldr	r3, [pc, #556]	; (800f8ec <tcp_split_unsent_seg+0x274>)
 800f6be:	f240 3253 	movw	r2, #851	; 0x353
 800f6c2:	498d      	ldr	r1, [pc, #564]	; (800f8f8 <tcp_split_unsent_seg+0x280>)
 800f6c4:	488b      	ldr	r0, [pc, #556]	; (800f8f4 <tcp_split_unsent_seg+0x27c>)
 800f6c6:	f004 f87b 	bl	80137c0 <iprintf>
    return ERR_VAL;
 800f6ca:	f06f 0305 	mvn.w	r3, #5
 800f6ce:	e109      	b.n	800f8e4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800f6d0:	697b      	ldr	r3, [r7, #20]
 800f6d2:	891b      	ldrh	r3, [r3, #8]
 800f6d4:	887a      	ldrh	r2, [r7, #2]
 800f6d6:	429a      	cmp	r2, r3
 800f6d8:	d301      	bcc.n	800f6de <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800f6da:	2300      	movs	r3, #0
 800f6dc:	e102      	b.n	800f8e4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f6e2:	887a      	ldrh	r2, [r7, #2]
 800f6e4:	429a      	cmp	r2, r3
 800f6e6:	d906      	bls.n	800f6f6 <tcp_split_unsent_seg+0x7e>
 800f6e8:	4b80      	ldr	r3, [pc, #512]	; (800f8ec <tcp_split_unsent_seg+0x274>)
 800f6ea:	f240 325b 	movw	r2, #859	; 0x35b
 800f6ee:	4983      	ldr	r1, [pc, #524]	; (800f8fc <tcp_split_unsent_seg+0x284>)
 800f6f0:	4880      	ldr	r0, [pc, #512]	; (800f8f4 <tcp_split_unsent_seg+0x27c>)
 800f6f2:	f004 f865 	bl	80137c0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800f6f6:	697b      	ldr	r3, [r7, #20]
 800f6f8:	891b      	ldrh	r3, [r3, #8]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d106      	bne.n	800f70c <tcp_split_unsent_seg+0x94>
 800f6fe:	4b7b      	ldr	r3, [pc, #492]	; (800f8ec <tcp_split_unsent_seg+0x274>)
 800f700:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800f704:	497e      	ldr	r1, [pc, #504]	; (800f900 <tcp_split_unsent_seg+0x288>)
 800f706:	487b      	ldr	r0, [pc, #492]	; (800f8f4 <tcp_split_unsent_seg+0x27c>)
 800f708:	f004 f85a 	bl	80137c0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800f70c:	697b      	ldr	r3, [r7, #20]
 800f70e:	7a9b      	ldrb	r3, [r3, #10]
 800f710:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800f712:	7bfb      	ldrb	r3, [r7, #15]
 800f714:	009b      	lsls	r3, r3, #2
 800f716:	b2db      	uxtb	r3, r3
 800f718:	f003 0304 	and.w	r3, r3, #4
 800f71c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800f71e:	697b      	ldr	r3, [r7, #20]
 800f720:	891a      	ldrh	r2, [r3, #8]
 800f722:	887b      	ldrh	r3, [r7, #2]
 800f724:	1ad3      	subs	r3, r2, r3
 800f726:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800f728:	7bbb      	ldrb	r3, [r7, #14]
 800f72a:	b29a      	uxth	r2, r3
 800f72c:	89bb      	ldrh	r3, [r7, #12]
 800f72e:	4413      	add	r3, r2
 800f730:	b29b      	uxth	r3, r3
 800f732:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f736:	4619      	mov	r1, r3
 800f738:	2036      	movs	r0, #54	; 0x36
 800f73a:	f7fa fbc3 	bl	8009ec4 <pbuf_alloc>
 800f73e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f740:	693b      	ldr	r3, [r7, #16]
 800f742:	2b00      	cmp	r3, #0
 800f744:	f000 80b7 	beq.w	800f8b6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800f748:	697b      	ldr	r3, [r7, #20]
 800f74a:	685b      	ldr	r3, [r3, #4]
 800f74c:	891a      	ldrh	r2, [r3, #8]
 800f74e:	697b      	ldr	r3, [r7, #20]
 800f750:	891b      	ldrh	r3, [r3, #8]
 800f752:	1ad3      	subs	r3, r2, r3
 800f754:	b29a      	uxth	r2, r3
 800f756:	887b      	ldrh	r3, [r7, #2]
 800f758:	4413      	add	r3, r2
 800f75a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800f75c:	697b      	ldr	r3, [r7, #20]
 800f75e:	6858      	ldr	r0, [r3, #4]
 800f760:	693b      	ldr	r3, [r7, #16]
 800f762:	685a      	ldr	r2, [r3, #4]
 800f764:	7bbb      	ldrb	r3, [r7, #14]
 800f766:	18d1      	adds	r1, r2, r3
 800f768:	897b      	ldrh	r3, [r7, #10]
 800f76a:	89ba      	ldrh	r2, [r7, #12]
 800f76c:	f7fb f888 	bl	800a880 <pbuf_copy_partial>
 800f770:	4603      	mov	r3, r0
 800f772:	461a      	mov	r2, r3
 800f774:	89bb      	ldrh	r3, [r7, #12]
 800f776:	4293      	cmp	r3, r2
 800f778:	f040 809f 	bne.w	800f8ba <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800f77c:	697b      	ldr	r3, [r7, #20]
 800f77e:	68db      	ldr	r3, [r3, #12]
 800f780:	899b      	ldrh	r3, [r3, #12]
 800f782:	b29b      	uxth	r3, r3
 800f784:	4618      	mov	r0, r3
 800f786:	f7f9 fb23 	bl	8008dd0 <lwip_htons>
 800f78a:	4603      	mov	r3, r0
 800f78c:	b2db      	uxtb	r3, r3
 800f78e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f792:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800f794:	2300      	movs	r3, #0
 800f796:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800f798:	7efb      	ldrb	r3, [r7, #27]
 800f79a:	f003 0308 	and.w	r3, r3, #8
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d007      	beq.n	800f7b2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800f7a2:	7efb      	ldrb	r3, [r7, #27]
 800f7a4:	f023 0308 	bic.w	r3, r3, #8
 800f7a8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800f7aa:	7ebb      	ldrb	r3, [r7, #26]
 800f7ac:	f043 0308 	orr.w	r3, r3, #8
 800f7b0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800f7b2:	7efb      	ldrb	r3, [r7, #27]
 800f7b4:	f003 0301 	and.w	r3, r3, #1
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d007      	beq.n	800f7cc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800f7bc:	7efb      	ldrb	r3, [r7, #27]
 800f7be:	f023 0301 	bic.w	r3, r3, #1
 800f7c2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800f7c4:	7ebb      	ldrb	r3, [r7, #26]
 800f7c6:	f043 0301 	orr.w	r3, r3, #1
 800f7ca:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800f7cc:	697b      	ldr	r3, [r7, #20]
 800f7ce:	68db      	ldr	r3, [r3, #12]
 800f7d0:	685b      	ldr	r3, [r3, #4]
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	f7f9 fb11 	bl	8008dfa <lwip_htonl>
 800f7d8:	4602      	mov	r2, r0
 800f7da:	887b      	ldrh	r3, [r7, #2]
 800f7dc:	18d1      	adds	r1, r2, r3
 800f7de:	7eba      	ldrb	r2, [r7, #26]
 800f7e0:	7bfb      	ldrb	r3, [r7, #15]
 800f7e2:	9300      	str	r3, [sp, #0]
 800f7e4:	460b      	mov	r3, r1
 800f7e6:	6939      	ldr	r1, [r7, #16]
 800f7e8:	6878      	ldr	r0, [r7, #4]
 800f7ea:	f7ff fa4f 	bl	800ec8c <tcp_create_segment>
 800f7ee:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800f7f0:	69fb      	ldr	r3, [r7, #28]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d063      	beq.n	800f8be <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800f7f6:	697b      	ldr	r3, [r7, #20]
 800f7f8:	685b      	ldr	r3, [r3, #4]
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	f7fa fece 	bl	800a59c <pbuf_clen>
 800f800:	4603      	mov	r3, r0
 800f802:	461a      	mov	r2, r3
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f80a:	1a9b      	subs	r3, r3, r2
 800f80c:	b29a      	uxth	r2, r3
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800f814:	697b      	ldr	r3, [r7, #20]
 800f816:	6858      	ldr	r0, [r3, #4]
 800f818:	697b      	ldr	r3, [r7, #20]
 800f81a:	685b      	ldr	r3, [r3, #4]
 800f81c:	891a      	ldrh	r2, [r3, #8]
 800f81e:	89bb      	ldrh	r3, [r7, #12]
 800f820:	1ad3      	subs	r3, r2, r3
 800f822:	b29b      	uxth	r3, r3
 800f824:	4619      	mov	r1, r3
 800f826:	f7fa fcab 	bl	800a180 <pbuf_realloc>
  useg->len -= remainder;
 800f82a:	697b      	ldr	r3, [r7, #20]
 800f82c:	891a      	ldrh	r2, [r3, #8]
 800f82e:	89bb      	ldrh	r3, [r7, #12]
 800f830:	1ad3      	subs	r3, r2, r3
 800f832:	b29a      	uxth	r2, r3
 800f834:	697b      	ldr	r3, [r7, #20]
 800f836:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800f838:	697b      	ldr	r3, [r7, #20]
 800f83a:	68db      	ldr	r3, [r3, #12]
 800f83c:	899b      	ldrh	r3, [r3, #12]
 800f83e:	b29c      	uxth	r4, r3
 800f840:	7efb      	ldrb	r3, [r7, #27]
 800f842:	b29b      	uxth	r3, r3
 800f844:	4618      	mov	r0, r3
 800f846:	f7f9 fac3 	bl	8008dd0 <lwip_htons>
 800f84a:	4603      	mov	r3, r0
 800f84c:	461a      	mov	r2, r3
 800f84e:	697b      	ldr	r3, [r7, #20]
 800f850:	68db      	ldr	r3, [r3, #12]
 800f852:	4322      	orrs	r2, r4
 800f854:	b292      	uxth	r2, r2
 800f856:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800f858:	697b      	ldr	r3, [r7, #20]
 800f85a:	685b      	ldr	r3, [r3, #4]
 800f85c:	4618      	mov	r0, r3
 800f85e:	f7fa fe9d 	bl	800a59c <pbuf_clen>
 800f862:	4603      	mov	r3, r0
 800f864:	461a      	mov	r2, r3
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f86c:	4413      	add	r3, r2
 800f86e:	b29a      	uxth	r2, r3
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f876:	69fb      	ldr	r3, [r7, #28]
 800f878:	685b      	ldr	r3, [r3, #4]
 800f87a:	4618      	mov	r0, r3
 800f87c:	f7fa fe8e 	bl	800a59c <pbuf_clen>
 800f880:	4603      	mov	r3, r0
 800f882:	461a      	mov	r2, r3
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f88a:	4413      	add	r3, r2
 800f88c:	b29a      	uxth	r2, r3
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800f894:	697b      	ldr	r3, [r7, #20]
 800f896:	681a      	ldr	r2, [r3, #0]
 800f898:	69fb      	ldr	r3, [r7, #28]
 800f89a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800f89c:	697b      	ldr	r3, [r7, #20]
 800f89e:	69fa      	ldr	r2, [r7, #28]
 800f8a0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800f8a2:	69fb      	ldr	r3, [r7, #28]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d103      	bne.n	800f8b2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	2200      	movs	r2, #0
 800f8ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	e016      	b.n	800f8e4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800f8b6:	bf00      	nop
 800f8b8:	e002      	b.n	800f8c0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800f8ba:	bf00      	nop
 800f8bc:	e000      	b.n	800f8c0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800f8be:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800f8c0:	69fb      	ldr	r3, [r7, #28]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d006      	beq.n	800f8d4 <tcp_split_unsent_seg+0x25c>
 800f8c6:	4b09      	ldr	r3, [pc, #36]	; (800f8ec <tcp_split_unsent_seg+0x274>)
 800f8c8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800f8cc:	490d      	ldr	r1, [pc, #52]	; (800f904 <tcp_split_unsent_seg+0x28c>)
 800f8ce:	4809      	ldr	r0, [pc, #36]	; (800f8f4 <tcp_split_unsent_seg+0x27c>)
 800f8d0:	f003 ff76 	bl	80137c0 <iprintf>
  if (p != NULL) {
 800f8d4:	693b      	ldr	r3, [r7, #16]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d002      	beq.n	800f8e0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800f8da:	6938      	ldr	r0, [r7, #16]
 800f8dc:	f7fa fdd6 	bl	800a48c <pbuf_free>
  }

  return ERR_MEM;
 800f8e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	3724      	adds	r7, #36	; 0x24
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	bd90      	pop	{r4, r7, pc}
 800f8ec:	08015e54 	.word	0x08015e54
 800f8f0:	080161e8 	.word	0x080161e8
 800f8f4:	08015ea8 	.word	0x08015ea8
 800f8f8:	0801620c 	.word	0x0801620c
 800f8fc:	08016230 	.word	0x08016230
 800f900:	08016240 	.word	0x08016240
 800f904:	08016250 	.word	0x08016250

0800f908 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800f908:	b590      	push	{r4, r7, lr}
 800f90a:	b085      	sub	sp, #20
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d106      	bne.n	800f924 <tcp_send_fin+0x1c>
 800f916:	4b21      	ldr	r3, [pc, #132]	; (800f99c <tcp_send_fin+0x94>)
 800f918:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800f91c:	4920      	ldr	r1, [pc, #128]	; (800f9a0 <tcp_send_fin+0x98>)
 800f91e:	4821      	ldr	r0, [pc, #132]	; (800f9a4 <tcp_send_fin+0x9c>)
 800f920:	f003 ff4e 	bl	80137c0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d02e      	beq.n	800f98a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f930:	60fb      	str	r3, [r7, #12]
 800f932:	e002      	b.n	800f93a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d1f8      	bne.n	800f934 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	68db      	ldr	r3, [r3, #12]
 800f946:	899b      	ldrh	r3, [r3, #12]
 800f948:	b29b      	uxth	r3, r3
 800f94a:	4618      	mov	r0, r3
 800f94c:	f7f9 fa40 	bl	8008dd0 <lwip_htons>
 800f950:	4603      	mov	r3, r0
 800f952:	b2db      	uxtb	r3, r3
 800f954:	f003 0307 	and.w	r3, r3, #7
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d116      	bne.n	800f98a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	68db      	ldr	r3, [r3, #12]
 800f960:	899b      	ldrh	r3, [r3, #12]
 800f962:	b29c      	uxth	r4, r3
 800f964:	2001      	movs	r0, #1
 800f966:	f7f9 fa33 	bl	8008dd0 <lwip_htons>
 800f96a:	4603      	mov	r3, r0
 800f96c:	461a      	mov	r2, r3
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	68db      	ldr	r3, [r3, #12]
 800f972:	4322      	orrs	r2, r4
 800f974:	b292      	uxth	r2, r2
 800f976:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	8b5b      	ldrh	r3, [r3, #26]
 800f97c:	f043 0320 	orr.w	r3, r3, #32
 800f980:	b29a      	uxth	r2, r3
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800f986:	2300      	movs	r3, #0
 800f988:	e004      	b.n	800f994 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800f98a:	2101      	movs	r1, #1
 800f98c:	6878      	ldr	r0, [r7, #4]
 800f98e:	f000 f80b 	bl	800f9a8 <tcp_enqueue_flags>
 800f992:	4603      	mov	r3, r0
}
 800f994:	4618      	mov	r0, r3
 800f996:	3714      	adds	r7, #20
 800f998:	46bd      	mov	sp, r7
 800f99a:	bd90      	pop	{r4, r7, pc}
 800f99c:	08015e54 	.word	0x08015e54
 800f9a0:	0801625c 	.word	0x0801625c
 800f9a4:	08015ea8 	.word	0x08015ea8

0800f9a8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b08a      	sub	sp, #40	; 0x28
 800f9ac:	af02      	add	r7, sp, #8
 800f9ae:	6078      	str	r0, [r7, #4]
 800f9b0:	460b      	mov	r3, r1
 800f9b2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800f9b8:	2300      	movs	r3, #0
 800f9ba:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800f9bc:	78fb      	ldrb	r3, [r7, #3]
 800f9be:	f003 0303 	and.w	r3, r3, #3
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d106      	bne.n	800f9d4 <tcp_enqueue_flags+0x2c>
 800f9c6:	4b67      	ldr	r3, [pc, #412]	; (800fb64 <tcp_enqueue_flags+0x1bc>)
 800f9c8:	f240 4211 	movw	r2, #1041	; 0x411
 800f9cc:	4966      	ldr	r1, [pc, #408]	; (800fb68 <tcp_enqueue_flags+0x1c0>)
 800f9ce:	4867      	ldr	r0, [pc, #412]	; (800fb6c <tcp_enqueue_flags+0x1c4>)
 800f9d0:	f003 fef6 	bl	80137c0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d106      	bne.n	800f9e8 <tcp_enqueue_flags+0x40>
 800f9da:	4b62      	ldr	r3, [pc, #392]	; (800fb64 <tcp_enqueue_flags+0x1bc>)
 800f9dc:	f240 4213 	movw	r2, #1043	; 0x413
 800f9e0:	4963      	ldr	r1, [pc, #396]	; (800fb70 <tcp_enqueue_flags+0x1c8>)
 800f9e2:	4862      	ldr	r0, [pc, #392]	; (800fb6c <tcp_enqueue_flags+0x1c4>)
 800f9e4:	f003 feec 	bl	80137c0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800f9e8:	78fb      	ldrb	r3, [r7, #3]
 800f9ea:	f003 0302 	and.w	r3, r3, #2
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d001      	beq.n	800f9f6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800f9f2:	2301      	movs	r3, #1
 800f9f4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f9f6:	7ffb      	ldrb	r3, [r7, #31]
 800f9f8:	009b      	lsls	r3, r3, #2
 800f9fa:	b2db      	uxtb	r3, r3
 800f9fc:	f003 0304 	and.w	r3, r3, #4
 800fa00:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800fa02:	7dfb      	ldrb	r3, [r7, #23]
 800fa04:	b29b      	uxth	r3, r3
 800fa06:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fa0a:	4619      	mov	r1, r3
 800fa0c:	2036      	movs	r0, #54	; 0x36
 800fa0e:	f7fa fa59 	bl	8009ec4 <pbuf_alloc>
 800fa12:	6138      	str	r0, [r7, #16]
 800fa14:	693b      	ldr	r3, [r7, #16]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d109      	bne.n	800fa2e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	8b5b      	ldrh	r3, [r3, #26]
 800fa1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa22:	b29a      	uxth	r2, r3
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800fa28:	f04f 33ff 	mov.w	r3, #4294967295
 800fa2c:	e095      	b.n	800fb5a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800fa2e:	693b      	ldr	r3, [r7, #16]
 800fa30:	895a      	ldrh	r2, [r3, #10]
 800fa32:	7dfb      	ldrb	r3, [r7, #23]
 800fa34:	b29b      	uxth	r3, r3
 800fa36:	429a      	cmp	r2, r3
 800fa38:	d206      	bcs.n	800fa48 <tcp_enqueue_flags+0xa0>
 800fa3a:	4b4a      	ldr	r3, [pc, #296]	; (800fb64 <tcp_enqueue_flags+0x1bc>)
 800fa3c:	f240 4239 	movw	r2, #1081	; 0x439
 800fa40:	494c      	ldr	r1, [pc, #304]	; (800fb74 <tcp_enqueue_flags+0x1cc>)
 800fa42:	484a      	ldr	r0, [pc, #296]	; (800fb6c <tcp_enqueue_flags+0x1c4>)
 800fa44:	f003 febc 	bl	80137c0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800fa4c:	78fa      	ldrb	r2, [r7, #3]
 800fa4e:	7ffb      	ldrb	r3, [r7, #31]
 800fa50:	9300      	str	r3, [sp, #0]
 800fa52:	460b      	mov	r3, r1
 800fa54:	6939      	ldr	r1, [r7, #16]
 800fa56:	6878      	ldr	r0, [r7, #4]
 800fa58:	f7ff f918 	bl	800ec8c <tcp_create_segment>
 800fa5c:	60f8      	str	r0, [r7, #12]
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d109      	bne.n	800fa78 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	8b5b      	ldrh	r3, [r3, #26]
 800fa68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa6c:	b29a      	uxth	r2, r3
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800fa72:	f04f 33ff 	mov.w	r3, #4294967295
 800fa76:	e070      	b.n	800fb5a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	68db      	ldr	r3, [r3, #12]
 800fa7c:	f003 0303 	and.w	r3, r3, #3
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d006      	beq.n	800fa92 <tcp_enqueue_flags+0xea>
 800fa84:	4b37      	ldr	r3, [pc, #220]	; (800fb64 <tcp_enqueue_flags+0x1bc>)
 800fa86:	f240 4242 	movw	r2, #1090	; 0x442
 800fa8a:	493b      	ldr	r1, [pc, #236]	; (800fb78 <tcp_enqueue_flags+0x1d0>)
 800fa8c:	4837      	ldr	r0, [pc, #220]	; (800fb6c <tcp_enqueue_flags+0x1c4>)
 800fa8e:	f003 fe97 	bl	80137c0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	891b      	ldrh	r3, [r3, #8]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d006      	beq.n	800faa8 <tcp_enqueue_flags+0x100>
 800fa9a:	4b32      	ldr	r3, [pc, #200]	; (800fb64 <tcp_enqueue_flags+0x1bc>)
 800fa9c:	f240 4243 	movw	r2, #1091	; 0x443
 800faa0:	4936      	ldr	r1, [pc, #216]	; (800fb7c <tcp_enqueue_flags+0x1d4>)
 800faa2:	4832      	ldr	r0, [pc, #200]	; (800fb6c <tcp_enqueue_flags+0x1c4>)
 800faa4:	f003 fe8c 	bl	80137c0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800faac:	2b00      	cmp	r3, #0
 800faae:	d103      	bne.n	800fab8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	68fa      	ldr	r2, [r7, #12]
 800fab4:	66da      	str	r2, [r3, #108]	; 0x6c
 800fab6:	e00d      	b.n	800fad4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fabc:	61bb      	str	r3, [r7, #24]
 800fabe:	e002      	b.n	800fac6 <tcp_enqueue_flags+0x11e>
 800fac0:	69bb      	ldr	r3, [r7, #24]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	61bb      	str	r3, [r7, #24]
 800fac6:	69bb      	ldr	r3, [r7, #24]
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d1f8      	bne.n	800fac0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800face:	69bb      	ldr	r3, [r7, #24]
 800fad0:	68fa      	ldr	r2, [r7, #12]
 800fad2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	2200      	movs	r2, #0
 800fad8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800fadc:	78fb      	ldrb	r3, [r7, #3]
 800fade:	f003 0302 	and.w	r3, r3, #2
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d104      	bne.n	800faf0 <tcp_enqueue_flags+0x148>
 800fae6:	78fb      	ldrb	r3, [r7, #3]
 800fae8:	f003 0301 	and.w	r3, r3, #1
 800faec:	2b00      	cmp	r3, #0
 800faee:	d004      	beq.n	800fafa <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800faf4:	1c5a      	adds	r2, r3, #1
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800fafa:	78fb      	ldrb	r3, [r7, #3]
 800fafc:	f003 0301 	and.w	r3, r3, #1
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d006      	beq.n	800fb12 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	8b5b      	ldrh	r3, [r3, #26]
 800fb08:	f043 0320 	orr.w	r3, r3, #32
 800fb0c:	b29a      	uxth	r2, r3
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	685b      	ldr	r3, [r3, #4]
 800fb16:	4618      	mov	r0, r3
 800fb18:	f7fa fd40 	bl	800a59c <pbuf_clen>
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	461a      	mov	r2, r3
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fb26:	4413      	add	r3, r2
 800fb28:	b29a      	uxth	r2, r3
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d00e      	beq.n	800fb58 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d10a      	bne.n	800fb58 <tcp_enqueue_flags+0x1b0>
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d106      	bne.n	800fb58 <tcp_enqueue_flags+0x1b0>
 800fb4a:	4b06      	ldr	r3, [pc, #24]	; (800fb64 <tcp_enqueue_flags+0x1bc>)
 800fb4c:	f240 4265 	movw	r2, #1125	; 0x465
 800fb50:	490b      	ldr	r1, [pc, #44]	; (800fb80 <tcp_enqueue_flags+0x1d8>)
 800fb52:	4806      	ldr	r0, [pc, #24]	; (800fb6c <tcp_enqueue_flags+0x1c4>)
 800fb54:	f003 fe34 	bl	80137c0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800fb58:	2300      	movs	r3, #0
}
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	3720      	adds	r7, #32
 800fb5e:	46bd      	mov	sp, r7
 800fb60:	bd80      	pop	{r7, pc}
 800fb62:	bf00      	nop
 800fb64:	08015e54 	.word	0x08015e54
 800fb68:	08016278 	.word	0x08016278
 800fb6c:	08015ea8 	.word	0x08015ea8
 800fb70:	080162d0 	.word	0x080162d0
 800fb74:	080162f0 	.word	0x080162f0
 800fb78:	0801632c 	.word	0x0801632c
 800fb7c:	08016344 	.word	0x08016344
 800fb80:	08016370 	.word	0x08016370

0800fb84 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800fb84:	b5b0      	push	{r4, r5, r7, lr}
 800fb86:	b08a      	sub	sp, #40	; 0x28
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d106      	bne.n	800fba0 <tcp_output+0x1c>
 800fb92:	4b8a      	ldr	r3, [pc, #552]	; (800fdbc <tcp_output+0x238>)
 800fb94:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800fb98:	4989      	ldr	r1, [pc, #548]	; (800fdc0 <tcp_output+0x23c>)
 800fb9a:	488a      	ldr	r0, [pc, #552]	; (800fdc4 <tcp_output+0x240>)
 800fb9c:	f003 fe10 	bl	80137c0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	7d1b      	ldrb	r3, [r3, #20]
 800fba4:	2b01      	cmp	r3, #1
 800fba6:	d106      	bne.n	800fbb6 <tcp_output+0x32>
 800fba8:	4b84      	ldr	r3, [pc, #528]	; (800fdbc <tcp_output+0x238>)
 800fbaa:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800fbae:	4986      	ldr	r1, [pc, #536]	; (800fdc8 <tcp_output+0x244>)
 800fbb0:	4884      	ldr	r0, [pc, #528]	; (800fdc4 <tcp_output+0x240>)
 800fbb2:	f003 fe05 	bl	80137c0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800fbb6:	4b85      	ldr	r3, [pc, #532]	; (800fdcc <tcp_output+0x248>)
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	687a      	ldr	r2, [r7, #4]
 800fbbc:	429a      	cmp	r2, r3
 800fbbe:	d101      	bne.n	800fbc4 <tcp_output+0x40>
    return ERR_OK;
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	e1ce      	b.n	800ff62 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fbd0:	4293      	cmp	r3, r2
 800fbd2:	bf28      	it	cs
 800fbd4:	4613      	movcs	r3, r2
 800fbd6:	b29b      	uxth	r3, r3
 800fbd8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fbde:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800fbe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d10b      	bne.n	800fbfe <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	8b5b      	ldrh	r3, [r3, #26]
 800fbea:	f003 0302 	and.w	r3, r3, #2
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	f000 81aa 	beq.w	800ff48 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800fbf4:	6878      	ldr	r0, [r7, #4]
 800fbf6:	f000 fdcb 	bl	8010790 <tcp_send_empty_ack>
 800fbfa:	4603      	mov	r3, r0
 800fbfc:	e1b1      	b.n	800ff62 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800fbfe:	6879      	ldr	r1, [r7, #4]
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	3304      	adds	r3, #4
 800fc04:	461a      	mov	r2, r3
 800fc06:	6878      	ldr	r0, [r7, #4]
 800fc08:	f7ff f824 	bl	800ec54 <tcp_route>
 800fc0c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800fc0e:	697b      	ldr	r3, [r7, #20]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d102      	bne.n	800fc1a <tcp_output+0x96>
    return ERR_RTE;
 800fc14:	f06f 0303 	mvn.w	r3, #3
 800fc18:	e1a3      	b.n	800ff62 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d003      	beq.n	800fc28 <tcp_output+0xa4>
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d111      	bne.n	800fc4c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800fc28:	697b      	ldr	r3, [r7, #20]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d002      	beq.n	800fc34 <tcp_output+0xb0>
 800fc2e:	697b      	ldr	r3, [r7, #20]
 800fc30:	3304      	adds	r3, #4
 800fc32:	e000      	b.n	800fc36 <tcp_output+0xb2>
 800fc34:	2300      	movs	r3, #0
 800fc36:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800fc38:	693b      	ldr	r3, [r7, #16]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d102      	bne.n	800fc44 <tcp_output+0xc0>
      return ERR_RTE;
 800fc3e:	f06f 0303 	mvn.w	r3, #3
 800fc42:	e18e      	b.n	800ff62 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800fc44:	693b      	ldr	r3, [r7, #16]
 800fc46:	681a      	ldr	r2, [r3, #0]
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800fc4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc4e:	68db      	ldr	r3, [r3, #12]
 800fc50:	685b      	ldr	r3, [r3, #4]
 800fc52:	4618      	mov	r0, r3
 800fc54:	f7f9 f8d1 	bl	8008dfa <lwip_htonl>
 800fc58:	4602      	mov	r2, r0
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc5e:	1ad3      	subs	r3, r2, r3
 800fc60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc62:	8912      	ldrh	r2, [r2, #8]
 800fc64:	4413      	add	r3, r2
 800fc66:	69ba      	ldr	r2, [r7, #24]
 800fc68:	429a      	cmp	r2, r3
 800fc6a:	d227      	bcs.n	800fcbc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fc72:	461a      	mov	r2, r3
 800fc74:	69bb      	ldr	r3, [r7, #24]
 800fc76:	4293      	cmp	r3, r2
 800fc78:	d114      	bne.n	800fca4 <tcp_output+0x120>
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d110      	bne.n	800fca4 <tcp_output+0x120>
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d10b      	bne.n	800fca4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	2200      	movs	r2, #0
 800fc90:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	2201      	movs	r2, #1
 800fc98:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	2200      	movs	r2, #0
 800fca0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	8b5b      	ldrh	r3, [r3, #26]
 800fca8:	f003 0302 	and.w	r3, r3, #2
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	f000 814d 	beq.w	800ff4c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800fcb2:	6878      	ldr	r0, [r7, #4]
 800fcb4:	f000 fd6c 	bl	8010790 <tcp_send_empty_ack>
 800fcb8:	4603      	mov	r3, r0
 800fcba:	e152      	b.n	800ff62 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fcc8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800fcca:	6a3b      	ldr	r3, [r7, #32]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	f000 811c 	beq.w	800ff0a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800fcd2:	e002      	b.n	800fcda <tcp_output+0x156>
 800fcd4:	6a3b      	ldr	r3, [r7, #32]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	623b      	str	r3, [r7, #32]
 800fcda:	6a3b      	ldr	r3, [r7, #32]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d1f8      	bne.n	800fcd4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800fce2:	e112      	b.n	800ff0a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800fce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fce6:	68db      	ldr	r3, [r3, #12]
 800fce8:	899b      	ldrh	r3, [r3, #12]
 800fcea:	b29b      	uxth	r3, r3
 800fcec:	4618      	mov	r0, r3
 800fcee:	f7f9 f86f 	bl	8008dd0 <lwip_htons>
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	b2db      	uxtb	r3, r3
 800fcf6:	f003 0304 	and.w	r3, r3, #4
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d006      	beq.n	800fd0c <tcp_output+0x188>
 800fcfe:	4b2f      	ldr	r3, [pc, #188]	; (800fdbc <tcp_output+0x238>)
 800fd00:	f240 5236 	movw	r2, #1334	; 0x536
 800fd04:	4932      	ldr	r1, [pc, #200]	; (800fdd0 <tcp_output+0x24c>)
 800fd06:	482f      	ldr	r0, [pc, #188]	; (800fdc4 <tcp_output+0x240>)
 800fd08:	f003 fd5a 	bl	80137c0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d01f      	beq.n	800fd54 <tcp_output+0x1d0>
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	8b5b      	ldrh	r3, [r3, #26]
 800fd18:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d119      	bne.n	800fd54 <tcp_output+0x1d0>
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d00b      	beq.n	800fd40 <tcp_output+0x1bc>
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d110      	bne.n	800fd54 <tcp_output+0x1d0>
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd36:	891a      	ldrh	r2, [r3, #8]
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fd3c:	429a      	cmp	r2, r3
 800fd3e:	d209      	bcs.n	800fd54 <tcp_output+0x1d0>
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d004      	beq.n	800fd54 <tcp_output+0x1d0>
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fd50:	2b08      	cmp	r3, #8
 800fd52:	d901      	bls.n	800fd58 <tcp_output+0x1d4>
 800fd54:	2301      	movs	r3, #1
 800fd56:	e000      	b.n	800fd5a <tcp_output+0x1d6>
 800fd58:	2300      	movs	r3, #0
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d106      	bne.n	800fd6c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	8b5b      	ldrh	r3, [r3, #26]
 800fd62:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	f000 80e4 	beq.w	800ff34 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	7d1b      	ldrb	r3, [r3, #20]
 800fd70:	2b02      	cmp	r3, #2
 800fd72:	d00d      	beq.n	800fd90 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800fd74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd76:	68db      	ldr	r3, [r3, #12]
 800fd78:	899b      	ldrh	r3, [r3, #12]
 800fd7a:	b29c      	uxth	r4, r3
 800fd7c:	2010      	movs	r0, #16
 800fd7e:	f7f9 f827 	bl	8008dd0 <lwip_htons>
 800fd82:	4603      	mov	r3, r0
 800fd84:	461a      	mov	r2, r3
 800fd86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd88:	68db      	ldr	r3, [r3, #12]
 800fd8a:	4322      	orrs	r2, r4
 800fd8c:	b292      	uxth	r2, r2
 800fd8e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800fd90:	697a      	ldr	r2, [r7, #20]
 800fd92:	6879      	ldr	r1, [r7, #4]
 800fd94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fd96:	f000 f909 	bl	800ffac <tcp_output_segment>
 800fd9a:	4603      	mov	r3, r0
 800fd9c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800fd9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d016      	beq.n	800fdd4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	8b5b      	ldrh	r3, [r3, #26]
 800fdaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fdae:	b29a      	uxth	r2, r3
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	835a      	strh	r2, [r3, #26]
      return err;
 800fdb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fdb8:	e0d3      	b.n	800ff62 <tcp_output+0x3de>
 800fdba:	bf00      	nop
 800fdbc:	08015e54 	.word	0x08015e54
 800fdc0:	08016398 	.word	0x08016398
 800fdc4:	08015ea8 	.word	0x08015ea8
 800fdc8:	080163b0 	.word	0x080163b0
 800fdcc:	20008618 	.word	0x20008618
 800fdd0:	080163d8 	.word	0x080163d8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800fdd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdd6:	681a      	ldr	r2, [r3, #0]
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	7d1b      	ldrb	r3, [r3, #20]
 800fde0:	2b02      	cmp	r3, #2
 800fde2:	d006      	beq.n	800fdf2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	8b5b      	ldrh	r3, [r3, #26]
 800fde8:	f023 0303 	bic.w	r3, r3, #3
 800fdec:	b29a      	uxth	r2, r3
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800fdf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdf4:	68db      	ldr	r3, [r3, #12]
 800fdf6:	685b      	ldr	r3, [r3, #4]
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	f7f8 fffe 	bl	8008dfa <lwip_htonl>
 800fdfe:	4604      	mov	r4, r0
 800fe00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe02:	891b      	ldrh	r3, [r3, #8]
 800fe04:	461d      	mov	r5, r3
 800fe06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe08:	68db      	ldr	r3, [r3, #12]
 800fe0a:	899b      	ldrh	r3, [r3, #12]
 800fe0c:	b29b      	uxth	r3, r3
 800fe0e:	4618      	mov	r0, r3
 800fe10:	f7f8 ffde 	bl	8008dd0 <lwip_htons>
 800fe14:	4603      	mov	r3, r0
 800fe16:	b2db      	uxtb	r3, r3
 800fe18:	f003 0303 	and.w	r3, r3, #3
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d001      	beq.n	800fe24 <tcp_output+0x2a0>
 800fe20:	2301      	movs	r3, #1
 800fe22:	e000      	b.n	800fe26 <tcp_output+0x2a2>
 800fe24:	2300      	movs	r3, #0
 800fe26:	442b      	add	r3, r5
 800fe28:	4423      	add	r3, r4
 800fe2a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fe30:	68bb      	ldr	r3, [r7, #8]
 800fe32:	1ad3      	subs	r3, r2, r3
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	da02      	bge.n	800fe3e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	68ba      	ldr	r2, [r7, #8]
 800fe3c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800fe3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe40:	891b      	ldrh	r3, [r3, #8]
 800fe42:	461c      	mov	r4, r3
 800fe44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe46:	68db      	ldr	r3, [r3, #12]
 800fe48:	899b      	ldrh	r3, [r3, #12]
 800fe4a:	b29b      	uxth	r3, r3
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	f7f8 ffbf 	bl	8008dd0 <lwip_htons>
 800fe52:	4603      	mov	r3, r0
 800fe54:	b2db      	uxtb	r3, r3
 800fe56:	f003 0303 	and.w	r3, r3, #3
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d001      	beq.n	800fe62 <tcp_output+0x2de>
 800fe5e:	2301      	movs	r3, #1
 800fe60:	e000      	b.n	800fe64 <tcp_output+0x2e0>
 800fe62:	2300      	movs	r3, #0
 800fe64:	4423      	add	r3, r4
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d049      	beq.n	800fefe <tcp_output+0x37a>
      seg->next = NULL;
 800fe6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe6c:	2200      	movs	r2, #0
 800fe6e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d105      	bne.n	800fe84 <tcp_output+0x300>
        pcb->unacked = seg;
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe7c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800fe7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe80:	623b      	str	r3, [r7, #32]
 800fe82:	e03f      	b.n	800ff04 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800fe84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe86:	68db      	ldr	r3, [r3, #12]
 800fe88:	685b      	ldr	r3, [r3, #4]
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	f7f8 ffb5 	bl	8008dfa <lwip_htonl>
 800fe90:	4604      	mov	r4, r0
 800fe92:	6a3b      	ldr	r3, [r7, #32]
 800fe94:	68db      	ldr	r3, [r3, #12]
 800fe96:	685b      	ldr	r3, [r3, #4]
 800fe98:	4618      	mov	r0, r3
 800fe9a:	f7f8 ffae 	bl	8008dfa <lwip_htonl>
 800fe9e:	4603      	mov	r3, r0
 800fea0:	1ae3      	subs	r3, r4, r3
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	da24      	bge.n	800fef0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	3370      	adds	r3, #112	; 0x70
 800feaa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800feac:	e002      	b.n	800feb4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800feae:	69fb      	ldr	r3, [r7, #28]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800feb4:	69fb      	ldr	r3, [r7, #28]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d011      	beq.n	800fee0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800febc:	69fb      	ldr	r3, [r7, #28]
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	68db      	ldr	r3, [r3, #12]
 800fec2:	685b      	ldr	r3, [r3, #4]
 800fec4:	4618      	mov	r0, r3
 800fec6:	f7f8 ff98 	bl	8008dfa <lwip_htonl>
 800feca:	4604      	mov	r4, r0
 800fecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fece:	68db      	ldr	r3, [r3, #12]
 800fed0:	685b      	ldr	r3, [r3, #4]
 800fed2:	4618      	mov	r0, r3
 800fed4:	f7f8 ff91 	bl	8008dfa <lwip_htonl>
 800fed8:	4603      	mov	r3, r0
 800feda:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800fedc:	2b00      	cmp	r3, #0
 800fede:	dbe6      	blt.n	800feae <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800fee0:	69fb      	ldr	r3, [r7, #28]
 800fee2:	681a      	ldr	r2, [r3, #0]
 800fee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fee6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800fee8:	69fb      	ldr	r3, [r7, #28]
 800feea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800feec:	601a      	str	r2, [r3, #0]
 800feee:	e009      	b.n	800ff04 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800fef0:	6a3b      	ldr	r3, [r7, #32]
 800fef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fef4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800fef6:	6a3b      	ldr	r3, [r7, #32]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	623b      	str	r3, [r7, #32]
 800fefc:	e002      	b.n	800ff04 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800fefe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ff00:	f7fb ff01 	bl	800bd06 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff08:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800ff0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d012      	beq.n	800ff36 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800ff10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff12:	68db      	ldr	r3, [r3, #12]
 800ff14:	685b      	ldr	r3, [r3, #4]
 800ff16:	4618      	mov	r0, r3
 800ff18:	f7f8 ff6f 	bl	8008dfa <lwip_htonl>
 800ff1c:	4602      	mov	r2, r0
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff22:	1ad3      	subs	r3, r2, r3
 800ff24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff26:	8912      	ldrh	r2, [r2, #8]
 800ff28:	4413      	add	r3, r2
  while (seg != NULL &&
 800ff2a:	69ba      	ldr	r2, [r7, #24]
 800ff2c:	429a      	cmp	r2, r3
 800ff2e:	f4bf aed9 	bcs.w	800fce4 <tcp_output+0x160>
 800ff32:	e000      	b.n	800ff36 <tcp_output+0x3b2>
      break;
 800ff34:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d108      	bne.n	800ff50 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	2200      	movs	r2, #0
 800ff42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800ff46:	e004      	b.n	800ff52 <tcp_output+0x3ce>
    goto output_done;
 800ff48:	bf00      	nop
 800ff4a:	e002      	b.n	800ff52 <tcp_output+0x3ce>
    goto output_done;
 800ff4c:	bf00      	nop
 800ff4e:	e000      	b.n	800ff52 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800ff50:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	8b5b      	ldrh	r3, [r3, #26]
 800ff56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ff5a:	b29a      	uxth	r2, r3
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800ff60:	2300      	movs	r3, #0
}
 800ff62:	4618      	mov	r0, r3
 800ff64:	3728      	adds	r7, #40	; 0x28
 800ff66:	46bd      	mov	sp, r7
 800ff68:	bdb0      	pop	{r4, r5, r7, pc}
 800ff6a:	bf00      	nop

0800ff6c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b082      	sub	sp, #8
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d106      	bne.n	800ff88 <tcp_output_segment_busy+0x1c>
 800ff7a:	4b09      	ldr	r3, [pc, #36]	; (800ffa0 <tcp_output_segment_busy+0x34>)
 800ff7c:	f240 529a 	movw	r2, #1434	; 0x59a
 800ff80:	4908      	ldr	r1, [pc, #32]	; (800ffa4 <tcp_output_segment_busy+0x38>)
 800ff82:	4809      	ldr	r0, [pc, #36]	; (800ffa8 <tcp_output_segment_busy+0x3c>)
 800ff84:	f003 fc1c 	bl	80137c0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	685b      	ldr	r3, [r3, #4]
 800ff8c:	7b9b      	ldrb	r3, [r3, #14]
 800ff8e:	2b01      	cmp	r3, #1
 800ff90:	d001      	beq.n	800ff96 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800ff92:	2301      	movs	r3, #1
 800ff94:	e000      	b.n	800ff98 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800ff96:	2300      	movs	r3, #0
}
 800ff98:	4618      	mov	r0, r3
 800ff9a:	3708      	adds	r7, #8
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	bd80      	pop	{r7, pc}
 800ffa0:	08015e54 	.word	0x08015e54
 800ffa4:	080163f0 	.word	0x080163f0
 800ffa8:	08015ea8 	.word	0x08015ea8

0800ffac <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800ffac:	b5b0      	push	{r4, r5, r7, lr}
 800ffae:	b08c      	sub	sp, #48	; 0x30
 800ffb0:	af04      	add	r7, sp, #16
 800ffb2:	60f8      	str	r0, [r7, #12]
 800ffb4:	60b9      	str	r1, [r7, #8]
 800ffb6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d106      	bne.n	800ffcc <tcp_output_segment+0x20>
 800ffbe:	4b63      	ldr	r3, [pc, #396]	; (801014c <tcp_output_segment+0x1a0>)
 800ffc0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800ffc4:	4962      	ldr	r1, [pc, #392]	; (8010150 <tcp_output_segment+0x1a4>)
 800ffc6:	4863      	ldr	r0, [pc, #396]	; (8010154 <tcp_output_segment+0x1a8>)
 800ffc8:	f003 fbfa 	bl	80137c0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800ffcc:	68bb      	ldr	r3, [r7, #8]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d106      	bne.n	800ffe0 <tcp_output_segment+0x34>
 800ffd2:	4b5e      	ldr	r3, [pc, #376]	; (801014c <tcp_output_segment+0x1a0>)
 800ffd4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800ffd8:	495f      	ldr	r1, [pc, #380]	; (8010158 <tcp_output_segment+0x1ac>)
 800ffda:	485e      	ldr	r0, [pc, #376]	; (8010154 <tcp_output_segment+0x1a8>)
 800ffdc:	f003 fbf0 	bl	80137c0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d106      	bne.n	800fff4 <tcp_output_segment+0x48>
 800ffe6:	4b59      	ldr	r3, [pc, #356]	; (801014c <tcp_output_segment+0x1a0>)
 800ffe8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800ffec:	495b      	ldr	r1, [pc, #364]	; (801015c <tcp_output_segment+0x1b0>)
 800ffee:	4859      	ldr	r0, [pc, #356]	; (8010154 <tcp_output_segment+0x1a8>)
 800fff0:	f003 fbe6 	bl	80137c0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800fff4:	68f8      	ldr	r0, [r7, #12]
 800fff6:	f7ff ffb9 	bl	800ff6c <tcp_output_segment_busy>
 800fffa:	4603      	mov	r3, r0
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d001      	beq.n	8010004 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8010000:	2300      	movs	r3, #0
 8010002:	e09f      	b.n	8010144 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8010004:	68bb      	ldr	r3, [r7, #8]
 8010006:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	68dc      	ldr	r4, [r3, #12]
 801000c:	4610      	mov	r0, r2
 801000e:	f7f8 fef4 	bl	8008dfa <lwip_htonl>
 8010012:	4603      	mov	r3, r0
 8010014:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8010016:	68bb      	ldr	r3, [r7, #8]
 8010018:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	68dc      	ldr	r4, [r3, #12]
 801001e:	4610      	mov	r0, r2
 8010020:	f7f8 fed6 	bl	8008dd0 <lwip_htons>
 8010024:	4603      	mov	r3, r0
 8010026:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010028:	68bb      	ldr	r3, [r7, #8]
 801002a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801002c:	68ba      	ldr	r2, [r7, #8]
 801002e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010030:	441a      	add	r2, r3
 8010032:	68bb      	ldr	r3, [r7, #8]
 8010034:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	68db      	ldr	r3, [r3, #12]
 801003a:	3314      	adds	r3, #20
 801003c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	7a9b      	ldrb	r3, [r3, #10]
 8010042:	f003 0301 	and.w	r3, r3, #1
 8010046:	2b00      	cmp	r3, #0
 8010048:	d015      	beq.n	8010076 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801004a:	68bb      	ldr	r3, [r7, #8]
 801004c:	3304      	adds	r3, #4
 801004e:	461a      	mov	r2, r3
 8010050:	6879      	ldr	r1, [r7, #4]
 8010052:	f44f 7006 	mov.w	r0, #536	; 0x218
 8010056:	f7fc fa33 	bl	800c4c0 <tcp_eff_send_mss_netif>
 801005a:	4603      	mov	r3, r0
 801005c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801005e:	8b7b      	ldrh	r3, [r7, #26]
 8010060:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8010064:	4618      	mov	r0, r3
 8010066:	f7f8 fec8 	bl	8008dfa <lwip_htonl>
 801006a:	4602      	mov	r2, r0
 801006c:	69fb      	ldr	r3, [r7, #28]
 801006e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8010070:	69fb      	ldr	r3, [r7, #28]
 8010072:	3304      	adds	r3, #4
 8010074:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8010076:	68bb      	ldr	r3, [r7, #8]
 8010078:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801007c:	2b00      	cmp	r3, #0
 801007e:	da02      	bge.n	8010086 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8010080:	68bb      	ldr	r3, [r7, #8]
 8010082:	2200      	movs	r2, #0
 8010084:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8010086:	68bb      	ldr	r3, [r7, #8]
 8010088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801008a:	2b00      	cmp	r3, #0
 801008c:	d10c      	bne.n	80100a8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801008e:	4b34      	ldr	r3, [pc, #208]	; (8010160 <tcp_output_segment+0x1b4>)
 8010090:	681a      	ldr	r2, [r3, #0]
 8010092:	68bb      	ldr	r3, [r7, #8]
 8010094:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	68db      	ldr	r3, [r3, #12]
 801009a:	685b      	ldr	r3, [r3, #4]
 801009c:	4618      	mov	r0, r3
 801009e:	f7f8 feac 	bl	8008dfa <lwip_htonl>
 80100a2:	4602      	mov	r2, r0
 80100a4:	68bb      	ldr	r3, [r7, #8]
 80100a6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	68da      	ldr	r2, [r3, #12]
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	685b      	ldr	r3, [r3, #4]
 80100b0:	685b      	ldr	r3, [r3, #4]
 80100b2:	1ad3      	subs	r3, r2, r3
 80100b4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	685b      	ldr	r3, [r3, #4]
 80100ba:	8959      	ldrh	r1, [r3, #10]
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	685b      	ldr	r3, [r3, #4]
 80100c0:	8b3a      	ldrh	r2, [r7, #24]
 80100c2:	1a8a      	subs	r2, r1, r2
 80100c4:	b292      	uxth	r2, r2
 80100c6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	685b      	ldr	r3, [r3, #4]
 80100cc:	8919      	ldrh	r1, [r3, #8]
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	685b      	ldr	r3, [r3, #4]
 80100d2:	8b3a      	ldrh	r2, [r7, #24]
 80100d4:	1a8a      	subs	r2, r1, r2
 80100d6:	b292      	uxth	r2, r2
 80100d8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	685b      	ldr	r3, [r3, #4]
 80100de:	68fa      	ldr	r2, [r7, #12]
 80100e0:	68d2      	ldr	r2, [r2, #12]
 80100e2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	68db      	ldr	r3, [r3, #12]
 80100e8:	2200      	movs	r2, #0
 80100ea:	741a      	strb	r2, [r3, #16]
 80100ec:	2200      	movs	r2, #0
 80100ee:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	68db      	ldr	r3, [r3, #12]
 80100f4:	f103 0214 	add.w	r2, r3, #20
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	7a9b      	ldrb	r3, [r3, #10]
 80100fc:	009b      	lsls	r3, r3, #2
 80100fe:	f003 0304 	and.w	r3, r3, #4
 8010102:	4413      	add	r3, r2
 8010104:	69fa      	ldr	r2, [r7, #28]
 8010106:	429a      	cmp	r2, r3
 8010108:	d006      	beq.n	8010118 <tcp_output_segment+0x16c>
 801010a:	4b10      	ldr	r3, [pc, #64]	; (801014c <tcp_output_segment+0x1a0>)
 801010c:	f240 621c 	movw	r2, #1564	; 0x61c
 8010110:	4914      	ldr	r1, [pc, #80]	; (8010164 <tcp_output_segment+0x1b8>)
 8010112:	4810      	ldr	r0, [pc, #64]	; (8010154 <tcp_output_segment+0x1a8>)
 8010114:	f003 fb54 	bl	80137c0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	6858      	ldr	r0, [r3, #4]
 801011c:	68b9      	ldr	r1, [r7, #8]
 801011e:	68bb      	ldr	r3, [r7, #8]
 8010120:	1d1c      	adds	r4, r3, #4
 8010122:	68bb      	ldr	r3, [r7, #8]
 8010124:	7add      	ldrb	r5, [r3, #11]
 8010126:	68bb      	ldr	r3, [r7, #8]
 8010128:	7a9b      	ldrb	r3, [r3, #10]
 801012a:	687a      	ldr	r2, [r7, #4]
 801012c:	9202      	str	r2, [sp, #8]
 801012e:	2206      	movs	r2, #6
 8010130:	9201      	str	r2, [sp, #4]
 8010132:	9300      	str	r3, [sp, #0]
 8010134:	462b      	mov	r3, r5
 8010136:	4622      	mov	r2, r4
 8010138:	f002 fa36 	bl	80125a8 <ip4_output_if>
 801013c:	4603      	mov	r3, r0
 801013e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8010140:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010144:	4618      	mov	r0, r3
 8010146:	3720      	adds	r7, #32
 8010148:	46bd      	mov	sp, r7
 801014a:	bdb0      	pop	{r4, r5, r7, pc}
 801014c:	08015e54 	.word	0x08015e54
 8010150:	08016418 	.word	0x08016418
 8010154:	08015ea8 	.word	0x08015ea8
 8010158:	08016438 	.word	0x08016438
 801015c:	08016458 	.word	0x08016458
 8010160:	200085cc 	.word	0x200085cc
 8010164:	0801647c 	.word	0x0801647c

08010168 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8010168:	b5b0      	push	{r4, r5, r7, lr}
 801016a:	b084      	sub	sp, #16
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d106      	bne.n	8010184 <tcp_rexmit_rto_prepare+0x1c>
 8010176:	4b31      	ldr	r3, [pc, #196]	; (801023c <tcp_rexmit_rto_prepare+0xd4>)
 8010178:	f240 6263 	movw	r2, #1635	; 0x663
 801017c:	4930      	ldr	r1, [pc, #192]	; (8010240 <tcp_rexmit_rto_prepare+0xd8>)
 801017e:	4831      	ldr	r0, [pc, #196]	; (8010244 <tcp_rexmit_rto_prepare+0xdc>)
 8010180:	f003 fb1e 	bl	80137c0 <iprintf>

  if (pcb->unacked == NULL) {
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010188:	2b00      	cmp	r3, #0
 801018a:	d102      	bne.n	8010192 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801018c:	f06f 0305 	mvn.w	r3, #5
 8010190:	e050      	b.n	8010234 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010196:	60fb      	str	r3, [r7, #12]
 8010198:	e00b      	b.n	80101b2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801019a:	68f8      	ldr	r0, [r7, #12]
 801019c:	f7ff fee6 	bl	800ff6c <tcp_output_segment_busy>
 80101a0:	4603      	mov	r3, r0
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d002      	beq.n	80101ac <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80101a6:	f06f 0305 	mvn.w	r3, #5
 80101aa:	e043      	b.n	8010234 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	60fb      	str	r3, [r7, #12]
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d1ef      	bne.n	801019a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80101ba:	68f8      	ldr	r0, [r7, #12]
 80101bc:	f7ff fed6 	bl	800ff6c <tcp_output_segment_busy>
 80101c0:	4603      	mov	r3, r0
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d002      	beq.n	80101cc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80101c6:	f06f 0305 	mvn.w	r3, #5
 80101ca:	e033      	b.n	8010234 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	2200      	movs	r2, #0
 80101e0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	8b5b      	ldrh	r3, [r3, #26]
 80101e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80101ea:	b29a      	uxth	r2, r3
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	68db      	ldr	r3, [r3, #12]
 80101f4:	685b      	ldr	r3, [r3, #4]
 80101f6:	4618      	mov	r0, r3
 80101f8:	f7f8 fdff 	bl	8008dfa <lwip_htonl>
 80101fc:	4604      	mov	r4, r0
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	891b      	ldrh	r3, [r3, #8]
 8010202:	461d      	mov	r5, r3
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	68db      	ldr	r3, [r3, #12]
 8010208:	899b      	ldrh	r3, [r3, #12]
 801020a:	b29b      	uxth	r3, r3
 801020c:	4618      	mov	r0, r3
 801020e:	f7f8 fddf 	bl	8008dd0 <lwip_htons>
 8010212:	4603      	mov	r3, r0
 8010214:	b2db      	uxtb	r3, r3
 8010216:	f003 0303 	and.w	r3, r3, #3
 801021a:	2b00      	cmp	r3, #0
 801021c:	d001      	beq.n	8010222 <tcp_rexmit_rto_prepare+0xba>
 801021e:	2301      	movs	r3, #1
 8010220:	e000      	b.n	8010224 <tcp_rexmit_rto_prepare+0xbc>
 8010222:	2300      	movs	r3, #0
 8010224:	442b      	add	r3, r5
 8010226:	18e2      	adds	r2, r4, r3
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	2200      	movs	r2, #0
 8010230:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8010232:	2300      	movs	r3, #0
}
 8010234:	4618      	mov	r0, r3
 8010236:	3710      	adds	r7, #16
 8010238:	46bd      	mov	sp, r7
 801023a:	bdb0      	pop	{r4, r5, r7, pc}
 801023c:	08015e54 	.word	0x08015e54
 8010240:	08016490 	.word	0x08016490
 8010244:	08015ea8 	.word	0x08015ea8

08010248 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8010248:	b580      	push	{r7, lr}
 801024a:	b082      	sub	sp, #8
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d106      	bne.n	8010264 <tcp_rexmit_rto_commit+0x1c>
 8010256:	4b0d      	ldr	r3, [pc, #52]	; (801028c <tcp_rexmit_rto_commit+0x44>)
 8010258:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801025c:	490c      	ldr	r1, [pc, #48]	; (8010290 <tcp_rexmit_rto_commit+0x48>)
 801025e:	480d      	ldr	r0, [pc, #52]	; (8010294 <tcp_rexmit_rto_commit+0x4c>)
 8010260:	f003 faae 	bl	80137c0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801026a:	2bff      	cmp	r3, #255	; 0xff
 801026c:	d007      	beq.n	801027e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010274:	3301      	adds	r3, #1
 8010276:	b2da      	uxtb	r2, r3
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801027e:	6878      	ldr	r0, [r7, #4]
 8010280:	f7ff fc80 	bl	800fb84 <tcp_output>
}
 8010284:	bf00      	nop
 8010286:	3708      	adds	r7, #8
 8010288:	46bd      	mov	sp, r7
 801028a:	bd80      	pop	{r7, pc}
 801028c:	08015e54 	.word	0x08015e54
 8010290:	080164b4 	.word	0x080164b4
 8010294:	08015ea8 	.word	0x08015ea8

08010298 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8010298:	b580      	push	{r7, lr}
 801029a:	b082      	sub	sp, #8
 801029c:	af00      	add	r7, sp, #0
 801029e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d106      	bne.n	80102b4 <tcp_rexmit_rto+0x1c>
 80102a6:	4b0a      	ldr	r3, [pc, #40]	; (80102d0 <tcp_rexmit_rto+0x38>)
 80102a8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80102ac:	4909      	ldr	r1, [pc, #36]	; (80102d4 <tcp_rexmit_rto+0x3c>)
 80102ae:	480a      	ldr	r0, [pc, #40]	; (80102d8 <tcp_rexmit_rto+0x40>)
 80102b0:	f003 fa86 	bl	80137c0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80102b4:	6878      	ldr	r0, [r7, #4]
 80102b6:	f7ff ff57 	bl	8010168 <tcp_rexmit_rto_prepare>
 80102ba:	4603      	mov	r3, r0
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d102      	bne.n	80102c6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80102c0:	6878      	ldr	r0, [r7, #4]
 80102c2:	f7ff ffc1 	bl	8010248 <tcp_rexmit_rto_commit>
  }
}
 80102c6:	bf00      	nop
 80102c8:	3708      	adds	r7, #8
 80102ca:	46bd      	mov	sp, r7
 80102cc:	bd80      	pop	{r7, pc}
 80102ce:	bf00      	nop
 80102d0:	08015e54 	.word	0x08015e54
 80102d4:	080164d8 	.word	0x080164d8
 80102d8:	08015ea8 	.word	0x08015ea8

080102dc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80102dc:	b590      	push	{r4, r7, lr}
 80102de:	b085      	sub	sp, #20
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d106      	bne.n	80102f8 <tcp_rexmit+0x1c>
 80102ea:	4b2f      	ldr	r3, [pc, #188]	; (80103a8 <tcp_rexmit+0xcc>)
 80102ec:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80102f0:	492e      	ldr	r1, [pc, #184]	; (80103ac <tcp_rexmit+0xd0>)
 80102f2:	482f      	ldr	r0, [pc, #188]	; (80103b0 <tcp_rexmit+0xd4>)
 80102f4:	f003 fa64 	bl	80137c0 <iprintf>

  if (pcb->unacked == NULL) {
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d102      	bne.n	8010306 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8010300:	f06f 0305 	mvn.w	r3, #5
 8010304:	e04c      	b.n	80103a0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801030a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801030c:	68b8      	ldr	r0, [r7, #8]
 801030e:	f7ff fe2d 	bl	800ff6c <tcp_output_segment_busy>
 8010312:	4603      	mov	r3, r0
 8010314:	2b00      	cmp	r3, #0
 8010316:	d002      	beq.n	801031e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8010318:	f06f 0305 	mvn.w	r3, #5
 801031c:	e040      	b.n	80103a0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801031e:	68bb      	ldr	r3, [r7, #8]
 8010320:	681a      	ldr	r2, [r3, #0]
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	336c      	adds	r3, #108	; 0x6c
 801032a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801032c:	e002      	b.n	8010334 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d011      	beq.n	8010360 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	68db      	ldr	r3, [r3, #12]
 8010342:	685b      	ldr	r3, [r3, #4]
 8010344:	4618      	mov	r0, r3
 8010346:	f7f8 fd58 	bl	8008dfa <lwip_htonl>
 801034a:	4604      	mov	r4, r0
 801034c:	68bb      	ldr	r3, [r7, #8]
 801034e:	68db      	ldr	r3, [r3, #12]
 8010350:	685b      	ldr	r3, [r3, #4]
 8010352:	4618      	mov	r0, r3
 8010354:	f7f8 fd51 	bl	8008dfa <lwip_htonl>
 8010358:	4603      	mov	r3, r0
 801035a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801035c:	2b00      	cmp	r3, #0
 801035e:	dbe6      	blt.n	801032e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	681a      	ldr	r2, [r3, #0]
 8010364:	68bb      	ldr	r3, [r7, #8]
 8010366:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	68ba      	ldr	r2, [r7, #8]
 801036c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801036e:	68bb      	ldr	r3, [r7, #8]
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d103      	bne.n	801037e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	2200      	movs	r2, #0
 801037a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010384:	2bff      	cmp	r3, #255	; 0xff
 8010386:	d007      	beq.n	8010398 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801038e:	3301      	adds	r3, #1
 8010390:	b2da      	uxtb	r2, r3
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	2200      	movs	r2, #0
 801039c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801039e:	2300      	movs	r3, #0
}
 80103a0:	4618      	mov	r0, r3
 80103a2:	3714      	adds	r7, #20
 80103a4:	46bd      	mov	sp, r7
 80103a6:	bd90      	pop	{r4, r7, pc}
 80103a8:	08015e54 	.word	0x08015e54
 80103ac:	080164f4 	.word	0x080164f4
 80103b0:	08015ea8 	.word	0x08015ea8

080103b4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80103b4:	b580      	push	{r7, lr}
 80103b6:	b082      	sub	sp, #8
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d106      	bne.n	80103d0 <tcp_rexmit_fast+0x1c>
 80103c2:	4b2a      	ldr	r3, [pc, #168]	; (801046c <tcp_rexmit_fast+0xb8>)
 80103c4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80103c8:	4929      	ldr	r1, [pc, #164]	; (8010470 <tcp_rexmit_fast+0xbc>)
 80103ca:	482a      	ldr	r0, [pc, #168]	; (8010474 <tcp_rexmit_fast+0xc0>)
 80103cc:	f003 f9f8 	bl	80137c0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d044      	beq.n	8010462 <tcp_rexmit_fast+0xae>
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	8b5b      	ldrh	r3, [r3, #26]
 80103dc:	f003 0304 	and.w	r3, r3, #4
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d13e      	bne.n	8010462 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80103e4:	6878      	ldr	r0, [r7, #4]
 80103e6:	f7ff ff79 	bl	80102dc <tcp_rexmit>
 80103ea:	4603      	mov	r3, r0
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d138      	bne.n	8010462 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80103fc:	4293      	cmp	r3, r2
 80103fe:	bf28      	it	cs
 8010400:	4613      	movcs	r3, r2
 8010402:	b29b      	uxth	r3, r3
 8010404:	0fda      	lsrs	r2, r3, #31
 8010406:	4413      	add	r3, r2
 8010408:	105b      	asrs	r3, r3, #1
 801040a:	b29a      	uxth	r2, r3
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010418:	461a      	mov	r2, r3
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801041e:	005b      	lsls	r3, r3, #1
 8010420:	429a      	cmp	r2, r3
 8010422:	d206      	bcs.n	8010432 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010428:	005b      	lsls	r3, r3, #1
 801042a:	b29a      	uxth	r2, r3
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801043c:	4619      	mov	r1, r3
 801043e:	0049      	lsls	r1, r1, #1
 8010440:	440b      	add	r3, r1
 8010442:	b29b      	uxth	r3, r3
 8010444:	4413      	add	r3, r2
 8010446:	b29a      	uxth	r2, r3
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	8b5b      	ldrh	r3, [r3, #26]
 8010452:	f043 0304 	orr.w	r3, r3, #4
 8010456:	b29a      	uxth	r2, r3
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	2200      	movs	r2, #0
 8010460:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8010462:	bf00      	nop
 8010464:	3708      	adds	r7, #8
 8010466:	46bd      	mov	sp, r7
 8010468:	bd80      	pop	{r7, pc}
 801046a:	bf00      	nop
 801046c:	08015e54 	.word	0x08015e54
 8010470:	0801650c 	.word	0x0801650c
 8010474:	08015ea8 	.word	0x08015ea8

08010478 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8010478:	b580      	push	{r7, lr}
 801047a:	b086      	sub	sp, #24
 801047c:	af00      	add	r7, sp, #0
 801047e:	60f8      	str	r0, [r7, #12]
 8010480:	607b      	str	r3, [r7, #4]
 8010482:	460b      	mov	r3, r1
 8010484:	817b      	strh	r3, [r7, #10]
 8010486:	4613      	mov	r3, r2
 8010488:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801048a:	897a      	ldrh	r2, [r7, #10]
 801048c:	893b      	ldrh	r3, [r7, #8]
 801048e:	4413      	add	r3, r2
 8010490:	b29b      	uxth	r3, r3
 8010492:	3314      	adds	r3, #20
 8010494:	b29b      	uxth	r3, r3
 8010496:	f44f 7220 	mov.w	r2, #640	; 0x280
 801049a:	4619      	mov	r1, r3
 801049c:	2022      	movs	r0, #34	; 0x22
 801049e:	f7f9 fd11 	bl	8009ec4 <pbuf_alloc>
 80104a2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80104a4:	697b      	ldr	r3, [r7, #20]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d04d      	beq.n	8010546 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80104aa:	897b      	ldrh	r3, [r7, #10]
 80104ac:	3313      	adds	r3, #19
 80104ae:	697a      	ldr	r2, [r7, #20]
 80104b0:	8952      	ldrh	r2, [r2, #10]
 80104b2:	4293      	cmp	r3, r2
 80104b4:	db06      	blt.n	80104c4 <tcp_output_alloc_header_common+0x4c>
 80104b6:	4b26      	ldr	r3, [pc, #152]	; (8010550 <tcp_output_alloc_header_common+0xd8>)
 80104b8:	f240 7223 	movw	r2, #1827	; 0x723
 80104bc:	4925      	ldr	r1, [pc, #148]	; (8010554 <tcp_output_alloc_header_common+0xdc>)
 80104be:	4826      	ldr	r0, [pc, #152]	; (8010558 <tcp_output_alloc_header_common+0xe0>)
 80104c0:	f003 f97e 	bl	80137c0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80104c4:	697b      	ldr	r3, [r7, #20]
 80104c6:	685b      	ldr	r3, [r3, #4]
 80104c8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80104ca:	8c3b      	ldrh	r3, [r7, #32]
 80104cc:	4618      	mov	r0, r3
 80104ce:	f7f8 fc7f 	bl	8008dd0 <lwip_htons>
 80104d2:	4603      	mov	r3, r0
 80104d4:	461a      	mov	r2, r3
 80104d6:	693b      	ldr	r3, [r7, #16]
 80104d8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80104da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80104dc:	4618      	mov	r0, r3
 80104de:	f7f8 fc77 	bl	8008dd0 <lwip_htons>
 80104e2:	4603      	mov	r3, r0
 80104e4:	461a      	mov	r2, r3
 80104e6:	693b      	ldr	r3, [r7, #16]
 80104e8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80104ea:	693b      	ldr	r3, [r7, #16]
 80104ec:	687a      	ldr	r2, [r7, #4]
 80104ee:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80104f0:	68f8      	ldr	r0, [r7, #12]
 80104f2:	f7f8 fc82 	bl	8008dfa <lwip_htonl>
 80104f6:	4602      	mov	r2, r0
 80104f8:	693b      	ldr	r3, [r7, #16]
 80104fa:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80104fc:	897b      	ldrh	r3, [r7, #10]
 80104fe:	089b      	lsrs	r3, r3, #2
 8010500:	b29b      	uxth	r3, r3
 8010502:	3305      	adds	r3, #5
 8010504:	b29b      	uxth	r3, r3
 8010506:	031b      	lsls	r3, r3, #12
 8010508:	b29a      	uxth	r2, r3
 801050a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801050e:	b29b      	uxth	r3, r3
 8010510:	4313      	orrs	r3, r2
 8010512:	b29b      	uxth	r3, r3
 8010514:	4618      	mov	r0, r3
 8010516:	f7f8 fc5b 	bl	8008dd0 <lwip_htons>
 801051a:	4603      	mov	r3, r0
 801051c:	461a      	mov	r2, r3
 801051e:	693b      	ldr	r3, [r7, #16]
 8010520:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8010522:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010524:	4618      	mov	r0, r3
 8010526:	f7f8 fc53 	bl	8008dd0 <lwip_htons>
 801052a:	4603      	mov	r3, r0
 801052c:	461a      	mov	r2, r3
 801052e:	693b      	ldr	r3, [r7, #16]
 8010530:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8010532:	693b      	ldr	r3, [r7, #16]
 8010534:	2200      	movs	r2, #0
 8010536:	741a      	strb	r2, [r3, #16]
 8010538:	2200      	movs	r2, #0
 801053a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801053c:	693b      	ldr	r3, [r7, #16]
 801053e:	2200      	movs	r2, #0
 8010540:	749a      	strb	r2, [r3, #18]
 8010542:	2200      	movs	r2, #0
 8010544:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8010546:	697b      	ldr	r3, [r7, #20]
}
 8010548:	4618      	mov	r0, r3
 801054a:	3718      	adds	r7, #24
 801054c:	46bd      	mov	sp, r7
 801054e:	bd80      	pop	{r7, pc}
 8010550:	08015e54 	.word	0x08015e54
 8010554:	0801652c 	.word	0x0801652c
 8010558:	08015ea8 	.word	0x08015ea8

0801055c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801055c:	b5b0      	push	{r4, r5, r7, lr}
 801055e:	b08a      	sub	sp, #40	; 0x28
 8010560:	af04      	add	r7, sp, #16
 8010562:	60f8      	str	r0, [r7, #12]
 8010564:	607b      	str	r3, [r7, #4]
 8010566:	460b      	mov	r3, r1
 8010568:	817b      	strh	r3, [r7, #10]
 801056a:	4613      	mov	r3, r2
 801056c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d106      	bne.n	8010582 <tcp_output_alloc_header+0x26>
 8010574:	4b15      	ldr	r3, [pc, #84]	; (80105cc <tcp_output_alloc_header+0x70>)
 8010576:	f240 7242 	movw	r2, #1858	; 0x742
 801057a:	4915      	ldr	r1, [pc, #84]	; (80105d0 <tcp_output_alloc_header+0x74>)
 801057c:	4815      	ldr	r0, [pc, #84]	; (80105d4 <tcp_output_alloc_header+0x78>)
 801057e:	f003 f91f 	bl	80137c0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	8adb      	ldrh	r3, [r3, #22]
 801058a:	68fa      	ldr	r2, [r7, #12]
 801058c:	8b12      	ldrh	r2, [r2, #24]
 801058e:	68f9      	ldr	r1, [r7, #12]
 8010590:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8010592:	893d      	ldrh	r5, [r7, #8]
 8010594:	897c      	ldrh	r4, [r7, #10]
 8010596:	9103      	str	r1, [sp, #12]
 8010598:	2110      	movs	r1, #16
 801059a:	9102      	str	r1, [sp, #8]
 801059c:	9201      	str	r2, [sp, #4]
 801059e:	9300      	str	r3, [sp, #0]
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	462a      	mov	r2, r5
 80105a4:	4621      	mov	r1, r4
 80105a6:	f7ff ff67 	bl	8010478 <tcp_output_alloc_header_common>
 80105aa:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80105ac:	697b      	ldr	r3, [r7, #20]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d006      	beq.n	80105c0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105b6:	68fa      	ldr	r2, [r7, #12]
 80105b8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80105ba:	441a      	add	r2, r3
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80105c0:	697b      	ldr	r3, [r7, #20]
}
 80105c2:	4618      	mov	r0, r3
 80105c4:	3718      	adds	r7, #24
 80105c6:	46bd      	mov	sp, r7
 80105c8:	bdb0      	pop	{r4, r5, r7, pc}
 80105ca:	bf00      	nop
 80105cc:	08015e54 	.word	0x08015e54
 80105d0:	0801655c 	.word	0x0801655c
 80105d4:	08015ea8 	.word	0x08015ea8

080105d8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80105d8:	b580      	push	{r7, lr}
 80105da:	b088      	sub	sp, #32
 80105dc:	af00      	add	r7, sp, #0
 80105de:	60f8      	str	r0, [r7, #12]
 80105e0:	60b9      	str	r1, [r7, #8]
 80105e2:	4611      	mov	r1, r2
 80105e4:	461a      	mov	r2, r3
 80105e6:	460b      	mov	r3, r1
 80105e8:	71fb      	strb	r3, [r7, #7]
 80105ea:	4613      	mov	r3, r2
 80105ec:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80105ee:	2300      	movs	r3, #0
 80105f0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80105f2:	68bb      	ldr	r3, [r7, #8]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d106      	bne.n	8010606 <tcp_output_fill_options+0x2e>
 80105f8:	4b13      	ldr	r3, [pc, #76]	; (8010648 <tcp_output_fill_options+0x70>)
 80105fa:	f240 7256 	movw	r2, #1878	; 0x756
 80105fe:	4913      	ldr	r1, [pc, #76]	; (801064c <tcp_output_fill_options+0x74>)
 8010600:	4813      	ldr	r0, [pc, #76]	; (8010650 <tcp_output_fill_options+0x78>)
 8010602:	f003 f8dd 	bl	80137c0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8010606:	68bb      	ldr	r3, [r7, #8]
 8010608:	685b      	ldr	r3, [r3, #4]
 801060a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801060c:	69bb      	ldr	r3, [r7, #24]
 801060e:	3314      	adds	r3, #20
 8010610:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8010612:	69bb      	ldr	r3, [r7, #24]
 8010614:	f103 0214 	add.w	r2, r3, #20
 8010618:	8bfb      	ldrh	r3, [r7, #30]
 801061a:	009b      	lsls	r3, r3, #2
 801061c:	4619      	mov	r1, r3
 801061e:	79fb      	ldrb	r3, [r7, #7]
 8010620:	009b      	lsls	r3, r3, #2
 8010622:	f003 0304 	and.w	r3, r3, #4
 8010626:	440b      	add	r3, r1
 8010628:	4413      	add	r3, r2
 801062a:	697a      	ldr	r2, [r7, #20]
 801062c:	429a      	cmp	r2, r3
 801062e:	d006      	beq.n	801063e <tcp_output_fill_options+0x66>
 8010630:	4b05      	ldr	r3, [pc, #20]	; (8010648 <tcp_output_fill_options+0x70>)
 8010632:	f240 7275 	movw	r2, #1909	; 0x775
 8010636:	4907      	ldr	r1, [pc, #28]	; (8010654 <tcp_output_fill_options+0x7c>)
 8010638:	4805      	ldr	r0, [pc, #20]	; (8010650 <tcp_output_fill_options+0x78>)
 801063a:	f003 f8c1 	bl	80137c0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801063e:	bf00      	nop
 8010640:	3720      	adds	r7, #32
 8010642:	46bd      	mov	sp, r7
 8010644:	bd80      	pop	{r7, pc}
 8010646:	bf00      	nop
 8010648:	08015e54 	.word	0x08015e54
 801064c:	08016584 	.word	0x08016584
 8010650:	08015ea8 	.word	0x08015ea8
 8010654:	0801647c 	.word	0x0801647c

08010658 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b08a      	sub	sp, #40	; 0x28
 801065c:	af04      	add	r7, sp, #16
 801065e:	60f8      	str	r0, [r7, #12]
 8010660:	60b9      	str	r1, [r7, #8]
 8010662:	607a      	str	r2, [r7, #4]
 8010664:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8010666:	68bb      	ldr	r3, [r7, #8]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d106      	bne.n	801067a <tcp_output_control_segment+0x22>
 801066c:	4b1c      	ldr	r3, [pc, #112]	; (80106e0 <tcp_output_control_segment+0x88>)
 801066e:	f240 7287 	movw	r2, #1927	; 0x787
 8010672:	491c      	ldr	r1, [pc, #112]	; (80106e4 <tcp_output_control_segment+0x8c>)
 8010674:	481c      	ldr	r0, [pc, #112]	; (80106e8 <tcp_output_control_segment+0x90>)
 8010676:	f003 f8a3 	bl	80137c0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801067a:	683a      	ldr	r2, [r7, #0]
 801067c:	6879      	ldr	r1, [r7, #4]
 801067e:	68f8      	ldr	r0, [r7, #12]
 8010680:	f7fe fae8 	bl	800ec54 <tcp_route>
 8010684:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8010686:	693b      	ldr	r3, [r7, #16]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d102      	bne.n	8010692 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801068c:	23fc      	movs	r3, #252	; 0xfc
 801068e:	75fb      	strb	r3, [r7, #23]
 8010690:	e01c      	b.n	80106cc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d006      	beq.n	80106a6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	7adb      	ldrb	r3, [r3, #11]
 801069c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	7a9b      	ldrb	r3, [r3, #10]
 80106a2:	757b      	strb	r3, [r7, #21]
 80106a4:	e003      	b.n	80106ae <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80106a6:	23ff      	movs	r3, #255	; 0xff
 80106a8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80106aa:	2300      	movs	r3, #0
 80106ac:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80106ae:	7dba      	ldrb	r2, [r7, #22]
 80106b0:	693b      	ldr	r3, [r7, #16]
 80106b2:	9302      	str	r3, [sp, #8]
 80106b4:	2306      	movs	r3, #6
 80106b6:	9301      	str	r3, [sp, #4]
 80106b8:	7d7b      	ldrb	r3, [r7, #21]
 80106ba:	9300      	str	r3, [sp, #0]
 80106bc:	4613      	mov	r3, r2
 80106be:	683a      	ldr	r2, [r7, #0]
 80106c0:	6879      	ldr	r1, [r7, #4]
 80106c2:	68b8      	ldr	r0, [r7, #8]
 80106c4:	f001 ff70 	bl	80125a8 <ip4_output_if>
 80106c8:	4603      	mov	r3, r0
 80106ca:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80106cc:	68b8      	ldr	r0, [r7, #8]
 80106ce:	f7f9 fedd 	bl	800a48c <pbuf_free>
  return err;
 80106d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80106d6:	4618      	mov	r0, r3
 80106d8:	3718      	adds	r7, #24
 80106da:	46bd      	mov	sp, r7
 80106dc:	bd80      	pop	{r7, pc}
 80106de:	bf00      	nop
 80106e0:	08015e54 	.word	0x08015e54
 80106e4:	080165ac 	.word	0x080165ac
 80106e8:	08015ea8 	.word	0x08015ea8

080106ec <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80106ec:	b590      	push	{r4, r7, lr}
 80106ee:	b08b      	sub	sp, #44	; 0x2c
 80106f0:	af04      	add	r7, sp, #16
 80106f2:	60f8      	str	r0, [r7, #12]
 80106f4:	60b9      	str	r1, [r7, #8]
 80106f6:	607a      	str	r2, [r7, #4]
 80106f8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80106fa:	683b      	ldr	r3, [r7, #0]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d106      	bne.n	801070e <tcp_rst+0x22>
 8010700:	4b1f      	ldr	r3, [pc, #124]	; (8010780 <tcp_rst+0x94>)
 8010702:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8010706:	491f      	ldr	r1, [pc, #124]	; (8010784 <tcp_rst+0x98>)
 8010708:	481f      	ldr	r0, [pc, #124]	; (8010788 <tcp_rst+0x9c>)
 801070a:	f003 f859 	bl	80137c0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801070e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010710:	2b00      	cmp	r3, #0
 8010712:	d106      	bne.n	8010722 <tcp_rst+0x36>
 8010714:	4b1a      	ldr	r3, [pc, #104]	; (8010780 <tcp_rst+0x94>)
 8010716:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801071a:	491c      	ldr	r1, [pc, #112]	; (801078c <tcp_rst+0xa0>)
 801071c:	481a      	ldr	r0, [pc, #104]	; (8010788 <tcp_rst+0x9c>)
 801071e:	f003 f84f 	bl	80137c0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010722:	2300      	movs	r3, #0
 8010724:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8010726:	f246 0308 	movw	r3, #24584	; 0x6008
 801072a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801072c:	7dfb      	ldrb	r3, [r7, #23]
 801072e:	b29c      	uxth	r4, r3
 8010730:	68b8      	ldr	r0, [r7, #8]
 8010732:	f7f8 fb62 	bl	8008dfa <lwip_htonl>
 8010736:	4602      	mov	r2, r0
 8010738:	8abb      	ldrh	r3, [r7, #20]
 801073a:	9303      	str	r3, [sp, #12]
 801073c:	2314      	movs	r3, #20
 801073e:	9302      	str	r3, [sp, #8]
 8010740:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010742:	9301      	str	r3, [sp, #4]
 8010744:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010746:	9300      	str	r3, [sp, #0]
 8010748:	4613      	mov	r3, r2
 801074a:	2200      	movs	r2, #0
 801074c:	4621      	mov	r1, r4
 801074e:	6878      	ldr	r0, [r7, #4]
 8010750:	f7ff fe92 	bl	8010478 <tcp_output_alloc_header_common>
 8010754:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8010756:	693b      	ldr	r3, [r7, #16]
 8010758:	2b00      	cmp	r3, #0
 801075a:	d00c      	beq.n	8010776 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801075c:	7dfb      	ldrb	r3, [r7, #23]
 801075e:	2200      	movs	r2, #0
 8010760:	6939      	ldr	r1, [r7, #16]
 8010762:	68f8      	ldr	r0, [r7, #12]
 8010764:	f7ff ff38 	bl	80105d8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8010768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801076a:	683a      	ldr	r2, [r7, #0]
 801076c:	6939      	ldr	r1, [r7, #16]
 801076e:	68f8      	ldr	r0, [r7, #12]
 8010770:	f7ff ff72 	bl	8010658 <tcp_output_control_segment>
 8010774:	e000      	b.n	8010778 <tcp_rst+0x8c>
    return;
 8010776:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8010778:	371c      	adds	r7, #28
 801077a:	46bd      	mov	sp, r7
 801077c:	bd90      	pop	{r4, r7, pc}
 801077e:	bf00      	nop
 8010780:	08015e54 	.word	0x08015e54
 8010784:	080165d8 	.word	0x080165d8
 8010788:	08015ea8 	.word	0x08015ea8
 801078c:	080165f4 	.word	0x080165f4

08010790 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8010790:	b590      	push	{r4, r7, lr}
 8010792:	b087      	sub	sp, #28
 8010794:	af00      	add	r7, sp, #0
 8010796:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8010798:	2300      	movs	r3, #0
 801079a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801079c:	2300      	movs	r3, #0
 801079e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d106      	bne.n	80107b4 <tcp_send_empty_ack+0x24>
 80107a6:	4b28      	ldr	r3, [pc, #160]	; (8010848 <tcp_send_empty_ack+0xb8>)
 80107a8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80107ac:	4927      	ldr	r1, [pc, #156]	; (801084c <tcp_send_empty_ack+0xbc>)
 80107ae:	4828      	ldr	r0, [pc, #160]	; (8010850 <tcp_send_empty_ack+0xc0>)
 80107b0:	f003 f806 	bl	80137c0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80107b4:	7dfb      	ldrb	r3, [r7, #23]
 80107b6:	009b      	lsls	r3, r3, #2
 80107b8:	b2db      	uxtb	r3, r3
 80107ba:	f003 0304 	and.w	r3, r3, #4
 80107be:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80107c0:	7d7b      	ldrb	r3, [r7, #21]
 80107c2:	b29c      	uxth	r4, r3
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80107c8:	4618      	mov	r0, r3
 80107ca:	f7f8 fb16 	bl	8008dfa <lwip_htonl>
 80107ce:	4603      	mov	r3, r0
 80107d0:	2200      	movs	r2, #0
 80107d2:	4621      	mov	r1, r4
 80107d4:	6878      	ldr	r0, [r7, #4]
 80107d6:	f7ff fec1 	bl	801055c <tcp_output_alloc_header>
 80107da:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80107dc:	693b      	ldr	r3, [r7, #16]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d109      	bne.n	80107f6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	8b5b      	ldrh	r3, [r3, #26]
 80107e6:	f043 0303 	orr.w	r3, r3, #3
 80107ea:	b29a      	uxth	r2, r3
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80107f0:	f06f 0301 	mvn.w	r3, #1
 80107f4:	e023      	b.n	801083e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80107f6:	7dbb      	ldrb	r3, [r7, #22]
 80107f8:	7dfa      	ldrb	r2, [r7, #23]
 80107fa:	6939      	ldr	r1, [r7, #16]
 80107fc:	6878      	ldr	r0, [r7, #4]
 80107fe:	f7ff feeb 	bl	80105d8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010802:	687a      	ldr	r2, [r7, #4]
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	3304      	adds	r3, #4
 8010808:	6939      	ldr	r1, [r7, #16]
 801080a:	6878      	ldr	r0, [r7, #4]
 801080c:	f7ff ff24 	bl	8010658 <tcp_output_control_segment>
 8010810:	4603      	mov	r3, r0
 8010812:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8010814:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d007      	beq.n	801082c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	8b5b      	ldrh	r3, [r3, #26]
 8010820:	f043 0303 	orr.w	r3, r3, #3
 8010824:	b29a      	uxth	r2, r3
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	835a      	strh	r2, [r3, #26]
 801082a:	e006      	b.n	801083a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	8b5b      	ldrh	r3, [r3, #26]
 8010830:	f023 0303 	bic.w	r3, r3, #3
 8010834:	b29a      	uxth	r2, r3
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801083a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801083e:	4618      	mov	r0, r3
 8010840:	371c      	adds	r7, #28
 8010842:	46bd      	mov	sp, r7
 8010844:	bd90      	pop	{r4, r7, pc}
 8010846:	bf00      	nop
 8010848:	08015e54 	.word	0x08015e54
 801084c:	08016610 	.word	0x08016610
 8010850:	08015ea8 	.word	0x08015ea8

08010854 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8010854:	b590      	push	{r4, r7, lr}
 8010856:	b087      	sub	sp, #28
 8010858:	af00      	add	r7, sp, #0
 801085a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801085c:	2300      	movs	r3, #0
 801085e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	2b00      	cmp	r3, #0
 8010864:	d106      	bne.n	8010874 <tcp_keepalive+0x20>
 8010866:	4b18      	ldr	r3, [pc, #96]	; (80108c8 <tcp_keepalive+0x74>)
 8010868:	f640 0224 	movw	r2, #2084	; 0x824
 801086c:	4917      	ldr	r1, [pc, #92]	; (80108cc <tcp_keepalive+0x78>)
 801086e:	4818      	ldr	r0, [pc, #96]	; (80108d0 <tcp_keepalive+0x7c>)
 8010870:	f002 ffa6 	bl	80137c0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8010874:	7dfb      	ldrb	r3, [r7, #23]
 8010876:	b29c      	uxth	r4, r3
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801087c:	3b01      	subs	r3, #1
 801087e:	4618      	mov	r0, r3
 8010880:	f7f8 fabb 	bl	8008dfa <lwip_htonl>
 8010884:	4603      	mov	r3, r0
 8010886:	2200      	movs	r2, #0
 8010888:	4621      	mov	r1, r4
 801088a:	6878      	ldr	r0, [r7, #4]
 801088c:	f7ff fe66 	bl	801055c <tcp_output_alloc_header>
 8010890:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010892:	693b      	ldr	r3, [r7, #16]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d102      	bne.n	801089e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8010898:	f04f 33ff 	mov.w	r3, #4294967295
 801089c:	e010      	b.n	80108c0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801089e:	7dfb      	ldrb	r3, [r7, #23]
 80108a0:	2200      	movs	r2, #0
 80108a2:	6939      	ldr	r1, [r7, #16]
 80108a4:	6878      	ldr	r0, [r7, #4]
 80108a6:	f7ff fe97 	bl	80105d8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80108aa:	687a      	ldr	r2, [r7, #4]
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	3304      	adds	r3, #4
 80108b0:	6939      	ldr	r1, [r7, #16]
 80108b2:	6878      	ldr	r0, [r7, #4]
 80108b4:	f7ff fed0 	bl	8010658 <tcp_output_control_segment>
 80108b8:	4603      	mov	r3, r0
 80108ba:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80108bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80108c0:	4618      	mov	r0, r3
 80108c2:	371c      	adds	r7, #28
 80108c4:	46bd      	mov	sp, r7
 80108c6:	bd90      	pop	{r4, r7, pc}
 80108c8:	08015e54 	.word	0x08015e54
 80108cc:	08016630 	.word	0x08016630
 80108d0:	08015ea8 	.word	0x08015ea8

080108d4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80108d4:	b590      	push	{r4, r7, lr}
 80108d6:	b08b      	sub	sp, #44	; 0x2c
 80108d8:	af00      	add	r7, sp, #0
 80108da:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80108dc:	2300      	movs	r3, #0
 80108de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d106      	bne.n	80108f6 <tcp_zero_window_probe+0x22>
 80108e8:	4b4c      	ldr	r3, [pc, #304]	; (8010a1c <tcp_zero_window_probe+0x148>)
 80108ea:	f640 024f 	movw	r2, #2127	; 0x84f
 80108ee:	494c      	ldr	r1, [pc, #304]	; (8010a20 <tcp_zero_window_probe+0x14c>)
 80108f0:	484c      	ldr	r0, [pc, #304]	; (8010a24 <tcp_zero_window_probe+0x150>)
 80108f2:	f002 ff65 	bl	80137c0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80108fa:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80108fc:	6a3b      	ldr	r3, [r7, #32]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d101      	bne.n	8010906 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8010902:	2300      	movs	r3, #0
 8010904:	e086      	b.n	8010a14 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801090c:	2bff      	cmp	r3, #255	; 0xff
 801090e:	d007      	beq.n	8010920 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010916:	3301      	adds	r3, #1
 8010918:	b2da      	uxtb	r2, r3
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8010920:	6a3b      	ldr	r3, [r7, #32]
 8010922:	68db      	ldr	r3, [r3, #12]
 8010924:	899b      	ldrh	r3, [r3, #12]
 8010926:	b29b      	uxth	r3, r3
 8010928:	4618      	mov	r0, r3
 801092a:	f7f8 fa51 	bl	8008dd0 <lwip_htons>
 801092e:	4603      	mov	r3, r0
 8010930:	b2db      	uxtb	r3, r3
 8010932:	f003 0301 	and.w	r3, r3, #1
 8010936:	2b00      	cmp	r3, #0
 8010938:	d005      	beq.n	8010946 <tcp_zero_window_probe+0x72>
 801093a:	6a3b      	ldr	r3, [r7, #32]
 801093c:	891b      	ldrh	r3, [r3, #8]
 801093e:	2b00      	cmp	r3, #0
 8010940:	d101      	bne.n	8010946 <tcp_zero_window_probe+0x72>
 8010942:	2301      	movs	r3, #1
 8010944:	e000      	b.n	8010948 <tcp_zero_window_probe+0x74>
 8010946:	2300      	movs	r3, #0
 8010948:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801094a:	7ffb      	ldrb	r3, [r7, #31]
 801094c:	2b00      	cmp	r3, #0
 801094e:	bf0c      	ite	eq
 8010950:	2301      	moveq	r3, #1
 8010952:	2300      	movne	r3, #0
 8010954:	b2db      	uxtb	r3, r3
 8010956:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8010958:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801095c:	b299      	uxth	r1, r3
 801095e:	6a3b      	ldr	r3, [r7, #32]
 8010960:	68db      	ldr	r3, [r3, #12]
 8010962:	685b      	ldr	r3, [r3, #4]
 8010964:	8bba      	ldrh	r2, [r7, #28]
 8010966:	6878      	ldr	r0, [r7, #4]
 8010968:	f7ff fdf8 	bl	801055c <tcp_output_alloc_header>
 801096c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801096e:	69bb      	ldr	r3, [r7, #24]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d102      	bne.n	801097a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8010974:	f04f 33ff 	mov.w	r3, #4294967295
 8010978:	e04c      	b.n	8010a14 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801097a:	69bb      	ldr	r3, [r7, #24]
 801097c:	685b      	ldr	r3, [r3, #4]
 801097e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8010980:	7ffb      	ldrb	r3, [r7, #31]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d011      	beq.n	80109aa <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8010986:	697b      	ldr	r3, [r7, #20]
 8010988:	899b      	ldrh	r3, [r3, #12]
 801098a:	b29b      	uxth	r3, r3
 801098c:	b21b      	sxth	r3, r3
 801098e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010992:	b21c      	sxth	r4, r3
 8010994:	2011      	movs	r0, #17
 8010996:	f7f8 fa1b 	bl	8008dd0 <lwip_htons>
 801099a:	4603      	mov	r3, r0
 801099c:	b21b      	sxth	r3, r3
 801099e:	4323      	orrs	r3, r4
 80109a0:	b21b      	sxth	r3, r3
 80109a2:	b29a      	uxth	r2, r3
 80109a4:	697b      	ldr	r3, [r7, #20]
 80109a6:	819a      	strh	r2, [r3, #12]
 80109a8:	e010      	b.n	80109cc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80109aa:	69bb      	ldr	r3, [r7, #24]
 80109ac:	685b      	ldr	r3, [r3, #4]
 80109ae:	3314      	adds	r3, #20
 80109b0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80109b2:	6a3b      	ldr	r3, [r7, #32]
 80109b4:	6858      	ldr	r0, [r3, #4]
 80109b6:	6a3b      	ldr	r3, [r7, #32]
 80109b8:	685b      	ldr	r3, [r3, #4]
 80109ba:	891a      	ldrh	r2, [r3, #8]
 80109bc:	6a3b      	ldr	r3, [r7, #32]
 80109be:	891b      	ldrh	r3, [r3, #8]
 80109c0:	1ad3      	subs	r3, r2, r3
 80109c2:	b29b      	uxth	r3, r3
 80109c4:	2201      	movs	r2, #1
 80109c6:	6939      	ldr	r1, [r7, #16]
 80109c8:	f7f9 ff5a 	bl	800a880 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80109cc:	6a3b      	ldr	r3, [r7, #32]
 80109ce:	68db      	ldr	r3, [r3, #12]
 80109d0:	685b      	ldr	r3, [r3, #4]
 80109d2:	4618      	mov	r0, r3
 80109d4:	f7f8 fa11 	bl	8008dfa <lwip_htonl>
 80109d8:	4603      	mov	r3, r0
 80109da:	3301      	adds	r3, #1
 80109dc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	1ad3      	subs	r3, r2, r3
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	da02      	bge.n	80109f0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	68fa      	ldr	r2, [r7, #12]
 80109ee:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80109f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80109f4:	2200      	movs	r2, #0
 80109f6:	69b9      	ldr	r1, [r7, #24]
 80109f8:	6878      	ldr	r0, [r7, #4]
 80109fa:	f7ff fded 	bl	80105d8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80109fe:	687a      	ldr	r2, [r7, #4]
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	3304      	adds	r3, #4
 8010a04:	69b9      	ldr	r1, [r7, #24]
 8010a06:	6878      	ldr	r0, [r7, #4]
 8010a08:	f7ff fe26 	bl	8010658 <tcp_output_control_segment>
 8010a0c:	4603      	mov	r3, r0
 8010a0e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010a10:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010a14:	4618      	mov	r0, r3
 8010a16:	372c      	adds	r7, #44	; 0x2c
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	bd90      	pop	{r4, r7, pc}
 8010a1c:	08015e54 	.word	0x08015e54
 8010a20:	0801664c 	.word	0x0801664c
 8010a24:	08015ea8 	.word	0x08015ea8

08010a28 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b082      	sub	sp, #8
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8010a30:	f7fa f814 	bl	800aa5c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8010a34:	4b0a      	ldr	r3, [pc, #40]	; (8010a60 <tcpip_tcp_timer+0x38>)
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d103      	bne.n	8010a44 <tcpip_tcp_timer+0x1c>
 8010a3c:	4b09      	ldr	r3, [pc, #36]	; (8010a64 <tcpip_tcp_timer+0x3c>)
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d005      	beq.n	8010a50 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010a44:	2200      	movs	r2, #0
 8010a46:	4908      	ldr	r1, [pc, #32]	; (8010a68 <tcpip_tcp_timer+0x40>)
 8010a48:	20fa      	movs	r0, #250	; 0xfa
 8010a4a:	f000 f8f3 	bl	8010c34 <sys_timeout>
 8010a4e:	e003      	b.n	8010a58 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8010a50:	4b06      	ldr	r3, [pc, #24]	; (8010a6c <tcpip_tcp_timer+0x44>)
 8010a52:	2200      	movs	r2, #0
 8010a54:	601a      	str	r2, [r3, #0]
  }
}
 8010a56:	bf00      	nop
 8010a58:	bf00      	nop
 8010a5a:	3708      	adds	r7, #8
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	bd80      	pop	{r7, pc}
 8010a60:	200085d8 	.word	0x200085d8
 8010a64:	200085dc 	.word	0x200085dc
 8010a68:	08010a29 	.word	0x08010a29
 8010a6c:	20008624 	.word	0x20008624

08010a70 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8010a70:	b580      	push	{r7, lr}
 8010a72:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8010a74:	4b0a      	ldr	r3, [pc, #40]	; (8010aa0 <tcp_timer_needed+0x30>)
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d10f      	bne.n	8010a9c <tcp_timer_needed+0x2c>
 8010a7c:	4b09      	ldr	r3, [pc, #36]	; (8010aa4 <tcp_timer_needed+0x34>)
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d103      	bne.n	8010a8c <tcp_timer_needed+0x1c>
 8010a84:	4b08      	ldr	r3, [pc, #32]	; (8010aa8 <tcp_timer_needed+0x38>)
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d007      	beq.n	8010a9c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8010a8c:	4b04      	ldr	r3, [pc, #16]	; (8010aa0 <tcp_timer_needed+0x30>)
 8010a8e:	2201      	movs	r2, #1
 8010a90:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010a92:	2200      	movs	r2, #0
 8010a94:	4905      	ldr	r1, [pc, #20]	; (8010aac <tcp_timer_needed+0x3c>)
 8010a96:	20fa      	movs	r0, #250	; 0xfa
 8010a98:	f000 f8cc 	bl	8010c34 <sys_timeout>
  }
}
 8010a9c:	bf00      	nop
 8010a9e:	bd80      	pop	{r7, pc}
 8010aa0:	20008624 	.word	0x20008624
 8010aa4:	200085d8 	.word	0x200085d8
 8010aa8:	200085dc 	.word	0x200085dc
 8010aac:	08010a29 	.word	0x08010a29

08010ab0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b086      	sub	sp, #24
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	60f8      	str	r0, [r7, #12]
 8010ab8:	60b9      	str	r1, [r7, #8]
 8010aba:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8010abc:	2006      	movs	r0, #6
 8010abe:	f7f8 fdff 	bl	80096c0 <memp_malloc>
 8010ac2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8010ac4:	693b      	ldr	r3, [r7, #16]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d109      	bne.n	8010ade <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8010aca:	693b      	ldr	r3, [r7, #16]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d151      	bne.n	8010b74 <sys_timeout_abs+0xc4>
 8010ad0:	4b2a      	ldr	r3, [pc, #168]	; (8010b7c <sys_timeout_abs+0xcc>)
 8010ad2:	22be      	movs	r2, #190	; 0xbe
 8010ad4:	492a      	ldr	r1, [pc, #168]	; (8010b80 <sys_timeout_abs+0xd0>)
 8010ad6:	482b      	ldr	r0, [pc, #172]	; (8010b84 <sys_timeout_abs+0xd4>)
 8010ad8:	f002 fe72 	bl	80137c0 <iprintf>
    return;
 8010adc:	e04a      	b.n	8010b74 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8010ade:	693b      	ldr	r3, [r7, #16]
 8010ae0:	2200      	movs	r2, #0
 8010ae2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8010ae4:	693b      	ldr	r3, [r7, #16]
 8010ae6:	68ba      	ldr	r2, [r7, #8]
 8010ae8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8010aea:	693b      	ldr	r3, [r7, #16]
 8010aec:	687a      	ldr	r2, [r7, #4]
 8010aee:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8010af0:	693b      	ldr	r3, [r7, #16]
 8010af2:	68fa      	ldr	r2, [r7, #12]
 8010af4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8010af6:	4b24      	ldr	r3, [pc, #144]	; (8010b88 <sys_timeout_abs+0xd8>)
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d103      	bne.n	8010b06 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8010afe:	4a22      	ldr	r2, [pc, #136]	; (8010b88 <sys_timeout_abs+0xd8>)
 8010b00:	693b      	ldr	r3, [r7, #16]
 8010b02:	6013      	str	r3, [r2, #0]
    return;
 8010b04:	e037      	b.n	8010b76 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8010b06:	693b      	ldr	r3, [r7, #16]
 8010b08:	685a      	ldr	r2, [r3, #4]
 8010b0a:	4b1f      	ldr	r3, [pc, #124]	; (8010b88 <sys_timeout_abs+0xd8>)
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	685b      	ldr	r3, [r3, #4]
 8010b10:	1ad3      	subs	r3, r2, r3
 8010b12:	0fdb      	lsrs	r3, r3, #31
 8010b14:	f003 0301 	and.w	r3, r3, #1
 8010b18:	b2db      	uxtb	r3, r3
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d007      	beq.n	8010b2e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8010b1e:	4b1a      	ldr	r3, [pc, #104]	; (8010b88 <sys_timeout_abs+0xd8>)
 8010b20:	681a      	ldr	r2, [r3, #0]
 8010b22:	693b      	ldr	r3, [r7, #16]
 8010b24:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8010b26:	4a18      	ldr	r2, [pc, #96]	; (8010b88 <sys_timeout_abs+0xd8>)
 8010b28:	693b      	ldr	r3, [r7, #16]
 8010b2a:	6013      	str	r3, [r2, #0]
 8010b2c:	e023      	b.n	8010b76 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8010b2e:	4b16      	ldr	r3, [pc, #88]	; (8010b88 <sys_timeout_abs+0xd8>)
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	617b      	str	r3, [r7, #20]
 8010b34:	e01a      	b.n	8010b6c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8010b36:	697b      	ldr	r3, [r7, #20]
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d00b      	beq.n	8010b56 <sys_timeout_abs+0xa6>
 8010b3e:	693b      	ldr	r3, [r7, #16]
 8010b40:	685a      	ldr	r2, [r3, #4]
 8010b42:	697b      	ldr	r3, [r7, #20]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	685b      	ldr	r3, [r3, #4]
 8010b48:	1ad3      	subs	r3, r2, r3
 8010b4a:	0fdb      	lsrs	r3, r3, #31
 8010b4c:	f003 0301 	and.w	r3, r3, #1
 8010b50:	b2db      	uxtb	r3, r3
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d007      	beq.n	8010b66 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8010b56:	697b      	ldr	r3, [r7, #20]
 8010b58:	681a      	ldr	r2, [r3, #0]
 8010b5a:	693b      	ldr	r3, [r7, #16]
 8010b5c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8010b5e:	697b      	ldr	r3, [r7, #20]
 8010b60:	693a      	ldr	r2, [r7, #16]
 8010b62:	601a      	str	r2, [r3, #0]
        break;
 8010b64:	e007      	b.n	8010b76 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8010b66:	697b      	ldr	r3, [r7, #20]
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	617b      	str	r3, [r7, #20]
 8010b6c:	697b      	ldr	r3, [r7, #20]
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d1e1      	bne.n	8010b36 <sys_timeout_abs+0x86>
 8010b72:	e000      	b.n	8010b76 <sys_timeout_abs+0xc6>
    return;
 8010b74:	bf00      	nop
      }
    }
  }
}
 8010b76:	3718      	adds	r7, #24
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	bd80      	pop	{r7, pc}
 8010b7c:	08016670 	.word	0x08016670
 8010b80:	080166a4 	.word	0x080166a4
 8010b84:	080166e4 	.word	0x080166e4
 8010b88:	2000861c 	.word	0x2000861c

08010b8c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8010b8c:	b580      	push	{r7, lr}
 8010b8e:	b086      	sub	sp, #24
 8010b90:	af00      	add	r7, sp, #0
 8010b92:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8010b98:	697b      	ldr	r3, [r7, #20]
 8010b9a:	685b      	ldr	r3, [r3, #4]
 8010b9c:	4798      	blx	r3

  now = sys_now();
 8010b9e:	f7f7 fef7 	bl	8008990 <sys_now>
 8010ba2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8010ba4:	697b      	ldr	r3, [r7, #20]
 8010ba6:	681a      	ldr	r2, [r3, #0]
 8010ba8:	4b0f      	ldr	r3, [pc, #60]	; (8010be8 <lwip_cyclic_timer+0x5c>)
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	4413      	add	r3, r2
 8010bae:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8010bb0:	68fa      	ldr	r2, [r7, #12]
 8010bb2:	693b      	ldr	r3, [r7, #16]
 8010bb4:	1ad3      	subs	r3, r2, r3
 8010bb6:	0fdb      	lsrs	r3, r3, #31
 8010bb8:	f003 0301 	and.w	r3, r3, #1
 8010bbc:	b2db      	uxtb	r3, r3
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d009      	beq.n	8010bd6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8010bc2:	697b      	ldr	r3, [r7, #20]
 8010bc4:	681a      	ldr	r2, [r3, #0]
 8010bc6:	693b      	ldr	r3, [r7, #16]
 8010bc8:	4413      	add	r3, r2
 8010bca:	687a      	ldr	r2, [r7, #4]
 8010bcc:	4907      	ldr	r1, [pc, #28]	; (8010bec <lwip_cyclic_timer+0x60>)
 8010bce:	4618      	mov	r0, r3
 8010bd0:	f7ff ff6e 	bl	8010ab0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8010bd4:	e004      	b.n	8010be0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8010bd6:	687a      	ldr	r2, [r7, #4]
 8010bd8:	4904      	ldr	r1, [pc, #16]	; (8010bec <lwip_cyclic_timer+0x60>)
 8010bda:	68f8      	ldr	r0, [r7, #12]
 8010bdc:	f7ff ff68 	bl	8010ab0 <sys_timeout_abs>
}
 8010be0:	bf00      	nop
 8010be2:	3718      	adds	r7, #24
 8010be4:	46bd      	mov	sp, r7
 8010be6:	bd80      	pop	{r7, pc}
 8010be8:	20008620 	.word	0x20008620
 8010bec:	08010b8d 	.word	0x08010b8d

08010bf0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8010bf0:	b580      	push	{r7, lr}
 8010bf2:	b082      	sub	sp, #8
 8010bf4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010bf6:	2301      	movs	r3, #1
 8010bf8:	607b      	str	r3, [r7, #4]
 8010bfa:	e00e      	b.n	8010c1a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8010bfc:	4a0b      	ldr	r2, [pc, #44]	; (8010c2c <sys_timeouts_init+0x3c>)
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	00db      	lsls	r3, r3, #3
 8010c08:	4a08      	ldr	r2, [pc, #32]	; (8010c2c <sys_timeouts_init+0x3c>)
 8010c0a:	4413      	add	r3, r2
 8010c0c:	461a      	mov	r2, r3
 8010c0e:	4908      	ldr	r1, [pc, #32]	; (8010c30 <sys_timeouts_init+0x40>)
 8010c10:	f000 f810 	bl	8010c34 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	3301      	adds	r3, #1
 8010c18:	607b      	str	r3, [r7, #4]
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	2b02      	cmp	r3, #2
 8010c1e:	d9ed      	bls.n	8010bfc <sys_timeouts_init+0xc>
  }
}
 8010c20:	bf00      	nop
 8010c22:	bf00      	nop
 8010c24:	3708      	adds	r7, #8
 8010c26:	46bd      	mov	sp, r7
 8010c28:	bd80      	pop	{r7, pc}
 8010c2a:	bf00      	nop
 8010c2c:	0801725c 	.word	0x0801725c
 8010c30:	08010b8d 	.word	0x08010b8d

08010c34 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8010c34:	b580      	push	{r7, lr}
 8010c36:	b086      	sub	sp, #24
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	60f8      	str	r0, [r7, #12]
 8010c3c:	60b9      	str	r1, [r7, #8]
 8010c3e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010c46:	d306      	bcc.n	8010c56 <sys_timeout+0x22>
 8010c48:	4b0a      	ldr	r3, [pc, #40]	; (8010c74 <sys_timeout+0x40>)
 8010c4a:	f240 1229 	movw	r2, #297	; 0x129
 8010c4e:	490a      	ldr	r1, [pc, #40]	; (8010c78 <sys_timeout+0x44>)
 8010c50:	480a      	ldr	r0, [pc, #40]	; (8010c7c <sys_timeout+0x48>)
 8010c52:	f002 fdb5 	bl	80137c0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8010c56:	f7f7 fe9b 	bl	8008990 <sys_now>
 8010c5a:	4602      	mov	r2, r0
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	4413      	add	r3, r2
 8010c60:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8010c62:	687a      	ldr	r2, [r7, #4]
 8010c64:	68b9      	ldr	r1, [r7, #8]
 8010c66:	6978      	ldr	r0, [r7, #20]
 8010c68:	f7ff ff22 	bl	8010ab0 <sys_timeout_abs>
#endif
}
 8010c6c:	bf00      	nop
 8010c6e:	3718      	adds	r7, #24
 8010c70:	46bd      	mov	sp, r7
 8010c72:	bd80      	pop	{r7, pc}
 8010c74:	08016670 	.word	0x08016670
 8010c78:	0801670c 	.word	0x0801670c
 8010c7c:	080166e4 	.word	0x080166e4

08010c80 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8010c80:	b580      	push	{r7, lr}
 8010c82:	b084      	sub	sp, #16
 8010c84:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8010c86:	f7f7 fe83 	bl	8008990 <sys_now>
 8010c8a:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8010c8c:	4b1a      	ldr	r3, [pc, #104]	; (8010cf8 <sys_check_timeouts+0x78>)
 8010c8e:	781b      	ldrb	r3, [r3, #0]
 8010c90:	b2db      	uxtb	r3, r3
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d001      	beq.n	8010c9a <sys_check_timeouts+0x1a>
 8010c96:	f7f9 f8bf 	bl	8009e18 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8010c9a:	4b18      	ldr	r3, [pc, #96]	; (8010cfc <sys_check_timeouts+0x7c>)
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8010ca0:	68bb      	ldr	r3, [r7, #8]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d022      	beq.n	8010cec <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8010ca6:	68bb      	ldr	r3, [r7, #8]
 8010ca8:	685b      	ldr	r3, [r3, #4]
 8010caa:	68fa      	ldr	r2, [r7, #12]
 8010cac:	1ad3      	subs	r3, r2, r3
 8010cae:	0fdb      	lsrs	r3, r3, #31
 8010cb0:	f003 0301 	and.w	r3, r3, #1
 8010cb4:	b2db      	uxtb	r3, r3
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d11a      	bne.n	8010cf0 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8010cba:	68bb      	ldr	r3, [r7, #8]
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	4a0f      	ldr	r2, [pc, #60]	; (8010cfc <sys_check_timeouts+0x7c>)
 8010cc0:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8010cc2:	68bb      	ldr	r3, [r7, #8]
 8010cc4:	689b      	ldr	r3, [r3, #8]
 8010cc6:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8010cc8:	68bb      	ldr	r3, [r7, #8]
 8010cca:	68db      	ldr	r3, [r3, #12]
 8010ccc:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8010cce:	68bb      	ldr	r3, [r7, #8]
 8010cd0:	685b      	ldr	r3, [r3, #4]
 8010cd2:	4a0b      	ldr	r2, [pc, #44]	; (8010d00 <sys_check_timeouts+0x80>)
 8010cd4:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8010cd6:	68b9      	ldr	r1, [r7, #8]
 8010cd8:	2006      	movs	r0, #6
 8010cda:	f7f8 fd61 	bl	80097a0 <memp_free>
    if (handler != NULL) {
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d0d3      	beq.n	8010c8c <sys_check_timeouts+0xc>
      handler(arg);
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	6838      	ldr	r0, [r7, #0]
 8010ce8:	4798      	blx	r3
  do {
 8010cea:	e7cf      	b.n	8010c8c <sys_check_timeouts+0xc>
      return;
 8010cec:	bf00      	nop
 8010cee:	e000      	b.n	8010cf2 <sys_check_timeouts+0x72>
      return;
 8010cf0:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8010cf2:	3710      	adds	r7, #16
 8010cf4:	46bd      	mov	sp, r7
 8010cf6:	bd80      	pop	{r7, pc}
 8010cf8:	200085c9 	.word	0x200085c9
 8010cfc:	2000861c 	.word	0x2000861c
 8010d00:	20008620 	.word	0x20008620

08010d04 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8010d04:	b580      	push	{r7, lr}
 8010d06:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010d08:	f002 fd72 	bl	80137f0 <rand>
 8010d0c:	4603      	mov	r3, r0
 8010d0e:	b29b      	uxth	r3, r3
 8010d10:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010d14:	b29b      	uxth	r3, r3
 8010d16:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8010d1a:	b29a      	uxth	r2, r3
 8010d1c:	4b01      	ldr	r3, [pc, #4]	; (8010d24 <udp_init+0x20>)
 8010d1e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8010d20:	bf00      	nop
 8010d22:	bd80      	pop	{r7, pc}
 8010d24:	2000003c 	.word	0x2000003c

08010d28 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8010d28:	b580      	push	{r7, lr}
 8010d2a:	b084      	sub	sp, #16
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	60f8      	str	r0, [r7, #12]
 8010d30:	60b9      	str	r1, [r7, #8]
 8010d32:	4613      	mov	r3, r2
 8010d34:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d105      	bne.n	8010d48 <udp_input_local_match+0x20>
 8010d3c:	4b27      	ldr	r3, [pc, #156]	; (8010ddc <udp_input_local_match+0xb4>)
 8010d3e:	2287      	movs	r2, #135	; 0x87
 8010d40:	4927      	ldr	r1, [pc, #156]	; (8010de0 <udp_input_local_match+0xb8>)
 8010d42:	4828      	ldr	r0, [pc, #160]	; (8010de4 <udp_input_local_match+0xbc>)
 8010d44:	f002 fd3c 	bl	80137c0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8010d48:	68bb      	ldr	r3, [r7, #8]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d105      	bne.n	8010d5a <udp_input_local_match+0x32>
 8010d4e:	4b23      	ldr	r3, [pc, #140]	; (8010ddc <udp_input_local_match+0xb4>)
 8010d50:	2288      	movs	r2, #136	; 0x88
 8010d52:	4925      	ldr	r1, [pc, #148]	; (8010de8 <udp_input_local_match+0xc0>)
 8010d54:	4823      	ldr	r0, [pc, #140]	; (8010de4 <udp_input_local_match+0xbc>)
 8010d56:	f002 fd33 	bl	80137c0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	7a1b      	ldrb	r3, [r3, #8]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d00b      	beq.n	8010d7a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	7a1a      	ldrb	r2, [r3, #8]
 8010d66:	4b21      	ldr	r3, [pc, #132]	; (8010dec <udp_input_local_match+0xc4>)
 8010d68:	685b      	ldr	r3, [r3, #4]
 8010d6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010d6e:	3301      	adds	r3, #1
 8010d70:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010d72:	429a      	cmp	r2, r3
 8010d74:	d001      	beq.n	8010d7a <udp_input_local_match+0x52>
    return 0;
 8010d76:	2300      	movs	r3, #0
 8010d78:	e02b      	b.n	8010dd2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8010d7a:	79fb      	ldrb	r3, [r7, #7]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d018      	beq.n	8010db2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d013      	beq.n	8010dae <udp_input_local_match+0x86>
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d00f      	beq.n	8010dae <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8010d8e:	4b17      	ldr	r3, [pc, #92]	; (8010dec <udp_input_local_match+0xc4>)
 8010d90:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d96:	d00a      	beq.n	8010dae <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	681a      	ldr	r2, [r3, #0]
 8010d9c:	4b13      	ldr	r3, [pc, #76]	; (8010dec <udp_input_local_match+0xc4>)
 8010d9e:	695b      	ldr	r3, [r3, #20]
 8010da0:	405a      	eors	r2, r3
 8010da2:	68bb      	ldr	r3, [r7, #8]
 8010da4:	3308      	adds	r3, #8
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d110      	bne.n	8010dd0 <udp_input_local_match+0xa8>
          return 1;
 8010dae:	2301      	movs	r3, #1
 8010db0:	e00f      	b.n	8010dd2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d009      	beq.n	8010dcc <udp_input_local_match+0xa4>
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d005      	beq.n	8010dcc <udp_input_local_match+0xa4>
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	681a      	ldr	r2, [r3, #0]
 8010dc4:	4b09      	ldr	r3, [pc, #36]	; (8010dec <udp_input_local_match+0xc4>)
 8010dc6:	695b      	ldr	r3, [r3, #20]
 8010dc8:	429a      	cmp	r2, r3
 8010dca:	d101      	bne.n	8010dd0 <udp_input_local_match+0xa8>
        return 1;
 8010dcc:	2301      	movs	r3, #1
 8010dce:	e000      	b.n	8010dd2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8010dd0:	2300      	movs	r3, #0
}
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	3710      	adds	r7, #16
 8010dd6:	46bd      	mov	sp, r7
 8010dd8:	bd80      	pop	{r7, pc}
 8010dda:	bf00      	nop
 8010ddc:	08016758 	.word	0x08016758
 8010de0:	08016788 	.word	0x08016788
 8010de4:	080167ac 	.word	0x080167ac
 8010de8:	080167d4 	.word	0x080167d4
 8010dec:	2000505c 	.word	0x2000505c

08010df0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8010df0:	b590      	push	{r4, r7, lr}
 8010df2:	b08d      	sub	sp, #52	; 0x34
 8010df4:	af02      	add	r7, sp, #8
 8010df6:	6078      	str	r0, [r7, #4]
 8010df8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8010dfa:	2300      	movs	r3, #0
 8010dfc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d105      	bne.n	8010e10 <udp_input+0x20>
 8010e04:	4b7c      	ldr	r3, [pc, #496]	; (8010ff8 <udp_input+0x208>)
 8010e06:	22cf      	movs	r2, #207	; 0xcf
 8010e08:	497c      	ldr	r1, [pc, #496]	; (8010ffc <udp_input+0x20c>)
 8010e0a:	487d      	ldr	r0, [pc, #500]	; (8011000 <udp_input+0x210>)
 8010e0c:	f002 fcd8 	bl	80137c0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8010e10:	683b      	ldr	r3, [r7, #0]
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d105      	bne.n	8010e22 <udp_input+0x32>
 8010e16:	4b78      	ldr	r3, [pc, #480]	; (8010ff8 <udp_input+0x208>)
 8010e18:	22d0      	movs	r2, #208	; 0xd0
 8010e1a:	497a      	ldr	r1, [pc, #488]	; (8011004 <udp_input+0x214>)
 8010e1c:	4878      	ldr	r0, [pc, #480]	; (8011000 <udp_input+0x210>)
 8010e1e:	f002 fccf 	bl	80137c0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	895b      	ldrh	r3, [r3, #10]
 8010e26:	2b07      	cmp	r3, #7
 8010e28:	d803      	bhi.n	8010e32 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8010e2a:	6878      	ldr	r0, [r7, #4]
 8010e2c:	f7f9 fb2e 	bl	800a48c <pbuf_free>
    goto end;
 8010e30:	e0de      	b.n	8010ff0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	685b      	ldr	r3, [r3, #4]
 8010e36:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8010e38:	4b73      	ldr	r3, [pc, #460]	; (8011008 <udp_input+0x218>)
 8010e3a:	695b      	ldr	r3, [r3, #20]
 8010e3c:	4a72      	ldr	r2, [pc, #456]	; (8011008 <udp_input+0x218>)
 8010e3e:	6812      	ldr	r2, [r2, #0]
 8010e40:	4611      	mov	r1, r2
 8010e42:	4618      	mov	r0, r3
 8010e44:	f001 fc88 	bl	8012758 <ip4_addr_isbroadcast_u32>
 8010e48:	4603      	mov	r3, r0
 8010e4a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8010e4c:	697b      	ldr	r3, [r7, #20]
 8010e4e:	881b      	ldrh	r3, [r3, #0]
 8010e50:	b29b      	uxth	r3, r3
 8010e52:	4618      	mov	r0, r3
 8010e54:	f7f7 ffbc 	bl	8008dd0 <lwip_htons>
 8010e58:	4603      	mov	r3, r0
 8010e5a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8010e5c:	697b      	ldr	r3, [r7, #20]
 8010e5e:	885b      	ldrh	r3, [r3, #2]
 8010e60:	b29b      	uxth	r3, r3
 8010e62:	4618      	mov	r0, r3
 8010e64:	f7f7 ffb4 	bl	8008dd0 <lwip_htons>
 8010e68:	4603      	mov	r3, r0
 8010e6a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8010e6c:	2300      	movs	r3, #0
 8010e6e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8010e70:	2300      	movs	r3, #0
 8010e72:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8010e74:	2300      	movs	r3, #0
 8010e76:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010e78:	4b64      	ldr	r3, [pc, #400]	; (801100c <udp_input+0x21c>)
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8010e7e:	e054      	b.n	8010f2a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8010e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e82:	8a5b      	ldrh	r3, [r3, #18]
 8010e84:	89fa      	ldrh	r2, [r7, #14]
 8010e86:	429a      	cmp	r2, r3
 8010e88:	d14a      	bne.n	8010f20 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8010e8a:	7cfb      	ldrb	r3, [r7, #19]
 8010e8c:	461a      	mov	r2, r3
 8010e8e:	6839      	ldr	r1, [r7, #0]
 8010e90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010e92:	f7ff ff49 	bl	8010d28 <udp_input_local_match>
 8010e96:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d041      	beq.n	8010f20 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8010e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e9e:	7c1b      	ldrb	r3, [r3, #16]
 8010ea0:	f003 0304 	and.w	r3, r3, #4
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d11d      	bne.n	8010ee4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8010ea8:	69fb      	ldr	r3, [r7, #28]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d102      	bne.n	8010eb4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8010eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eb0:	61fb      	str	r3, [r7, #28]
 8010eb2:	e017      	b.n	8010ee4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8010eb4:	7cfb      	ldrb	r3, [r7, #19]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d014      	beq.n	8010ee4 <udp_input+0xf4>
 8010eba:	4b53      	ldr	r3, [pc, #332]	; (8011008 <udp_input+0x218>)
 8010ebc:	695b      	ldr	r3, [r3, #20]
 8010ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ec2:	d10f      	bne.n	8010ee4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8010ec4:	69fb      	ldr	r3, [r7, #28]
 8010ec6:	681a      	ldr	r2, [r3, #0]
 8010ec8:	683b      	ldr	r3, [r7, #0]
 8010eca:	3304      	adds	r3, #4
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	429a      	cmp	r2, r3
 8010ed0:	d008      	beq.n	8010ee4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8010ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ed4:	681a      	ldr	r2, [r3, #0]
 8010ed6:	683b      	ldr	r3, [r7, #0]
 8010ed8:	3304      	adds	r3, #4
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	429a      	cmp	r2, r3
 8010ede:	d101      	bne.n	8010ee4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8010ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ee2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8010ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ee6:	8a9b      	ldrh	r3, [r3, #20]
 8010ee8:	8a3a      	ldrh	r2, [r7, #16]
 8010eea:	429a      	cmp	r2, r3
 8010eec:	d118      	bne.n	8010f20 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ef0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d005      	beq.n	8010f02 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8010ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ef8:	685a      	ldr	r2, [r3, #4]
 8010efa:	4b43      	ldr	r3, [pc, #268]	; (8011008 <udp_input+0x218>)
 8010efc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010efe:	429a      	cmp	r2, r3
 8010f00:	d10e      	bne.n	8010f20 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8010f02:	6a3b      	ldr	r3, [r7, #32]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d014      	beq.n	8010f32 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8010f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f0a:	68da      	ldr	r2, [r3, #12]
 8010f0c:	6a3b      	ldr	r3, [r7, #32]
 8010f0e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8010f10:	4b3e      	ldr	r3, [pc, #248]	; (801100c <udp_input+0x21c>)
 8010f12:	681a      	ldr	r2, [r3, #0]
 8010f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f16:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8010f18:	4a3c      	ldr	r2, [pc, #240]	; (801100c <udp_input+0x21c>)
 8010f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f1c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8010f1e:	e008      	b.n	8010f32 <udp_input+0x142>
      }
    }

    prev = pcb;
 8010f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f22:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f26:	68db      	ldr	r3, [r3, #12]
 8010f28:	627b      	str	r3, [r7, #36]	; 0x24
 8010f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d1a7      	bne.n	8010e80 <udp_input+0x90>
 8010f30:	e000      	b.n	8010f34 <udp_input+0x144>
        break;
 8010f32:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8010f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d101      	bne.n	8010f3e <udp_input+0x14e>
    pcb = uncon_pcb;
 8010f3a:	69fb      	ldr	r3, [r7, #28]
 8010f3c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8010f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d002      	beq.n	8010f4a <udp_input+0x15a>
    for_us = 1;
 8010f44:	2301      	movs	r3, #1
 8010f46:	76fb      	strb	r3, [r7, #27]
 8010f48:	e00a      	b.n	8010f60 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8010f4a:	683b      	ldr	r3, [r7, #0]
 8010f4c:	3304      	adds	r3, #4
 8010f4e:	681a      	ldr	r2, [r3, #0]
 8010f50:	4b2d      	ldr	r3, [pc, #180]	; (8011008 <udp_input+0x218>)
 8010f52:	695b      	ldr	r3, [r3, #20]
 8010f54:	429a      	cmp	r2, r3
 8010f56:	bf0c      	ite	eq
 8010f58:	2301      	moveq	r3, #1
 8010f5a:	2300      	movne	r3, #0
 8010f5c:	b2db      	uxtb	r3, r3
 8010f5e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8010f60:	7efb      	ldrb	r3, [r7, #27]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d041      	beq.n	8010fea <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8010f66:	2108      	movs	r1, #8
 8010f68:	6878      	ldr	r0, [r7, #4]
 8010f6a:	f7f9 fa09 	bl	800a380 <pbuf_remove_header>
 8010f6e:	4603      	mov	r3, r0
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d00a      	beq.n	8010f8a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8010f74:	4b20      	ldr	r3, [pc, #128]	; (8010ff8 <udp_input+0x208>)
 8010f76:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8010f7a:	4925      	ldr	r1, [pc, #148]	; (8011010 <udp_input+0x220>)
 8010f7c:	4820      	ldr	r0, [pc, #128]	; (8011000 <udp_input+0x210>)
 8010f7e:	f002 fc1f 	bl	80137c0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8010f82:	6878      	ldr	r0, [r7, #4]
 8010f84:	f7f9 fa82 	bl	800a48c <pbuf_free>
      goto end;
 8010f88:	e032      	b.n	8010ff0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8010f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d012      	beq.n	8010fb6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8010f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f92:	699b      	ldr	r3, [r3, #24]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d00a      	beq.n	8010fae <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8010f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f9a:	699c      	ldr	r4, [r3, #24]
 8010f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f9e:	69d8      	ldr	r0, [r3, #28]
 8010fa0:	8a3b      	ldrh	r3, [r7, #16]
 8010fa2:	9300      	str	r3, [sp, #0]
 8010fa4:	4b1b      	ldr	r3, [pc, #108]	; (8011014 <udp_input+0x224>)
 8010fa6:	687a      	ldr	r2, [r7, #4]
 8010fa8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010faa:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8010fac:	e021      	b.n	8010ff2 <udp_input+0x202>
        pbuf_free(p);
 8010fae:	6878      	ldr	r0, [r7, #4]
 8010fb0:	f7f9 fa6c 	bl	800a48c <pbuf_free>
        goto end;
 8010fb4:	e01c      	b.n	8010ff0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8010fb6:	7cfb      	ldrb	r3, [r7, #19]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d112      	bne.n	8010fe2 <udp_input+0x1f2>
 8010fbc:	4b12      	ldr	r3, [pc, #72]	; (8011008 <udp_input+0x218>)
 8010fbe:	695b      	ldr	r3, [r3, #20]
 8010fc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010fc4:	2be0      	cmp	r3, #224	; 0xe0
 8010fc6:	d00c      	beq.n	8010fe2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8010fc8:	4b0f      	ldr	r3, [pc, #60]	; (8011008 <udp_input+0x218>)
 8010fca:	899b      	ldrh	r3, [r3, #12]
 8010fcc:	3308      	adds	r3, #8
 8010fce:	b29b      	uxth	r3, r3
 8010fd0:	b21b      	sxth	r3, r3
 8010fd2:	4619      	mov	r1, r3
 8010fd4:	6878      	ldr	r0, [r7, #4]
 8010fd6:	f7f9 fa46 	bl	800a466 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8010fda:	2103      	movs	r1, #3
 8010fdc:	6878      	ldr	r0, [r7, #4]
 8010fde:	f001 f89b 	bl	8012118 <icmp_dest_unreach>
      pbuf_free(p);
 8010fe2:	6878      	ldr	r0, [r7, #4]
 8010fe4:	f7f9 fa52 	bl	800a48c <pbuf_free>
  return;
 8010fe8:	e003      	b.n	8010ff2 <udp_input+0x202>
    pbuf_free(p);
 8010fea:	6878      	ldr	r0, [r7, #4]
 8010fec:	f7f9 fa4e 	bl	800a48c <pbuf_free>
  return;
 8010ff0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8010ff2:	372c      	adds	r7, #44	; 0x2c
 8010ff4:	46bd      	mov	sp, r7
 8010ff6:	bd90      	pop	{r4, r7, pc}
 8010ff8:	08016758 	.word	0x08016758
 8010ffc:	080167fc 	.word	0x080167fc
 8011000:	080167ac 	.word	0x080167ac
 8011004:	08016814 	.word	0x08016814
 8011008:	2000505c 	.word	0x2000505c
 801100c:	20008628 	.word	0x20008628
 8011010:	08016830 	.word	0x08016830
 8011014:	2000506c 	.word	0x2000506c

08011018 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011018:	b480      	push	{r7}
 801101a:	b085      	sub	sp, #20
 801101c:	af00      	add	r7, sp, #0
 801101e:	6078      	str	r0, [r7, #4]
 8011020:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	2b00      	cmp	r3, #0
 8011026:	d01e      	beq.n	8011066 <udp_netif_ip_addr_changed+0x4e>
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d01a      	beq.n	8011066 <udp_netif_ip_addr_changed+0x4e>
 8011030:	683b      	ldr	r3, [r7, #0]
 8011032:	2b00      	cmp	r3, #0
 8011034:	d017      	beq.n	8011066 <udp_netif_ip_addr_changed+0x4e>
 8011036:	683b      	ldr	r3, [r7, #0]
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d013      	beq.n	8011066 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801103e:	4b0d      	ldr	r3, [pc, #52]	; (8011074 <udp_netif_ip_addr_changed+0x5c>)
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	60fb      	str	r3, [r7, #12]
 8011044:	e00c      	b.n	8011060 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	681a      	ldr	r2, [r3, #0]
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	429a      	cmp	r2, r3
 8011050:	d103      	bne.n	801105a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8011052:	683b      	ldr	r3, [r7, #0]
 8011054:	681a      	ldr	r2, [r3, #0]
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	68db      	ldr	r3, [r3, #12]
 801105e:	60fb      	str	r3, [r7, #12]
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d1ef      	bne.n	8011046 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8011066:	bf00      	nop
 8011068:	3714      	adds	r7, #20
 801106a:	46bd      	mov	sp, r7
 801106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011070:	4770      	bx	lr
 8011072:	bf00      	nop
 8011074:	20008628 	.word	0x20008628

08011078 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8011078:	b580      	push	{r7, lr}
 801107a:	b082      	sub	sp, #8
 801107c:	af00      	add	r7, sp, #0
 801107e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8011080:	4915      	ldr	r1, [pc, #84]	; (80110d8 <etharp_free_entry+0x60>)
 8011082:	687a      	ldr	r2, [r7, #4]
 8011084:	4613      	mov	r3, r2
 8011086:	005b      	lsls	r3, r3, #1
 8011088:	4413      	add	r3, r2
 801108a:	00db      	lsls	r3, r3, #3
 801108c:	440b      	add	r3, r1
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	2b00      	cmp	r3, #0
 8011092:	d013      	beq.n	80110bc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8011094:	4910      	ldr	r1, [pc, #64]	; (80110d8 <etharp_free_entry+0x60>)
 8011096:	687a      	ldr	r2, [r7, #4]
 8011098:	4613      	mov	r3, r2
 801109a:	005b      	lsls	r3, r3, #1
 801109c:	4413      	add	r3, r2
 801109e:	00db      	lsls	r3, r3, #3
 80110a0:	440b      	add	r3, r1
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	4618      	mov	r0, r3
 80110a6:	f7f9 f9f1 	bl	800a48c <pbuf_free>
    arp_table[i].q = NULL;
 80110aa:	490b      	ldr	r1, [pc, #44]	; (80110d8 <etharp_free_entry+0x60>)
 80110ac:	687a      	ldr	r2, [r7, #4]
 80110ae:	4613      	mov	r3, r2
 80110b0:	005b      	lsls	r3, r3, #1
 80110b2:	4413      	add	r3, r2
 80110b4:	00db      	lsls	r3, r3, #3
 80110b6:	440b      	add	r3, r1
 80110b8:	2200      	movs	r2, #0
 80110ba:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80110bc:	4906      	ldr	r1, [pc, #24]	; (80110d8 <etharp_free_entry+0x60>)
 80110be:	687a      	ldr	r2, [r7, #4]
 80110c0:	4613      	mov	r3, r2
 80110c2:	005b      	lsls	r3, r3, #1
 80110c4:	4413      	add	r3, r2
 80110c6:	00db      	lsls	r3, r3, #3
 80110c8:	440b      	add	r3, r1
 80110ca:	3314      	adds	r3, #20
 80110cc:	2200      	movs	r2, #0
 80110ce:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80110d0:	bf00      	nop
 80110d2:	3708      	adds	r7, #8
 80110d4:	46bd      	mov	sp, r7
 80110d6:	bd80      	pop	{r7, pc}
 80110d8:	2000862c 	.word	0x2000862c

080110dc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80110dc:	b580      	push	{r7, lr}
 80110de:	b082      	sub	sp, #8
 80110e0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80110e2:	2300      	movs	r3, #0
 80110e4:	607b      	str	r3, [r7, #4]
 80110e6:	e096      	b.n	8011216 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80110e8:	494f      	ldr	r1, [pc, #316]	; (8011228 <etharp_tmr+0x14c>)
 80110ea:	687a      	ldr	r2, [r7, #4]
 80110ec:	4613      	mov	r3, r2
 80110ee:	005b      	lsls	r3, r3, #1
 80110f0:	4413      	add	r3, r2
 80110f2:	00db      	lsls	r3, r3, #3
 80110f4:	440b      	add	r3, r1
 80110f6:	3314      	adds	r3, #20
 80110f8:	781b      	ldrb	r3, [r3, #0]
 80110fa:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80110fc:	78fb      	ldrb	r3, [r7, #3]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	f000 8086 	beq.w	8011210 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8011104:	4948      	ldr	r1, [pc, #288]	; (8011228 <etharp_tmr+0x14c>)
 8011106:	687a      	ldr	r2, [r7, #4]
 8011108:	4613      	mov	r3, r2
 801110a:	005b      	lsls	r3, r3, #1
 801110c:	4413      	add	r3, r2
 801110e:	00db      	lsls	r3, r3, #3
 8011110:	440b      	add	r3, r1
 8011112:	3312      	adds	r3, #18
 8011114:	881b      	ldrh	r3, [r3, #0]
 8011116:	3301      	adds	r3, #1
 8011118:	b298      	uxth	r0, r3
 801111a:	4943      	ldr	r1, [pc, #268]	; (8011228 <etharp_tmr+0x14c>)
 801111c:	687a      	ldr	r2, [r7, #4]
 801111e:	4613      	mov	r3, r2
 8011120:	005b      	lsls	r3, r3, #1
 8011122:	4413      	add	r3, r2
 8011124:	00db      	lsls	r3, r3, #3
 8011126:	440b      	add	r3, r1
 8011128:	3312      	adds	r3, #18
 801112a:	4602      	mov	r2, r0
 801112c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801112e:	493e      	ldr	r1, [pc, #248]	; (8011228 <etharp_tmr+0x14c>)
 8011130:	687a      	ldr	r2, [r7, #4]
 8011132:	4613      	mov	r3, r2
 8011134:	005b      	lsls	r3, r3, #1
 8011136:	4413      	add	r3, r2
 8011138:	00db      	lsls	r3, r3, #3
 801113a:	440b      	add	r3, r1
 801113c:	3312      	adds	r3, #18
 801113e:	881b      	ldrh	r3, [r3, #0]
 8011140:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8011144:	d215      	bcs.n	8011172 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011146:	4938      	ldr	r1, [pc, #224]	; (8011228 <etharp_tmr+0x14c>)
 8011148:	687a      	ldr	r2, [r7, #4]
 801114a:	4613      	mov	r3, r2
 801114c:	005b      	lsls	r3, r3, #1
 801114e:	4413      	add	r3, r2
 8011150:	00db      	lsls	r3, r3, #3
 8011152:	440b      	add	r3, r1
 8011154:	3314      	adds	r3, #20
 8011156:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011158:	2b01      	cmp	r3, #1
 801115a:	d10e      	bne.n	801117a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801115c:	4932      	ldr	r1, [pc, #200]	; (8011228 <etharp_tmr+0x14c>)
 801115e:	687a      	ldr	r2, [r7, #4]
 8011160:	4613      	mov	r3, r2
 8011162:	005b      	lsls	r3, r3, #1
 8011164:	4413      	add	r3, r2
 8011166:	00db      	lsls	r3, r3, #3
 8011168:	440b      	add	r3, r1
 801116a:	3312      	adds	r3, #18
 801116c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801116e:	2b04      	cmp	r3, #4
 8011170:	d903      	bls.n	801117a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8011172:	6878      	ldr	r0, [r7, #4]
 8011174:	f7ff ff80 	bl	8011078 <etharp_free_entry>
 8011178:	e04a      	b.n	8011210 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801117a:	492b      	ldr	r1, [pc, #172]	; (8011228 <etharp_tmr+0x14c>)
 801117c:	687a      	ldr	r2, [r7, #4]
 801117e:	4613      	mov	r3, r2
 8011180:	005b      	lsls	r3, r3, #1
 8011182:	4413      	add	r3, r2
 8011184:	00db      	lsls	r3, r3, #3
 8011186:	440b      	add	r3, r1
 8011188:	3314      	adds	r3, #20
 801118a:	781b      	ldrb	r3, [r3, #0]
 801118c:	2b03      	cmp	r3, #3
 801118e:	d10a      	bne.n	80111a6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8011190:	4925      	ldr	r1, [pc, #148]	; (8011228 <etharp_tmr+0x14c>)
 8011192:	687a      	ldr	r2, [r7, #4]
 8011194:	4613      	mov	r3, r2
 8011196:	005b      	lsls	r3, r3, #1
 8011198:	4413      	add	r3, r2
 801119a:	00db      	lsls	r3, r3, #3
 801119c:	440b      	add	r3, r1
 801119e:	3314      	adds	r3, #20
 80111a0:	2204      	movs	r2, #4
 80111a2:	701a      	strb	r2, [r3, #0]
 80111a4:	e034      	b.n	8011210 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80111a6:	4920      	ldr	r1, [pc, #128]	; (8011228 <etharp_tmr+0x14c>)
 80111a8:	687a      	ldr	r2, [r7, #4]
 80111aa:	4613      	mov	r3, r2
 80111ac:	005b      	lsls	r3, r3, #1
 80111ae:	4413      	add	r3, r2
 80111b0:	00db      	lsls	r3, r3, #3
 80111b2:	440b      	add	r3, r1
 80111b4:	3314      	adds	r3, #20
 80111b6:	781b      	ldrb	r3, [r3, #0]
 80111b8:	2b04      	cmp	r3, #4
 80111ba:	d10a      	bne.n	80111d2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80111bc:	491a      	ldr	r1, [pc, #104]	; (8011228 <etharp_tmr+0x14c>)
 80111be:	687a      	ldr	r2, [r7, #4]
 80111c0:	4613      	mov	r3, r2
 80111c2:	005b      	lsls	r3, r3, #1
 80111c4:	4413      	add	r3, r2
 80111c6:	00db      	lsls	r3, r3, #3
 80111c8:	440b      	add	r3, r1
 80111ca:	3314      	adds	r3, #20
 80111cc:	2202      	movs	r2, #2
 80111ce:	701a      	strb	r2, [r3, #0]
 80111d0:	e01e      	b.n	8011210 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80111d2:	4915      	ldr	r1, [pc, #84]	; (8011228 <etharp_tmr+0x14c>)
 80111d4:	687a      	ldr	r2, [r7, #4]
 80111d6:	4613      	mov	r3, r2
 80111d8:	005b      	lsls	r3, r3, #1
 80111da:	4413      	add	r3, r2
 80111dc:	00db      	lsls	r3, r3, #3
 80111de:	440b      	add	r3, r1
 80111e0:	3314      	adds	r3, #20
 80111e2:	781b      	ldrb	r3, [r3, #0]
 80111e4:	2b01      	cmp	r3, #1
 80111e6:	d113      	bne.n	8011210 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80111e8:	490f      	ldr	r1, [pc, #60]	; (8011228 <etharp_tmr+0x14c>)
 80111ea:	687a      	ldr	r2, [r7, #4]
 80111ec:	4613      	mov	r3, r2
 80111ee:	005b      	lsls	r3, r3, #1
 80111f0:	4413      	add	r3, r2
 80111f2:	00db      	lsls	r3, r3, #3
 80111f4:	440b      	add	r3, r1
 80111f6:	3308      	adds	r3, #8
 80111f8:	6818      	ldr	r0, [r3, #0]
 80111fa:	687a      	ldr	r2, [r7, #4]
 80111fc:	4613      	mov	r3, r2
 80111fe:	005b      	lsls	r3, r3, #1
 8011200:	4413      	add	r3, r2
 8011202:	00db      	lsls	r3, r3, #3
 8011204:	4a08      	ldr	r2, [pc, #32]	; (8011228 <etharp_tmr+0x14c>)
 8011206:	4413      	add	r3, r2
 8011208:	3304      	adds	r3, #4
 801120a:	4619      	mov	r1, r3
 801120c:	f000 fe6e 	bl	8011eec <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	3301      	adds	r3, #1
 8011214:	607b      	str	r3, [r7, #4]
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	2b09      	cmp	r3, #9
 801121a:	f77f af65 	ble.w	80110e8 <etharp_tmr+0xc>
      }
    }
  }
}
 801121e:	bf00      	nop
 8011220:	bf00      	nop
 8011222:	3708      	adds	r7, #8
 8011224:	46bd      	mov	sp, r7
 8011226:	bd80      	pop	{r7, pc}
 8011228:	2000862c 	.word	0x2000862c

0801122c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801122c:	b580      	push	{r7, lr}
 801122e:	b08a      	sub	sp, #40	; 0x28
 8011230:	af00      	add	r7, sp, #0
 8011232:	60f8      	str	r0, [r7, #12]
 8011234:	460b      	mov	r3, r1
 8011236:	607a      	str	r2, [r7, #4]
 8011238:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801123a:	230a      	movs	r3, #10
 801123c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801123e:	230a      	movs	r3, #10
 8011240:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8011242:	230a      	movs	r3, #10
 8011244:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8011246:	2300      	movs	r3, #0
 8011248:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801124a:	230a      	movs	r3, #10
 801124c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801124e:	2300      	movs	r3, #0
 8011250:	83bb      	strh	r3, [r7, #28]
 8011252:	2300      	movs	r3, #0
 8011254:	837b      	strh	r3, [r7, #26]
 8011256:	2300      	movs	r3, #0
 8011258:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801125a:	2300      	movs	r3, #0
 801125c:	843b      	strh	r3, [r7, #32]
 801125e:	e0ae      	b.n	80113be <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8011260:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011264:	49a6      	ldr	r1, [pc, #664]	; (8011500 <etharp_find_entry+0x2d4>)
 8011266:	4613      	mov	r3, r2
 8011268:	005b      	lsls	r3, r3, #1
 801126a:	4413      	add	r3, r2
 801126c:	00db      	lsls	r3, r3, #3
 801126e:	440b      	add	r3, r1
 8011270:	3314      	adds	r3, #20
 8011272:	781b      	ldrb	r3, [r3, #0]
 8011274:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8011276:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801127a:	2b0a      	cmp	r3, #10
 801127c:	d105      	bne.n	801128a <etharp_find_entry+0x5e>
 801127e:	7dfb      	ldrb	r3, [r7, #23]
 8011280:	2b00      	cmp	r3, #0
 8011282:	d102      	bne.n	801128a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8011284:	8c3b      	ldrh	r3, [r7, #32]
 8011286:	847b      	strh	r3, [r7, #34]	; 0x22
 8011288:	e095      	b.n	80113b6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801128a:	7dfb      	ldrb	r3, [r7, #23]
 801128c:	2b00      	cmp	r3, #0
 801128e:	f000 8092 	beq.w	80113b6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8011292:	7dfb      	ldrb	r3, [r7, #23]
 8011294:	2b01      	cmp	r3, #1
 8011296:	d009      	beq.n	80112ac <etharp_find_entry+0x80>
 8011298:	7dfb      	ldrb	r3, [r7, #23]
 801129a:	2b01      	cmp	r3, #1
 801129c:	d806      	bhi.n	80112ac <etharp_find_entry+0x80>
 801129e:	4b99      	ldr	r3, [pc, #612]	; (8011504 <etharp_find_entry+0x2d8>)
 80112a0:	f240 1223 	movw	r2, #291	; 0x123
 80112a4:	4998      	ldr	r1, [pc, #608]	; (8011508 <etharp_find_entry+0x2dc>)
 80112a6:	4899      	ldr	r0, [pc, #612]	; (801150c <etharp_find_entry+0x2e0>)
 80112a8:	f002 fa8a 	bl	80137c0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d020      	beq.n	80112f4 <etharp_find_entry+0xc8>
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	6819      	ldr	r1, [r3, #0]
 80112b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80112ba:	4891      	ldr	r0, [pc, #580]	; (8011500 <etharp_find_entry+0x2d4>)
 80112bc:	4613      	mov	r3, r2
 80112be:	005b      	lsls	r3, r3, #1
 80112c0:	4413      	add	r3, r2
 80112c2:	00db      	lsls	r3, r3, #3
 80112c4:	4403      	add	r3, r0
 80112c6:	3304      	adds	r3, #4
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	4299      	cmp	r1, r3
 80112cc:	d112      	bne.n	80112f4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d00c      	beq.n	80112ee <etharp_find_entry+0xc2>
 80112d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80112d8:	4989      	ldr	r1, [pc, #548]	; (8011500 <etharp_find_entry+0x2d4>)
 80112da:	4613      	mov	r3, r2
 80112dc:	005b      	lsls	r3, r3, #1
 80112de:	4413      	add	r3, r2
 80112e0:	00db      	lsls	r3, r3, #3
 80112e2:	440b      	add	r3, r1
 80112e4:	3308      	adds	r3, #8
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	687a      	ldr	r2, [r7, #4]
 80112ea:	429a      	cmp	r2, r3
 80112ec:	d102      	bne.n	80112f4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80112ee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80112f2:	e100      	b.n	80114f6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80112f4:	7dfb      	ldrb	r3, [r7, #23]
 80112f6:	2b01      	cmp	r3, #1
 80112f8:	d140      	bne.n	801137c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80112fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80112fe:	4980      	ldr	r1, [pc, #512]	; (8011500 <etharp_find_entry+0x2d4>)
 8011300:	4613      	mov	r3, r2
 8011302:	005b      	lsls	r3, r3, #1
 8011304:	4413      	add	r3, r2
 8011306:	00db      	lsls	r3, r3, #3
 8011308:	440b      	add	r3, r1
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	2b00      	cmp	r3, #0
 801130e:	d01a      	beq.n	8011346 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8011310:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011314:	497a      	ldr	r1, [pc, #488]	; (8011500 <etharp_find_entry+0x2d4>)
 8011316:	4613      	mov	r3, r2
 8011318:	005b      	lsls	r3, r3, #1
 801131a:	4413      	add	r3, r2
 801131c:	00db      	lsls	r3, r3, #3
 801131e:	440b      	add	r3, r1
 8011320:	3312      	adds	r3, #18
 8011322:	881b      	ldrh	r3, [r3, #0]
 8011324:	8bba      	ldrh	r2, [r7, #28]
 8011326:	429a      	cmp	r2, r3
 8011328:	d845      	bhi.n	80113b6 <etharp_find_entry+0x18a>
            old_queue = i;
 801132a:	8c3b      	ldrh	r3, [r7, #32]
 801132c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801132e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011332:	4973      	ldr	r1, [pc, #460]	; (8011500 <etharp_find_entry+0x2d4>)
 8011334:	4613      	mov	r3, r2
 8011336:	005b      	lsls	r3, r3, #1
 8011338:	4413      	add	r3, r2
 801133a:	00db      	lsls	r3, r3, #3
 801133c:	440b      	add	r3, r1
 801133e:	3312      	adds	r3, #18
 8011340:	881b      	ldrh	r3, [r3, #0]
 8011342:	83bb      	strh	r3, [r7, #28]
 8011344:	e037      	b.n	80113b6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8011346:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801134a:	496d      	ldr	r1, [pc, #436]	; (8011500 <etharp_find_entry+0x2d4>)
 801134c:	4613      	mov	r3, r2
 801134e:	005b      	lsls	r3, r3, #1
 8011350:	4413      	add	r3, r2
 8011352:	00db      	lsls	r3, r3, #3
 8011354:	440b      	add	r3, r1
 8011356:	3312      	adds	r3, #18
 8011358:	881b      	ldrh	r3, [r3, #0]
 801135a:	8b7a      	ldrh	r2, [r7, #26]
 801135c:	429a      	cmp	r2, r3
 801135e:	d82a      	bhi.n	80113b6 <etharp_find_entry+0x18a>
            old_pending = i;
 8011360:	8c3b      	ldrh	r3, [r7, #32]
 8011362:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8011364:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011368:	4965      	ldr	r1, [pc, #404]	; (8011500 <etharp_find_entry+0x2d4>)
 801136a:	4613      	mov	r3, r2
 801136c:	005b      	lsls	r3, r3, #1
 801136e:	4413      	add	r3, r2
 8011370:	00db      	lsls	r3, r3, #3
 8011372:	440b      	add	r3, r1
 8011374:	3312      	adds	r3, #18
 8011376:	881b      	ldrh	r3, [r3, #0]
 8011378:	837b      	strh	r3, [r7, #26]
 801137a:	e01c      	b.n	80113b6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801137c:	7dfb      	ldrb	r3, [r7, #23]
 801137e:	2b01      	cmp	r3, #1
 8011380:	d919      	bls.n	80113b6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8011382:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011386:	495e      	ldr	r1, [pc, #376]	; (8011500 <etharp_find_entry+0x2d4>)
 8011388:	4613      	mov	r3, r2
 801138a:	005b      	lsls	r3, r3, #1
 801138c:	4413      	add	r3, r2
 801138e:	00db      	lsls	r3, r3, #3
 8011390:	440b      	add	r3, r1
 8011392:	3312      	adds	r3, #18
 8011394:	881b      	ldrh	r3, [r3, #0]
 8011396:	8b3a      	ldrh	r2, [r7, #24]
 8011398:	429a      	cmp	r2, r3
 801139a:	d80c      	bhi.n	80113b6 <etharp_find_entry+0x18a>
            old_stable = i;
 801139c:	8c3b      	ldrh	r3, [r7, #32]
 801139e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80113a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80113a4:	4956      	ldr	r1, [pc, #344]	; (8011500 <etharp_find_entry+0x2d4>)
 80113a6:	4613      	mov	r3, r2
 80113a8:	005b      	lsls	r3, r3, #1
 80113aa:	4413      	add	r3, r2
 80113ac:	00db      	lsls	r3, r3, #3
 80113ae:	440b      	add	r3, r1
 80113b0:	3312      	adds	r3, #18
 80113b2:	881b      	ldrh	r3, [r3, #0]
 80113b4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80113b6:	8c3b      	ldrh	r3, [r7, #32]
 80113b8:	3301      	adds	r3, #1
 80113ba:	b29b      	uxth	r3, r3
 80113bc:	843b      	strh	r3, [r7, #32]
 80113be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80113c2:	2b09      	cmp	r3, #9
 80113c4:	f77f af4c 	ble.w	8011260 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80113c8:	7afb      	ldrb	r3, [r7, #11]
 80113ca:	f003 0302 	and.w	r3, r3, #2
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d108      	bne.n	80113e4 <etharp_find_entry+0x1b8>
 80113d2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80113d6:	2b0a      	cmp	r3, #10
 80113d8:	d107      	bne.n	80113ea <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80113da:	7afb      	ldrb	r3, [r7, #11]
 80113dc:	f003 0301 	and.w	r3, r3, #1
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d102      	bne.n	80113ea <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80113e4:	f04f 33ff 	mov.w	r3, #4294967295
 80113e8:	e085      	b.n	80114f6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80113ea:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80113ee:	2b09      	cmp	r3, #9
 80113f0:	dc02      	bgt.n	80113f8 <etharp_find_entry+0x1cc>
    i = empty;
 80113f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80113f4:	843b      	strh	r3, [r7, #32]
 80113f6:	e039      	b.n	801146c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80113f8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80113fc:	2b09      	cmp	r3, #9
 80113fe:	dc14      	bgt.n	801142a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8011400:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011402:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8011404:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011408:	493d      	ldr	r1, [pc, #244]	; (8011500 <etharp_find_entry+0x2d4>)
 801140a:	4613      	mov	r3, r2
 801140c:	005b      	lsls	r3, r3, #1
 801140e:	4413      	add	r3, r2
 8011410:	00db      	lsls	r3, r3, #3
 8011412:	440b      	add	r3, r1
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d018      	beq.n	801144c <etharp_find_entry+0x220>
 801141a:	4b3a      	ldr	r3, [pc, #232]	; (8011504 <etharp_find_entry+0x2d8>)
 801141c:	f240 126d 	movw	r2, #365	; 0x16d
 8011420:	493b      	ldr	r1, [pc, #236]	; (8011510 <etharp_find_entry+0x2e4>)
 8011422:	483a      	ldr	r0, [pc, #232]	; (801150c <etharp_find_entry+0x2e0>)
 8011424:	f002 f9cc 	bl	80137c0 <iprintf>
 8011428:	e010      	b.n	801144c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801142a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801142e:	2b09      	cmp	r3, #9
 8011430:	dc02      	bgt.n	8011438 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8011432:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011434:	843b      	strh	r3, [r7, #32]
 8011436:	e009      	b.n	801144c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011438:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801143c:	2b09      	cmp	r3, #9
 801143e:	dc02      	bgt.n	8011446 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8011440:	8bfb      	ldrh	r3, [r7, #30]
 8011442:	843b      	strh	r3, [r7, #32]
 8011444:	e002      	b.n	801144c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8011446:	f04f 33ff 	mov.w	r3, #4294967295
 801144a:	e054      	b.n	80114f6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801144c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011450:	2b09      	cmp	r3, #9
 8011452:	dd06      	ble.n	8011462 <etharp_find_entry+0x236>
 8011454:	4b2b      	ldr	r3, [pc, #172]	; (8011504 <etharp_find_entry+0x2d8>)
 8011456:	f240 127f 	movw	r2, #383	; 0x17f
 801145a:	492e      	ldr	r1, [pc, #184]	; (8011514 <etharp_find_entry+0x2e8>)
 801145c:	482b      	ldr	r0, [pc, #172]	; (801150c <etharp_find_entry+0x2e0>)
 801145e:	f002 f9af 	bl	80137c0 <iprintf>
    etharp_free_entry(i);
 8011462:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011466:	4618      	mov	r0, r3
 8011468:	f7ff fe06 	bl	8011078 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801146c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011470:	2b09      	cmp	r3, #9
 8011472:	dd06      	ble.n	8011482 <etharp_find_entry+0x256>
 8011474:	4b23      	ldr	r3, [pc, #140]	; (8011504 <etharp_find_entry+0x2d8>)
 8011476:	f240 1283 	movw	r2, #387	; 0x183
 801147a:	4926      	ldr	r1, [pc, #152]	; (8011514 <etharp_find_entry+0x2e8>)
 801147c:	4823      	ldr	r0, [pc, #140]	; (801150c <etharp_find_entry+0x2e0>)
 801147e:	f002 f99f 	bl	80137c0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8011482:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011486:	491e      	ldr	r1, [pc, #120]	; (8011500 <etharp_find_entry+0x2d4>)
 8011488:	4613      	mov	r3, r2
 801148a:	005b      	lsls	r3, r3, #1
 801148c:	4413      	add	r3, r2
 801148e:	00db      	lsls	r3, r3, #3
 8011490:	440b      	add	r3, r1
 8011492:	3314      	adds	r3, #20
 8011494:	781b      	ldrb	r3, [r3, #0]
 8011496:	2b00      	cmp	r3, #0
 8011498:	d006      	beq.n	80114a8 <etharp_find_entry+0x27c>
 801149a:	4b1a      	ldr	r3, [pc, #104]	; (8011504 <etharp_find_entry+0x2d8>)
 801149c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80114a0:	491d      	ldr	r1, [pc, #116]	; (8011518 <etharp_find_entry+0x2ec>)
 80114a2:	481a      	ldr	r0, [pc, #104]	; (801150c <etharp_find_entry+0x2e0>)
 80114a4:	f002 f98c 	bl	80137c0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d00b      	beq.n	80114c6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80114ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	6819      	ldr	r1, [r3, #0]
 80114b6:	4812      	ldr	r0, [pc, #72]	; (8011500 <etharp_find_entry+0x2d4>)
 80114b8:	4613      	mov	r3, r2
 80114ba:	005b      	lsls	r3, r3, #1
 80114bc:	4413      	add	r3, r2
 80114be:	00db      	lsls	r3, r3, #3
 80114c0:	4403      	add	r3, r0
 80114c2:	3304      	adds	r3, #4
 80114c4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80114c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80114ca:	490d      	ldr	r1, [pc, #52]	; (8011500 <etharp_find_entry+0x2d4>)
 80114cc:	4613      	mov	r3, r2
 80114ce:	005b      	lsls	r3, r3, #1
 80114d0:	4413      	add	r3, r2
 80114d2:	00db      	lsls	r3, r3, #3
 80114d4:	440b      	add	r3, r1
 80114d6:	3312      	adds	r3, #18
 80114d8:	2200      	movs	r2, #0
 80114da:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80114dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80114e0:	4907      	ldr	r1, [pc, #28]	; (8011500 <etharp_find_entry+0x2d4>)
 80114e2:	4613      	mov	r3, r2
 80114e4:	005b      	lsls	r3, r3, #1
 80114e6:	4413      	add	r3, r2
 80114e8:	00db      	lsls	r3, r3, #3
 80114ea:	440b      	add	r3, r1
 80114ec:	3308      	adds	r3, #8
 80114ee:	687a      	ldr	r2, [r7, #4]
 80114f0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80114f2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80114f6:	4618      	mov	r0, r3
 80114f8:	3728      	adds	r7, #40	; 0x28
 80114fa:	46bd      	mov	sp, r7
 80114fc:	bd80      	pop	{r7, pc}
 80114fe:	bf00      	nop
 8011500:	2000862c 	.word	0x2000862c
 8011504:	08016abc 	.word	0x08016abc
 8011508:	08016af4 	.word	0x08016af4
 801150c:	08016b34 	.word	0x08016b34
 8011510:	08016b5c 	.word	0x08016b5c
 8011514:	08016b74 	.word	0x08016b74
 8011518:	08016b88 	.word	0x08016b88

0801151c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801151c:	b580      	push	{r7, lr}
 801151e:	b088      	sub	sp, #32
 8011520:	af02      	add	r7, sp, #8
 8011522:	60f8      	str	r0, [r7, #12]
 8011524:	60b9      	str	r1, [r7, #8]
 8011526:	607a      	str	r2, [r7, #4]
 8011528:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011530:	2b06      	cmp	r3, #6
 8011532:	d006      	beq.n	8011542 <etharp_update_arp_entry+0x26>
 8011534:	4b48      	ldr	r3, [pc, #288]	; (8011658 <etharp_update_arp_entry+0x13c>)
 8011536:	f240 12a9 	movw	r2, #425	; 0x1a9
 801153a:	4948      	ldr	r1, [pc, #288]	; (801165c <etharp_update_arp_entry+0x140>)
 801153c:	4848      	ldr	r0, [pc, #288]	; (8011660 <etharp_update_arp_entry+0x144>)
 801153e:	f002 f93f 	bl	80137c0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8011542:	68bb      	ldr	r3, [r7, #8]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d012      	beq.n	801156e <etharp_update_arp_entry+0x52>
 8011548:	68bb      	ldr	r3, [r7, #8]
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	2b00      	cmp	r3, #0
 801154e:	d00e      	beq.n	801156e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011550:	68bb      	ldr	r3, [r7, #8]
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	68f9      	ldr	r1, [r7, #12]
 8011556:	4618      	mov	r0, r3
 8011558:	f001 f8fe 	bl	8012758 <ip4_addr_isbroadcast_u32>
 801155c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801155e:	2b00      	cmp	r3, #0
 8011560:	d105      	bne.n	801156e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8011562:	68bb      	ldr	r3, [r7, #8]
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801156a:	2be0      	cmp	r3, #224	; 0xe0
 801156c:	d102      	bne.n	8011574 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801156e:	f06f 030f 	mvn.w	r3, #15
 8011572:	e06c      	b.n	801164e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8011574:	78fb      	ldrb	r3, [r7, #3]
 8011576:	68fa      	ldr	r2, [r7, #12]
 8011578:	4619      	mov	r1, r3
 801157a:	68b8      	ldr	r0, [r7, #8]
 801157c:	f7ff fe56 	bl	801122c <etharp_find_entry>
 8011580:	4603      	mov	r3, r0
 8011582:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8011584:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011588:	2b00      	cmp	r3, #0
 801158a:	da02      	bge.n	8011592 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801158c:	8afb      	ldrh	r3, [r7, #22]
 801158e:	b25b      	sxtb	r3, r3
 8011590:	e05d      	b.n	801164e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8011592:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011596:	4933      	ldr	r1, [pc, #204]	; (8011664 <etharp_update_arp_entry+0x148>)
 8011598:	4613      	mov	r3, r2
 801159a:	005b      	lsls	r3, r3, #1
 801159c:	4413      	add	r3, r2
 801159e:	00db      	lsls	r3, r3, #3
 80115a0:	440b      	add	r3, r1
 80115a2:	3314      	adds	r3, #20
 80115a4:	2202      	movs	r2, #2
 80115a6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80115a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80115ac:	492d      	ldr	r1, [pc, #180]	; (8011664 <etharp_update_arp_entry+0x148>)
 80115ae:	4613      	mov	r3, r2
 80115b0:	005b      	lsls	r3, r3, #1
 80115b2:	4413      	add	r3, r2
 80115b4:	00db      	lsls	r3, r3, #3
 80115b6:	440b      	add	r3, r1
 80115b8:	3308      	adds	r3, #8
 80115ba:	68fa      	ldr	r2, [r7, #12]
 80115bc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80115be:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80115c2:	4613      	mov	r3, r2
 80115c4:	005b      	lsls	r3, r3, #1
 80115c6:	4413      	add	r3, r2
 80115c8:	00db      	lsls	r3, r3, #3
 80115ca:	3308      	adds	r3, #8
 80115cc:	4a25      	ldr	r2, [pc, #148]	; (8011664 <etharp_update_arp_entry+0x148>)
 80115ce:	4413      	add	r3, r2
 80115d0:	3304      	adds	r3, #4
 80115d2:	2206      	movs	r2, #6
 80115d4:	6879      	ldr	r1, [r7, #4]
 80115d6:	4618      	mov	r0, r3
 80115d8:	f002 f848 	bl	801366c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80115dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80115e0:	4920      	ldr	r1, [pc, #128]	; (8011664 <etharp_update_arp_entry+0x148>)
 80115e2:	4613      	mov	r3, r2
 80115e4:	005b      	lsls	r3, r3, #1
 80115e6:	4413      	add	r3, r2
 80115e8:	00db      	lsls	r3, r3, #3
 80115ea:	440b      	add	r3, r1
 80115ec:	3312      	adds	r3, #18
 80115ee:	2200      	movs	r2, #0
 80115f0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80115f2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80115f6:	491b      	ldr	r1, [pc, #108]	; (8011664 <etharp_update_arp_entry+0x148>)
 80115f8:	4613      	mov	r3, r2
 80115fa:	005b      	lsls	r3, r3, #1
 80115fc:	4413      	add	r3, r2
 80115fe:	00db      	lsls	r3, r3, #3
 8011600:	440b      	add	r3, r1
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d021      	beq.n	801164c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8011608:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801160c:	4915      	ldr	r1, [pc, #84]	; (8011664 <etharp_update_arp_entry+0x148>)
 801160e:	4613      	mov	r3, r2
 8011610:	005b      	lsls	r3, r3, #1
 8011612:	4413      	add	r3, r2
 8011614:	00db      	lsls	r3, r3, #3
 8011616:	440b      	add	r3, r1
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801161c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011620:	4910      	ldr	r1, [pc, #64]	; (8011664 <etharp_update_arp_entry+0x148>)
 8011622:	4613      	mov	r3, r2
 8011624:	005b      	lsls	r3, r3, #1
 8011626:	4413      	add	r3, r2
 8011628:	00db      	lsls	r3, r3, #3
 801162a:	440b      	add	r3, r1
 801162c:	2200      	movs	r2, #0
 801162e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8011636:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801163a:	9300      	str	r3, [sp, #0]
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	6939      	ldr	r1, [r7, #16]
 8011640:	68f8      	ldr	r0, [r7, #12]
 8011642:	f001 ff97 	bl	8013574 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8011646:	6938      	ldr	r0, [r7, #16]
 8011648:	f7f8 ff20 	bl	800a48c <pbuf_free>
  }
  return ERR_OK;
 801164c:	2300      	movs	r3, #0
}
 801164e:	4618      	mov	r0, r3
 8011650:	3718      	adds	r7, #24
 8011652:	46bd      	mov	sp, r7
 8011654:	bd80      	pop	{r7, pc}
 8011656:	bf00      	nop
 8011658:	08016abc 	.word	0x08016abc
 801165c:	08016bb4 	.word	0x08016bb4
 8011660:	08016b34 	.word	0x08016b34
 8011664:	2000862c 	.word	0x2000862c

08011668 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8011668:	b580      	push	{r7, lr}
 801166a:	b084      	sub	sp, #16
 801166c:	af00      	add	r7, sp, #0
 801166e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011670:	2300      	movs	r3, #0
 8011672:	60fb      	str	r3, [r7, #12]
 8011674:	e01e      	b.n	80116b4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8011676:	4913      	ldr	r1, [pc, #76]	; (80116c4 <etharp_cleanup_netif+0x5c>)
 8011678:	68fa      	ldr	r2, [r7, #12]
 801167a:	4613      	mov	r3, r2
 801167c:	005b      	lsls	r3, r3, #1
 801167e:	4413      	add	r3, r2
 8011680:	00db      	lsls	r3, r3, #3
 8011682:	440b      	add	r3, r1
 8011684:	3314      	adds	r3, #20
 8011686:	781b      	ldrb	r3, [r3, #0]
 8011688:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801168a:	7afb      	ldrb	r3, [r7, #11]
 801168c:	2b00      	cmp	r3, #0
 801168e:	d00e      	beq.n	80116ae <etharp_cleanup_netif+0x46>
 8011690:	490c      	ldr	r1, [pc, #48]	; (80116c4 <etharp_cleanup_netif+0x5c>)
 8011692:	68fa      	ldr	r2, [r7, #12]
 8011694:	4613      	mov	r3, r2
 8011696:	005b      	lsls	r3, r3, #1
 8011698:	4413      	add	r3, r2
 801169a:	00db      	lsls	r3, r3, #3
 801169c:	440b      	add	r3, r1
 801169e:	3308      	adds	r3, #8
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	687a      	ldr	r2, [r7, #4]
 80116a4:	429a      	cmp	r2, r3
 80116a6:	d102      	bne.n	80116ae <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80116a8:	68f8      	ldr	r0, [r7, #12]
 80116aa:	f7ff fce5 	bl	8011078 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	3301      	adds	r3, #1
 80116b2:	60fb      	str	r3, [r7, #12]
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	2b09      	cmp	r3, #9
 80116b8:	dddd      	ble.n	8011676 <etharp_cleanup_netif+0xe>
    }
  }
}
 80116ba:	bf00      	nop
 80116bc:	bf00      	nop
 80116be:	3710      	adds	r7, #16
 80116c0:	46bd      	mov	sp, r7
 80116c2:	bd80      	pop	{r7, pc}
 80116c4:	2000862c 	.word	0x2000862c

080116c8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80116c8:	b5b0      	push	{r4, r5, r7, lr}
 80116ca:	b08a      	sub	sp, #40	; 0x28
 80116cc:	af04      	add	r7, sp, #16
 80116ce:	6078      	str	r0, [r7, #4]
 80116d0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80116d2:	683b      	ldr	r3, [r7, #0]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d107      	bne.n	80116e8 <etharp_input+0x20>
 80116d8:	4b3d      	ldr	r3, [pc, #244]	; (80117d0 <etharp_input+0x108>)
 80116da:	f240 228a 	movw	r2, #650	; 0x28a
 80116de:	493d      	ldr	r1, [pc, #244]	; (80117d4 <etharp_input+0x10c>)
 80116e0:	483d      	ldr	r0, [pc, #244]	; (80117d8 <etharp_input+0x110>)
 80116e2:	f002 f86d 	bl	80137c0 <iprintf>
 80116e6:	e06f      	b.n	80117c8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	685b      	ldr	r3, [r3, #4]
 80116ec:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80116ee:	693b      	ldr	r3, [r7, #16]
 80116f0:	881b      	ldrh	r3, [r3, #0]
 80116f2:	b29b      	uxth	r3, r3
 80116f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80116f8:	d10c      	bne.n	8011714 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80116fa:	693b      	ldr	r3, [r7, #16]
 80116fc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80116fe:	2b06      	cmp	r3, #6
 8011700:	d108      	bne.n	8011714 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011702:	693b      	ldr	r3, [r7, #16]
 8011704:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011706:	2b04      	cmp	r3, #4
 8011708:	d104      	bne.n	8011714 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801170a:	693b      	ldr	r3, [r7, #16]
 801170c:	885b      	ldrh	r3, [r3, #2]
 801170e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011710:	2b08      	cmp	r3, #8
 8011712:	d003      	beq.n	801171c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8011714:	6878      	ldr	r0, [r7, #4]
 8011716:	f7f8 feb9 	bl	800a48c <pbuf_free>
    return;
 801171a:	e055      	b.n	80117c8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801171c:	693b      	ldr	r3, [r7, #16]
 801171e:	330e      	adds	r3, #14
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8011724:	693b      	ldr	r3, [r7, #16]
 8011726:	3318      	adds	r3, #24
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801172c:	683b      	ldr	r3, [r7, #0]
 801172e:	3304      	adds	r3, #4
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d102      	bne.n	801173c <etharp_input+0x74>
    for_us = 0;
 8011736:	2300      	movs	r3, #0
 8011738:	75fb      	strb	r3, [r7, #23]
 801173a:	e009      	b.n	8011750 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801173c:	68ba      	ldr	r2, [r7, #8]
 801173e:	683b      	ldr	r3, [r7, #0]
 8011740:	3304      	adds	r3, #4
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	429a      	cmp	r2, r3
 8011746:	bf0c      	ite	eq
 8011748:	2301      	moveq	r3, #1
 801174a:	2300      	movne	r3, #0
 801174c:	b2db      	uxtb	r3, r3
 801174e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011750:	693b      	ldr	r3, [r7, #16]
 8011752:	f103 0208 	add.w	r2, r3, #8
 8011756:	7dfb      	ldrb	r3, [r7, #23]
 8011758:	2b00      	cmp	r3, #0
 801175a:	d001      	beq.n	8011760 <etharp_input+0x98>
 801175c:	2301      	movs	r3, #1
 801175e:	e000      	b.n	8011762 <etharp_input+0x9a>
 8011760:	2302      	movs	r3, #2
 8011762:	f107 010c 	add.w	r1, r7, #12
 8011766:	6838      	ldr	r0, [r7, #0]
 8011768:	f7ff fed8 	bl	801151c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801176c:	693b      	ldr	r3, [r7, #16]
 801176e:	88db      	ldrh	r3, [r3, #6]
 8011770:	b29b      	uxth	r3, r3
 8011772:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011776:	d003      	beq.n	8011780 <etharp_input+0xb8>
 8011778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801177c:	d01e      	beq.n	80117bc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801177e:	e020      	b.n	80117c2 <etharp_input+0xfa>
      if (for_us) {
 8011780:	7dfb      	ldrb	r3, [r7, #23]
 8011782:	2b00      	cmp	r3, #0
 8011784:	d01c      	beq.n	80117c0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8011786:	683b      	ldr	r3, [r7, #0]
 8011788:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801178c:	693b      	ldr	r3, [r7, #16]
 801178e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8011792:	683b      	ldr	r3, [r7, #0]
 8011794:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8011798:	683b      	ldr	r3, [r7, #0]
 801179a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801179c:	693a      	ldr	r2, [r7, #16]
 801179e:	3208      	adds	r2, #8
        etharp_raw(netif,
 80117a0:	2102      	movs	r1, #2
 80117a2:	9103      	str	r1, [sp, #12]
 80117a4:	f107 010c 	add.w	r1, r7, #12
 80117a8:	9102      	str	r1, [sp, #8]
 80117aa:	9201      	str	r2, [sp, #4]
 80117ac:	9300      	str	r3, [sp, #0]
 80117ae:	462b      	mov	r3, r5
 80117b0:	4622      	mov	r2, r4
 80117b2:	4601      	mov	r1, r0
 80117b4:	6838      	ldr	r0, [r7, #0]
 80117b6:	f000 faeb 	bl	8011d90 <etharp_raw>
      break;
 80117ba:	e001      	b.n	80117c0 <etharp_input+0xf8>
      break;
 80117bc:	bf00      	nop
 80117be:	e000      	b.n	80117c2 <etharp_input+0xfa>
      break;
 80117c0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80117c2:	6878      	ldr	r0, [r7, #4]
 80117c4:	f7f8 fe62 	bl	800a48c <pbuf_free>
}
 80117c8:	3718      	adds	r7, #24
 80117ca:	46bd      	mov	sp, r7
 80117cc:	bdb0      	pop	{r4, r5, r7, pc}
 80117ce:	bf00      	nop
 80117d0:	08016abc 	.word	0x08016abc
 80117d4:	08016c0c 	.word	0x08016c0c
 80117d8:	08016b34 	.word	0x08016b34

080117dc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80117dc:	b580      	push	{r7, lr}
 80117de:	b086      	sub	sp, #24
 80117e0:	af02      	add	r7, sp, #8
 80117e2:	60f8      	str	r0, [r7, #12]
 80117e4:	60b9      	str	r1, [r7, #8]
 80117e6:	4613      	mov	r3, r2
 80117e8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80117ea:	79fa      	ldrb	r2, [r7, #7]
 80117ec:	4944      	ldr	r1, [pc, #272]	; (8011900 <etharp_output_to_arp_index+0x124>)
 80117ee:	4613      	mov	r3, r2
 80117f0:	005b      	lsls	r3, r3, #1
 80117f2:	4413      	add	r3, r2
 80117f4:	00db      	lsls	r3, r3, #3
 80117f6:	440b      	add	r3, r1
 80117f8:	3314      	adds	r3, #20
 80117fa:	781b      	ldrb	r3, [r3, #0]
 80117fc:	2b01      	cmp	r3, #1
 80117fe:	d806      	bhi.n	801180e <etharp_output_to_arp_index+0x32>
 8011800:	4b40      	ldr	r3, [pc, #256]	; (8011904 <etharp_output_to_arp_index+0x128>)
 8011802:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011806:	4940      	ldr	r1, [pc, #256]	; (8011908 <etharp_output_to_arp_index+0x12c>)
 8011808:	4840      	ldr	r0, [pc, #256]	; (801190c <etharp_output_to_arp_index+0x130>)
 801180a:	f001 ffd9 	bl	80137c0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801180e:	79fa      	ldrb	r2, [r7, #7]
 8011810:	493b      	ldr	r1, [pc, #236]	; (8011900 <etharp_output_to_arp_index+0x124>)
 8011812:	4613      	mov	r3, r2
 8011814:	005b      	lsls	r3, r3, #1
 8011816:	4413      	add	r3, r2
 8011818:	00db      	lsls	r3, r3, #3
 801181a:	440b      	add	r3, r1
 801181c:	3314      	adds	r3, #20
 801181e:	781b      	ldrb	r3, [r3, #0]
 8011820:	2b02      	cmp	r3, #2
 8011822:	d153      	bne.n	80118cc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8011824:	79fa      	ldrb	r2, [r7, #7]
 8011826:	4936      	ldr	r1, [pc, #216]	; (8011900 <etharp_output_to_arp_index+0x124>)
 8011828:	4613      	mov	r3, r2
 801182a:	005b      	lsls	r3, r3, #1
 801182c:	4413      	add	r3, r2
 801182e:	00db      	lsls	r3, r3, #3
 8011830:	440b      	add	r3, r1
 8011832:	3312      	adds	r3, #18
 8011834:	881b      	ldrh	r3, [r3, #0]
 8011836:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801183a:	d919      	bls.n	8011870 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801183c:	79fa      	ldrb	r2, [r7, #7]
 801183e:	4613      	mov	r3, r2
 8011840:	005b      	lsls	r3, r3, #1
 8011842:	4413      	add	r3, r2
 8011844:	00db      	lsls	r3, r3, #3
 8011846:	4a2e      	ldr	r2, [pc, #184]	; (8011900 <etharp_output_to_arp_index+0x124>)
 8011848:	4413      	add	r3, r2
 801184a:	3304      	adds	r3, #4
 801184c:	4619      	mov	r1, r3
 801184e:	68f8      	ldr	r0, [r7, #12]
 8011850:	f000 fb4c 	bl	8011eec <etharp_request>
 8011854:	4603      	mov	r3, r0
 8011856:	2b00      	cmp	r3, #0
 8011858:	d138      	bne.n	80118cc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801185a:	79fa      	ldrb	r2, [r7, #7]
 801185c:	4928      	ldr	r1, [pc, #160]	; (8011900 <etharp_output_to_arp_index+0x124>)
 801185e:	4613      	mov	r3, r2
 8011860:	005b      	lsls	r3, r3, #1
 8011862:	4413      	add	r3, r2
 8011864:	00db      	lsls	r3, r3, #3
 8011866:	440b      	add	r3, r1
 8011868:	3314      	adds	r3, #20
 801186a:	2203      	movs	r2, #3
 801186c:	701a      	strb	r2, [r3, #0]
 801186e:	e02d      	b.n	80118cc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8011870:	79fa      	ldrb	r2, [r7, #7]
 8011872:	4923      	ldr	r1, [pc, #140]	; (8011900 <etharp_output_to_arp_index+0x124>)
 8011874:	4613      	mov	r3, r2
 8011876:	005b      	lsls	r3, r3, #1
 8011878:	4413      	add	r3, r2
 801187a:	00db      	lsls	r3, r3, #3
 801187c:	440b      	add	r3, r1
 801187e:	3312      	adds	r3, #18
 8011880:	881b      	ldrh	r3, [r3, #0]
 8011882:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8011886:	d321      	bcc.n	80118cc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8011888:	79fa      	ldrb	r2, [r7, #7]
 801188a:	4613      	mov	r3, r2
 801188c:	005b      	lsls	r3, r3, #1
 801188e:	4413      	add	r3, r2
 8011890:	00db      	lsls	r3, r3, #3
 8011892:	4a1b      	ldr	r2, [pc, #108]	; (8011900 <etharp_output_to_arp_index+0x124>)
 8011894:	4413      	add	r3, r2
 8011896:	1d19      	adds	r1, r3, #4
 8011898:	79fa      	ldrb	r2, [r7, #7]
 801189a:	4613      	mov	r3, r2
 801189c:	005b      	lsls	r3, r3, #1
 801189e:	4413      	add	r3, r2
 80118a0:	00db      	lsls	r3, r3, #3
 80118a2:	3308      	adds	r3, #8
 80118a4:	4a16      	ldr	r2, [pc, #88]	; (8011900 <etharp_output_to_arp_index+0x124>)
 80118a6:	4413      	add	r3, r2
 80118a8:	3304      	adds	r3, #4
 80118aa:	461a      	mov	r2, r3
 80118ac:	68f8      	ldr	r0, [r7, #12]
 80118ae:	f000 fafb 	bl	8011ea8 <etharp_request_dst>
 80118b2:	4603      	mov	r3, r0
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d109      	bne.n	80118cc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80118b8:	79fa      	ldrb	r2, [r7, #7]
 80118ba:	4911      	ldr	r1, [pc, #68]	; (8011900 <etharp_output_to_arp_index+0x124>)
 80118bc:	4613      	mov	r3, r2
 80118be:	005b      	lsls	r3, r3, #1
 80118c0:	4413      	add	r3, r2
 80118c2:	00db      	lsls	r3, r3, #3
 80118c4:	440b      	add	r3, r1
 80118c6:	3314      	adds	r3, #20
 80118c8:	2203      	movs	r2, #3
 80118ca:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80118d2:	79fa      	ldrb	r2, [r7, #7]
 80118d4:	4613      	mov	r3, r2
 80118d6:	005b      	lsls	r3, r3, #1
 80118d8:	4413      	add	r3, r2
 80118da:	00db      	lsls	r3, r3, #3
 80118dc:	3308      	adds	r3, #8
 80118de:	4a08      	ldr	r2, [pc, #32]	; (8011900 <etharp_output_to_arp_index+0x124>)
 80118e0:	4413      	add	r3, r2
 80118e2:	3304      	adds	r3, #4
 80118e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80118e8:	9200      	str	r2, [sp, #0]
 80118ea:	460a      	mov	r2, r1
 80118ec:	68b9      	ldr	r1, [r7, #8]
 80118ee:	68f8      	ldr	r0, [r7, #12]
 80118f0:	f001 fe40 	bl	8013574 <ethernet_output>
 80118f4:	4603      	mov	r3, r0
}
 80118f6:	4618      	mov	r0, r3
 80118f8:	3710      	adds	r7, #16
 80118fa:	46bd      	mov	sp, r7
 80118fc:	bd80      	pop	{r7, pc}
 80118fe:	bf00      	nop
 8011900:	2000862c 	.word	0x2000862c
 8011904:	08016abc 	.word	0x08016abc
 8011908:	08016c2c 	.word	0x08016c2c
 801190c:	08016b34 	.word	0x08016b34

08011910 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8011910:	b580      	push	{r7, lr}
 8011912:	b08a      	sub	sp, #40	; 0x28
 8011914:	af02      	add	r7, sp, #8
 8011916:	60f8      	str	r0, [r7, #12]
 8011918:	60b9      	str	r1, [r7, #8]
 801191a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d106      	bne.n	8011934 <etharp_output+0x24>
 8011926:	4b73      	ldr	r3, [pc, #460]	; (8011af4 <etharp_output+0x1e4>)
 8011928:	f240 321e 	movw	r2, #798	; 0x31e
 801192c:	4972      	ldr	r1, [pc, #456]	; (8011af8 <etharp_output+0x1e8>)
 801192e:	4873      	ldr	r0, [pc, #460]	; (8011afc <etharp_output+0x1ec>)
 8011930:	f001 ff46 	bl	80137c0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8011934:	68bb      	ldr	r3, [r7, #8]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d106      	bne.n	8011948 <etharp_output+0x38>
 801193a:	4b6e      	ldr	r3, [pc, #440]	; (8011af4 <etharp_output+0x1e4>)
 801193c:	f240 321f 	movw	r2, #799	; 0x31f
 8011940:	496f      	ldr	r1, [pc, #444]	; (8011b00 <etharp_output+0x1f0>)
 8011942:	486e      	ldr	r0, [pc, #440]	; (8011afc <etharp_output+0x1ec>)
 8011944:	f001 ff3c 	bl	80137c0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d106      	bne.n	801195c <etharp_output+0x4c>
 801194e:	4b69      	ldr	r3, [pc, #420]	; (8011af4 <etharp_output+0x1e4>)
 8011950:	f44f 7248 	mov.w	r2, #800	; 0x320
 8011954:	496b      	ldr	r1, [pc, #428]	; (8011b04 <etharp_output+0x1f4>)
 8011956:	4869      	ldr	r0, [pc, #420]	; (8011afc <etharp_output+0x1ec>)
 8011958:	f001 ff32 	bl	80137c0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	68f9      	ldr	r1, [r7, #12]
 8011962:	4618      	mov	r0, r3
 8011964:	f000 fef8 	bl	8012758 <ip4_addr_isbroadcast_u32>
 8011968:	4603      	mov	r3, r0
 801196a:	2b00      	cmp	r3, #0
 801196c:	d002      	beq.n	8011974 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801196e:	4b66      	ldr	r3, [pc, #408]	; (8011b08 <etharp_output+0x1f8>)
 8011970:	61fb      	str	r3, [r7, #28]
 8011972:	e0af      	b.n	8011ad4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801197c:	2be0      	cmp	r3, #224	; 0xe0
 801197e:	d118      	bne.n	80119b2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8011980:	2301      	movs	r3, #1
 8011982:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8011984:	2300      	movs	r3, #0
 8011986:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8011988:	235e      	movs	r3, #94	; 0x5e
 801198a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	3301      	adds	r3, #1
 8011990:	781b      	ldrb	r3, [r3, #0]
 8011992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011996:	b2db      	uxtb	r3, r3
 8011998:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	3302      	adds	r3, #2
 801199e:	781b      	ldrb	r3, [r3, #0]
 80119a0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	3303      	adds	r3, #3
 80119a6:	781b      	ldrb	r3, [r3, #0]
 80119a8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80119aa:	f107 0310 	add.w	r3, r7, #16
 80119ae:	61fb      	str	r3, [r7, #28]
 80119b0:	e090      	b.n	8011ad4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	681a      	ldr	r2, [r3, #0]
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	3304      	adds	r3, #4
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	405a      	eors	r2, r3
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	3308      	adds	r3, #8
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	4013      	ands	r3, r2
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d012      	beq.n	80119f0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80119d0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80119d4:	4293      	cmp	r3, r2
 80119d6:	d00b      	beq.n	80119f0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	330c      	adds	r3, #12
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d003      	beq.n	80119ea <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	330c      	adds	r3, #12
 80119e6:	61bb      	str	r3, [r7, #24]
 80119e8:	e002      	b.n	80119f0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80119ea:	f06f 0303 	mvn.w	r3, #3
 80119ee:	e07d      	b.n	8011aec <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80119f0:	4b46      	ldr	r3, [pc, #280]	; (8011b0c <etharp_output+0x1fc>)
 80119f2:	781b      	ldrb	r3, [r3, #0]
 80119f4:	4619      	mov	r1, r3
 80119f6:	4a46      	ldr	r2, [pc, #280]	; (8011b10 <etharp_output+0x200>)
 80119f8:	460b      	mov	r3, r1
 80119fa:	005b      	lsls	r3, r3, #1
 80119fc:	440b      	add	r3, r1
 80119fe:	00db      	lsls	r3, r3, #3
 8011a00:	4413      	add	r3, r2
 8011a02:	3314      	adds	r3, #20
 8011a04:	781b      	ldrb	r3, [r3, #0]
 8011a06:	2b01      	cmp	r3, #1
 8011a08:	d925      	bls.n	8011a56 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011a0a:	4b40      	ldr	r3, [pc, #256]	; (8011b0c <etharp_output+0x1fc>)
 8011a0c:	781b      	ldrb	r3, [r3, #0]
 8011a0e:	4619      	mov	r1, r3
 8011a10:	4a3f      	ldr	r2, [pc, #252]	; (8011b10 <etharp_output+0x200>)
 8011a12:	460b      	mov	r3, r1
 8011a14:	005b      	lsls	r3, r3, #1
 8011a16:	440b      	add	r3, r1
 8011a18:	00db      	lsls	r3, r3, #3
 8011a1a:	4413      	add	r3, r2
 8011a1c:	3308      	adds	r3, #8
 8011a1e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011a20:	68fa      	ldr	r2, [r7, #12]
 8011a22:	429a      	cmp	r2, r3
 8011a24:	d117      	bne.n	8011a56 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8011a26:	69bb      	ldr	r3, [r7, #24]
 8011a28:	681a      	ldr	r2, [r3, #0]
 8011a2a:	4b38      	ldr	r3, [pc, #224]	; (8011b0c <etharp_output+0x1fc>)
 8011a2c:	781b      	ldrb	r3, [r3, #0]
 8011a2e:	4618      	mov	r0, r3
 8011a30:	4937      	ldr	r1, [pc, #220]	; (8011b10 <etharp_output+0x200>)
 8011a32:	4603      	mov	r3, r0
 8011a34:	005b      	lsls	r3, r3, #1
 8011a36:	4403      	add	r3, r0
 8011a38:	00db      	lsls	r3, r3, #3
 8011a3a:	440b      	add	r3, r1
 8011a3c:	3304      	adds	r3, #4
 8011a3e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011a40:	429a      	cmp	r2, r3
 8011a42:	d108      	bne.n	8011a56 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8011a44:	4b31      	ldr	r3, [pc, #196]	; (8011b0c <etharp_output+0x1fc>)
 8011a46:	781b      	ldrb	r3, [r3, #0]
 8011a48:	461a      	mov	r2, r3
 8011a4a:	68b9      	ldr	r1, [r7, #8]
 8011a4c:	68f8      	ldr	r0, [r7, #12]
 8011a4e:	f7ff fec5 	bl	80117dc <etharp_output_to_arp_index>
 8011a52:	4603      	mov	r3, r0
 8011a54:	e04a      	b.n	8011aec <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011a56:	2300      	movs	r3, #0
 8011a58:	75fb      	strb	r3, [r7, #23]
 8011a5a:	e031      	b.n	8011ac0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011a5c:	7dfa      	ldrb	r2, [r7, #23]
 8011a5e:	492c      	ldr	r1, [pc, #176]	; (8011b10 <etharp_output+0x200>)
 8011a60:	4613      	mov	r3, r2
 8011a62:	005b      	lsls	r3, r3, #1
 8011a64:	4413      	add	r3, r2
 8011a66:	00db      	lsls	r3, r3, #3
 8011a68:	440b      	add	r3, r1
 8011a6a:	3314      	adds	r3, #20
 8011a6c:	781b      	ldrb	r3, [r3, #0]
 8011a6e:	2b01      	cmp	r3, #1
 8011a70:	d923      	bls.n	8011aba <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8011a72:	7dfa      	ldrb	r2, [r7, #23]
 8011a74:	4926      	ldr	r1, [pc, #152]	; (8011b10 <etharp_output+0x200>)
 8011a76:	4613      	mov	r3, r2
 8011a78:	005b      	lsls	r3, r3, #1
 8011a7a:	4413      	add	r3, r2
 8011a7c:	00db      	lsls	r3, r3, #3
 8011a7e:	440b      	add	r3, r1
 8011a80:	3308      	adds	r3, #8
 8011a82:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011a84:	68fa      	ldr	r2, [r7, #12]
 8011a86:	429a      	cmp	r2, r3
 8011a88:	d117      	bne.n	8011aba <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8011a8a:	69bb      	ldr	r3, [r7, #24]
 8011a8c:	6819      	ldr	r1, [r3, #0]
 8011a8e:	7dfa      	ldrb	r2, [r7, #23]
 8011a90:	481f      	ldr	r0, [pc, #124]	; (8011b10 <etharp_output+0x200>)
 8011a92:	4613      	mov	r3, r2
 8011a94:	005b      	lsls	r3, r3, #1
 8011a96:	4413      	add	r3, r2
 8011a98:	00db      	lsls	r3, r3, #3
 8011a9a:	4403      	add	r3, r0
 8011a9c:	3304      	adds	r3, #4
 8011a9e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8011aa0:	4299      	cmp	r1, r3
 8011aa2:	d10a      	bne.n	8011aba <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8011aa4:	4a19      	ldr	r2, [pc, #100]	; (8011b0c <etharp_output+0x1fc>)
 8011aa6:	7dfb      	ldrb	r3, [r7, #23]
 8011aa8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8011aaa:	7dfb      	ldrb	r3, [r7, #23]
 8011aac:	461a      	mov	r2, r3
 8011aae:	68b9      	ldr	r1, [r7, #8]
 8011ab0:	68f8      	ldr	r0, [r7, #12]
 8011ab2:	f7ff fe93 	bl	80117dc <etharp_output_to_arp_index>
 8011ab6:	4603      	mov	r3, r0
 8011ab8:	e018      	b.n	8011aec <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011aba:	7dfb      	ldrb	r3, [r7, #23]
 8011abc:	3301      	adds	r3, #1
 8011abe:	75fb      	strb	r3, [r7, #23]
 8011ac0:	7dfb      	ldrb	r3, [r7, #23]
 8011ac2:	2b09      	cmp	r3, #9
 8011ac4:	d9ca      	bls.n	8011a5c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8011ac6:	68ba      	ldr	r2, [r7, #8]
 8011ac8:	69b9      	ldr	r1, [r7, #24]
 8011aca:	68f8      	ldr	r0, [r7, #12]
 8011acc:	f000 f822 	bl	8011b14 <etharp_query>
 8011ad0:	4603      	mov	r3, r0
 8011ad2:	e00b      	b.n	8011aec <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8011ada:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011ade:	9300      	str	r3, [sp, #0]
 8011ae0:	69fb      	ldr	r3, [r7, #28]
 8011ae2:	68b9      	ldr	r1, [r7, #8]
 8011ae4:	68f8      	ldr	r0, [r7, #12]
 8011ae6:	f001 fd45 	bl	8013574 <ethernet_output>
 8011aea:	4603      	mov	r3, r0
}
 8011aec:	4618      	mov	r0, r3
 8011aee:	3720      	adds	r7, #32
 8011af0:	46bd      	mov	sp, r7
 8011af2:	bd80      	pop	{r7, pc}
 8011af4:	08016abc 	.word	0x08016abc
 8011af8:	08016c0c 	.word	0x08016c0c
 8011afc:	08016b34 	.word	0x08016b34
 8011b00:	08016c5c 	.word	0x08016c5c
 8011b04:	08016bfc 	.word	0x08016bfc
 8011b08:	08017278 	.word	0x08017278
 8011b0c:	2000871c 	.word	0x2000871c
 8011b10:	2000862c 	.word	0x2000862c

08011b14 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8011b14:	b580      	push	{r7, lr}
 8011b16:	b08c      	sub	sp, #48	; 0x30
 8011b18:	af02      	add	r7, sp, #8
 8011b1a:	60f8      	str	r0, [r7, #12]
 8011b1c:	60b9      	str	r1, [r7, #8]
 8011b1e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	3326      	adds	r3, #38	; 0x26
 8011b24:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8011b26:	23ff      	movs	r3, #255	; 0xff
 8011b28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8011b2c:	2300      	movs	r3, #0
 8011b2e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011b30:	68bb      	ldr	r3, [r7, #8]
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	68f9      	ldr	r1, [r7, #12]
 8011b36:	4618      	mov	r0, r3
 8011b38:	f000 fe0e 	bl	8012758 <ip4_addr_isbroadcast_u32>
 8011b3c:	4603      	mov	r3, r0
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d10c      	bne.n	8011b5c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011b42:	68bb      	ldr	r3, [r7, #8]
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011b4a:	2be0      	cmp	r3, #224	; 0xe0
 8011b4c:	d006      	beq.n	8011b5c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011b4e:	68bb      	ldr	r3, [r7, #8]
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d003      	beq.n	8011b5c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8011b54:	68bb      	ldr	r3, [r7, #8]
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d102      	bne.n	8011b62 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011b5c:	f06f 030f 	mvn.w	r3, #15
 8011b60:	e101      	b.n	8011d66 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8011b62:	68fa      	ldr	r2, [r7, #12]
 8011b64:	2101      	movs	r1, #1
 8011b66:	68b8      	ldr	r0, [r7, #8]
 8011b68:	f7ff fb60 	bl	801122c <etharp_find_entry>
 8011b6c:	4603      	mov	r3, r0
 8011b6e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8011b70:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	da02      	bge.n	8011b7e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8011b78:	8a7b      	ldrh	r3, [r7, #18]
 8011b7a:	b25b      	sxtb	r3, r3
 8011b7c:	e0f3      	b.n	8011d66 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8011b7e:	8a7b      	ldrh	r3, [r7, #18]
 8011b80:	2b7e      	cmp	r3, #126	; 0x7e
 8011b82:	d906      	bls.n	8011b92 <etharp_query+0x7e>
 8011b84:	4b7a      	ldr	r3, [pc, #488]	; (8011d70 <etharp_query+0x25c>)
 8011b86:	f240 32c1 	movw	r2, #961	; 0x3c1
 8011b8a:	497a      	ldr	r1, [pc, #488]	; (8011d74 <etharp_query+0x260>)
 8011b8c:	487a      	ldr	r0, [pc, #488]	; (8011d78 <etharp_query+0x264>)
 8011b8e:	f001 fe17 	bl	80137c0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8011b92:	8a7b      	ldrh	r3, [r7, #18]
 8011b94:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8011b96:	7c7a      	ldrb	r2, [r7, #17]
 8011b98:	4978      	ldr	r1, [pc, #480]	; (8011d7c <etharp_query+0x268>)
 8011b9a:	4613      	mov	r3, r2
 8011b9c:	005b      	lsls	r3, r3, #1
 8011b9e:	4413      	add	r3, r2
 8011ba0:	00db      	lsls	r3, r3, #3
 8011ba2:	440b      	add	r3, r1
 8011ba4:	3314      	adds	r3, #20
 8011ba6:	781b      	ldrb	r3, [r3, #0]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d115      	bne.n	8011bd8 <etharp_query+0xc4>
    is_new_entry = 1;
 8011bac:	2301      	movs	r3, #1
 8011bae:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8011bb0:	7c7a      	ldrb	r2, [r7, #17]
 8011bb2:	4972      	ldr	r1, [pc, #456]	; (8011d7c <etharp_query+0x268>)
 8011bb4:	4613      	mov	r3, r2
 8011bb6:	005b      	lsls	r3, r3, #1
 8011bb8:	4413      	add	r3, r2
 8011bba:	00db      	lsls	r3, r3, #3
 8011bbc:	440b      	add	r3, r1
 8011bbe:	3314      	adds	r3, #20
 8011bc0:	2201      	movs	r2, #1
 8011bc2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8011bc4:	7c7a      	ldrb	r2, [r7, #17]
 8011bc6:	496d      	ldr	r1, [pc, #436]	; (8011d7c <etharp_query+0x268>)
 8011bc8:	4613      	mov	r3, r2
 8011bca:	005b      	lsls	r3, r3, #1
 8011bcc:	4413      	add	r3, r2
 8011bce:	00db      	lsls	r3, r3, #3
 8011bd0:	440b      	add	r3, r1
 8011bd2:	3308      	adds	r3, #8
 8011bd4:	68fa      	ldr	r2, [r7, #12]
 8011bd6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8011bd8:	7c7a      	ldrb	r2, [r7, #17]
 8011bda:	4968      	ldr	r1, [pc, #416]	; (8011d7c <etharp_query+0x268>)
 8011bdc:	4613      	mov	r3, r2
 8011bde:	005b      	lsls	r3, r3, #1
 8011be0:	4413      	add	r3, r2
 8011be2:	00db      	lsls	r3, r3, #3
 8011be4:	440b      	add	r3, r1
 8011be6:	3314      	adds	r3, #20
 8011be8:	781b      	ldrb	r3, [r3, #0]
 8011bea:	2b01      	cmp	r3, #1
 8011bec:	d011      	beq.n	8011c12 <etharp_query+0xfe>
 8011bee:	7c7a      	ldrb	r2, [r7, #17]
 8011bf0:	4962      	ldr	r1, [pc, #392]	; (8011d7c <etharp_query+0x268>)
 8011bf2:	4613      	mov	r3, r2
 8011bf4:	005b      	lsls	r3, r3, #1
 8011bf6:	4413      	add	r3, r2
 8011bf8:	00db      	lsls	r3, r3, #3
 8011bfa:	440b      	add	r3, r1
 8011bfc:	3314      	adds	r3, #20
 8011bfe:	781b      	ldrb	r3, [r3, #0]
 8011c00:	2b01      	cmp	r3, #1
 8011c02:	d806      	bhi.n	8011c12 <etharp_query+0xfe>
 8011c04:	4b5a      	ldr	r3, [pc, #360]	; (8011d70 <etharp_query+0x25c>)
 8011c06:	f240 32cd 	movw	r2, #973	; 0x3cd
 8011c0a:	495d      	ldr	r1, [pc, #372]	; (8011d80 <etharp_query+0x26c>)
 8011c0c:	485a      	ldr	r0, [pc, #360]	; (8011d78 <etharp_query+0x264>)
 8011c0e:	f001 fdd7 	bl	80137c0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8011c12:	6a3b      	ldr	r3, [r7, #32]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d102      	bne.n	8011c1e <etharp_query+0x10a>
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d10c      	bne.n	8011c38 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8011c1e:	68b9      	ldr	r1, [r7, #8]
 8011c20:	68f8      	ldr	r0, [r7, #12]
 8011c22:	f000 f963 	bl	8011eec <etharp_request>
 8011c26:	4603      	mov	r3, r0
 8011c28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d102      	bne.n	8011c38 <etharp_query+0x124>
      return result;
 8011c32:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011c36:	e096      	b.n	8011d66 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d106      	bne.n	8011c4c <etharp_query+0x138>
 8011c3e:	4b4c      	ldr	r3, [pc, #304]	; (8011d70 <etharp_query+0x25c>)
 8011c40:	f240 32e1 	movw	r2, #993	; 0x3e1
 8011c44:	494f      	ldr	r1, [pc, #316]	; (8011d84 <etharp_query+0x270>)
 8011c46:	484c      	ldr	r0, [pc, #304]	; (8011d78 <etharp_query+0x264>)
 8011c48:	f001 fdba 	bl	80137c0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8011c4c:	7c7a      	ldrb	r2, [r7, #17]
 8011c4e:	494b      	ldr	r1, [pc, #300]	; (8011d7c <etharp_query+0x268>)
 8011c50:	4613      	mov	r3, r2
 8011c52:	005b      	lsls	r3, r3, #1
 8011c54:	4413      	add	r3, r2
 8011c56:	00db      	lsls	r3, r3, #3
 8011c58:	440b      	add	r3, r1
 8011c5a:	3314      	adds	r3, #20
 8011c5c:	781b      	ldrb	r3, [r3, #0]
 8011c5e:	2b01      	cmp	r3, #1
 8011c60:	d917      	bls.n	8011c92 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8011c62:	4a49      	ldr	r2, [pc, #292]	; (8011d88 <etharp_query+0x274>)
 8011c64:	7c7b      	ldrb	r3, [r7, #17]
 8011c66:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8011c68:	7c7a      	ldrb	r2, [r7, #17]
 8011c6a:	4613      	mov	r3, r2
 8011c6c:	005b      	lsls	r3, r3, #1
 8011c6e:	4413      	add	r3, r2
 8011c70:	00db      	lsls	r3, r3, #3
 8011c72:	3308      	adds	r3, #8
 8011c74:	4a41      	ldr	r2, [pc, #260]	; (8011d7c <etharp_query+0x268>)
 8011c76:	4413      	add	r3, r2
 8011c78:	3304      	adds	r3, #4
 8011c7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011c7e:	9200      	str	r2, [sp, #0]
 8011c80:	697a      	ldr	r2, [r7, #20]
 8011c82:	6879      	ldr	r1, [r7, #4]
 8011c84:	68f8      	ldr	r0, [r7, #12]
 8011c86:	f001 fc75 	bl	8013574 <ethernet_output>
 8011c8a:	4603      	mov	r3, r0
 8011c8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011c90:	e067      	b.n	8011d62 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011c92:	7c7a      	ldrb	r2, [r7, #17]
 8011c94:	4939      	ldr	r1, [pc, #228]	; (8011d7c <etharp_query+0x268>)
 8011c96:	4613      	mov	r3, r2
 8011c98:	005b      	lsls	r3, r3, #1
 8011c9a:	4413      	add	r3, r2
 8011c9c:	00db      	lsls	r3, r3, #3
 8011c9e:	440b      	add	r3, r1
 8011ca0:	3314      	adds	r3, #20
 8011ca2:	781b      	ldrb	r3, [r3, #0]
 8011ca4:	2b01      	cmp	r3, #1
 8011ca6:	d15c      	bne.n	8011d62 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8011ca8:	2300      	movs	r3, #0
 8011caa:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011cb0:	e01c      	b.n	8011cec <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8011cb2:	69fb      	ldr	r3, [r7, #28]
 8011cb4:	895a      	ldrh	r2, [r3, #10]
 8011cb6:	69fb      	ldr	r3, [r7, #28]
 8011cb8:	891b      	ldrh	r3, [r3, #8]
 8011cba:	429a      	cmp	r2, r3
 8011cbc:	d10a      	bne.n	8011cd4 <etharp_query+0x1c0>
 8011cbe:	69fb      	ldr	r3, [r7, #28]
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d006      	beq.n	8011cd4 <etharp_query+0x1c0>
 8011cc6:	4b2a      	ldr	r3, [pc, #168]	; (8011d70 <etharp_query+0x25c>)
 8011cc8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8011ccc:	492f      	ldr	r1, [pc, #188]	; (8011d8c <etharp_query+0x278>)
 8011cce:	482a      	ldr	r0, [pc, #168]	; (8011d78 <etharp_query+0x264>)
 8011cd0:	f001 fd76 	bl	80137c0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8011cd4:	69fb      	ldr	r3, [r7, #28]
 8011cd6:	7b1b      	ldrb	r3, [r3, #12]
 8011cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d002      	beq.n	8011ce6 <etharp_query+0x1d2>
        copy_needed = 1;
 8011ce0:	2301      	movs	r3, #1
 8011ce2:	61bb      	str	r3, [r7, #24]
        break;
 8011ce4:	e005      	b.n	8011cf2 <etharp_query+0x1de>
      }
      p = p->next;
 8011ce6:	69fb      	ldr	r3, [r7, #28]
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011cec:	69fb      	ldr	r3, [r7, #28]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d1df      	bne.n	8011cb2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8011cf2:	69bb      	ldr	r3, [r7, #24]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d007      	beq.n	8011d08 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8011cf8:	687a      	ldr	r2, [r7, #4]
 8011cfa:	f44f 7120 	mov.w	r1, #640	; 0x280
 8011cfe:	200e      	movs	r0, #14
 8011d00:	f7f8 fe30 	bl	800a964 <pbuf_clone>
 8011d04:	61f8      	str	r0, [r7, #28]
 8011d06:	e004      	b.n	8011d12 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8011d0c:	69f8      	ldr	r0, [r7, #28]
 8011d0e:	f7f8 fc5d 	bl	800a5cc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8011d12:	69fb      	ldr	r3, [r7, #28]
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d021      	beq.n	8011d5c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8011d18:	7c7a      	ldrb	r2, [r7, #17]
 8011d1a:	4918      	ldr	r1, [pc, #96]	; (8011d7c <etharp_query+0x268>)
 8011d1c:	4613      	mov	r3, r2
 8011d1e:	005b      	lsls	r3, r3, #1
 8011d20:	4413      	add	r3, r2
 8011d22:	00db      	lsls	r3, r3, #3
 8011d24:	440b      	add	r3, r1
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d00a      	beq.n	8011d42 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8011d2c:	7c7a      	ldrb	r2, [r7, #17]
 8011d2e:	4913      	ldr	r1, [pc, #76]	; (8011d7c <etharp_query+0x268>)
 8011d30:	4613      	mov	r3, r2
 8011d32:	005b      	lsls	r3, r3, #1
 8011d34:	4413      	add	r3, r2
 8011d36:	00db      	lsls	r3, r3, #3
 8011d38:	440b      	add	r3, r1
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	4618      	mov	r0, r3
 8011d3e:	f7f8 fba5 	bl	800a48c <pbuf_free>
      }
      arp_table[i].q = p;
 8011d42:	7c7a      	ldrb	r2, [r7, #17]
 8011d44:	490d      	ldr	r1, [pc, #52]	; (8011d7c <etharp_query+0x268>)
 8011d46:	4613      	mov	r3, r2
 8011d48:	005b      	lsls	r3, r3, #1
 8011d4a:	4413      	add	r3, r2
 8011d4c:	00db      	lsls	r3, r3, #3
 8011d4e:	440b      	add	r3, r1
 8011d50:	69fa      	ldr	r2, [r7, #28]
 8011d52:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8011d54:	2300      	movs	r3, #0
 8011d56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011d5a:	e002      	b.n	8011d62 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8011d5c:	23ff      	movs	r3, #255	; 0xff
 8011d5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8011d62:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8011d66:	4618      	mov	r0, r3
 8011d68:	3728      	adds	r7, #40	; 0x28
 8011d6a:	46bd      	mov	sp, r7
 8011d6c:	bd80      	pop	{r7, pc}
 8011d6e:	bf00      	nop
 8011d70:	08016abc 	.word	0x08016abc
 8011d74:	08016c68 	.word	0x08016c68
 8011d78:	08016b34 	.word	0x08016b34
 8011d7c:	2000862c 	.word	0x2000862c
 8011d80:	08016c78 	.word	0x08016c78
 8011d84:	08016c5c 	.word	0x08016c5c
 8011d88:	2000871c 	.word	0x2000871c
 8011d8c:	08016ca0 	.word	0x08016ca0

08011d90 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8011d90:	b580      	push	{r7, lr}
 8011d92:	b08a      	sub	sp, #40	; 0x28
 8011d94:	af02      	add	r7, sp, #8
 8011d96:	60f8      	str	r0, [r7, #12]
 8011d98:	60b9      	str	r1, [r7, #8]
 8011d9a:	607a      	str	r2, [r7, #4]
 8011d9c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8011d9e:	2300      	movs	r3, #0
 8011da0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d106      	bne.n	8011db6 <etharp_raw+0x26>
 8011da8:	4b3a      	ldr	r3, [pc, #232]	; (8011e94 <etharp_raw+0x104>)
 8011daa:	f240 4257 	movw	r2, #1111	; 0x457
 8011dae:	493a      	ldr	r1, [pc, #232]	; (8011e98 <etharp_raw+0x108>)
 8011db0:	483a      	ldr	r0, [pc, #232]	; (8011e9c <etharp_raw+0x10c>)
 8011db2:	f001 fd05 	bl	80137c0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8011db6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011dba:	211c      	movs	r1, #28
 8011dbc:	200e      	movs	r0, #14
 8011dbe:	f7f8 f881 	bl	8009ec4 <pbuf_alloc>
 8011dc2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8011dc4:	69bb      	ldr	r3, [r7, #24]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d102      	bne.n	8011dd0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8011dca:	f04f 33ff 	mov.w	r3, #4294967295
 8011dce:	e05d      	b.n	8011e8c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8011dd0:	69bb      	ldr	r3, [r7, #24]
 8011dd2:	895b      	ldrh	r3, [r3, #10]
 8011dd4:	2b1b      	cmp	r3, #27
 8011dd6:	d806      	bhi.n	8011de6 <etharp_raw+0x56>
 8011dd8:	4b2e      	ldr	r3, [pc, #184]	; (8011e94 <etharp_raw+0x104>)
 8011dda:	f240 4262 	movw	r2, #1122	; 0x462
 8011dde:	4930      	ldr	r1, [pc, #192]	; (8011ea0 <etharp_raw+0x110>)
 8011de0:	482e      	ldr	r0, [pc, #184]	; (8011e9c <etharp_raw+0x10c>)
 8011de2:	f001 fced 	bl	80137c0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8011de6:	69bb      	ldr	r3, [r7, #24]
 8011de8:	685b      	ldr	r3, [r3, #4]
 8011dea:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8011dec:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8011dee:	4618      	mov	r0, r3
 8011df0:	f7f6 ffee 	bl	8008dd0 <lwip_htons>
 8011df4:	4603      	mov	r3, r0
 8011df6:	461a      	mov	r2, r3
 8011df8:	697b      	ldr	r3, [r7, #20]
 8011dfa:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011e02:	2b06      	cmp	r3, #6
 8011e04:	d006      	beq.n	8011e14 <etharp_raw+0x84>
 8011e06:	4b23      	ldr	r3, [pc, #140]	; (8011e94 <etharp_raw+0x104>)
 8011e08:	f240 4269 	movw	r2, #1129	; 0x469
 8011e0c:	4925      	ldr	r1, [pc, #148]	; (8011ea4 <etharp_raw+0x114>)
 8011e0e:	4823      	ldr	r0, [pc, #140]	; (8011e9c <etharp_raw+0x10c>)
 8011e10:	f001 fcd6 	bl	80137c0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8011e14:	697b      	ldr	r3, [r7, #20]
 8011e16:	3308      	adds	r3, #8
 8011e18:	2206      	movs	r2, #6
 8011e1a:	6839      	ldr	r1, [r7, #0]
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	f001 fc25 	bl	801366c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8011e22:	697b      	ldr	r3, [r7, #20]
 8011e24:	3312      	adds	r3, #18
 8011e26:	2206      	movs	r2, #6
 8011e28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	f001 fc1e 	bl	801366c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8011e30:	697b      	ldr	r3, [r7, #20]
 8011e32:	330e      	adds	r3, #14
 8011e34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011e36:	6812      	ldr	r2, [r2, #0]
 8011e38:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8011e3a:	697b      	ldr	r3, [r7, #20]
 8011e3c:	3318      	adds	r3, #24
 8011e3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011e40:	6812      	ldr	r2, [r2, #0]
 8011e42:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8011e44:	697b      	ldr	r3, [r7, #20]
 8011e46:	2200      	movs	r2, #0
 8011e48:	701a      	strb	r2, [r3, #0]
 8011e4a:	2200      	movs	r2, #0
 8011e4c:	f042 0201 	orr.w	r2, r2, #1
 8011e50:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8011e52:	697b      	ldr	r3, [r7, #20]
 8011e54:	2200      	movs	r2, #0
 8011e56:	f042 0208 	orr.w	r2, r2, #8
 8011e5a:	709a      	strb	r2, [r3, #2]
 8011e5c:	2200      	movs	r2, #0
 8011e5e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8011e60:	697b      	ldr	r3, [r7, #20]
 8011e62:	2206      	movs	r2, #6
 8011e64:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8011e66:	697b      	ldr	r3, [r7, #20]
 8011e68:	2204      	movs	r2, #4
 8011e6a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8011e6c:	f640 0306 	movw	r3, #2054	; 0x806
 8011e70:	9300      	str	r3, [sp, #0]
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	68ba      	ldr	r2, [r7, #8]
 8011e76:	69b9      	ldr	r1, [r7, #24]
 8011e78:	68f8      	ldr	r0, [r7, #12]
 8011e7a:	f001 fb7b 	bl	8013574 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8011e7e:	69b8      	ldr	r0, [r7, #24]
 8011e80:	f7f8 fb04 	bl	800a48c <pbuf_free>
  p = NULL;
 8011e84:	2300      	movs	r3, #0
 8011e86:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8011e88:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	3720      	adds	r7, #32
 8011e90:	46bd      	mov	sp, r7
 8011e92:	bd80      	pop	{r7, pc}
 8011e94:	08016abc 	.word	0x08016abc
 8011e98:	08016c0c 	.word	0x08016c0c
 8011e9c:	08016b34 	.word	0x08016b34
 8011ea0:	08016cbc 	.word	0x08016cbc
 8011ea4:	08016cf0 	.word	0x08016cf0

08011ea8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8011ea8:	b580      	push	{r7, lr}
 8011eaa:	b088      	sub	sp, #32
 8011eac:	af04      	add	r7, sp, #16
 8011eae:	60f8      	str	r0, [r7, #12]
 8011eb0:	60b9      	str	r1, [r7, #8]
 8011eb2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011ec4:	2201      	movs	r2, #1
 8011ec6:	9203      	str	r2, [sp, #12]
 8011ec8:	68ba      	ldr	r2, [r7, #8]
 8011eca:	9202      	str	r2, [sp, #8]
 8011ecc:	4a06      	ldr	r2, [pc, #24]	; (8011ee8 <etharp_request_dst+0x40>)
 8011ece:	9201      	str	r2, [sp, #4]
 8011ed0:	9300      	str	r3, [sp, #0]
 8011ed2:	4603      	mov	r3, r0
 8011ed4:	687a      	ldr	r2, [r7, #4]
 8011ed6:	68f8      	ldr	r0, [r7, #12]
 8011ed8:	f7ff ff5a 	bl	8011d90 <etharp_raw>
 8011edc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8011ede:	4618      	mov	r0, r3
 8011ee0:	3710      	adds	r7, #16
 8011ee2:	46bd      	mov	sp, r7
 8011ee4:	bd80      	pop	{r7, pc}
 8011ee6:	bf00      	nop
 8011ee8:	08017280 	.word	0x08017280

08011eec <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8011eec:	b580      	push	{r7, lr}
 8011eee:	b082      	sub	sp, #8
 8011ef0:	af00      	add	r7, sp, #0
 8011ef2:	6078      	str	r0, [r7, #4]
 8011ef4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8011ef6:	4a05      	ldr	r2, [pc, #20]	; (8011f0c <etharp_request+0x20>)
 8011ef8:	6839      	ldr	r1, [r7, #0]
 8011efa:	6878      	ldr	r0, [r7, #4]
 8011efc:	f7ff ffd4 	bl	8011ea8 <etharp_request_dst>
 8011f00:	4603      	mov	r3, r0
}
 8011f02:	4618      	mov	r0, r3
 8011f04:	3708      	adds	r7, #8
 8011f06:	46bd      	mov	sp, r7
 8011f08:	bd80      	pop	{r7, pc}
 8011f0a:	bf00      	nop
 8011f0c:	08017278 	.word	0x08017278

08011f10 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8011f10:	b580      	push	{r7, lr}
 8011f12:	b08e      	sub	sp, #56	; 0x38
 8011f14:	af04      	add	r7, sp, #16
 8011f16:	6078      	str	r0, [r7, #4]
 8011f18:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8011f1a:	4b79      	ldr	r3, [pc, #484]	; (8012100 <icmp_input+0x1f0>)
 8011f1c:	689b      	ldr	r3, [r3, #8]
 8011f1e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8011f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f22:	781b      	ldrb	r3, [r3, #0]
 8011f24:	f003 030f 	and.w	r3, r3, #15
 8011f28:	b2db      	uxtb	r3, r3
 8011f2a:	009b      	lsls	r3, r3, #2
 8011f2c:	b2db      	uxtb	r3, r3
 8011f2e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8011f30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011f32:	2b13      	cmp	r3, #19
 8011f34:	f240 80cd 	bls.w	80120d2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	895b      	ldrh	r3, [r3, #10]
 8011f3c:	2b03      	cmp	r3, #3
 8011f3e:	f240 80ca 	bls.w	80120d6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	685b      	ldr	r3, [r3, #4]
 8011f46:	781b      	ldrb	r3, [r3, #0]
 8011f48:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8011f4c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	f000 80b7 	beq.w	80120c4 <icmp_input+0x1b4>
 8011f56:	2b08      	cmp	r3, #8
 8011f58:	f040 80b7 	bne.w	80120ca <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8011f5c:	4b69      	ldr	r3, [pc, #420]	; (8012104 <icmp_input+0x1f4>)
 8011f5e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011f60:	4b67      	ldr	r3, [pc, #412]	; (8012100 <icmp_input+0x1f0>)
 8011f62:	695b      	ldr	r3, [r3, #20]
 8011f64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011f68:	2be0      	cmp	r3, #224	; 0xe0
 8011f6a:	f000 80bb 	beq.w	80120e4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8011f6e:	4b64      	ldr	r3, [pc, #400]	; (8012100 <icmp_input+0x1f0>)
 8011f70:	695b      	ldr	r3, [r3, #20]
 8011f72:	4a63      	ldr	r2, [pc, #396]	; (8012100 <icmp_input+0x1f0>)
 8011f74:	6812      	ldr	r2, [r2, #0]
 8011f76:	4611      	mov	r1, r2
 8011f78:	4618      	mov	r0, r3
 8011f7a:	f000 fbed 	bl	8012758 <ip4_addr_isbroadcast_u32>
 8011f7e:	4603      	mov	r3, r0
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	f040 80b1 	bne.w	80120e8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	891b      	ldrh	r3, [r3, #8]
 8011f8a:	2b07      	cmp	r3, #7
 8011f8c:	f240 80a5 	bls.w	80120da <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011f90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011f92:	330e      	adds	r3, #14
 8011f94:	4619      	mov	r1, r3
 8011f96:	6878      	ldr	r0, [r7, #4]
 8011f98:	f7f8 f9e2 	bl	800a360 <pbuf_add_header>
 8011f9c:	4603      	mov	r3, r0
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d04b      	beq.n	801203a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	891a      	ldrh	r2, [r3, #8]
 8011fa6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011fa8:	4413      	add	r3, r2
 8011faa:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	891b      	ldrh	r3, [r3, #8]
 8011fb0:	8b7a      	ldrh	r2, [r7, #26]
 8011fb2:	429a      	cmp	r2, r3
 8011fb4:	f0c0 809a 	bcc.w	80120ec <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8011fb8:	8b7b      	ldrh	r3, [r7, #26]
 8011fba:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011fbe:	4619      	mov	r1, r3
 8011fc0:	200e      	movs	r0, #14
 8011fc2:	f7f7 ff7f 	bl	8009ec4 <pbuf_alloc>
 8011fc6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8011fc8:	697b      	ldr	r3, [r7, #20]
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	f000 8090 	beq.w	80120f0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8011fd0:	697b      	ldr	r3, [r7, #20]
 8011fd2:	895b      	ldrh	r3, [r3, #10]
 8011fd4:	461a      	mov	r2, r3
 8011fd6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011fd8:	3308      	adds	r3, #8
 8011fda:	429a      	cmp	r2, r3
 8011fdc:	d203      	bcs.n	8011fe6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8011fde:	6978      	ldr	r0, [r7, #20]
 8011fe0:	f7f8 fa54 	bl	800a48c <pbuf_free>
          goto icmperr;
 8011fe4:	e085      	b.n	80120f2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8011fe6:	697b      	ldr	r3, [r7, #20]
 8011fe8:	685b      	ldr	r3, [r3, #4]
 8011fea:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011fec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011fee:	4618      	mov	r0, r3
 8011ff0:	f001 fb3c 	bl	801366c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8011ff4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011ff6:	4619      	mov	r1, r3
 8011ff8:	6978      	ldr	r0, [r7, #20]
 8011ffa:	f7f8 f9c1 	bl	800a380 <pbuf_remove_header>
 8011ffe:	4603      	mov	r3, r0
 8012000:	2b00      	cmp	r3, #0
 8012002:	d009      	beq.n	8012018 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8012004:	4b40      	ldr	r3, [pc, #256]	; (8012108 <icmp_input+0x1f8>)
 8012006:	22b6      	movs	r2, #182	; 0xb6
 8012008:	4940      	ldr	r1, [pc, #256]	; (801210c <icmp_input+0x1fc>)
 801200a:	4841      	ldr	r0, [pc, #260]	; (8012110 <icmp_input+0x200>)
 801200c:	f001 fbd8 	bl	80137c0 <iprintf>
          pbuf_free(r);
 8012010:	6978      	ldr	r0, [r7, #20]
 8012012:	f7f8 fa3b 	bl	800a48c <pbuf_free>
          goto icmperr;
 8012016:	e06c      	b.n	80120f2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8012018:	6879      	ldr	r1, [r7, #4]
 801201a:	6978      	ldr	r0, [r7, #20]
 801201c:	f7f8 fb5e 	bl	800a6dc <pbuf_copy>
 8012020:	4603      	mov	r3, r0
 8012022:	2b00      	cmp	r3, #0
 8012024:	d003      	beq.n	801202e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8012026:	6978      	ldr	r0, [r7, #20]
 8012028:	f7f8 fa30 	bl	800a48c <pbuf_free>
          goto icmperr;
 801202c:	e061      	b.n	80120f2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801202e:	6878      	ldr	r0, [r7, #4]
 8012030:	f7f8 fa2c 	bl	800a48c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8012034:	697b      	ldr	r3, [r7, #20]
 8012036:	607b      	str	r3, [r7, #4]
 8012038:	e00f      	b.n	801205a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801203a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801203c:	330e      	adds	r3, #14
 801203e:	4619      	mov	r1, r3
 8012040:	6878      	ldr	r0, [r7, #4]
 8012042:	f7f8 f99d 	bl	800a380 <pbuf_remove_header>
 8012046:	4603      	mov	r3, r0
 8012048:	2b00      	cmp	r3, #0
 801204a:	d006      	beq.n	801205a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801204c:	4b2e      	ldr	r3, [pc, #184]	; (8012108 <icmp_input+0x1f8>)
 801204e:	22c7      	movs	r2, #199	; 0xc7
 8012050:	4930      	ldr	r1, [pc, #192]	; (8012114 <icmp_input+0x204>)
 8012052:	482f      	ldr	r0, [pc, #188]	; (8012110 <icmp_input+0x200>)
 8012054:	f001 fbb4 	bl	80137c0 <iprintf>
          goto icmperr;
 8012058:	e04b      	b.n	80120f2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	685b      	ldr	r3, [r3, #4]
 801205e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8012060:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012062:	4619      	mov	r1, r3
 8012064:	6878      	ldr	r0, [r7, #4]
 8012066:	f7f8 f97b 	bl	800a360 <pbuf_add_header>
 801206a:	4603      	mov	r3, r0
 801206c:	2b00      	cmp	r3, #0
 801206e:	d12b      	bne.n	80120c8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	685b      	ldr	r3, [r3, #4]
 8012074:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8012076:	69fb      	ldr	r3, [r7, #28]
 8012078:	681a      	ldr	r2, [r3, #0]
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801207e:	4b20      	ldr	r3, [pc, #128]	; (8012100 <icmp_input+0x1f0>)
 8012080:	691a      	ldr	r2, [r3, #16]
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8012086:	693b      	ldr	r3, [r7, #16]
 8012088:	2200      	movs	r2, #0
 801208a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801208c:	693b      	ldr	r3, [r7, #16]
 801208e:	2200      	movs	r2, #0
 8012090:	709a      	strb	r2, [r3, #2]
 8012092:	2200      	movs	r2, #0
 8012094:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	22ff      	movs	r2, #255	; 0xff
 801209a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	2200      	movs	r2, #0
 80120a0:	729a      	strb	r2, [r3, #10]
 80120a2:	2200      	movs	r2, #0
 80120a4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80120a6:	683b      	ldr	r3, [r7, #0]
 80120a8:	9302      	str	r3, [sp, #8]
 80120aa:	2301      	movs	r3, #1
 80120ac:	9301      	str	r3, [sp, #4]
 80120ae:	2300      	movs	r3, #0
 80120b0:	9300      	str	r3, [sp, #0]
 80120b2:	23ff      	movs	r3, #255	; 0xff
 80120b4:	2200      	movs	r2, #0
 80120b6:	69f9      	ldr	r1, [r7, #28]
 80120b8:	6878      	ldr	r0, [r7, #4]
 80120ba:	f000 fa75 	bl	80125a8 <ip4_output_if>
 80120be:	4603      	mov	r3, r0
 80120c0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80120c2:	e001      	b.n	80120c8 <icmp_input+0x1b8>
      break;
 80120c4:	bf00      	nop
 80120c6:	e000      	b.n	80120ca <icmp_input+0x1ba>
      break;
 80120c8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80120ca:	6878      	ldr	r0, [r7, #4]
 80120cc:	f7f8 f9de 	bl	800a48c <pbuf_free>
  return;
 80120d0:	e013      	b.n	80120fa <icmp_input+0x1ea>
    goto lenerr;
 80120d2:	bf00      	nop
 80120d4:	e002      	b.n	80120dc <icmp_input+0x1cc>
    goto lenerr;
 80120d6:	bf00      	nop
 80120d8:	e000      	b.n	80120dc <icmp_input+0x1cc>
        goto lenerr;
 80120da:	bf00      	nop
lenerr:
  pbuf_free(p);
 80120dc:	6878      	ldr	r0, [r7, #4]
 80120de:	f7f8 f9d5 	bl	800a48c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80120e2:	e00a      	b.n	80120fa <icmp_input+0x1ea>
        goto icmperr;
 80120e4:	bf00      	nop
 80120e6:	e004      	b.n	80120f2 <icmp_input+0x1e2>
        goto icmperr;
 80120e8:	bf00      	nop
 80120ea:	e002      	b.n	80120f2 <icmp_input+0x1e2>
          goto icmperr;
 80120ec:	bf00      	nop
 80120ee:	e000      	b.n	80120f2 <icmp_input+0x1e2>
          goto icmperr;
 80120f0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80120f2:	6878      	ldr	r0, [r7, #4]
 80120f4:	f7f8 f9ca 	bl	800a48c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80120f8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80120fa:	3728      	adds	r7, #40	; 0x28
 80120fc:	46bd      	mov	sp, r7
 80120fe:	bd80      	pop	{r7, pc}
 8012100:	2000505c 	.word	0x2000505c
 8012104:	20005070 	.word	0x20005070
 8012108:	08016d34 	.word	0x08016d34
 801210c:	08016d6c 	.word	0x08016d6c
 8012110:	08016da4 	.word	0x08016da4
 8012114:	08016dcc 	.word	0x08016dcc

08012118 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8012118:	b580      	push	{r7, lr}
 801211a:	b082      	sub	sp, #8
 801211c:	af00      	add	r7, sp, #0
 801211e:	6078      	str	r0, [r7, #4]
 8012120:	460b      	mov	r3, r1
 8012122:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8012124:	78fb      	ldrb	r3, [r7, #3]
 8012126:	461a      	mov	r2, r3
 8012128:	2103      	movs	r1, #3
 801212a:	6878      	ldr	r0, [r7, #4]
 801212c:	f000 f814 	bl	8012158 <icmp_send_response>
}
 8012130:	bf00      	nop
 8012132:	3708      	adds	r7, #8
 8012134:	46bd      	mov	sp, r7
 8012136:	bd80      	pop	{r7, pc}

08012138 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8012138:	b580      	push	{r7, lr}
 801213a:	b082      	sub	sp, #8
 801213c:	af00      	add	r7, sp, #0
 801213e:	6078      	str	r0, [r7, #4]
 8012140:	460b      	mov	r3, r1
 8012142:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8012144:	78fb      	ldrb	r3, [r7, #3]
 8012146:	461a      	mov	r2, r3
 8012148:	210b      	movs	r1, #11
 801214a:	6878      	ldr	r0, [r7, #4]
 801214c:	f000 f804 	bl	8012158 <icmp_send_response>
}
 8012150:	bf00      	nop
 8012152:	3708      	adds	r7, #8
 8012154:	46bd      	mov	sp, r7
 8012156:	bd80      	pop	{r7, pc}

08012158 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8012158:	b580      	push	{r7, lr}
 801215a:	b08c      	sub	sp, #48	; 0x30
 801215c:	af04      	add	r7, sp, #16
 801215e:	6078      	str	r0, [r7, #4]
 8012160:	460b      	mov	r3, r1
 8012162:	70fb      	strb	r3, [r7, #3]
 8012164:	4613      	mov	r3, r2
 8012166:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8012168:	f44f 7220 	mov.w	r2, #640	; 0x280
 801216c:	2124      	movs	r1, #36	; 0x24
 801216e:	2022      	movs	r0, #34	; 0x22
 8012170:	f7f7 fea8 	bl	8009ec4 <pbuf_alloc>
 8012174:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8012176:	69fb      	ldr	r3, [r7, #28]
 8012178:	2b00      	cmp	r3, #0
 801217a:	d04c      	beq.n	8012216 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801217c:	69fb      	ldr	r3, [r7, #28]
 801217e:	895b      	ldrh	r3, [r3, #10]
 8012180:	2b23      	cmp	r3, #35	; 0x23
 8012182:	d806      	bhi.n	8012192 <icmp_send_response+0x3a>
 8012184:	4b26      	ldr	r3, [pc, #152]	; (8012220 <icmp_send_response+0xc8>)
 8012186:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801218a:	4926      	ldr	r1, [pc, #152]	; (8012224 <icmp_send_response+0xcc>)
 801218c:	4826      	ldr	r0, [pc, #152]	; (8012228 <icmp_send_response+0xd0>)
 801218e:	f001 fb17 	bl	80137c0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	685b      	ldr	r3, [r3, #4]
 8012196:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8012198:	69fb      	ldr	r3, [r7, #28]
 801219a:	685b      	ldr	r3, [r3, #4]
 801219c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801219e:	697b      	ldr	r3, [r7, #20]
 80121a0:	78fa      	ldrb	r2, [r7, #3]
 80121a2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80121a4:	697b      	ldr	r3, [r7, #20]
 80121a6:	78ba      	ldrb	r2, [r7, #2]
 80121a8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80121aa:	697b      	ldr	r3, [r7, #20]
 80121ac:	2200      	movs	r2, #0
 80121ae:	711a      	strb	r2, [r3, #4]
 80121b0:	2200      	movs	r2, #0
 80121b2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80121b4:	697b      	ldr	r3, [r7, #20]
 80121b6:	2200      	movs	r2, #0
 80121b8:	719a      	strb	r2, [r3, #6]
 80121ba:	2200      	movs	r2, #0
 80121bc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80121be:	69fb      	ldr	r3, [r7, #28]
 80121c0:	685b      	ldr	r3, [r3, #4]
 80121c2:	f103 0008 	add.w	r0, r3, #8
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	685b      	ldr	r3, [r3, #4]
 80121ca:	221c      	movs	r2, #28
 80121cc:	4619      	mov	r1, r3
 80121ce:	f001 fa4d 	bl	801366c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80121d2:	69bb      	ldr	r3, [r7, #24]
 80121d4:	68db      	ldr	r3, [r3, #12]
 80121d6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80121d8:	f107 030c 	add.w	r3, r7, #12
 80121dc:	4618      	mov	r0, r3
 80121de:	f000 f825 	bl	801222c <ip4_route>
 80121e2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80121e4:	693b      	ldr	r3, [r7, #16]
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d011      	beq.n	801220e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80121ea:	697b      	ldr	r3, [r7, #20]
 80121ec:	2200      	movs	r2, #0
 80121ee:	709a      	strb	r2, [r3, #2]
 80121f0:	2200      	movs	r2, #0
 80121f2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80121f4:	f107 020c 	add.w	r2, r7, #12
 80121f8:	693b      	ldr	r3, [r7, #16]
 80121fa:	9302      	str	r3, [sp, #8]
 80121fc:	2301      	movs	r3, #1
 80121fe:	9301      	str	r3, [sp, #4]
 8012200:	2300      	movs	r3, #0
 8012202:	9300      	str	r3, [sp, #0]
 8012204:	23ff      	movs	r3, #255	; 0xff
 8012206:	2100      	movs	r1, #0
 8012208:	69f8      	ldr	r0, [r7, #28]
 801220a:	f000 f9cd 	bl	80125a8 <ip4_output_if>
  }
  pbuf_free(q);
 801220e:	69f8      	ldr	r0, [r7, #28]
 8012210:	f7f8 f93c 	bl	800a48c <pbuf_free>
 8012214:	e000      	b.n	8012218 <icmp_send_response+0xc0>
    return;
 8012216:	bf00      	nop
}
 8012218:	3720      	adds	r7, #32
 801221a:	46bd      	mov	sp, r7
 801221c:	bd80      	pop	{r7, pc}
 801221e:	bf00      	nop
 8012220:	08016d34 	.word	0x08016d34
 8012224:	08016e00 	.word	0x08016e00
 8012228:	08016da4 	.word	0x08016da4

0801222c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801222c:	b480      	push	{r7}
 801222e:	b085      	sub	sp, #20
 8012230:	af00      	add	r7, sp, #0
 8012232:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8012234:	4b33      	ldr	r3, [pc, #204]	; (8012304 <ip4_route+0xd8>)
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	60fb      	str	r3, [r7, #12]
 801223a:	e036      	b.n	80122aa <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012242:	f003 0301 	and.w	r3, r3, #1
 8012246:	b2db      	uxtb	r3, r3
 8012248:	2b00      	cmp	r3, #0
 801224a:	d02b      	beq.n	80122a4 <ip4_route+0x78>
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012252:	089b      	lsrs	r3, r3, #2
 8012254:	f003 0301 	and.w	r3, r3, #1
 8012258:	b2db      	uxtb	r3, r3
 801225a:	2b00      	cmp	r3, #0
 801225c:	d022      	beq.n	80122a4 <ip4_route+0x78>
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	3304      	adds	r3, #4
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	2b00      	cmp	r3, #0
 8012266:	d01d      	beq.n	80122a4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	681a      	ldr	r2, [r3, #0]
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	3304      	adds	r3, #4
 8012270:	681b      	ldr	r3, [r3, #0]
 8012272:	405a      	eors	r2, r3
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	3308      	adds	r3, #8
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	4013      	ands	r3, r2
 801227c:	2b00      	cmp	r3, #0
 801227e:	d101      	bne.n	8012284 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	e038      	b.n	80122f6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801228a:	f003 0302 	and.w	r3, r3, #2
 801228e:	2b00      	cmp	r3, #0
 8012290:	d108      	bne.n	80122a4 <ip4_route+0x78>
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	681a      	ldr	r2, [r3, #0]
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	330c      	adds	r3, #12
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	429a      	cmp	r2, r3
 801229e:	d101      	bne.n	80122a4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	e028      	b.n	80122f6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	60fb      	str	r3, [r7, #12]
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d1c5      	bne.n	801223c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80122b0:	4b15      	ldr	r3, [pc, #84]	; (8012308 <ip4_route+0xdc>)
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d01a      	beq.n	80122ee <ip4_route+0xc2>
 80122b8:	4b13      	ldr	r3, [pc, #76]	; (8012308 <ip4_route+0xdc>)
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80122c0:	f003 0301 	and.w	r3, r3, #1
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d012      	beq.n	80122ee <ip4_route+0xc2>
 80122c8:	4b0f      	ldr	r3, [pc, #60]	; (8012308 <ip4_route+0xdc>)
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80122d0:	f003 0304 	and.w	r3, r3, #4
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d00a      	beq.n	80122ee <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80122d8:	4b0b      	ldr	r3, [pc, #44]	; (8012308 <ip4_route+0xdc>)
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	3304      	adds	r3, #4
 80122de:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d004      	beq.n	80122ee <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	b2db      	uxtb	r3, r3
 80122ea:	2b7f      	cmp	r3, #127	; 0x7f
 80122ec:	d101      	bne.n	80122f2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80122ee:	2300      	movs	r3, #0
 80122f0:	e001      	b.n	80122f6 <ip4_route+0xca>
  }

  return netif_default;
 80122f2:	4b05      	ldr	r3, [pc, #20]	; (8012308 <ip4_route+0xdc>)
 80122f4:	681b      	ldr	r3, [r3, #0]
}
 80122f6:	4618      	mov	r0, r3
 80122f8:	3714      	adds	r7, #20
 80122fa:	46bd      	mov	sp, r7
 80122fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012300:	4770      	bx	lr
 8012302:	bf00      	nop
 8012304:	200085c0 	.word	0x200085c0
 8012308:	200085c4 	.word	0x200085c4

0801230c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801230c:	b580      	push	{r7, lr}
 801230e:	b082      	sub	sp, #8
 8012310:	af00      	add	r7, sp, #0
 8012312:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801231a:	f003 0301 	and.w	r3, r3, #1
 801231e:	b2db      	uxtb	r3, r3
 8012320:	2b00      	cmp	r3, #0
 8012322:	d016      	beq.n	8012352 <ip4_input_accept+0x46>
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	3304      	adds	r3, #4
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	2b00      	cmp	r3, #0
 801232c:	d011      	beq.n	8012352 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801232e:	4b0b      	ldr	r3, [pc, #44]	; (801235c <ip4_input_accept+0x50>)
 8012330:	695a      	ldr	r2, [r3, #20]
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	3304      	adds	r3, #4
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	429a      	cmp	r2, r3
 801233a:	d008      	beq.n	801234e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801233c:	4b07      	ldr	r3, [pc, #28]	; (801235c <ip4_input_accept+0x50>)
 801233e:	695b      	ldr	r3, [r3, #20]
 8012340:	6879      	ldr	r1, [r7, #4]
 8012342:	4618      	mov	r0, r3
 8012344:	f000 fa08 	bl	8012758 <ip4_addr_isbroadcast_u32>
 8012348:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801234a:	2b00      	cmp	r3, #0
 801234c:	d001      	beq.n	8012352 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801234e:	2301      	movs	r3, #1
 8012350:	e000      	b.n	8012354 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8012352:	2300      	movs	r3, #0
}
 8012354:	4618      	mov	r0, r3
 8012356:	3708      	adds	r7, #8
 8012358:	46bd      	mov	sp, r7
 801235a:	bd80      	pop	{r7, pc}
 801235c:	2000505c 	.word	0x2000505c

08012360 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8012360:	b580      	push	{r7, lr}
 8012362:	b086      	sub	sp, #24
 8012364:	af00      	add	r7, sp, #0
 8012366:	6078      	str	r0, [r7, #4]
 8012368:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	685b      	ldr	r3, [r3, #4]
 801236e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8012370:	697b      	ldr	r3, [r7, #20]
 8012372:	781b      	ldrb	r3, [r3, #0]
 8012374:	091b      	lsrs	r3, r3, #4
 8012376:	b2db      	uxtb	r3, r3
 8012378:	2b04      	cmp	r3, #4
 801237a:	d004      	beq.n	8012386 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801237c:	6878      	ldr	r0, [r7, #4]
 801237e:	f7f8 f885 	bl	800a48c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8012382:	2300      	movs	r3, #0
 8012384:	e107      	b.n	8012596 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8012386:	697b      	ldr	r3, [r7, #20]
 8012388:	781b      	ldrb	r3, [r3, #0]
 801238a:	f003 030f 	and.w	r3, r3, #15
 801238e:	b2db      	uxtb	r3, r3
 8012390:	009b      	lsls	r3, r3, #2
 8012392:	b2db      	uxtb	r3, r3
 8012394:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8012396:	697b      	ldr	r3, [r7, #20]
 8012398:	885b      	ldrh	r3, [r3, #2]
 801239a:	b29b      	uxth	r3, r3
 801239c:	4618      	mov	r0, r3
 801239e:	f7f6 fd17 	bl	8008dd0 <lwip_htons>
 80123a2:	4603      	mov	r3, r0
 80123a4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	891b      	ldrh	r3, [r3, #8]
 80123aa:	89ba      	ldrh	r2, [r7, #12]
 80123ac:	429a      	cmp	r2, r3
 80123ae:	d204      	bcs.n	80123ba <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80123b0:	89bb      	ldrh	r3, [r7, #12]
 80123b2:	4619      	mov	r1, r3
 80123b4:	6878      	ldr	r0, [r7, #4]
 80123b6:	f7f7 fee3 	bl	800a180 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	895b      	ldrh	r3, [r3, #10]
 80123be:	89fa      	ldrh	r2, [r7, #14]
 80123c0:	429a      	cmp	r2, r3
 80123c2:	d807      	bhi.n	80123d4 <ip4_input+0x74>
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	891b      	ldrh	r3, [r3, #8]
 80123c8:	89ba      	ldrh	r2, [r7, #12]
 80123ca:	429a      	cmp	r2, r3
 80123cc:	d802      	bhi.n	80123d4 <ip4_input+0x74>
 80123ce:	89fb      	ldrh	r3, [r7, #14]
 80123d0:	2b13      	cmp	r3, #19
 80123d2:	d804      	bhi.n	80123de <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80123d4:	6878      	ldr	r0, [r7, #4]
 80123d6:	f7f8 f859 	bl	800a48c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80123da:	2300      	movs	r3, #0
 80123dc:	e0db      	b.n	8012596 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80123de:	697b      	ldr	r3, [r7, #20]
 80123e0:	691b      	ldr	r3, [r3, #16]
 80123e2:	4a6f      	ldr	r2, [pc, #444]	; (80125a0 <ip4_input+0x240>)
 80123e4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80123e6:	697b      	ldr	r3, [r7, #20]
 80123e8:	68db      	ldr	r3, [r3, #12]
 80123ea:	4a6d      	ldr	r2, [pc, #436]	; (80125a0 <ip4_input+0x240>)
 80123ec:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80123ee:	4b6c      	ldr	r3, [pc, #432]	; (80125a0 <ip4_input+0x240>)
 80123f0:	695b      	ldr	r3, [r3, #20]
 80123f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80123f6:	2be0      	cmp	r3, #224	; 0xe0
 80123f8:	d112      	bne.n	8012420 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80123fa:	683b      	ldr	r3, [r7, #0]
 80123fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012400:	f003 0301 	and.w	r3, r3, #1
 8012404:	b2db      	uxtb	r3, r3
 8012406:	2b00      	cmp	r3, #0
 8012408:	d007      	beq.n	801241a <ip4_input+0xba>
 801240a:	683b      	ldr	r3, [r7, #0]
 801240c:	3304      	adds	r3, #4
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	2b00      	cmp	r3, #0
 8012412:	d002      	beq.n	801241a <ip4_input+0xba>
      netif = inp;
 8012414:	683b      	ldr	r3, [r7, #0]
 8012416:	613b      	str	r3, [r7, #16]
 8012418:	e02a      	b.n	8012470 <ip4_input+0x110>
    } else {
      netif = NULL;
 801241a:	2300      	movs	r3, #0
 801241c:	613b      	str	r3, [r7, #16]
 801241e:	e027      	b.n	8012470 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8012420:	6838      	ldr	r0, [r7, #0]
 8012422:	f7ff ff73 	bl	801230c <ip4_input_accept>
 8012426:	4603      	mov	r3, r0
 8012428:	2b00      	cmp	r3, #0
 801242a:	d002      	beq.n	8012432 <ip4_input+0xd2>
      netif = inp;
 801242c:	683b      	ldr	r3, [r7, #0]
 801242e:	613b      	str	r3, [r7, #16]
 8012430:	e01e      	b.n	8012470 <ip4_input+0x110>
    } else {
      netif = NULL;
 8012432:	2300      	movs	r3, #0
 8012434:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8012436:	4b5a      	ldr	r3, [pc, #360]	; (80125a0 <ip4_input+0x240>)
 8012438:	695b      	ldr	r3, [r3, #20]
 801243a:	b2db      	uxtb	r3, r3
 801243c:	2b7f      	cmp	r3, #127	; 0x7f
 801243e:	d017      	beq.n	8012470 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8012440:	4b58      	ldr	r3, [pc, #352]	; (80125a4 <ip4_input+0x244>)
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	613b      	str	r3, [r7, #16]
 8012446:	e00e      	b.n	8012466 <ip4_input+0x106>
          if (netif == inp) {
 8012448:	693a      	ldr	r2, [r7, #16]
 801244a:	683b      	ldr	r3, [r7, #0]
 801244c:	429a      	cmp	r2, r3
 801244e:	d006      	beq.n	801245e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8012450:	6938      	ldr	r0, [r7, #16]
 8012452:	f7ff ff5b 	bl	801230c <ip4_input_accept>
 8012456:	4603      	mov	r3, r0
 8012458:	2b00      	cmp	r3, #0
 801245a:	d108      	bne.n	801246e <ip4_input+0x10e>
 801245c:	e000      	b.n	8012460 <ip4_input+0x100>
            continue;
 801245e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8012460:	693b      	ldr	r3, [r7, #16]
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	613b      	str	r3, [r7, #16]
 8012466:	693b      	ldr	r3, [r7, #16]
 8012468:	2b00      	cmp	r3, #0
 801246a:	d1ed      	bne.n	8012448 <ip4_input+0xe8>
 801246c:	e000      	b.n	8012470 <ip4_input+0x110>
            break;
 801246e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012470:	4b4b      	ldr	r3, [pc, #300]	; (80125a0 <ip4_input+0x240>)
 8012472:	691b      	ldr	r3, [r3, #16]
 8012474:	6839      	ldr	r1, [r7, #0]
 8012476:	4618      	mov	r0, r3
 8012478:	f000 f96e 	bl	8012758 <ip4_addr_isbroadcast_u32>
 801247c:	4603      	mov	r3, r0
 801247e:	2b00      	cmp	r3, #0
 8012480:	d105      	bne.n	801248e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8012482:	4b47      	ldr	r3, [pc, #284]	; (80125a0 <ip4_input+0x240>)
 8012484:	691b      	ldr	r3, [r3, #16]
 8012486:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801248a:	2be0      	cmp	r3, #224	; 0xe0
 801248c:	d104      	bne.n	8012498 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801248e:	6878      	ldr	r0, [r7, #4]
 8012490:	f7f7 fffc 	bl	800a48c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8012494:	2300      	movs	r3, #0
 8012496:	e07e      	b.n	8012596 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8012498:	693b      	ldr	r3, [r7, #16]
 801249a:	2b00      	cmp	r3, #0
 801249c:	d104      	bne.n	80124a8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801249e:	6878      	ldr	r0, [r7, #4]
 80124a0:	f7f7 fff4 	bl	800a48c <pbuf_free>
    return ERR_OK;
 80124a4:	2300      	movs	r3, #0
 80124a6:	e076      	b.n	8012596 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80124a8:	697b      	ldr	r3, [r7, #20]
 80124aa:	88db      	ldrh	r3, [r3, #6]
 80124ac:	b29b      	uxth	r3, r3
 80124ae:	461a      	mov	r2, r3
 80124b0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80124b4:	4013      	ands	r3, r2
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d00b      	beq.n	80124d2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80124ba:	6878      	ldr	r0, [r7, #4]
 80124bc:	f000 fc92 	bl	8012de4 <ip4_reass>
 80124c0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d101      	bne.n	80124cc <ip4_input+0x16c>
      return ERR_OK;
 80124c8:	2300      	movs	r3, #0
 80124ca:	e064      	b.n	8012596 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	685b      	ldr	r3, [r3, #4]
 80124d0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80124d2:	4a33      	ldr	r2, [pc, #204]	; (80125a0 <ip4_input+0x240>)
 80124d4:	693b      	ldr	r3, [r7, #16]
 80124d6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80124d8:	4a31      	ldr	r2, [pc, #196]	; (80125a0 <ip4_input+0x240>)
 80124da:	683b      	ldr	r3, [r7, #0]
 80124dc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80124de:	4a30      	ldr	r2, [pc, #192]	; (80125a0 <ip4_input+0x240>)
 80124e0:	697b      	ldr	r3, [r7, #20]
 80124e2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80124e4:	697b      	ldr	r3, [r7, #20]
 80124e6:	781b      	ldrb	r3, [r3, #0]
 80124e8:	f003 030f 	and.w	r3, r3, #15
 80124ec:	b2db      	uxtb	r3, r3
 80124ee:	009b      	lsls	r3, r3, #2
 80124f0:	b2db      	uxtb	r3, r3
 80124f2:	b29a      	uxth	r2, r3
 80124f4:	4b2a      	ldr	r3, [pc, #168]	; (80125a0 <ip4_input+0x240>)
 80124f6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80124f8:	89fb      	ldrh	r3, [r7, #14]
 80124fa:	4619      	mov	r1, r3
 80124fc:	6878      	ldr	r0, [r7, #4]
 80124fe:	f7f7 ff3f 	bl	800a380 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8012502:	697b      	ldr	r3, [r7, #20]
 8012504:	7a5b      	ldrb	r3, [r3, #9]
 8012506:	2b11      	cmp	r3, #17
 8012508:	d006      	beq.n	8012518 <ip4_input+0x1b8>
 801250a:	2b11      	cmp	r3, #17
 801250c:	dc13      	bgt.n	8012536 <ip4_input+0x1d6>
 801250e:	2b01      	cmp	r3, #1
 8012510:	d00c      	beq.n	801252c <ip4_input+0x1cc>
 8012512:	2b06      	cmp	r3, #6
 8012514:	d005      	beq.n	8012522 <ip4_input+0x1c2>
 8012516:	e00e      	b.n	8012536 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8012518:	6839      	ldr	r1, [r7, #0]
 801251a:	6878      	ldr	r0, [r7, #4]
 801251c:	f7fe fc68 	bl	8010df0 <udp_input>
        break;
 8012520:	e026      	b.n	8012570 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8012522:	6839      	ldr	r1, [r7, #0]
 8012524:	6878      	ldr	r0, [r7, #4]
 8012526:	f7fa f889 	bl	800c63c <tcp_input>
        break;
 801252a:	e021      	b.n	8012570 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801252c:	6839      	ldr	r1, [r7, #0]
 801252e:	6878      	ldr	r0, [r7, #4]
 8012530:	f7ff fcee 	bl	8011f10 <icmp_input>
        break;
 8012534:	e01c      	b.n	8012570 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012536:	4b1a      	ldr	r3, [pc, #104]	; (80125a0 <ip4_input+0x240>)
 8012538:	695b      	ldr	r3, [r3, #20]
 801253a:	6939      	ldr	r1, [r7, #16]
 801253c:	4618      	mov	r0, r3
 801253e:	f000 f90b 	bl	8012758 <ip4_addr_isbroadcast_u32>
 8012542:	4603      	mov	r3, r0
 8012544:	2b00      	cmp	r3, #0
 8012546:	d10f      	bne.n	8012568 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012548:	4b15      	ldr	r3, [pc, #84]	; (80125a0 <ip4_input+0x240>)
 801254a:	695b      	ldr	r3, [r3, #20]
 801254c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012550:	2be0      	cmp	r3, #224	; 0xe0
 8012552:	d009      	beq.n	8012568 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8012554:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012558:	4619      	mov	r1, r3
 801255a:	6878      	ldr	r0, [r7, #4]
 801255c:	f7f7 ff83 	bl	800a466 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8012560:	2102      	movs	r1, #2
 8012562:	6878      	ldr	r0, [r7, #4]
 8012564:	f7ff fdd8 	bl	8012118 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8012568:	6878      	ldr	r0, [r7, #4]
 801256a:	f7f7 ff8f 	bl	800a48c <pbuf_free>
        break;
 801256e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8012570:	4b0b      	ldr	r3, [pc, #44]	; (80125a0 <ip4_input+0x240>)
 8012572:	2200      	movs	r2, #0
 8012574:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8012576:	4b0a      	ldr	r3, [pc, #40]	; (80125a0 <ip4_input+0x240>)
 8012578:	2200      	movs	r2, #0
 801257a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801257c:	4b08      	ldr	r3, [pc, #32]	; (80125a0 <ip4_input+0x240>)
 801257e:	2200      	movs	r2, #0
 8012580:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8012582:	4b07      	ldr	r3, [pc, #28]	; (80125a0 <ip4_input+0x240>)
 8012584:	2200      	movs	r2, #0
 8012586:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8012588:	4b05      	ldr	r3, [pc, #20]	; (80125a0 <ip4_input+0x240>)
 801258a:	2200      	movs	r2, #0
 801258c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801258e:	4b04      	ldr	r3, [pc, #16]	; (80125a0 <ip4_input+0x240>)
 8012590:	2200      	movs	r2, #0
 8012592:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8012594:	2300      	movs	r3, #0
}
 8012596:	4618      	mov	r0, r3
 8012598:	3718      	adds	r7, #24
 801259a:	46bd      	mov	sp, r7
 801259c:	bd80      	pop	{r7, pc}
 801259e:	bf00      	nop
 80125a0:	2000505c 	.word	0x2000505c
 80125a4:	200085c0 	.word	0x200085c0

080125a8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80125a8:	b580      	push	{r7, lr}
 80125aa:	b08a      	sub	sp, #40	; 0x28
 80125ac:	af04      	add	r7, sp, #16
 80125ae:	60f8      	str	r0, [r7, #12]
 80125b0:	60b9      	str	r1, [r7, #8]
 80125b2:	607a      	str	r2, [r7, #4]
 80125b4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80125b6:	68bb      	ldr	r3, [r7, #8]
 80125b8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d009      	beq.n	80125d4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80125c0:	68bb      	ldr	r3, [r7, #8]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d003      	beq.n	80125ce <ip4_output_if+0x26>
 80125c6:	68bb      	ldr	r3, [r7, #8]
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d102      	bne.n	80125d4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80125ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125d0:	3304      	adds	r3, #4
 80125d2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80125d4:	78fa      	ldrb	r2, [r7, #3]
 80125d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125d8:	9302      	str	r3, [sp, #8]
 80125da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80125de:	9301      	str	r3, [sp, #4]
 80125e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80125e4:	9300      	str	r3, [sp, #0]
 80125e6:	4613      	mov	r3, r2
 80125e8:	687a      	ldr	r2, [r7, #4]
 80125ea:	6979      	ldr	r1, [r7, #20]
 80125ec:	68f8      	ldr	r0, [r7, #12]
 80125ee:	f000 f805 	bl	80125fc <ip4_output_if_src>
 80125f2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80125f4:	4618      	mov	r0, r3
 80125f6:	3718      	adds	r7, #24
 80125f8:	46bd      	mov	sp, r7
 80125fa:	bd80      	pop	{r7, pc}

080125fc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80125fc:	b580      	push	{r7, lr}
 80125fe:	b088      	sub	sp, #32
 8012600:	af00      	add	r7, sp, #0
 8012602:	60f8      	str	r0, [r7, #12]
 8012604:	60b9      	str	r1, [r7, #8]
 8012606:	607a      	str	r2, [r7, #4]
 8012608:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	7b9b      	ldrb	r3, [r3, #14]
 801260e:	2b01      	cmp	r3, #1
 8012610:	d006      	beq.n	8012620 <ip4_output_if_src+0x24>
 8012612:	4b4b      	ldr	r3, [pc, #300]	; (8012740 <ip4_output_if_src+0x144>)
 8012614:	f44f 7255 	mov.w	r2, #852	; 0x354
 8012618:	494a      	ldr	r1, [pc, #296]	; (8012744 <ip4_output_if_src+0x148>)
 801261a:	484b      	ldr	r0, [pc, #300]	; (8012748 <ip4_output_if_src+0x14c>)
 801261c:	f001 f8d0 	bl	80137c0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	2b00      	cmp	r3, #0
 8012624:	d060      	beq.n	80126e8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8012626:	2314      	movs	r3, #20
 8012628:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801262a:	2114      	movs	r1, #20
 801262c:	68f8      	ldr	r0, [r7, #12]
 801262e:	f7f7 fe97 	bl	800a360 <pbuf_add_header>
 8012632:	4603      	mov	r3, r0
 8012634:	2b00      	cmp	r3, #0
 8012636:	d002      	beq.n	801263e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012638:	f06f 0301 	mvn.w	r3, #1
 801263c:	e07c      	b.n	8012738 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	685b      	ldr	r3, [r3, #4]
 8012642:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	895b      	ldrh	r3, [r3, #10]
 8012648:	2b13      	cmp	r3, #19
 801264a:	d806      	bhi.n	801265a <ip4_output_if_src+0x5e>
 801264c:	4b3c      	ldr	r3, [pc, #240]	; (8012740 <ip4_output_if_src+0x144>)
 801264e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8012652:	493e      	ldr	r1, [pc, #248]	; (801274c <ip4_output_if_src+0x150>)
 8012654:	483c      	ldr	r0, [pc, #240]	; (8012748 <ip4_output_if_src+0x14c>)
 8012656:	f001 f8b3 	bl	80137c0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801265a:	69fb      	ldr	r3, [r7, #28]
 801265c:	78fa      	ldrb	r2, [r7, #3]
 801265e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8012660:	69fb      	ldr	r3, [r7, #28]
 8012662:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8012666:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	681a      	ldr	r2, [r3, #0]
 801266c:	69fb      	ldr	r3, [r7, #28]
 801266e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8012670:	8b7b      	ldrh	r3, [r7, #26]
 8012672:	089b      	lsrs	r3, r3, #2
 8012674:	b29b      	uxth	r3, r3
 8012676:	b2db      	uxtb	r3, r3
 8012678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801267c:	b2da      	uxtb	r2, r3
 801267e:	69fb      	ldr	r3, [r7, #28]
 8012680:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8012682:	69fb      	ldr	r3, [r7, #28]
 8012684:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012688:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	891b      	ldrh	r3, [r3, #8]
 801268e:	4618      	mov	r0, r3
 8012690:	f7f6 fb9e 	bl	8008dd0 <lwip_htons>
 8012694:	4603      	mov	r3, r0
 8012696:	461a      	mov	r2, r3
 8012698:	69fb      	ldr	r3, [r7, #28]
 801269a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801269c:	69fb      	ldr	r3, [r7, #28]
 801269e:	2200      	movs	r2, #0
 80126a0:	719a      	strb	r2, [r3, #6]
 80126a2:	2200      	movs	r2, #0
 80126a4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80126a6:	4b2a      	ldr	r3, [pc, #168]	; (8012750 <ip4_output_if_src+0x154>)
 80126a8:	881b      	ldrh	r3, [r3, #0]
 80126aa:	4618      	mov	r0, r3
 80126ac:	f7f6 fb90 	bl	8008dd0 <lwip_htons>
 80126b0:	4603      	mov	r3, r0
 80126b2:	461a      	mov	r2, r3
 80126b4:	69fb      	ldr	r3, [r7, #28]
 80126b6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80126b8:	4b25      	ldr	r3, [pc, #148]	; (8012750 <ip4_output_if_src+0x154>)
 80126ba:	881b      	ldrh	r3, [r3, #0]
 80126bc:	3301      	adds	r3, #1
 80126be:	b29a      	uxth	r2, r3
 80126c0:	4b23      	ldr	r3, [pc, #140]	; (8012750 <ip4_output_if_src+0x154>)
 80126c2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80126c4:	68bb      	ldr	r3, [r7, #8]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d104      	bne.n	80126d4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80126ca:	4b22      	ldr	r3, [pc, #136]	; (8012754 <ip4_output_if_src+0x158>)
 80126cc:	681a      	ldr	r2, [r3, #0]
 80126ce:	69fb      	ldr	r3, [r7, #28]
 80126d0:	60da      	str	r2, [r3, #12]
 80126d2:	e003      	b.n	80126dc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80126d4:	68bb      	ldr	r3, [r7, #8]
 80126d6:	681a      	ldr	r2, [r3, #0]
 80126d8:	69fb      	ldr	r3, [r7, #28]
 80126da:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80126dc:	69fb      	ldr	r3, [r7, #28]
 80126de:	2200      	movs	r2, #0
 80126e0:	729a      	strb	r2, [r3, #10]
 80126e2:	2200      	movs	r2, #0
 80126e4:	72da      	strb	r2, [r3, #11]
 80126e6:	e00f      	b.n	8012708 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	895b      	ldrh	r3, [r3, #10]
 80126ec:	2b13      	cmp	r3, #19
 80126ee:	d802      	bhi.n	80126f6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80126f0:	f06f 0301 	mvn.w	r3, #1
 80126f4:	e020      	b.n	8012738 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	685b      	ldr	r3, [r3, #4]
 80126fa:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80126fc:	69fb      	ldr	r3, [r7, #28]
 80126fe:	691b      	ldr	r3, [r3, #16]
 8012700:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8012702:	f107 0314 	add.w	r3, r7, #20
 8012706:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8012708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801270a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801270c:	2b00      	cmp	r3, #0
 801270e:	d00c      	beq.n	801272a <ip4_output_if_src+0x12e>
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	891a      	ldrh	r2, [r3, #8]
 8012714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012716:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012718:	429a      	cmp	r2, r3
 801271a:	d906      	bls.n	801272a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801271c:	687a      	ldr	r2, [r7, #4]
 801271e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012720:	68f8      	ldr	r0, [r7, #12]
 8012722:	f000 fd53 	bl	80131cc <ip4_frag>
 8012726:	4603      	mov	r3, r0
 8012728:	e006      	b.n	8012738 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801272a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801272c:	695b      	ldr	r3, [r3, #20]
 801272e:	687a      	ldr	r2, [r7, #4]
 8012730:	68f9      	ldr	r1, [r7, #12]
 8012732:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012734:	4798      	blx	r3
 8012736:	4603      	mov	r3, r0
}
 8012738:	4618      	mov	r0, r3
 801273a:	3720      	adds	r7, #32
 801273c:	46bd      	mov	sp, r7
 801273e:	bd80      	pop	{r7, pc}
 8012740:	08016e2c 	.word	0x08016e2c
 8012744:	08016e60 	.word	0x08016e60
 8012748:	08016e6c 	.word	0x08016e6c
 801274c:	08016e94 	.word	0x08016e94
 8012750:	2000871e 	.word	0x2000871e
 8012754:	08017274 	.word	0x08017274

08012758 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8012758:	b480      	push	{r7}
 801275a:	b085      	sub	sp, #20
 801275c:	af00      	add	r7, sp, #0
 801275e:	6078      	str	r0, [r7, #4]
 8012760:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	f1b3 3fff 	cmp.w	r3, #4294967295
 801276c:	d002      	beq.n	8012774 <ip4_addr_isbroadcast_u32+0x1c>
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	2b00      	cmp	r3, #0
 8012772:	d101      	bne.n	8012778 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8012774:	2301      	movs	r3, #1
 8012776:	e02a      	b.n	80127ce <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8012778:	683b      	ldr	r3, [r7, #0]
 801277a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801277e:	f003 0302 	and.w	r3, r3, #2
 8012782:	2b00      	cmp	r3, #0
 8012784:	d101      	bne.n	801278a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8012786:	2300      	movs	r3, #0
 8012788:	e021      	b.n	80127ce <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801278a:	683b      	ldr	r3, [r7, #0]
 801278c:	3304      	adds	r3, #4
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	687a      	ldr	r2, [r7, #4]
 8012792:	429a      	cmp	r2, r3
 8012794:	d101      	bne.n	801279a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8012796:	2300      	movs	r3, #0
 8012798:	e019      	b.n	80127ce <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801279a:	68fa      	ldr	r2, [r7, #12]
 801279c:	683b      	ldr	r3, [r7, #0]
 801279e:	3304      	adds	r3, #4
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	405a      	eors	r2, r3
 80127a4:	683b      	ldr	r3, [r7, #0]
 80127a6:	3308      	adds	r3, #8
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	4013      	ands	r3, r2
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d10d      	bne.n	80127cc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80127b0:	683b      	ldr	r3, [r7, #0]
 80127b2:	3308      	adds	r3, #8
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	43da      	mvns	r2, r3
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80127bc:	683b      	ldr	r3, [r7, #0]
 80127be:	3308      	adds	r3, #8
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80127c4:	429a      	cmp	r2, r3
 80127c6:	d101      	bne.n	80127cc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80127c8:	2301      	movs	r3, #1
 80127ca:	e000      	b.n	80127ce <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80127cc:	2300      	movs	r3, #0
  }
}
 80127ce:	4618      	mov	r0, r3
 80127d0:	3714      	adds	r7, #20
 80127d2:	46bd      	mov	sp, r7
 80127d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d8:	4770      	bx	lr
	...

080127dc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80127dc:	b580      	push	{r7, lr}
 80127de:	b084      	sub	sp, #16
 80127e0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80127e2:	2300      	movs	r3, #0
 80127e4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80127e6:	4b12      	ldr	r3, [pc, #72]	; (8012830 <ip_reass_tmr+0x54>)
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80127ec:	e018      	b.n	8012820 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	7fdb      	ldrb	r3, [r3, #31]
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d00b      	beq.n	801280e <ip_reass_tmr+0x32>
      r->timer--;
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	7fdb      	ldrb	r3, [r3, #31]
 80127fa:	3b01      	subs	r3, #1
 80127fc:	b2da      	uxtb	r2, r3
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8012806:	68fb      	ldr	r3, [r7, #12]
 8012808:	681b      	ldr	r3, [r3, #0]
 801280a:	60fb      	str	r3, [r7, #12]
 801280c:	e008      	b.n	8012820 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8012818:	68b9      	ldr	r1, [r7, #8]
 801281a:	6878      	ldr	r0, [r7, #4]
 801281c:	f000 f80a 	bl	8012834 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	2b00      	cmp	r3, #0
 8012824:	d1e3      	bne.n	80127ee <ip_reass_tmr+0x12>
    }
  }
}
 8012826:	bf00      	nop
 8012828:	bf00      	nop
 801282a:	3710      	adds	r7, #16
 801282c:	46bd      	mov	sp, r7
 801282e:	bd80      	pop	{r7, pc}
 8012830:	20008720 	.word	0x20008720

08012834 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012834:	b580      	push	{r7, lr}
 8012836:	b088      	sub	sp, #32
 8012838:	af00      	add	r7, sp, #0
 801283a:	6078      	str	r0, [r7, #4]
 801283c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801283e:	2300      	movs	r3, #0
 8012840:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8012842:	683a      	ldr	r2, [r7, #0]
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	429a      	cmp	r2, r3
 8012848:	d105      	bne.n	8012856 <ip_reass_free_complete_datagram+0x22>
 801284a:	4b45      	ldr	r3, [pc, #276]	; (8012960 <ip_reass_free_complete_datagram+0x12c>)
 801284c:	22ab      	movs	r2, #171	; 0xab
 801284e:	4945      	ldr	r1, [pc, #276]	; (8012964 <ip_reass_free_complete_datagram+0x130>)
 8012850:	4845      	ldr	r0, [pc, #276]	; (8012968 <ip_reass_free_complete_datagram+0x134>)
 8012852:	f000 ffb5 	bl	80137c0 <iprintf>
  if (prev != NULL) {
 8012856:	683b      	ldr	r3, [r7, #0]
 8012858:	2b00      	cmp	r3, #0
 801285a:	d00a      	beq.n	8012872 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801285c:	683b      	ldr	r3, [r7, #0]
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	687a      	ldr	r2, [r7, #4]
 8012862:	429a      	cmp	r2, r3
 8012864:	d005      	beq.n	8012872 <ip_reass_free_complete_datagram+0x3e>
 8012866:	4b3e      	ldr	r3, [pc, #248]	; (8012960 <ip_reass_free_complete_datagram+0x12c>)
 8012868:	22ad      	movs	r2, #173	; 0xad
 801286a:	4940      	ldr	r1, [pc, #256]	; (801296c <ip_reass_free_complete_datagram+0x138>)
 801286c:	483e      	ldr	r0, [pc, #248]	; (8012968 <ip_reass_free_complete_datagram+0x134>)
 801286e:	f000 ffa7 	bl	80137c0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	685b      	ldr	r3, [r3, #4]
 8012876:	685b      	ldr	r3, [r3, #4]
 8012878:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801287a:	697b      	ldr	r3, [r7, #20]
 801287c:	889b      	ldrh	r3, [r3, #4]
 801287e:	b29b      	uxth	r3, r3
 8012880:	2b00      	cmp	r3, #0
 8012882:	d12a      	bne.n	80128da <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	685b      	ldr	r3, [r3, #4]
 8012888:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801288a:	697b      	ldr	r3, [r7, #20]
 801288c:	681a      	ldr	r2, [r3, #0]
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8012892:	69bb      	ldr	r3, [r7, #24]
 8012894:	6858      	ldr	r0, [r3, #4]
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	3308      	adds	r3, #8
 801289a:	2214      	movs	r2, #20
 801289c:	4619      	mov	r1, r3
 801289e:	f000 fee5 	bl	801366c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80128a2:	2101      	movs	r1, #1
 80128a4:	69b8      	ldr	r0, [r7, #24]
 80128a6:	f7ff fc47 	bl	8012138 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80128aa:	69b8      	ldr	r0, [r7, #24]
 80128ac:	f7f7 fe76 	bl	800a59c <pbuf_clen>
 80128b0:	4603      	mov	r3, r0
 80128b2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80128b4:	8bfa      	ldrh	r2, [r7, #30]
 80128b6:	8a7b      	ldrh	r3, [r7, #18]
 80128b8:	4413      	add	r3, r2
 80128ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80128be:	db05      	blt.n	80128cc <ip_reass_free_complete_datagram+0x98>
 80128c0:	4b27      	ldr	r3, [pc, #156]	; (8012960 <ip_reass_free_complete_datagram+0x12c>)
 80128c2:	22bc      	movs	r2, #188	; 0xbc
 80128c4:	492a      	ldr	r1, [pc, #168]	; (8012970 <ip_reass_free_complete_datagram+0x13c>)
 80128c6:	4828      	ldr	r0, [pc, #160]	; (8012968 <ip_reass_free_complete_datagram+0x134>)
 80128c8:	f000 ff7a 	bl	80137c0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80128cc:	8bfa      	ldrh	r2, [r7, #30]
 80128ce:	8a7b      	ldrh	r3, [r7, #18]
 80128d0:	4413      	add	r3, r2
 80128d2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80128d4:	69b8      	ldr	r0, [r7, #24]
 80128d6:	f7f7 fdd9 	bl	800a48c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	685b      	ldr	r3, [r3, #4]
 80128de:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80128e0:	e01f      	b.n	8012922 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80128e2:	69bb      	ldr	r3, [r7, #24]
 80128e4:	685b      	ldr	r3, [r3, #4]
 80128e6:	617b      	str	r3, [r7, #20]
    pcur = p;
 80128e8:	69bb      	ldr	r3, [r7, #24]
 80128ea:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80128ec:	697b      	ldr	r3, [r7, #20]
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80128f2:	68f8      	ldr	r0, [r7, #12]
 80128f4:	f7f7 fe52 	bl	800a59c <pbuf_clen>
 80128f8:	4603      	mov	r3, r0
 80128fa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80128fc:	8bfa      	ldrh	r2, [r7, #30]
 80128fe:	8a7b      	ldrh	r3, [r7, #18]
 8012900:	4413      	add	r3, r2
 8012902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012906:	db05      	blt.n	8012914 <ip_reass_free_complete_datagram+0xe0>
 8012908:	4b15      	ldr	r3, [pc, #84]	; (8012960 <ip_reass_free_complete_datagram+0x12c>)
 801290a:	22cc      	movs	r2, #204	; 0xcc
 801290c:	4918      	ldr	r1, [pc, #96]	; (8012970 <ip_reass_free_complete_datagram+0x13c>)
 801290e:	4816      	ldr	r0, [pc, #88]	; (8012968 <ip_reass_free_complete_datagram+0x134>)
 8012910:	f000 ff56 	bl	80137c0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012914:	8bfa      	ldrh	r2, [r7, #30]
 8012916:	8a7b      	ldrh	r3, [r7, #18]
 8012918:	4413      	add	r3, r2
 801291a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801291c:	68f8      	ldr	r0, [r7, #12]
 801291e:	f7f7 fdb5 	bl	800a48c <pbuf_free>
  while (p != NULL) {
 8012922:	69bb      	ldr	r3, [r7, #24]
 8012924:	2b00      	cmp	r3, #0
 8012926:	d1dc      	bne.n	80128e2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8012928:	6839      	ldr	r1, [r7, #0]
 801292a:	6878      	ldr	r0, [r7, #4]
 801292c:	f000 f8c2 	bl	8012ab4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8012930:	4b10      	ldr	r3, [pc, #64]	; (8012974 <ip_reass_free_complete_datagram+0x140>)
 8012932:	881b      	ldrh	r3, [r3, #0]
 8012934:	8bfa      	ldrh	r2, [r7, #30]
 8012936:	429a      	cmp	r2, r3
 8012938:	d905      	bls.n	8012946 <ip_reass_free_complete_datagram+0x112>
 801293a:	4b09      	ldr	r3, [pc, #36]	; (8012960 <ip_reass_free_complete_datagram+0x12c>)
 801293c:	22d2      	movs	r2, #210	; 0xd2
 801293e:	490e      	ldr	r1, [pc, #56]	; (8012978 <ip_reass_free_complete_datagram+0x144>)
 8012940:	4809      	ldr	r0, [pc, #36]	; (8012968 <ip_reass_free_complete_datagram+0x134>)
 8012942:	f000 ff3d 	bl	80137c0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8012946:	4b0b      	ldr	r3, [pc, #44]	; (8012974 <ip_reass_free_complete_datagram+0x140>)
 8012948:	881a      	ldrh	r2, [r3, #0]
 801294a:	8bfb      	ldrh	r3, [r7, #30]
 801294c:	1ad3      	subs	r3, r2, r3
 801294e:	b29a      	uxth	r2, r3
 8012950:	4b08      	ldr	r3, [pc, #32]	; (8012974 <ip_reass_free_complete_datagram+0x140>)
 8012952:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8012954:	8bfb      	ldrh	r3, [r7, #30]
}
 8012956:	4618      	mov	r0, r3
 8012958:	3720      	adds	r7, #32
 801295a:	46bd      	mov	sp, r7
 801295c:	bd80      	pop	{r7, pc}
 801295e:	bf00      	nop
 8012960:	08016ec4 	.word	0x08016ec4
 8012964:	08016f00 	.word	0x08016f00
 8012968:	08016f0c 	.word	0x08016f0c
 801296c:	08016f34 	.word	0x08016f34
 8012970:	08016f48 	.word	0x08016f48
 8012974:	20008724 	.word	0x20008724
 8012978:	08016f68 	.word	0x08016f68

0801297c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801297c:	b580      	push	{r7, lr}
 801297e:	b08a      	sub	sp, #40	; 0x28
 8012980:	af00      	add	r7, sp, #0
 8012982:	6078      	str	r0, [r7, #4]
 8012984:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8012986:	2300      	movs	r3, #0
 8012988:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801298a:	2300      	movs	r3, #0
 801298c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801298e:	2300      	movs	r3, #0
 8012990:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8012992:	2300      	movs	r3, #0
 8012994:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8012996:	2300      	movs	r3, #0
 8012998:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801299a:	4b28      	ldr	r3, [pc, #160]	; (8012a3c <ip_reass_remove_oldest_datagram+0xc0>)
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80129a0:	e030      	b.n	8012a04 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80129a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129a4:	695a      	ldr	r2, [r3, #20]
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	68db      	ldr	r3, [r3, #12]
 80129aa:	429a      	cmp	r2, r3
 80129ac:	d10c      	bne.n	80129c8 <ip_reass_remove_oldest_datagram+0x4c>
 80129ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129b0:	699a      	ldr	r2, [r3, #24]
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	691b      	ldr	r3, [r3, #16]
 80129b6:	429a      	cmp	r2, r3
 80129b8:	d106      	bne.n	80129c8 <ip_reass_remove_oldest_datagram+0x4c>
 80129ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129bc:	899a      	ldrh	r2, [r3, #12]
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	889b      	ldrh	r3, [r3, #4]
 80129c2:	b29b      	uxth	r3, r3
 80129c4:	429a      	cmp	r2, r3
 80129c6:	d014      	beq.n	80129f2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80129c8:	693b      	ldr	r3, [r7, #16]
 80129ca:	3301      	adds	r3, #1
 80129cc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80129ce:	6a3b      	ldr	r3, [r7, #32]
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d104      	bne.n	80129de <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80129d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129d6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80129d8:	69fb      	ldr	r3, [r7, #28]
 80129da:	61bb      	str	r3, [r7, #24]
 80129dc:	e009      	b.n	80129f2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80129de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129e0:	7fda      	ldrb	r2, [r3, #31]
 80129e2:	6a3b      	ldr	r3, [r7, #32]
 80129e4:	7fdb      	ldrb	r3, [r3, #31]
 80129e6:	429a      	cmp	r2, r3
 80129e8:	d803      	bhi.n	80129f2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80129ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ec:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80129ee:	69fb      	ldr	r3, [r7, #28]
 80129f0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80129f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d001      	beq.n	80129fe <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80129fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129fc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80129fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d1cb      	bne.n	80129a2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8012a0a:	6a3b      	ldr	r3, [r7, #32]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d008      	beq.n	8012a22 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8012a10:	69b9      	ldr	r1, [r7, #24]
 8012a12:	6a38      	ldr	r0, [r7, #32]
 8012a14:	f7ff ff0e 	bl	8012834 <ip_reass_free_complete_datagram>
 8012a18:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8012a1a:	697a      	ldr	r2, [r7, #20]
 8012a1c:	68fb      	ldr	r3, [r7, #12]
 8012a1e:	4413      	add	r3, r2
 8012a20:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8012a22:	697a      	ldr	r2, [r7, #20]
 8012a24:	683b      	ldr	r3, [r7, #0]
 8012a26:	429a      	cmp	r2, r3
 8012a28:	da02      	bge.n	8012a30 <ip_reass_remove_oldest_datagram+0xb4>
 8012a2a:	693b      	ldr	r3, [r7, #16]
 8012a2c:	2b01      	cmp	r3, #1
 8012a2e:	dcac      	bgt.n	801298a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8012a30:	697b      	ldr	r3, [r7, #20]
}
 8012a32:	4618      	mov	r0, r3
 8012a34:	3728      	adds	r7, #40	; 0x28
 8012a36:	46bd      	mov	sp, r7
 8012a38:	bd80      	pop	{r7, pc}
 8012a3a:	bf00      	nop
 8012a3c:	20008720 	.word	0x20008720

08012a40 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8012a40:	b580      	push	{r7, lr}
 8012a42:	b084      	sub	sp, #16
 8012a44:	af00      	add	r7, sp, #0
 8012a46:	6078      	str	r0, [r7, #4]
 8012a48:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012a4a:	2004      	movs	r0, #4
 8012a4c:	f7f6 fe38 	bl	80096c0 <memp_malloc>
 8012a50:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d110      	bne.n	8012a7a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8012a58:	6839      	ldr	r1, [r7, #0]
 8012a5a:	6878      	ldr	r0, [r7, #4]
 8012a5c:	f7ff ff8e 	bl	801297c <ip_reass_remove_oldest_datagram>
 8012a60:	4602      	mov	r2, r0
 8012a62:	683b      	ldr	r3, [r7, #0]
 8012a64:	4293      	cmp	r3, r2
 8012a66:	dc03      	bgt.n	8012a70 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012a68:	2004      	movs	r0, #4
 8012a6a:	f7f6 fe29 	bl	80096c0 <memp_malloc>
 8012a6e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8012a70:	68fb      	ldr	r3, [r7, #12]
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d101      	bne.n	8012a7a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8012a76:	2300      	movs	r3, #0
 8012a78:	e016      	b.n	8012aa8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8012a7a:	2220      	movs	r2, #32
 8012a7c:	2100      	movs	r1, #0
 8012a7e:	68f8      	ldr	r0, [r7, #12]
 8012a80:	f000 fe02 	bl	8013688 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8012a84:	68fb      	ldr	r3, [r7, #12]
 8012a86:	220f      	movs	r2, #15
 8012a88:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8012a8a:	4b09      	ldr	r3, [pc, #36]	; (8012ab0 <ip_reass_enqueue_new_datagram+0x70>)
 8012a8c:	681a      	ldr	r2, [r3, #0]
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8012a92:	4a07      	ldr	r2, [pc, #28]	; (8012ab0 <ip_reass_enqueue_new_datagram+0x70>)
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	3308      	adds	r3, #8
 8012a9c:	2214      	movs	r2, #20
 8012a9e:	6879      	ldr	r1, [r7, #4]
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	f000 fde3 	bl	801366c <memcpy>
  return ipr;
 8012aa6:	68fb      	ldr	r3, [r7, #12]
}
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	3710      	adds	r7, #16
 8012aac:	46bd      	mov	sp, r7
 8012aae:	bd80      	pop	{r7, pc}
 8012ab0:	20008720 	.word	0x20008720

08012ab4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012ab4:	b580      	push	{r7, lr}
 8012ab6:	b082      	sub	sp, #8
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	6078      	str	r0, [r7, #4]
 8012abc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8012abe:	4b10      	ldr	r3, [pc, #64]	; (8012b00 <ip_reass_dequeue_datagram+0x4c>)
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	687a      	ldr	r2, [r7, #4]
 8012ac4:	429a      	cmp	r2, r3
 8012ac6:	d104      	bne.n	8012ad2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	4a0c      	ldr	r2, [pc, #48]	; (8012b00 <ip_reass_dequeue_datagram+0x4c>)
 8012ace:	6013      	str	r3, [r2, #0]
 8012ad0:	e00d      	b.n	8012aee <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8012ad2:	683b      	ldr	r3, [r7, #0]
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d106      	bne.n	8012ae6 <ip_reass_dequeue_datagram+0x32>
 8012ad8:	4b0a      	ldr	r3, [pc, #40]	; (8012b04 <ip_reass_dequeue_datagram+0x50>)
 8012ada:	f240 1245 	movw	r2, #325	; 0x145
 8012ade:	490a      	ldr	r1, [pc, #40]	; (8012b08 <ip_reass_dequeue_datagram+0x54>)
 8012ae0:	480a      	ldr	r0, [pc, #40]	; (8012b0c <ip_reass_dequeue_datagram+0x58>)
 8012ae2:	f000 fe6d 	bl	80137c0 <iprintf>
    prev->next = ipr->next;
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	681a      	ldr	r2, [r3, #0]
 8012aea:	683b      	ldr	r3, [r7, #0]
 8012aec:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8012aee:	6879      	ldr	r1, [r7, #4]
 8012af0:	2004      	movs	r0, #4
 8012af2:	f7f6 fe55 	bl	80097a0 <memp_free>
}
 8012af6:	bf00      	nop
 8012af8:	3708      	adds	r7, #8
 8012afa:	46bd      	mov	sp, r7
 8012afc:	bd80      	pop	{r7, pc}
 8012afe:	bf00      	nop
 8012b00:	20008720 	.word	0x20008720
 8012b04:	08016ec4 	.word	0x08016ec4
 8012b08:	08016f8c 	.word	0x08016f8c
 8012b0c:	08016f0c 	.word	0x08016f0c

08012b10 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8012b10:	b580      	push	{r7, lr}
 8012b12:	b08c      	sub	sp, #48	; 0x30
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	60f8      	str	r0, [r7, #12]
 8012b18:	60b9      	str	r1, [r7, #8]
 8012b1a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8012b1c:	2300      	movs	r3, #0
 8012b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8012b20:	2301      	movs	r3, #1
 8012b22:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8012b24:	68bb      	ldr	r3, [r7, #8]
 8012b26:	685b      	ldr	r3, [r3, #4]
 8012b28:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012b2a:	69fb      	ldr	r3, [r7, #28]
 8012b2c:	885b      	ldrh	r3, [r3, #2]
 8012b2e:	b29b      	uxth	r3, r3
 8012b30:	4618      	mov	r0, r3
 8012b32:	f7f6 f94d 	bl	8008dd0 <lwip_htons>
 8012b36:	4603      	mov	r3, r0
 8012b38:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8012b3a:	69fb      	ldr	r3, [r7, #28]
 8012b3c:	781b      	ldrb	r3, [r3, #0]
 8012b3e:	f003 030f 	and.w	r3, r3, #15
 8012b42:	b2db      	uxtb	r3, r3
 8012b44:	009b      	lsls	r3, r3, #2
 8012b46:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8012b48:	7e7b      	ldrb	r3, [r7, #25]
 8012b4a:	b29b      	uxth	r3, r3
 8012b4c:	8b7a      	ldrh	r2, [r7, #26]
 8012b4e:	429a      	cmp	r2, r3
 8012b50:	d202      	bcs.n	8012b58 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012b52:	f04f 33ff 	mov.w	r3, #4294967295
 8012b56:	e135      	b.n	8012dc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8012b58:	7e7b      	ldrb	r3, [r7, #25]
 8012b5a:	b29b      	uxth	r3, r3
 8012b5c:	8b7a      	ldrh	r2, [r7, #26]
 8012b5e:	1ad3      	subs	r3, r2, r3
 8012b60:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8012b62:	69fb      	ldr	r3, [r7, #28]
 8012b64:	88db      	ldrh	r3, [r3, #6]
 8012b66:	b29b      	uxth	r3, r3
 8012b68:	4618      	mov	r0, r3
 8012b6a:	f7f6 f931 	bl	8008dd0 <lwip_htons>
 8012b6e:	4603      	mov	r3, r0
 8012b70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012b74:	b29b      	uxth	r3, r3
 8012b76:	00db      	lsls	r3, r3, #3
 8012b78:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8012b7a:	68bb      	ldr	r3, [r7, #8]
 8012b7c:	685b      	ldr	r3, [r3, #4]
 8012b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8012b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b82:	2200      	movs	r2, #0
 8012b84:	701a      	strb	r2, [r3, #0]
 8012b86:	2200      	movs	r2, #0
 8012b88:	705a      	strb	r2, [r3, #1]
 8012b8a:	2200      	movs	r2, #0
 8012b8c:	709a      	strb	r2, [r3, #2]
 8012b8e:	2200      	movs	r2, #0
 8012b90:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8012b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b94:	8afa      	ldrh	r2, [r7, #22]
 8012b96:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8012b98:	8afa      	ldrh	r2, [r7, #22]
 8012b9a:	8b7b      	ldrh	r3, [r7, #26]
 8012b9c:	4413      	add	r3, r2
 8012b9e:	b29a      	uxth	r2, r3
 8012ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ba2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8012ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ba6:	88db      	ldrh	r3, [r3, #6]
 8012ba8:	b29b      	uxth	r3, r3
 8012baa:	8afa      	ldrh	r2, [r7, #22]
 8012bac:	429a      	cmp	r2, r3
 8012bae:	d902      	bls.n	8012bb6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8012bb4:	e106      	b.n	8012dc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	685b      	ldr	r3, [r3, #4]
 8012bba:	627b      	str	r3, [r7, #36]	; 0x24
 8012bbc:	e068      	b.n	8012c90 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8012bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bc0:	685b      	ldr	r3, [r3, #4]
 8012bc2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8012bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bc6:	889b      	ldrh	r3, [r3, #4]
 8012bc8:	b29a      	uxth	r2, r3
 8012bca:	693b      	ldr	r3, [r7, #16]
 8012bcc:	889b      	ldrh	r3, [r3, #4]
 8012bce:	b29b      	uxth	r3, r3
 8012bd0:	429a      	cmp	r2, r3
 8012bd2:	d235      	bcs.n	8012c40 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8012bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012bd8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8012bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d020      	beq.n	8012c22 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8012be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012be2:	889b      	ldrh	r3, [r3, #4]
 8012be4:	b29a      	uxth	r2, r3
 8012be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012be8:	88db      	ldrh	r3, [r3, #6]
 8012bea:	b29b      	uxth	r3, r3
 8012bec:	429a      	cmp	r2, r3
 8012bee:	d307      	bcc.n	8012c00 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8012bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bf2:	88db      	ldrh	r3, [r3, #6]
 8012bf4:	b29a      	uxth	r2, r3
 8012bf6:	693b      	ldr	r3, [r7, #16]
 8012bf8:	889b      	ldrh	r3, [r3, #4]
 8012bfa:	b29b      	uxth	r3, r3
 8012bfc:	429a      	cmp	r2, r3
 8012bfe:	d902      	bls.n	8012c06 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012c00:	f04f 33ff 	mov.w	r3, #4294967295
 8012c04:	e0de      	b.n	8012dc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8012c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c08:	68ba      	ldr	r2, [r7, #8]
 8012c0a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8012c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c0e:	88db      	ldrh	r3, [r3, #6]
 8012c10:	b29a      	uxth	r2, r3
 8012c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c14:	889b      	ldrh	r3, [r3, #4]
 8012c16:	b29b      	uxth	r3, r3
 8012c18:	429a      	cmp	r2, r3
 8012c1a:	d03d      	beq.n	8012c98 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012c1c:	2300      	movs	r3, #0
 8012c1e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8012c20:	e03a      	b.n	8012c98 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8012c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c24:	88db      	ldrh	r3, [r3, #6]
 8012c26:	b29a      	uxth	r2, r3
 8012c28:	693b      	ldr	r3, [r7, #16]
 8012c2a:	889b      	ldrh	r3, [r3, #4]
 8012c2c:	b29b      	uxth	r3, r3
 8012c2e:	429a      	cmp	r2, r3
 8012c30:	d902      	bls.n	8012c38 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012c32:	f04f 33ff 	mov.w	r3, #4294967295
 8012c36:	e0c5      	b.n	8012dc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	68ba      	ldr	r2, [r7, #8]
 8012c3c:	605a      	str	r2, [r3, #4]
      break;
 8012c3e:	e02b      	b.n	8012c98 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8012c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c42:	889b      	ldrh	r3, [r3, #4]
 8012c44:	b29a      	uxth	r2, r3
 8012c46:	693b      	ldr	r3, [r7, #16]
 8012c48:	889b      	ldrh	r3, [r3, #4]
 8012c4a:	b29b      	uxth	r3, r3
 8012c4c:	429a      	cmp	r2, r3
 8012c4e:	d102      	bne.n	8012c56 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012c50:	f04f 33ff 	mov.w	r3, #4294967295
 8012c54:	e0b6      	b.n	8012dc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8012c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c58:	889b      	ldrh	r3, [r3, #4]
 8012c5a:	b29a      	uxth	r2, r3
 8012c5c:	693b      	ldr	r3, [r7, #16]
 8012c5e:	88db      	ldrh	r3, [r3, #6]
 8012c60:	b29b      	uxth	r3, r3
 8012c62:	429a      	cmp	r2, r3
 8012c64:	d202      	bcs.n	8012c6c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012c66:	f04f 33ff 	mov.w	r3, #4294967295
 8012c6a:	e0ab      	b.n	8012dc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8012c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d009      	beq.n	8012c86 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8012c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c74:	88db      	ldrh	r3, [r3, #6]
 8012c76:	b29a      	uxth	r2, r3
 8012c78:	693b      	ldr	r3, [r7, #16]
 8012c7a:	889b      	ldrh	r3, [r3, #4]
 8012c7c:	b29b      	uxth	r3, r3
 8012c7e:	429a      	cmp	r2, r3
 8012c80:	d001      	beq.n	8012c86 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012c82:	2300      	movs	r3, #0
 8012c84:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8012c86:	693b      	ldr	r3, [r7, #16]
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8012c8c:	693b      	ldr	r3, [r7, #16]
 8012c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8012c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d193      	bne.n	8012bbe <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8012c96:	e000      	b.n	8012c9a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8012c98:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8012c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d12d      	bne.n	8012cfc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8012ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d01c      	beq.n	8012ce0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8012ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ca8:	88db      	ldrh	r3, [r3, #6]
 8012caa:	b29a      	uxth	r2, r3
 8012cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cae:	889b      	ldrh	r3, [r3, #4]
 8012cb0:	b29b      	uxth	r3, r3
 8012cb2:	429a      	cmp	r2, r3
 8012cb4:	d906      	bls.n	8012cc4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8012cb6:	4b45      	ldr	r3, [pc, #276]	; (8012dcc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012cb8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8012cbc:	4944      	ldr	r1, [pc, #272]	; (8012dd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8012cbe:	4845      	ldr	r0, [pc, #276]	; (8012dd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012cc0:	f000 fd7e 	bl	80137c0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8012cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cc6:	68ba      	ldr	r2, [r7, #8]
 8012cc8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8012cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ccc:	88db      	ldrh	r3, [r3, #6]
 8012cce:	b29a      	uxth	r2, r3
 8012cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cd2:	889b      	ldrh	r3, [r3, #4]
 8012cd4:	b29b      	uxth	r3, r3
 8012cd6:	429a      	cmp	r2, r3
 8012cd8:	d010      	beq.n	8012cfc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8012cda:	2300      	movs	r3, #0
 8012cdc:	623b      	str	r3, [r7, #32]
 8012cde:	e00d      	b.n	8012cfc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	685b      	ldr	r3, [r3, #4]
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d006      	beq.n	8012cf6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8012ce8:	4b38      	ldr	r3, [pc, #224]	; (8012dcc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012cea:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8012cee:	493a      	ldr	r1, [pc, #232]	; (8012dd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8012cf0:	4838      	ldr	r0, [pc, #224]	; (8012dd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012cf2:	f000 fd65 	bl	80137c0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	68ba      	ldr	r2, [r7, #8]
 8012cfa:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d105      	bne.n	8012d0e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8012d02:	68fb      	ldr	r3, [r7, #12]
 8012d04:	7f9b      	ldrb	r3, [r3, #30]
 8012d06:	f003 0301 	and.w	r3, r3, #1
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d059      	beq.n	8012dc2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8012d0e:	6a3b      	ldr	r3, [r7, #32]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d04f      	beq.n	8012db4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	685b      	ldr	r3, [r3, #4]
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d006      	beq.n	8012d2a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	685b      	ldr	r3, [r3, #4]
 8012d20:	685b      	ldr	r3, [r3, #4]
 8012d22:	889b      	ldrh	r3, [r3, #4]
 8012d24:	b29b      	uxth	r3, r3
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d002      	beq.n	8012d30 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8012d2a:	2300      	movs	r3, #0
 8012d2c:	623b      	str	r3, [r7, #32]
 8012d2e:	e041      	b.n	8012db4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8012d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d32:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8012d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012d3a:	e012      	b.n	8012d62 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8012d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d3e:	685b      	ldr	r3, [r3, #4]
 8012d40:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8012d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d44:	88db      	ldrh	r3, [r3, #6]
 8012d46:	b29a      	uxth	r2, r3
 8012d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d4a:	889b      	ldrh	r3, [r3, #4]
 8012d4c:	b29b      	uxth	r3, r3
 8012d4e:	429a      	cmp	r2, r3
 8012d50:	d002      	beq.n	8012d58 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8012d52:	2300      	movs	r3, #0
 8012d54:	623b      	str	r3, [r7, #32]
            break;
 8012d56:	e007      	b.n	8012d68 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8012d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d5a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8012d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d5e:	681b      	ldr	r3, [r3, #0]
 8012d60:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d1e9      	bne.n	8012d3c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8012d68:	6a3b      	ldr	r3, [r7, #32]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d022      	beq.n	8012db4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	685b      	ldr	r3, [r3, #4]
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d106      	bne.n	8012d84 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8012d76:	4b15      	ldr	r3, [pc, #84]	; (8012dcc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012d78:	f240 12df 	movw	r2, #479	; 0x1df
 8012d7c:	4917      	ldr	r1, [pc, #92]	; (8012ddc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012d7e:	4815      	ldr	r0, [pc, #84]	; (8012dd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012d80:	f000 fd1e 	bl	80137c0 <iprintf>
          LWIP_ASSERT("sanity check",
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	685b      	ldr	r3, [r3, #4]
 8012d88:	685b      	ldr	r3, [r3, #4]
 8012d8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012d8c:	429a      	cmp	r2, r3
 8012d8e:	d106      	bne.n	8012d9e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8012d90:	4b0e      	ldr	r3, [pc, #56]	; (8012dcc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012d92:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8012d96:	4911      	ldr	r1, [pc, #68]	; (8012ddc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012d98:	480e      	ldr	r0, [pc, #56]	; (8012dd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012d9a:	f000 fd11 	bl	80137c0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8012d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d006      	beq.n	8012db4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8012da6:	4b09      	ldr	r3, [pc, #36]	; (8012dcc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012da8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8012dac:	490c      	ldr	r1, [pc, #48]	; (8012de0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8012dae:	4809      	ldr	r0, [pc, #36]	; (8012dd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012db0:	f000 fd06 	bl	80137c0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8012db4:	6a3b      	ldr	r3, [r7, #32]
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	bf14      	ite	ne
 8012dba:	2301      	movne	r3, #1
 8012dbc:	2300      	moveq	r3, #0
 8012dbe:	b2db      	uxtb	r3, r3
 8012dc0:	e000      	b.n	8012dc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8012dc2:	2300      	movs	r3, #0
}
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	3730      	adds	r7, #48	; 0x30
 8012dc8:	46bd      	mov	sp, r7
 8012dca:	bd80      	pop	{r7, pc}
 8012dcc:	08016ec4 	.word	0x08016ec4
 8012dd0:	08016fa8 	.word	0x08016fa8
 8012dd4:	08016f0c 	.word	0x08016f0c
 8012dd8:	08016fc8 	.word	0x08016fc8
 8012ddc:	08017000 	.word	0x08017000
 8012de0:	08017010 	.word	0x08017010

08012de4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8012de4:	b580      	push	{r7, lr}
 8012de6:	b08e      	sub	sp, #56	; 0x38
 8012de8:	af00      	add	r7, sp, #0
 8012dea:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	685b      	ldr	r3, [r3, #4]
 8012df0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8012df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012df4:	781b      	ldrb	r3, [r3, #0]
 8012df6:	f003 030f 	and.w	r3, r3, #15
 8012dfa:	b2db      	uxtb	r3, r3
 8012dfc:	009b      	lsls	r3, r3, #2
 8012dfe:	b2db      	uxtb	r3, r3
 8012e00:	2b14      	cmp	r3, #20
 8012e02:	f040 8171 	bne.w	80130e8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8012e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e08:	88db      	ldrh	r3, [r3, #6]
 8012e0a:	b29b      	uxth	r3, r3
 8012e0c:	4618      	mov	r0, r3
 8012e0e:	f7f5 ffdf 	bl	8008dd0 <lwip_htons>
 8012e12:	4603      	mov	r3, r0
 8012e14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012e18:	b29b      	uxth	r3, r3
 8012e1a:	00db      	lsls	r3, r3, #3
 8012e1c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e20:	885b      	ldrh	r3, [r3, #2]
 8012e22:	b29b      	uxth	r3, r3
 8012e24:	4618      	mov	r0, r3
 8012e26:	f7f5 ffd3 	bl	8008dd0 <lwip_htons>
 8012e2a:	4603      	mov	r3, r0
 8012e2c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8012e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e30:	781b      	ldrb	r3, [r3, #0]
 8012e32:	f003 030f 	and.w	r3, r3, #15
 8012e36:	b2db      	uxtb	r3, r3
 8012e38:	009b      	lsls	r3, r3, #2
 8012e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8012e3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012e42:	b29b      	uxth	r3, r3
 8012e44:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012e46:	429a      	cmp	r2, r3
 8012e48:	f0c0 8150 	bcc.w	80130ec <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8012e4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012e50:	b29b      	uxth	r3, r3
 8012e52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012e54:	1ad3      	subs	r3, r2, r3
 8012e56:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8012e58:	6878      	ldr	r0, [r7, #4]
 8012e5a:	f7f7 fb9f 	bl	800a59c <pbuf_clen>
 8012e5e:	4603      	mov	r3, r0
 8012e60:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8012e62:	4b8c      	ldr	r3, [pc, #560]	; (8013094 <ip4_reass+0x2b0>)
 8012e64:	881b      	ldrh	r3, [r3, #0]
 8012e66:	461a      	mov	r2, r3
 8012e68:	8c3b      	ldrh	r3, [r7, #32]
 8012e6a:	4413      	add	r3, r2
 8012e6c:	2b0a      	cmp	r3, #10
 8012e6e:	dd10      	ble.n	8012e92 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012e70:	8c3b      	ldrh	r3, [r7, #32]
 8012e72:	4619      	mov	r1, r3
 8012e74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012e76:	f7ff fd81 	bl	801297c <ip_reass_remove_oldest_datagram>
 8012e7a:	4603      	mov	r3, r0
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	f000 8137 	beq.w	80130f0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8012e82:	4b84      	ldr	r3, [pc, #528]	; (8013094 <ip4_reass+0x2b0>)
 8012e84:	881b      	ldrh	r3, [r3, #0]
 8012e86:	461a      	mov	r2, r3
 8012e88:	8c3b      	ldrh	r3, [r7, #32]
 8012e8a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012e8c:	2b0a      	cmp	r3, #10
 8012e8e:	f300 812f 	bgt.w	80130f0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012e92:	4b81      	ldr	r3, [pc, #516]	; (8013098 <ip4_reass+0x2b4>)
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	633b      	str	r3, [r7, #48]	; 0x30
 8012e98:	e015      	b.n	8012ec6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8012e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e9c:	695a      	ldr	r2, [r3, #20]
 8012e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ea0:	68db      	ldr	r3, [r3, #12]
 8012ea2:	429a      	cmp	r2, r3
 8012ea4:	d10c      	bne.n	8012ec0 <ip4_reass+0xdc>
 8012ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ea8:	699a      	ldr	r2, [r3, #24]
 8012eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eac:	691b      	ldr	r3, [r3, #16]
 8012eae:	429a      	cmp	r2, r3
 8012eb0:	d106      	bne.n	8012ec0 <ip4_reass+0xdc>
 8012eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012eb4:	899a      	ldrh	r2, [r3, #12]
 8012eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eb8:	889b      	ldrh	r3, [r3, #4]
 8012eba:	b29b      	uxth	r3, r3
 8012ebc:	429a      	cmp	r2, r3
 8012ebe:	d006      	beq.n	8012ece <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	633b      	str	r3, [r7, #48]	; 0x30
 8012ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d1e6      	bne.n	8012e9a <ip4_reass+0xb6>
 8012ecc:	e000      	b.n	8012ed0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8012ece:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8012ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d109      	bne.n	8012eea <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8012ed6:	8c3b      	ldrh	r3, [r7, #32]
 8012ed8:	4619      	mov	r1, r3
 8012eda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012edc:	f7ff fdb0 	bl	8012a40 <ip_reass_enqueue_new_datagram>
 8012ee0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8012ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d11c      	bne.n	8012f22 <ip4_reass+0x13e>
      goto nullreturn;
 8012ee8:	e105      	b.n	80130f6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eec:	88db      	ldrh	r3, [r3, #6]
 8012eee:	b29b      	uxth	r3, r3
 8012ef0:	4618      	mov	r0, r3
 8012ef2:	f7f5 ff6d 	bl	8008dd0 <lwip_htons>
 8012ef6:	4603      	mov	r3, r0
 8012ef8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d110      	bne.n	8012f22 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8012f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f02:	89db      	ldrh	r3, [r3, #14]
 8012f04:	4618      	mov	r0, r3
 8012f06:	f7f5 ff63 	bl	8008dd0 <lwip_htons>
 8012f0a:	4603      	mov	r3, r0
 8012f0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d006      	beq.n	8012f22 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8012f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f16:	3308      	adds	r3, #8
 8012f18:	2214      	movs	r2, #20
 8012f1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012f1c:	4618      	mov	r0, r3
 8012f1e:	f000 fba5 	bl	801366c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8012f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f24:	88db      	ldrh	r3, [r3, #6]
 8012f26:	b29b      	uxth	r3, r3
 8012f28:	f003 0320 	and.w	r3, r3, #32
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	bf0c      	ite	eq
 8012f30:	2301      	moveq	r3, #1
 8012f32:	2300      	movne	r3, #0
 8012f34:	b2db      	uxtb	r3, r3
 8012f36:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8012f38:	69fb      	ldr	r3, [r7, #28]
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d00e      	beq.n	8012f5c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8012f3e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012f40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012f42:	4413      	add	r3, r2
 8012f44:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8012f46:	8b7a      	ldrh	r2, [r7, #26]
 8012f48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012f4a:	429a      	cmp	r2, r3
 8012f4c:	f0c0 80a0 	bcc.w	8013090 <ip4_reass+0x2ac>
 8012f50:	8b7b      	ldrh	r3, [r7, #26]
 8012f52:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8012f56:	4293      	cmp	r3, r2
 8012f58:	f200 809a 	bhi.w	8013090 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8012f5c:	69fa      	ldr	r2, [r7, #28]
 8012f5e:	6879      	ldr	r1, [r7, #4]
 8012f60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012f62:	f7ff fdd5 	bl	8012b10 <ip_reass_chain_frag_into_datagram_and_validate>
 8012f66:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8012f68:	697b      	ldr	r3, [r7, #20]
 8012f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f6e:	f000 809b 	beq.w	80130a8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012f72:	4b48      	ldr	r3, [pc, #288]	; (8013094 <ip4_reass+0x2b0>)
 8012f74:	881a      	ldrh	r2, [r3, #0]
 8012f76:	8c3b      	ldrh	r3, [r7, #32]
 8012f78:	4413      	add	r3, r2
 8012f7a:	b29a      	uxth	r2, r3
 8012f7c:	4b45      	ldr	r3, [pc, #276]	; (8013094 <ip4_reass+0x2b0>)
 8012f7e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8012f80:	69fb      	ldr	r3, [r7, #28]
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d00d      	beq.n	8012fa2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8012f86:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012f88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012f8a:	4413      	add	r3, r2
 8012f8c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8012f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f90:	8a7a      	ldrh	r2, [r7, #18]
 8012f92:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f96:	7f9b      	ldrb	r3, [r3, #30]
 8012f98:	f043 0301 	orr.w	r3, r3, #1
 8012f9c:	b2da      	uxtb	r2, r3
 8012f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fa0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8012fa2:	697b      	ldr	r3, [r7, #20]
 8012fa4:	2b01      	cmp	r3, #1
 8012fa6:	d171      	bne.n	801308c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8012fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012faa:	8b9b      	ldrh	r3, [r3, #28]
 8012fac:	3314      	adds	r3, #20
 8012fae:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8012fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fb2:	685b      	ldr	r3, [r3, #4]
 8012fb4:	685b      	ldr	r3, [r3, #4]
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8012fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fbc:	685b      	ldr	r3, [r3, #4]
 8012fbe:	685b      	ldr	r3, [r3, #4]
 8012fc0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8012fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fc4:	3308      	adds	r3, #8
 8012fc6:	2214      	movs	r2, #20
 8012fc8:	4619      	mov	r1, r3
 8012fca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012fcc:	f000 fb4e 	bl	801366c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8012fd0:	8a3b      	ldrh	r3, [r7, #16]
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	f7f5 fefc 	bl	8008dd0 <lwip_htons>
 8012fd8:	4603      	mov	r3, r0
 8012fda:	461a      	mov	r2, r3
 8012fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fde:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8012fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fe2:	2200      	movs	r2, #0
 8012fe4:	719a      	strb	r2, [r3, #6]
 8012fe6:	2200      	movs	r2, #0
 8012fe8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8012fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fec:	2200      	movs	r2, #0
 8012fee:	729a      	strb	r2, [r3, #10]
 8012ff0:	2200      	movs	r2, #0
 8012ff2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8012ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ff6:	685b      	ldr	r3, [r3, #4]
 8012ff8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8012ffa:	e00d      	b.n	8013018 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8012ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ffe:	685b      	ldr	r3, [r3, #4]
 8013000:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8013002:	2114      	movs	r1, #20
 8013004:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013006:	f7f7 f9bb 	bl	800a380 <pbuf_remove_header>
      pbuf_cat(p, r);
 801300a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801300c:	6878      	ldr	r0, [r7, #4]
 801300e:	f7f7 faff 	bl	800a610 <pbuf_cat>
      r = iprh->next_pbuf;
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8013018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801301a:	2b00      	cmp	r3, #0
 801301c:	d1ee      	bne.n	8012ffc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801301e:	4b1e      	ldr	r3, [pc, #120]	; (8013098 <ip4_reass+0x2b4>)
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013024:	429a      	cmp	r2, r3
 8013026:	d102      	bne.n	801302e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8013028:	2300      	movs	r3, #0
 801302a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801302c:	e010      	b.n	8013050 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801302e:	4b1a      	ldr	r3, [pc, #104]	; (8013098 <ip4_reass+0x2b4>)
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013034:	e007      	b.n	8013046 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8013036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013038:	681b      	ldr	r3, [r3, #0]
 801303a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801303c:	429a      	cmp	r2, r3
 801303e:	d006      	beq.n	801304e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013048:	2b00      	cmp	r3, #0
 801304a:	d1f4      	bne.n	8013036 <ip4_reass+0x252>
 801304c:	e000      	b.n	8013050 <ip4_reass+0x26c>
          break;
 801304e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8013050:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013052:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013054:	f7ff fd2e 	bl	8012ab4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8013058:	6878      	ldr	r0, [r7, #4]
 801305a:	f7f7 fa9f 	bl	800a59c <pbuf_clen>
 801305e:	4603      	mov	r3, r0
 8013060:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8013062:	4b0c      	ldr	r3, [pc, #48]	; (8013094 <ip4_reass+0x2b0>)
 8013064:	881b      	ldrh	r3, [r3, #0]
 8013066:	8c3a      	ldrh	r2, [r7, #32]
 8013068:	429a      	cmp	r2, r3
 801306a:	d906      	bls.n	801307a <ip4_reass+0x296>
 801306c:	4b0b      	ldr	r3, [pc, #44]	; (801309c <ip4_reass+0x2b8>)
 801306e:	f240 229b 	movw	r2, #667	; 0x29b
 8013072:	490b      	ldr	r1, [pc, #44]	; (80130a0 <ip4_reass+0x2bc>)
 8013074:	480b      	ldr	r0, [pc, #44]	; (80130a4 <ip4_reass+0x2c0>)
 8013076:	f000 fba3 	bl	80137c0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801307a:	4b06      	ldr	r3, [pc, #24]	; (8013094 <ip4_reass+0x2b0>)
 801307c:	881a      	ldrh	r2, [r3, #0]
 801307e:	8c3b      	ldrh	r3, [r7, #32]
 8013080:	1ad3      	subs	r3, r2, r3
 8013082:	b29a      	uxth	r2, r3
 8013084:	4b03      	ldr	r3, [pc, #12]	; (8013094 <ip4_reass+0x2b0>)
 8013086:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	e038      	b.n	80130fe <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801308c:	2300      	movs	r3, #0
 801308e:	e036      	b.n	80130fe <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8013090:	bf00      	nop
 8013092:	e00a      	b.n	80130aa <ip4_reass+0x2c6>
 8013094:	20008724 	.word	0x20008724
 8013098:	20008720 	.word	0x20008720
 801309c:	08016ec4 	.word	0x08016ec4
 80130a0:	08017034 	.word	0x08017034
 80130a4:	08016f0c 	.word	0x08016f0c
    goto nullreturn_ipr;
 80130a8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80130aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d106      	bne.n	80130be <ip4_reass+0x2da>
 80130b0:	4b15      	ldr	r3, [pc, #84]	; (8013108 <ip4_reass+0x324>)
 80130b2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80130b6:	4915      	ldr	r1, [pc, #84]	; (801310c <ip4_reass+0x328>)
 80130b8:	4815      	ldr	r0, [pc, #84]	; (8013110 <ip4_reass+0x32c>)
 80130ba:	f000 fb81 	bl	80137c0 <iprintf>
  if (ipr->p == NULL) {
 80130be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130c0:	685b      	ldr	r3, [r3, #4]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d116      	bne.n	80130f4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80130c6:	4b13      	ldr	r3, [pc, #76]	; (8013114 <ip4_reass+0x330>)
 80130c8:	681b      	ldr	r3, [r3, #0]
 80130ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80130cc:	429a      	cmp	r2, r3
 80130ce:	d006      	beq.n	80130de <ip4_reass+0x2fa>
 80130d0:	4b0d      	ldr	r3, [pc, #52]	; (8013108 <ip4_reass+0x324>)
 80130d2:	f240 22ab 	movw	r2, #683	; 0x2ab
 80130d6:	4910      	ldr	r1, [pc, #64]	; (8013118 <ip4_reass+0x334>)
 80130d8:	480d      	ldr	r0, [pc, #52]	; (8013110 <ip4_reass+0x32c>)
 80130da:	f000 fb71 	bl	80137c0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80130de:	2100      	movs	r1, #0
 80130e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80130e2:	f7ff fce7 	bl	8012ab4 <ip_reass_dequeue_datagram>
 80130e6:	e006      	b.n	80130f6 <ip4_reass+0x312>
    goto nullreturn;
 80130e8:	bf00      	nop
 80130ea:	e004      	b.n	80130f6 <ip4_reass+0x312>
    goto nullreturn;
 80130ec:	bf00      	nop
 80130ee:	e002      	b.n	80130f6 <ip4_reass+0x312>
      goto nullreturn;
 80130f0:	bf00      	nop
 80130f2:	e000      	b.n	80130f6 <ip4_reass+0x312>
  }

nullreturn:
 80130f4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80130f6:	6878      	ldr	r0, [r7, #4]
 80130f8:	f7f7 f9c8 	bl	800a48c <pbuf_free>
  return NULL;
 80130fc:	2300      	movs	r3, #0
}
 80130fe:	4618      	mov	r0, r3
 8013100:	3738      	adds	r7, #56	; 0x38
 8013102:	46bd      	mov	sp, r7
 8013104:	bd80      	pop	{r7, pc}
 8013106:	bf00      	nop
 8013108:	08016ec4 	.word	0x08016ec4
 801310c:	08017050 	.word	0x08017050
 8013110:	08016f0c 	.word	0x08016f0c
 8013114:	20008720 	.word	0x20008720
 8013118:	0801705c 	.word	0x0801705c

0801311c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801311c:	b580      	push	{r7, lr}
 801311e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8013120:	2005      	movs	r0, #5
 8013122:	f7f6 facd 	bl	80096c0 <memp_malloc>
 8013126:	4603      	mov	r3, r0
}
 8013128:	4618      	mov	r0, r3
 801312a:	bd80      	pop	{r7, pc}

0801312c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801312c:	b580      	push	{r7, lr}
 801312e:	b082      	sub	sp, #8
 8013130:	af00      	add	r7, sp, #0
 8013132:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	2b00      	cmp	r3, #0
 8013138:	d106      	bne.n	8013148 <ip_frag_free_pbuf_custom_ref+0x1c>
 801313a:	4b07      	ldr	r3, [pc, #28]	; (8013158 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801313c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8013140:	4906      	ldr	r1, [pc, #24]	; (801315c <ip_frag_free_pbuf_custom_ref+0x30>)
 8013142:	4807      	ldr	r0, [pc, #28]	; (8013160 <ip_frag_free_pbuf_custom_ref+0x34>)
 8013144:	f000 fb3c 	bl	80137c0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8013148:	6879      	ldr	r1, [r7, #4]
 801314a:	2005      	movs	r0, #5
 801314c:	f7f6 fb28 	bl	80097a0 <memp_free>
}
 8013150:	bf00      	nop
 8013152:	3708      	adds	r7, #8
 8013154:	46bd      	mov	sp, r7
 8013156:	bd80      	pop	{r7, pc}
 8013158:	08016ec4 	.word	0x08016ec4
 801315c:	0801707c 	.word	0x0801707c
 8013160:	08016f0c 	.word	0x08016f0c

08013164 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8013164:	b580      	push	{r7, lr}
 8013166:	b084      	sub	sp, #16
 8013168:	af00      	add	r7, sp, #0
 801316a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	2b00      	cmp	r3, #0
 8013174:	d106      	bne.n	8013184 <ipfrag_free_pbuf_custom+0x20>
 8013176:	4b11      	ldr	r3, [pc, #68]	; (80131bc <ipfrag_free_pbuf_custom+0x58>)
 8013178:	f240 22ce 	movw	r2, #718	; 0x2ce
 801317c:	4910      	ldr	r1, [pc, #64]	; (80131c0 <ipfrag_free_pbuf_custom+0x5c>)
 801317e:	4811      	ldr	r0, [pc, #68]	; (80131c4 <ipfrag_free_pbuf_custom+0x60>)
 8013180:	f000 fb1e 	bl	80137c0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8013184:	68fa      	ldr	r2, [r7, #12]
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	429a      	cmp	r2, r3
 801318a:	d006      	beq.n	801319a <ipfrag_free_pbuf_custom+0x36>
 801318c:	4b0b      	ldr	r3, [pc, #44]	; (80131bc <ipfrag_free_pbuf_custom+0x58>)
 801318e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8013192:	490d      	ldr	r1, [pc, #52]	; (80131c8 <ipfrag_free_pbuf_custom+0x64>)
 8013194:	480b      	ldr	r0, [pc, #44]	; (80131c4 <ipfrag_free_pbuf_custom+0x60>)
 8013196:	f000 fb13 	bl	80137c0 <iprintf>
  if (pcr->original != NULL) {
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	695b      	ldr	r3, [r3, #20]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d004      	beq.n	80131ac <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	695b      	ldr	r3, [r3, #20]
 80131a6:	4618      	mov	r0, r3
 80131a8:	f7f7 f970 	bl	800a48c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80131ac:	68f8      	ldr	r0, [r7, #12]
 80131ae:	f7ff ffbd 	bl	801312c <ip_frag_free_pbuf_custom_ref>
}
 80131b2:	bf00      	nop
 80131b4:	3710      	adds	r7, #16
 80131b6:	46bd      	mov	sp, r7
 80131b8:	bd80      	pop	{r7, pc}
 80131ba:	bf00      	nop
 80131bc:	08016ec4 	.word	0x08016ec4
 80131c0:	08017088 	.word	0x08017088
 80131c4:	08016f0c 	.word	0x08016f0c
 80131c8:	08017094 	.word	0x08017094

080131cc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80131cc:	b580      	push	{r7, lr}
 80131ce:	b094      	sub	sp, #80	; 0x50
 80131d0:	af02      	add	r7, sp, #8
 80131d2:	60f8      	str	r0, [r7, #12]
 80131d4:	60b9      	str	r1, [r7, #8]
 80131d6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80131d8:	2300      	movs	r3, #0
 80131da:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80131de:	68bb      	ldr	r3, [r7, #8]
 80131e0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80131e2:	3b14      	subs	r3, #20
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	da00      	bge.n	80131ea <ip4_frag+0x1e>
 80131e8:	3307      	adds	r3, #7
 80131ea:	10db      	asrs	r3, r3, #3
 80131ec:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80131ee:	2314      	movs	r3, #20
 80131f0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	685b      	ldr	r3, [r3, #4]
 80131f6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80131f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131fa:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80131fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131fe:	781b      	ldrb	r3, [r3, #0]
 8013200:	f003 030f 	and.w	r3, r3, #15
 8013204:	b2db      	uxtb	r3, r3
 8013206:	009b      	lsls	r3, r3, #2
 8013208:	b2db      	uxtb	r3, r3
 801320a:	2b14      	cmp	r3, #20
 801320c:	d002      	beq.n	8013214 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801320e:	f06f 0305 	mvn.w	r3, #5
 8013212:	e110      	b.n	8013436 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	895b      	ldrh	r3, [r3, #10]
 8013218:	2b13      	cmp	r3, #19
 801321a:	d809      	bhi.n	8013230 <ip4_frag+0x64>
 801321c:	4b88      	ldr	r3, [pc, #544]	; (8013440 <ip4_frag+0x274>)
 801321e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8013222:	4988      	ldr	r1, [pc, #544]	; (8013444 <ip4_frag+0x278>)
 8013224:	4888      	ldr	r0, [pc, #544]	; (8013448 <ip4_frag+0x27c>)
 8013226:	f000 facb 	bl	80137c0 <iprintf>
 801322a:	f06f 0305 	mvn.w	r3, #5
 801322e:	e102      	b.n	8013436 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8013230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013232:	88db      	ldrh	r3, [r3, #6]
 8013234:	b29b      	uxth	r3, r3
 8013236:	4618      	mov	r0, r3
 8013238:	f7f5 fdca 	bl	8008dd0 <lwip_htons>
 801323c:	4603      	mov	r3, r0
 801323e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8013240:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013242:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013246:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801324a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801324c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013250:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	891b      	ldrh	r3, [r3, #8]
 8013256:	3b14      	subs	r3, #20
 8013258:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801325c:	e0e1      	b.n	8013422 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801325e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013260:	00db      	lsls	r3, r3, #3
 8013262:	b29b      	uxth	r3, r3
 8013264:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013268:	4293      	cmp	r3, r2
 801326a:	bf28      	it	cs
 801326c:	4613      	movcs	r3, r2
 801326e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8013270:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013274:	2114      	movs	r1, #20
 8013276:	200e      	movs	r0, #14
 8013278:	f7f6 fe24 	bl	8009ec4 <pbuf_alloc>
 801327c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801327e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013280:	2b00      	cmp	r3, #0
 8013282:	f000 80d5 	beq.w	8013430 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8013286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013288:	895b      	ldrh	r3, [r3, #10]
 801328a:	2b13      	cmp	r3, #19
 801328c:	d806      	bhi.n	801329c <ip4_frag+0xd0>
 801328e:	4b6c      	ldr	r3, [pc, #432]	; (8013440 <ip4_frag+0x274>)
 8013290:	f44f 7249 	mov.w	r2, #804	; 0x324
 8013294:	496d      	ldr	r1, [pc, #436]	; (801344c <ip4_frag+0x280>)
 8013296:	486c      	ldr	r0, [pc, #432]	; (8013448 <ip4_frag+0x27c>)
 8013298:	f000 fa92 	bl	80137c0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801329c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801329e:	685b      	ldr	r3, [r3, #4]
 80132a0:	2214      	movs	r2, #20
 80132a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80132a4:	4618      	mov	r0, r3
 80132a6:	f000 f9e1 	bl	801366c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80132aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132ac:	685b      	ldr	r3, [r3, #4]
 80132ae:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80132b0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80132b2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80132b6:	e064      	b.n	8013382 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	895a      	ldrh	r2, [r3, #10]
 80132bc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80132be:	1ad3      	subs	r3, r2, r3
 80132c0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	895b      	ldrh	r3, [r3, #10]
 80132c6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80132c8:	429a      	cmp	r2, r3
 80132ca:	d906      	bls.n	80132da <ip4_frag+0x10e>
 80132cc:	4b5c      	ldr	r3, [pc, #368]	; (8013440 <ip4_frag+0x274>)
 80132ce:	f240 322d 	movw	r2, #813	; 0x32d
 80132d2:	495f      	ldr	r1, [pc, #380]	; (8013450 <ip4_frag+0x284>)
 80132d4:	485c      	ldr	r0, [pc, #368]	; (8013448 <ip4_frag+0x27c>)
 80132d6:	f000 fa73 	bl	80137c0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80132da:	8bfa      	ldrh	r2, [r7, #30]
 80132dc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80132e0:	4293      	cmp	r3, r2
 80132e2:	bf28      	it	cs
 80132e4:	4613      	movcs	r3, r2
 80132e6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80132ea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d105      	bne.n	80132fe <ip4_frag+0x132>
        poff = 0;
 80132f2:	2300      	movs	r3, #0
 80132f4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	60fb      	str	r3, [r7, #12]
        continue;
 80132fc:	e041      	b.n	8013382 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80132fe:	f7ff ff0d 	bl	801311c <ip_frag_alloc_pbuf_custom_ref>
 8013302:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8013304:	69bb      	ldr	r3, [r7, #24]
 8013306:	2b00      	cmp	r3, #0
 8013308:	d103      	bne.n	8013312 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801330a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801330c:	f7f7 f8be 	bl	800a48c <pbuf_free>
        goto memerr;
 8013310:	e08f      	b.n	8013432 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013312:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013318:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801331a:	4413      	add	r3, r2
 801331c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8013320:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8013324:	9201      	str	r2, [sp, #4]
 8013326:	9300      	str	r3, [sp, #0]
 8013328:	4603      	mov	r3, r0
 801332a:	2241      	movs	r2, #65	; 0x41
 801332c:	2000      	movs	r0, #0
 801332e:	f7f6 fef3 	bl	800a118 <pbuf_alloced_custom>
 8013332:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8013334:	697b      	ldr	r3, [r7, #20]
 8013336:	2b00      	cmp	r3, #0
 8013338:	d106      	bne.n	8013348 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801333a:	69b8      	ldr	r0, [r7, #24]
 801333c:	f7ff fef6 	bl	801312c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013340:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013342:	f7f7 f8a3 	bl	800a48c <pbuf_free>
        goto memerr;
 8013346:	e074      	b.n	8013432 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8013348:	68f8      	ldr	r0, [r7, #12]
 801334a:	f7f7 f93f 	bl	800a5cc <pbuf_ref>
      pcr->original = p;
 801334e:	69bb      	ldr	r3, [r7, #24]
 8013350:	68fa      	ldr	r2, [r7, #12]
 8013352:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8013354:	69bb      	ldr	r3, [r7, #24]
 8013356:	4a3f      	ldr	r2, [pc, #252]	; (8013454 <ip4_frag+0x288>)
 8013358:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801335a:	6979      	ldr	r1, [r7, #20]
 801335c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801335e:	f7f7 f957 	bl	800a610 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8013362:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8013366:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801336a:	1ad3      	subs	r3, r2, r3
 801336c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8013370:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013374:	2b00      	cmp	r3, #0
 8013376:	d004      	beq.n	8013382 <ip4_frag+0x1b6>
        poff = 0;
 8013378:	2300      	movs	r3, #0
 801337a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8013382:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013386:	2b00      	cmp	r3, #0
 8013388:	d196      	bne.n	80132b8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801338a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801338c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013390:	4413      	add	r3, r2
 8013392:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8013394:	68bb      	ldr	r3, [r7, #8]
 8013396:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013398:	f1a3 0213 	sub.w	r2, r3, #19
 801339c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80133a0:	429a      	cmp	r2, r3
 80133a2:	bfcc      	ite	gt
 80133a4:	2301      	movgt	r3, #1
 80133a6:	2300      	movle	r3, #0
 80133a8:	b2db      	uxtb	r3, r3
 80133aa:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80133ac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80133b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80133b4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80133b6:	6a3b      	ldr	r3, [r7, #32]
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d002      	beq.n	80133c2 <ip4_frag+0x1f6>
 80133bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d003      	beq.n	80133ca <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80133c2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80133c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80133c8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80133ca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80133cc:	4618      	mov	r0, r3
 80133ce:	f7f5 fcff 	bl	8008dd0 <lwip_htons>
 80133d2:	4603      	mov	r3, r0
 80133d4:	461a      	mov	r2, r3
 80133d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133d8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80133da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80133dc:	3314      	adds	r3, #20
 80133de:	b29b      	uxth	r3, r3
 80133e0:	4618      	mov	r0, r3
 80133e2:	f7f5 fcf5 	bl	8008dd0 <lwip_htons>
 80133e6:	4603      	mov	r3, r0
 80133e8:	461a      	mov	r2, r3
 80133ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133ec:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80133ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133f0:	2200      	movs	r2, #0
 80133f2:	729a      	strb	r2, [r3, #10]
 80133f4:	2200      	movs	r2, #0
 80133f6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80133f8:	68bb      	ldr	r3, [r7, #8]
 80133fa:	695b      	ldr	r3, [r3, #20]
 80133fc:	687a      	ldr	r2, [r7, #4]
 80133fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013400:	68b8      	ldr	r0, [r7, #8]
 8013402:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8013404:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013406:	f7f7 f841 	bl	800a48c <pbuf_free>
    left = (u16_t)(left - fragsize);
 801340a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801340e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013410:	1ad3      	subs	r3, r2, r3
 8013412:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8013416:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801341a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801341c:	4413      	add	r3, r2
 801341e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8013422:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013426:	2b00      	cmp	r3, #0
 8013428:	f47f af19 	bne.w	801325e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801342c:	2300      	movs	r3, #0
 801342e:	e002      	b.n	8013436 <ip4_frag+0x26a>
      goto memerr;
 8013430:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8013432:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013436:	4618      	mov	r0, r3
 8013438:	3748      	adds	r7, #72	; 0x48
 801343a:	46bd      	mov	sp, r7
 801343c:	bd80      	pop	{r7, pc}
 801343e:	bf00      	nop
 8013440:	08016ec4 	.word	0x08016ec4
 8013444:	080170a0 	.word	0x080170a0
 8013448:	08016f0c 	.word	0x08016f0c
 801344c:	080170bc 	.word	0x080170bc
 8013450:	080170dc 	.word	0x080170dc
 8013454:	08013165 	.word	0x08013165

08013458 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8013458:	b580      	push	{r7, lr}
 801345a:	b086      	sub	sp, #24
 801345c:	af00      	add	r7, sp, #0
 801345e:	6078      	str	r0, [r7, #4]
 8013460:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8013462:	230e      	movs	r3, #14
 8013464:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	895b      	ldrh	r3, [r3, #10]
 801346a:	2b0e      	cmp	r3, #14
 801346c:	d96e      	bls.n	801354c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	7bdb      	ldrb	r3, [r3, #15]
 8013472:	2b00      	cmp	r3, #0
 8013474:	d106      	bne.n	8013484 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8013476:	683b      	ldr	r3, [r7, #0]
 8013478:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801347c:	3301      	adds	r3, #1
 801347e:	b2da      	uxtb	r2, r3
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	685b      	ldr	r3, [r3, #4]
 8013488:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801348a:	693b      	ldr	r3, [r7, #16]
 801348c:	7b1a      	ldrb	r2, [r3, #12]
 801348e:	7b5b      	ldrb	r3, [r3, #13]
 8013490:	021b      	lsls	r3, r3, #8
 8013492:	4313      	orrs	r3, r2
 8013494:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8013496:	693b      	ldr	r3, [r7, #16]
 8013498:	781b      	ldrb	r3, [r3, #0]
 801349a:	f003 0301 	and.w	r3, r3, #1
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d023      	beq.n	80134ea <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80134a2:	693b      	ldr	r3, [r7, #16]
 80134a4:	781b      	ldrb	r3, [r3, #0]
 80134a6:	2b01      	cmp	r3, #1
 80134a8:	d10f      	bne.n	80134ca <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80134aa:	693b      	ldr	r3, [r7, #16]
 80134ac:	785b      	ldrb	r3, [r3, #1]
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d11b      	bne.n	80134ea <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80134b2:	693b      	ldr	r3, [r7, #16]
 80134b4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80134b6:	2b5e      	cmp	r3, #94	; 0x5e
 80134b8:	d117      	bne.n	80134ea <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	7b5b      	ldrb	r3, [r3, #13]
 80134be:	f043 0310 	orr.w	r3, r3, #16
 80134c2:	b2da      	uxtb	r2, r3
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	735a      	strb	r2, [r3, #13]
 80134c8:	e00f      	b.n	80134ea <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80134ca:	693b      	ldr	r3, [r7, #16]
 80134cc:	2206      	movs	r2, #6
 80134ce:	4928      	ldr	r1, [pc, #160]	; (8013570 <ethernet_input+0x118>)
 80134d0:	4618      	mov	r0, r3
 80134d2:	f000 f8bb 	bl	801364c <memcmp>
 80134d6:	4603      	mov	r3, r0
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d106      	bne.n	80134ea <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	7b5b      	ldrb	r3, [r3, #13]
 80134e0:	f043 0308 	orr.w	r3, r3, #8
 80134e4:	b2da      	uxtb	r2, r3
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80134ea:	89fb      	ldrh	r3, [r7, #14]
 80134ec:	2b08      	cmp	r3, #8
 80134ee:	d003      	beq.n	80134f8 <ethernet_input+0xa0>
 80134f0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80134f4:	d014      	beq.n	8013520 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80134f6:	e032      	b.n	801355e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80134f8:	683b      	ldr	r3, [r7, #0]
 80134fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80134fe:	f003 0308 	and.w	r3, r3, #8
 8013502:	2b00      	cmp	r3, #0
 8013504:	d024      	beq.n	8013550 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013506:	8afb      	ldrh	r3, [r7, #22]
 8013508:	4619      	mov	r1, r3
 801350a:	6878      	ldr	r0, [r7, #4]
 801350c:	f7f6 ff38 	bl	800a380 <pbuf_remove_header>
 8013510:	4603      	mov	r3, r0
 8013512:	2b00      	cmp	r3, #0
 8013514:	d11e      	bne.n	8013554 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8013516:	6839      	ldr	r1, [r7, #0]
 8013518:	6878      	ldr	r0, [r7, #4]
 801351a:	f7fe ff21 	bl	8012360 <ip4_input>
      break;
 801351e:	e013      	b.n	8013548 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013520:	683b      	ldr	r3, [r7, #0]
 8013522:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013526:	f003 0308 	and.w	r3, r3, #8
 801352a:	2b00      	cmp	r3, #0
 801352c:	d014      	beq.n	8013558 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801352e:	8afb      	ldrh	r3, [r7, #22]
 8013530:	4619      	mov	r1, r3
 8013532:	6878      	ldr	r0, [r7, #4]
 8013534:	f7f6 ff24 	bl	800a380 <pbuf_remove_header>
 8013538:	4603      	mov	r3, r0
 801353a:	2b00      	cmp	r3, #0
 801353c:	d10e      	bne.n	801355c <ethernet_input+0x104>
        etharp_input(p, netif);
 801353e:	6839      	ldr	r1, [r7, #0]
 8013540:	6878      	ldr	r0, [r7, #4]
 8013542:	f7fe f8c1 	bl	80116c8 <etharp_input>
      break;
 8013546:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013548:	2300      	movs	r3, #0
 801354a:	e00c      	b.n	8013566 <ethernet_input+0x10e>
    goto free_and_return;
 801354c:	bf00      	nop
 801354e:	e006      	b.n	801355e <ethernet_input+0x106>
        goto free_and_return;
 8013550:	bf00      	nop
 8013552:	e004      	b.n	801355e <ethernet_input+0x106>
        goto free_and_return;
 8013554:	bf00      	nop
 8013556:	e002      	b.n	801355e <ethernet_input+0x106>
        goto free_and_return;
 8013558:	bf00      	nop
 801355a:	e000      	b.n	801355e <ethernet_input+0x106>
        goto free_and_return;
 801355c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801355e:	6878      	ldr	r0, [r7, #4]
 8013560:	f7f6 ff94 	bl	800a48c <pbuf_free>
  return ERR_OK;
 8013564:	2300      	movs	r3, #0
}
 8013566:	4618      	mov	r0, r3
 8013568:	3718      	adds	r7, #24
 801356a:	46bd      	mov	sp, r7
 801356c:	bd80      	pop	{r7, pc}
 801356e:	bf00      	nop
 8013570:	08017278 	.word	0x08017278

08013574 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8013574:	b580      	push	{r7, lr}
 8013576:	b086      	sub	sp, #24
 8013578:	af00      	add	r7, sp, #0
 801357a:	60f8      	str	r0, [r7, #12]
 801357c:	60b9      	str	r1, [r7, #8]
 801357e:	607a      	str	r2, [r7, #4]
 8013580:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013582:	8c3b      	ldrh	r3, [r7, #32]
 8013584:	4618      	mov	r0, r3
 8013586:	f7f5 fc23 	bl	8008dd0 <lwip_htons>
 801358a:	4603      	mov	r3, r0
 801358c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801358e:	210e      	movs	r1, #14
 8013590:	68b8      	ldr	r0, [r7, #8]
 8013592:	f7f6 fee5 	bl	800a360 <pbuf_add_header>
 8013596:	4603      	mov	r3, r0
 8013598:	2b00      	cmp	r3, #0
 801359a:	d125      	bne.n	80135e8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801359c:	68bb      	ldr	r3, [r7, #8]
 801359e:	685b      	ldr	r3, [r3, #4]
 80135a0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80135a2:	693b      	ldr	r3, [r7, #16]
 80135a4:	8afa      	ldrh	r2, [r7, #22]
 80135a6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80135a8:	693b      	ldr	r3, [r7, #16]
 80135aa:	2206      	movs	r2, #6
 80135ac:	6839      	ldr	r1, [r7, #0]
 80135ae:	4618      	mov	r0, r3
 80135b0:	f000 f85c 	bl	801366c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80135b4:	693b      	ldr	r3, [r7, #16]
 80135b6:	3306      	adds	r3, #6
 80135b8:	2206      	movs	r2, #6
 80135ba:	6879      	ldr	r1, [r7, #4]
 80135bc:	4618      	mov	r0, r3
 80135be:	f000 f855 	bl	801366c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80135c2:	68fb      	ldr	r3, [r7, #12]
 80135c4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80135c8:	2b06      	cmp	r3, #6
 80135ca:	d006      	beq.n	80135da <ethernet_output+0x66>
 80135cc:	4b0a      	ldr	r3, [pc, #40]	; (80135f8 <ethernet_output+0x84>)
 80135ce:	f44f 7299 	mov.w	r2, #306	; 0x132
 80135d2:	490a      	ldr	r1, [pc, #40]	; (80135fc <ethernet_output+0x88>)
 80135d4:	480a      	ldr	r0, [pc, #40]	; (8013600 <ethernet_output+0x8c>)
 80135d6:	f000 f8f3 	bl	80137c0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	699b      	ldr	r3, [r3, #24]
 80135de:	68b9      	ldr	r1, [r7, #8]
 80135e0:	68f8      	ldr	r0, [r7, #12]
 80135e2:	4798      	blx	r3
 80135e4:	4603      	mov	r3, r0
 80135e6:	e002      	b.n	80135ee <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80135e8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80135ea:	f06f 0301 	mvn.w	r3, #1
}
 80135ee:	4618      	mov	r0, r3
 80135f0:	3718      	adds	r7, #24
 80135f2:	46bd      	mov	sp, r7
 80135f4:	bd80      	pop	{r7, pc}
 80135f6:	bf00      	nop
 80135f8:	080170ec 	.word	0x080170ec
 80135fc:	08017124 	.word	0x08017124
 8013600:	08017158 	.word	0x08017158

08013604 <__libc_init_array>:
 8013604:	b570      	push	{r4, r5, r6, lr}
 8013606:	4d0d      	ldr	r5, [pc, #52]	; (801363c <__libc_init_array+0x38>)
 8013608:	4c0d      	ldr	r4, [pc, #52]	; (8013640 <__libc_init_array+0x3c>)
 801360a:	1b64      	subs	r4, r4, r5
 801360c:	10a4      	asrs	r4, r4, #2
 801360e:	2600      	movs	r6, #0
 8013610:	42a6      	cmp	r6, r4
 8013612:	d109      	bne.n	8013628 <__libc_init_array+0x24>
 8013614:	4d0b      	ldr	r5, [pc, #44]	; (8013644 <__libc_init_array+0x40>)
 8013616:	4c0c      	ldr	r4, [pc, #48]	; (8013648 <__libc_init_array+0x44>)
 8013618:	f001 f88e 	bl	8014738 <_init>
 801361c:	1b64      	subs	r4, r4, r5
 801361e:	10a4      	asrs	r4, r4, #2
 8013620:	2600      	movs	r6, #0
 8013622:	42a6      	cmp	r6, r4
 8013624:	d105      	bne.n	8013632 <__libc_init_array+0x2e>
 8013626:	bd70      	pop	{r4, r5, r6, pc}
 8013628:	f855 3b04 	ldr.w	r3, [r5], #4
 801362c:	4798      	blx	r3
 801362e:	3601      	adds	r6, #1
 8013630:	e7ee      	b.n	8013610 <__libc_init_array+0xc>
 8013632:	f855 3b04 	ldr.w	r3, [r5], #4
 8013636:	4798      	blx	r3
 8013638:	3601      	adds	r6, #1
 801363a:	e7f2      	b.n	8013622 <__libc_init_array+0x1e>
 801363c:	080173d8 	.word	0x080173d8
 8013640:	080173d8 	.word	0x080173d8
 8013644:	080173d8 	.word	0x080173d8
 8013648:	080173dc 	.word	0x080173dc

0801364c <memcmp>:
 801364c:	b510      	push	{r4, lr}
 801364e:	3901      	subs	r1, #1
 8013650:	4402      	add	r2, r0
 8013652:	4290      	cmp	r0, r2
 8013654:	d101      	bne.n	801365a <memcmp+0xe>
 8013656:	2000      	movs	r0, #0
 8013658:	e005      	b.n	8013666 <memcmp+0x1a>
 801365a:	7803      	ldrb	r3, [r0, #0]
 801365c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013660:	42a3      	cmp	r3, r4
 8013662:	d001      	beq.n	8013668 <memcmp+0x1c>
 8013664:	1b18      	subs	r0, r3, r4
 8013666:	bd10      	pop	{r4, pc}
 8013668:	3001      	adds	r0, #1
 801366a:	e7f2      	b.n	8013652 <memcmp+0x6>

0801366c <memcpy>:
 801366c:	440a      	add	r2, r1
 801366e:	4291      	cmp	r1, r2
 8013670:	f100 33ff 	add.w	r3, r0, #4294967295
 8013674:	d100      	bne.n	8013678 <memcpy+0xc>
 8013676:	4770      	bx	lr
 8013678:	b510      	push	{r4, lr}
 801367a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801367e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013682:	4291      	cmp	r1, r2
 8013684:	d1f9      	bne.n	801367a <memcpy+0xe>
 8013686:	bd10      	pop	{r4, pc}

08013688 <memset>:
 8013688:	4402      	add	r2, r0
 801368a:	4603      	mov	r3, r0
 801368c:	4293      	cmp	r3, r2
 801368e:	d100      	bne.n	8013692 <memset+0xa>
 8013690:	4770      	bx	lr
 8013692:	f803 1b01 	strb.w	r1, [r3], #1
 8013696:	e7f9      	b.n	801368c <memset+0x4>

08013698 <sbrk_aligned>:
 8013698:	b570      	push	{r4, r5, r6, lr}
 801369a:	4e0e      	ldr	r6, [pc, #56]	; (80136d4 <sbrk_aligned+0x3c>)
 801369c:	460c      	mov	r4, r1
 801369e:	6831      	ldr	r1, [r6, #0]
 80136a0:	4605      	mov	r5, r0
 80136a2:	b911      	cbnz	r1, 80136aa <sbrk_aligned+0x12>
 80136a4:	f000 f8e2 	bl	801386c <_sbrk_r>
 80136a8:	6030      	str	r0, [r6, #0]
 80136aa:	4621      	mov	r1, r4
 80136ac:	4628      	mov	r0, r5
 80136ae:	f000 f8dd 	bl	801386c <_sbrk_r>
 80136b2:	1c43      	adds	r3, r0, #1
 80136b4:	d00a      	beq.n	80136cc <sbrk_aligned+0x34>
 80136b6:	1cc4      	adds	r4, r0, #3
 80136b8:	f024 0403 	bic.w	r4, r4, #3
 80136bc:	42a0      	cmp	r0, r4
 80136be:	d007      	beq.n	80136d0 <sbrk_aligned+0x38>
 80136c0:	1a21      	subs	r1, r4, r0
 80136c2:	4628      	mov	r0, r5
 80136c4:	f000 f8d2 	bl	801386c <_sbrk_r>
 80136c8:	3001      	adds	r0, #1
 80136ca:	d101      	bne.n	80136d0 <sbrk_aligned+0x38>
 80136cc:	f04f 34ff 	mov.w	r4, #4294967295
 80136d0:	4620      	mov	r0, r4
 80136d2:	bd70      	pop	{r4, r5, r6, pc}
 80136d4:	2000872c 	.word	0x2000872c

080136d8 <_malloc_r>:
 80136d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136dc:	1ccd      	adds	r5, r1, #3
 80136de:	f025 0503 	bic.w	r5, r5, #3
 80136e2:	3508      	adds	r5, #8
 80136e4:	2d0c      	cmp	r5, #12
 80136e6:	bf38      	it	cc
 80136e8:	250c      	movcc	r5, #12
 80136ea:	2d00      	cmp	r5, #0
 80136ec:	4607      	mov	r7, r0
 80136ee:	db01      	blt.n	80136f4 <_malloc_r+0x1c>
 80136f0:	42a9      	cmp	r1, r5
 80136f2:	d905      	bls.n	8013700 <_malloc_r+0x28>
 80136f4:	230c      	movs	r3, #12
 80136f6:	603b      	str	r3, [r7, #0]
 80136f8:	2600      	movs	r6, #0
 80136fa:	4630      	mov	r0, r6
 80136fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013700:	4e2e      	ldr	r6, [pc, #184]	; (80137bc <_malloc_r+0xe4>)
 8013702:	f000 f9f3 	bl	8013aec <__malloc_lock>
 8013706:	6833      	ldr	r3, [r6, #0]
 8013708:	461c      	mov	r4, r3
 801370a:	bb34      	cbnz	r4, 801375a <_malloc_r+0x82>
 801370c:	4629      	mov	r1, r5
 801370e:	4638      	mov	r0, r7
 8013710:	f7ff ffc2 	bl	8013698 <sbrk_aligned>
 8013714:	1c43      	adds	r3, r0, #1
 8013716:	4604      	mov	r4, r0
 8013718:	d14d      	bne.n	80137b6 <_malloc_r+0xde>
 801371a:	6834      	ldr	r4, [r6, #0]
 801371c:	4626      	mov	r6, r4
 801371e:	2e00      	cmp	r6, #0
 8013720:	d140      	bne.n	80137a4 <_malloc_r+0xcc>
 8013722:	6823      	ldr	r3, [r4, #0]
 8013724:	4631      	mov	r1, r6
 8013726:	4638      	mov	r0, r7
 8013728:	eb04 0803 	add.w	r8, r4, r3
 801372c:	f000 f89e 	bl	801386c <_sbrk_r>
 8013730:	4580      	cmp	r8, r0
 8013732:	d13a      	bne.n	80137aa <_malloc_r+0xd2>
 8013734:	6821      	ldr	r1, [r4, #0]
 8013736:	3503      	adds	r5, #3
 8013738:	1a6d      	subs	r5, r5, r1
 801373a:	f025 0503 	bic.w	r5, r5, #3
 801373e:	3508      	adds	r5, #8
 8013740:	2d0c      	cmp	r5, #12
 8013742:	bf38      	it	cc
 8013744:	250c      	movcc	r5, #12
 8013746:	4629      	mov	r1, r5
 8013748:	4638      	mov	r0, r7
 801374a:	f7ff ffa5 	bl	8013698 <sbrk_aligned>
 801374e:	3001      	adds	r0, #1
 8013750:	d02b      	beq.n	80137aa <_malloc_r+0xd2>
 8013752:	6823      	ldr	r3, [r4, #0]
 8013754:	442b      	add	r3, r5
 8013756:	6023      	str	r3, [r4, #0]
 8013758:	e00e      	b.n	8013778 <_malloc_r+0xa0>
 801375a:	6822      	ldr	r2, [r4, #0]
 801375c:	1b52      	subs	r2, r2, r5
 801375e:	d41e      	bmi.n	801379e <_malloc_r+0xc6>
 8013760:	2a0b      	cmp	r2, #11
 8013762:	d916      	bls.n	8013792 <_malloc_r+0xba>
 8013764:	1961      	adds	r1, r4, r5
 8013766:	42a3      	cmp	r3, r4
 8013768:	6025      	str	r5, [r4, #0]
 801376a:	bf18      	it	ne
 801376c:	6059      	strne	r1, [r3, #4]
 801376e:	6863      	ldr	r3, [r4, #4]
 8013770:	bf08      	it	eq
 8013772:	6031      	streq	r1, [r6, #0]
 8013774:	5162      	str	r2, [r4, r5]
 8013776:	604b      	str	r3, [r1, #4]
 8013778:	4638      	mov	r0, r7
 801377a:	f104 060b 	add.w	r6, r4, #11
 801377e:	f000 f9bb 	bl	8013af8 <__malloc_unlock>
 8013782:	f026 0607 	bic.w	r6, r6, #7
 8013786:	1d23      	adds	r3, r4, #4
 8013788:	1af2      	subs	r2, r6, r3
 801378a:	d0b6      	beq.n	80136fa <_malloc_r+0x22>
 801378c:	1b9b      	subs	r3, r3, r6
 801378e:	50a3      	str	r3, [r4, r2]
 8013790:	e7b3      	b.n	80136fa <_malloc_r+0x22>
 8013792:	6862      	ldr	r2, [r4, #4]
 8013794:	42a3      	cmp	r3, r4
 8013796:	bf0c      	ite	eq
 8013798:	6032      	streq	r2, [r6, #0]
 801379a:	605a      	strne	r2, [r3, #4]
 801379c:	e7ec      	b.n	8013778 <_malloc_r+0xa0>
 801379e:	4623      	mov	r3, r4
 80137a0:	6864      	ldr	r4, [r4, #4]
 80137a2:	e7b2      	b.n	801370a <_malloc_r+0x32>
 80137a4:	4634      	mov	r4, r6
 80137a6:	6876      	ldr	r6, [r6, #4]
 80137a8:	e7b9      	b.n	801371e <_malloc_r+0x46>
 80137aa:	230c      	movs	r3, #12
 80137ac:	603b      	str	r3, [r7, #0]
 80137ae:	4638      	mov	r0, r7
 80137b0:	f000 f9a2 	bl	8013af8 <__malloc_unlock>
 80137b4:	e7a1      	b.n	80136fa <_malloc_r+0x22>
 80137b6:	6025      	str	r5, [r4, #0]
 80137b8:	e7de      	b.n	8013778 <_malloc_r+0xa0>
 80137ba:	bf00      	nop
 80137bc:	20008728 	.word	0x20008728

080137c0 <iprintf>:
 80137c0:	b40f      	push	{r0, r1, r2, r3}
 80137c2:	4b0a      	ldr	r3, [pc, #40]	; (80137ec <iprintf+0x2c>)
 80137c4:	b513      	push	{r0, r1, r4, lr}
 80137c6:	681c      	ldr	r4, [r3, #0]
 80137c8:	b124      	cbz	r4, 80137d4 <iprintf+0x14>
 80137ca:	69a3      	ldr	r3, [r4, #24]
 80137cc:	b913      	cbnz	r3, 80137d4 <iprintf+0x14>
 80137ce:	4620      	mov	r0, r4
 80137d0:	f000 f8d2 	bl	8013978 <__sinit>
 80137d4:	ab05      	add	r3, sp, #20
 80137d6:	9a04      	ldr	r2, [sp, #16]
 80137d8:	68a1      	ldr	r1, [r4, #8]
 80137da:	9301      	str	r3, [sp, #4]
 80137dc:	4620      	mov	r0, r4
 80137de:	f000 fa07 	bl	8013bf0 <_vfiprintf_r>
 80137e2:	b002      	add	sp, #8
 80137e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80137e8:	b004      	add	sp, #16
 80137ea:	4770      	bx	lr
 80137ec:	20000040 	.word	0x20000040

080137f0 <rand>:
 80137f0:	4b16      	ldr	r3, [pc, #88]	; (801384c <rand+0x5c>)
 80137f2:	b510      	push	{r4, lr}
 80137f4:	681c      	ldr	r4, [r3, #0]
 80137f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80137f8:	b9b3      	cbnz	r3, 8013828 <rand+0x38>
 80137fa:	2018      	movs	r0, #24
 80137fc:	f000 f96e 	bl	8013adc <malloc>
 8013800:	63a0      	str	r0, [r4, #56]	; 0x38
 8013802:	b928      	cbnz	r0, 8013810 <rand+0x20>
 8013804:	4602      	mov	r2, r0
 8013806:	4b12      	ldr	r3, [pc, #72]	; (8013850 <rand+0x60>)
 8013808:	4812      	ldr	r0, [pc, #72]	; (8013854 <rand+0x64>)
 801380a:	214e      	movs	r1, #78	; 0x4e
 801380c:	f000 f83e 	bl	801388c <__assert_func>
 8013810:	4a11      	ldr	r2, [pc, #68]	; (8013858 <rand+0x68>)
 8013812:	4b12      	ldr	r3, [pc, #72]	; (801385c <rand+0x6c>)
 8013814:	e9c0 2300 	strd	r2, r3, [r0]
 8013818:	4b11      	ldr	r3, [pc, #68]	; (8013860 <rand+0x70>)
 801381a:	6083      	str	r3, [r0, #8]
 801381c:	230b      	movs	r3, #11
 801381e:	8183      	strh	r3, [r0, #12]
 8013820:	2201      	movs	r2, #1
 8013822:	2300      	movs	r3, #0
 8013824:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8013828:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801382a:	4a0e      	ldr	r2, [pc, #56]	; (8013864 <rand+0x74>)
 801382c:	6920      	ldr	r0, [r4, #16]
 801382e:	6963      	ldr	r3, [r4, #20]
 8013830:	490d      	ldr	r1, [pc, #52]	; (8013868 <rand+0x78>)
 8013832:	4342      	muls	r2, r0
 8013834:	fb01 2203 	mla	r2, r1, r3, r2
 8013838:	fba0 0101 	umull	r0, r1, r0, r1
 801383c:	1c43      	adds	r3, r0, #1
 801383e:	eb42 0001 	adc.w	r0, r2, r1
 8013842:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8013846:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801384a:	bd10      	pop	{r4, pc}
 801384c:	20000040 	.word	0x20000040
 8013850:	0801728c 	.word	0x0801728c
 8013854:	080172a3 	.word	0x080172a3
 8013858:	abcd330e 	.word	0xabcd330e
 801385c:	e66d1234 	.word	0xe66d1234
 8013860:	0005deec 	.word	0x0005deec
 8013864:	5851f42d 	.word	0x5851f42d
 8013868:	4c957f2d 	.word	0x4c957f2d

0801386c <_sbrk_r>:
 801386c:	b538      	push	{r3, r4, r5, lr}
 801386e:	4d06      	ldr	r5, [pc, #24]	; (8013888 <_sbrk_r+0x1c>)
 8013870:	2300      	movs	r3, #0
 8013872:	4604      	mov	r4, r0
 8013874:	4608      	mov	r0, r1
 8013876:	602b      	str	r3, [r5, #0]
 8013878:	f7ef f816 	bl	80028a8 <_sbrk>
 801387c:	1c43      	adds	r3, r0, #1
 801387e:	d102      	bne.n	8013886 <_sbrk_r+0x1a>
 8013880:	682b      	ldr	r3, [r5, #0]
 8013882:	b103      	cbz	r3, 8013886 <_sbrk_r+0x1a>
 8013884:	6023      	str	r3, [r4, #0]
 8013886:	bd38      	pop	{r3, r4, r5, pc}
 8013888:	20008730 	.word	0x20008730

0801388c <__assert_func>:
 801388c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801388e:	4614      	mov	r4, r2
 8013890:	461a      	mov	r2, r3
 8013892:	4b09      	ldr	r3, [pc, #36]	; (80138b8 <__assert_func+0x2c>)
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	4605      	mov	r5, r0
 8013898:	68d8      	ldr	r0, [r3, #12]
 801389a:	b14c      	cbz	r4, 80138b0 <__assert_func+0x24>
 801389c:	4b07      	ldr	r3, [pc, #28]	; (80138bc <__assert_func+0x30>)
 801389e:	9100      	str	r1, [sp, #0]
 80138a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80138a4:	4906      	ldr	r1, [pc, #24]	; (80138c0 <__assert_func+0x34>)
 80138a6:	462b      	mov	r3, r5
 80138a8:	f000 f8e4 	bl	8013a74 <fiprintf>
 80138ac:	f000 fd7a 	bl	80143a4 <abort>
 80138b0:	4b04      	ldr	r3, [pc, #16]	; (80138c4 <__assert_func+0x38>)
 80138b2:	461c      	mov	r4, r3
 80138b4:	e7f3      	b.n	801389e <__assert_func+0x12>
 80138b6:	bf00      	nop
 80138b8:	20000040 	.word	0x20000040
 80138bc:	080172fe 	.word	0x080172fe
 80138c0:	0801730b 	.word	0x0801730b
 80138c4:	08017339 	.word	0x08017339

080138c8 <std>:
 80138c8:	2300      	movs	r3, #0
 80138ca:	b510      	push	{r4, lr}
 80138cc:	4604      	mov	r4, r0
 80138ce:	e9c0 3300 	strd	r3, r3, [r0]
 80138d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80138d6:	6083      	str	r3, [r0, #8]
 80138d8:	8181      	strh	r1, [r0, #12]
 80138da:	6643      	str	r3, [r0, #100]	; 0x64
 80138dc:	81c2      	strh	r2, [r0, #14]
 80138de:	6183      	str	r3, [r0, #24]
 80138e0:	4619      	mov	r1, r3
 80138e2:	2208      	movs	r2, #8
 80138e4:	305c      	adds	r0, #92	; 0x5c
 80138e6:	f7ff fecf 	bl	8013688 <memset>
 80138ea:	4b05      	ldr	r3, [pc, #20]	; (8013900 <std+0x38>)
 80138ec:	6263      	str	r3, [r4, #36]	; 0x24
 80138ee:	4b05      	ldr	r3, [pc, #20]	; (8013904 <std+0x3c>)
 80138f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80138f2:	4b05      	ldr	r3, [pc, #20]	; (8013908 <std+0x40>)
 80138f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80138f6:	4b05      	ldr	r3, [pc, #20]	; (801390c <std+0x44>)
 80138f8:	6224      	str	r4, [r4, #32]
 80138fa:	6323      	str	r3, [r4, #48]	; 0x30
 80138fc:	bd10      	pop	{r4, pc}
 80138fe:	bf00      	nop
 8013900:	08014179 	.word	0x08014179
 8013904:	0801419b 	.word	0x0801419b
 8013908:	080141d3 	.word	0x080141d3
 801390c:	080141f7 	.word	0x080141f7

08013910 <_cleanup_r>:
 8013910:	4901      	ldr	r1, [pc, #4]	; (8013918 <_cleanup_r+0x8>)
 8013912:	f000 b8c1 	b.w	8013a98 <_fwalk_reent>
 8013916:	bf00      	nop
 8013918:	080144e1 	.word	0x080144e1

0801391c <__sfmoreglue>:
 801391c:	b570      	push	{r4, r5, r6, lr}
 801391e:	2268      	movs	r2, #104	; 0x68
 8013920:	1e4d      	subs	r5, r1, #1
 8013922:	4355      	muls	r5, r2
 8013924:	460e      	mov	r6, r1
 8013926:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801392a:	f7ff fed5 	bl	80136d8 <_malloc_r>
 801392e:	4604      	mov	r4, r0
 8013930:	b140      	cbz	r0, 8013944 <__sfmoreglue+0x28>
 8013932:	2100      	movs	r1, #0
 8013934:	e9c0 1600 	strd	r1, r6, [r0]
 8013938:	300c      	adds	r0, #12
 801393a:	60a0      	str	r0, [r4, #8]
 801393c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013940:	f7ff fea2 	bl	8013688 <memset>
 8013944:	4620      	mov	r0, r4
 8013946:	bd70      	pop	{r4, r5, r6, pc}

08013948 <__sfp_lock_acquire>:
 8013948:	4801      	ldr	r0, [pc, #4]	; (8013950 <__sfp_lock_acquire+0x8>)
 801394a:	f000 b8c5 	b.w	8013ad8 <__retarget_lock_acquire_recursive>
 801394e:	bf00      	nop
 8013950:	20008735 	.word	0x20008735

08013954 <__sfp_lock_release>:
 8013954:	4801      	ldr	r0, [pc, #4]	; (801395c <__sfp_lock_release+0x8>)
 8013956:	f000 b8c0 	b.w	8013ada <__retarget_lock_release_recursive>
 801395a:	bf00      	nop
 801395c:	20008735 	.word	0x20008735

08013960 <__sinit_lock_acquire>:
 8013960:	4801      	ldr	r0, [pc, #4]	; (8013968 <__sinit_lock_acquire+0x8>)
 8013962:	f000 b8b9 	b.w	8013ad8 <__retarget_lock_acquire_recursive>
 8013966:	bf00      	nop
 8013968:	20008736 	.word	0x20008736

0801396c <__sinit_lock_release>:
 801396c:	4801      	ldr	r0, [pc, #4]	; (8013974 <__sinit_lock_release+0x8>)
 801396e:	f000 b8b4 	b.w	8013ada <__retarget_lock_release_recursive>
 8013972:	bf00      	nop
 8013974:	20008736 	.word	0x20008736

08013978 <__sinit>:
 8013978:	b510      	push	{r4, lr}
 801397a:	4604      	mov	r4, r0
 801397c:	f7ff fff0 	bl	8013960 <__sinit_lock_acquire>
 8013980:	69a3      	ldr	r3, [r4, #24]
 8013982:	b11b      	cbz	r3, 801398c <__sinit+0x14>
 8013984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013988:	f7ff bff0 	b.w	801396c <__sinit_lock_release>
 801398c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013990:	6523      	str	r3, [r4, #80]	; 0x50
 8013992:	4b13      	ldr	r3, [pc, #76]	; (80139e0 <__sinit+0x68>)
 8013994:	4a13      	ldr	r2, [pc, #76]	; (80139e4 <__sinit+0x6c>)
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	62a2      	str	r2, [r4, #40]	; 0x28
 801399a:	42a3      	cmp	r3, r4
 801399c:	bf04      	itt	eq
 801399e:	2301      	moveq	r3, #1
 80139a0:	61a3      	streq	r3, [r4, #24]
 80139a2:	4620      	mov	r0, r4
 80139a4:	f000 f820 	bl	80139e8 <__sfp>
 80139a8:	6060      	str	r0, [r4, #4]
 80139aa:	4620      	mov	r0, r4
 80139ac:	f000 f81c 	bl	80139e8 <__sfp>
 80139b0:	60a0      	str	r0, [r4, #8]
 80139b2:	4620      	mov	r0, r4
 80139b4:	f000 f818 	bl	80139e8 <__sfp>
 80139b8:	2200      	movs	r2, #0
 80139ba:	60e0      	str	r0, [r4, #12]
 80139bc:	2104      	movs	r1, #4
 80139be:	6860      	ldr	r0, [r4, #4]
 80139c0:	f7ff ff82 	bl	80138c8 <std>
 80139c4:	68a0      	ldr	r0, [r4, #8]
 80139c6:	2201      	movs	r2, #1
 80139c8:	2109      	movs	r1, #9
 80139ca:	f7ff ff7d 	bl	80138c8 <std>
 80139ce:	68e0      	ldr	r0, [r4, #12]
 80139d0:	2202      	movs	r2, #2
 80139d2:	2112      	movs	r1, #18
 80139d4:	f7ff ff78 	bl	80138c8 <std>
 80139d8:	2301      	movs	r3, #1
 80139da:	61a3      	str	r3, [r4, #24]
 80139dc:	e7d2      	b.n	8013984 <__sinit+0xc>
 80139de:	bf00      	nop
 80139e0:	08017288 	.word	0x08017288
 80139e4:	08013911 	.word	0x08013911

080139e8 <__sfp>:
 80139e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139ea:	4607      	mov	r7, r0
 80139ec:	f7ff ffac 	bl	8013948 <__sfp_lock_acquire>
 80139f0:	4b1e      	ldr	r3, [pc, #120]	; (8013a6c <__sfp+0x84>)
 80139f2:	681e      	ldr	r6, [r3, #0]
 80139f4:	69b3      	ldr	r3, [r6, #24]
 80139f6:	b913      	cbnz	r3, 80139fe <__sfp+0x16>
 80139f8:	4630      	mov	r0, r6
 80139fa:	f7ff ffbd 	bl	8013978 <__sinit>
 80139fe:	3648      	adds	r6, #72	; 0x48
 8013a00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013a04:	3b01      	subs	r3, #1
 8013a06:	d503      	bpl.n	8013a10 <__sfp+0x28>
 8013a08:	6833      	ldr	r3, [r6, #0]
 8013a0a:	b30b      	cbz	r3, 8013a50 <__sfp+0x68>
 8013a0c:	6836      	ldr	r6, [r6, #0]
 8013a0e:	e7f7      	b.n	8013a00 <__sfp+0x18>
 8013a10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013a14:	b9d5      	cbnz	r5, 8013a4c <__sfp+0x64>
 8013a16:	4b16      	ldr	r3, [pc, #88]	; (8013a70 <__sfp+0x88>)
 8013a18:	60e3      	str	r3, [r4, #12]
 8013a1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013a1e:	6665      	str	r5, [r4, #100]	; 0x64
 8013a20:	f000 f859 	bl	8013ad6 <__retarget_lock_init_recursive>
 8013a24:	f7ff ff96 	bl	8013954 <__sfp_lock_release>
 8013a28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013a2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013a30:	6025      	str	r5, [r4, #0]
 8013a32:	61a5      	str	r5, [r4, #24]
 8013a34:	2208      	movs	r2, #8
 8013a36:	4629      	mov	r1, r5
 8013a38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013a3c:	f7ff fe24 	bl	8013688 <memset>
 8013a40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013a44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013a48:	4620      	mov	r0, r4
 8013a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a4c:	3468      	adds	r4, #104	; 0x68
 8013a4e:	e7d9      	b.n	8013a04 <__sfp+0x1c>
 8013a50:	2104      	movs	r1, #4
 8013a52:	4638      	mov	r0, r7
 8013a54:	f7ff ff62 	bl	801391c <__sfmoreglue>
 8013a58:	4604      	mov	r4, r0
 8013a5a:	6030      	str	r0, [r6, #0]
 8013a5c:	2800      	cmp	r0, #0
 8013a5e:	d1d5      	bne.n	8013a0c <__sfp+0x24>
 8013a60:	f7ff ff78 	bl	8013954 <__sfp_lock_release>
 8013a64:	230c      	movs	r3, #12
 8013a66:	603b      	str	r3, [r7, #0]
 8013a68:	e7ee      	b.n	8013a48 <__sfp+0x60>
 8013a6a:	bf00      	nop
 8013a6c:	08017288 	.word	0x08017288
 8013a70:	ffff0001 	.word	0xffff0001

08013a74 <fiprintf>:
 8013a74:	b40e      	push	{r1, r2, r3}
 8013a76:	b503      	push	{r0, r1, lr}
 8013a78:	4601      	mov	r1, r0
 8013a7a:	ab03      	add	r3, sp, #12
 8013a7c:	4805      	ldr	r0, [pc, #20]	; (8013a94 <fiprintf+0x20>)
 8013a7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a82:	6800      	ldr	r0, [r0, #0]
 8013a84:	9301      	str	r3, [sp, #4]
 8013a86:	f000 f8b3 	bl	8013bf0 <_vfiprintf_r>
 8013a8a:	b002      	add	sp, #8
 8013a8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013a90:	b003      	add	sp, #12
 8013a92:	4770      	bx	lr
 8013a94:	20000040 	.word	0x20000040

08013a98 <_fwalk_reent>:
 8013a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a9c:	4606      	mov	r6, r0
 8013a9e:	4688      	mov	r8, r1
 8013aa0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013aa4:	2700      	movs	r7, #0
 8013aa6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013aaa:	f1b9 0901 	subs.w	r9, r9, #1
 8013aae:	d505      	bpl.n	8013abc <_fwalk_reent+0x24>
 8013ab0:	6824      	ldr	r4, [r4, #0]
 8013ab2:	2c00      	cmp	r4, #0
 8013ab4:	d1f7      	bne.n	8013aa6 <_fwalk_reent+0xe>
 8013ab6:	4638      	mov	r0, r7
 8013ab8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013abc:	89ab      	ldrh	r3, [r5, #12]
 8013abe:	2b01      	cmp	r3, #1
 8013ac0:	d907      	bls.n	8013ad2 <_fwalk_reent+0x3a>
 8013ac2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013ac6:	3301      	adds	r3, #1
 8013ac8:	d003      	beq.n	8013ad2 <_fwalk_reent+0x3a>
 8013aca:	4629      	mov	r1, r5
 8013acc:	4630      	mov	r0, r6
 8013ace:	47c0      	blx	r8
 8013ad0:	4307      	orrs	r7, r0
 8013ad2:	3568      	adds	r5, #104	; 0x68
 8013ad4:	e7e9      	b.n	8013aaa <_fwalk_reent+0x12>

08013ad6 <__retarget_lock_init_recursive>:
 8013ad6:	4770      	bx	lr

08013ad8 <__retarget_lock_acquire_recursive>:
 8013ad8:	4770      	bx	lr

08013ada <__retarget_lock_release_recursive>:
 8013ada:	4770      	bx	lr

08013adc <malloc>:
 8013adc:	4b02      	ldr	r3, [pc, #8]	; (8013ae8 <malloc+0xc>)
 8013ade:	4601      	mov	r1, r0
 8013ae0:	6818      	ldr	r0, [r3, #0]
 8013ae2:	f7ff bdf9 	b.w	80136d8 <_malloc_r>
 8013ae6:	bf00      	nop
 8013ae8:	20000040 	.word	0x20000040

08013aec <__malloc_lock>:
 8013aec:	4801      	ldr	r0, [pc, #4]	; (8013af4 <__malloc_lock+0x8>)
 8013aee:	f7ff bff3 	b.w	8013ad8 <__retarget_lock_acquire_recursive>
 8013af2:	bf00      	nop
 8013af4:	20008734 	.word	0x20008734

08013af8 <__malloc_unlock>:
 8013af8:	4801      	ldr	r0, [pc, #4]	; (8013b00 <__malloc_unlock+0x8>)
 8013afa:	f7ff bfee 	b.w	8013ada <__retarget_lock_release_recursive>
 8013afe:	bf00      	nop
 8013b00:	20008734 	.word	0x20008734

08013b04 <_free_r>:
 8013b04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013b06:	2900      	cmp	r1, #0
 8013b08:	d044      	beq.n	8013b94 <_free_r+0x90>
 8013b0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013b0e:	9001      	str	r0, [sp, #4]
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	f1a1 0404 	sub.w	r4, r1, #4
 8013b16:	bfb8      	it	lt
 8013b18:	18e4      	addlt	r4, r4, r3
 8013b1a:	f7ff ffe7 	bl	8013aec <__malloc_lock>
 8013b1e:	4a1e      	ldr	r2, [pc, #120]	; (8013b98 <_free_r+0x94>)
 8013b20:	9801      	ldr	r0, [sp, #4]
 8013b22:	6813      	ldr	r3, [r2, #0]
 8013b24:	b933      	cbnz	r3, 8013b34 <_free_r+0x30>
 8013b26:	6063      	str	r3, [r4, #4]
 8013b28:	6014      	str	r4, [r2, #0]
 8013b2a:	b003      	add	sp, #12
 8013b2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013b30:	f7ff bfe2 	b.w	8013af8 <__malloc_unlock>
 8013b34:	42a3      	cmp	r3, r4
 8013b36:	d908      	bls.n	8013b4a <_free_r+0x46>
 8013b38:	6825      	ldr	r5, [r4, #0]
 8013b3a:	1961      	adds	r1, r4, r5
 8013b3c:	428b      	cmp	r3, r1
 8013b3e:	bf01      	itttt	eq
 8013b40:	6819      	ldreq	r1, [r3, #0]
 8013b42:	685b      	ldreq	r3, [r3, #4]
 8013b44:	1949      	addeq	r1, r1, r5
 8013b46:	6021      	streq	r1, [r4, #0]
 8013b48:	e7ed      	b.n	8013b26 <_free_r+0x22>
 8013b4a:	461a      	mov	r2, r3
 8013b4c:	685b      	ldr	r3, [r3, #4]
 8013b4e:	b10b      	cbz	r3, 8013b54 <_free_r+0x50>
 8013b50:	42a3      	cmp	r3, r4
 8013b52:	d9fa      	bls.n	8013b4a <_free_r+0x46>
 8013b54:	6811      	ldr	r1, [r2, #0]
 8013b56:	1855      	adds	r5, r2, r1
 8013b58:	42a5      	cmp	r5, r4
 8013b5a:	d10b      	bne.n	8013b74 <_free_r+0x70>
 8013b5c:	6824      	ldr	r4, [r4, #0]
 8013b5e:	4421      	add	r1, r4
 8013b60:	1854      	adds	r4, r2, r1
 8013b62:	42a3      	cmp	r3, r4
 8013b64:	6011      	str	r1, [r2, #0]
 8013b66:	d1e0      	bne.n	8013b2a <_free_r+0x26>
 8013b68:	681c      	ldr	r4, [r3, #0]
 8013b6a:	685b      	ldr	r3, [r3, #4]
 8013b6c:	6053      	str	r3, [r2, #4]
 8013b6e:	4421      	add	r1, r4
 8013b70:	6011      	str	r1, [r2, #0]
 8013b72:	e7da      	b.n	8013b2a <_free_r+0x26>
 8013b74:	d902      	bls.n	8013b7c <_free_r+0x78>
 8013b76:	230c      	movs	r3, #12
 8013b78:	6003      	str	r3, [r0, #0]
 8013b7a:	e7d6      	b.n	8013b2a <_free_r+0x26>
 8013b7c:	6825      	ldr	r5, [r4, #0]
 8013b7e:	1961      	adds	r1, r4, r5
 8013b80:	428b      	cmp	r3, r1
 8013b82:	bf04      	itt	eq
 8013b84:	6819      	ldreq	r1, [r3, #0]
 8013b86:	685b      	ldreq	r3, [r3, #4]
 8013b88:	6063      	str	r3, [r4, #4]
 8013b8a:	bf04      	itt	eq
 8013b8c:	1949      	addeq	r1, r1, r5
 8013b8e:	6021      	streq	r1, [r4, #0]
 8013b90:	6054      	str	r4, [r2, #4]
 8013b92:	e7ca      	b.n	8013b2a <_free_r+0x26>
 8013b94:	b003      	add	sp, #12
 8013b96:	bd30      	pop	{r4, r5, pc}
 8013b98:	20008728 	.word	0x20008728

08013b9c <__sfputc_r>:
 8013b9c:	6893      	ldr	r3, [r2, #8]
 8013b9e:	3b01      	subs	r3, #1
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	b410      	push	{r4}
 8013ba4:	6093      	str	r3, [r2, #8]
 8013ba6:	da08      	bge.n	8013bba <__sfputc_r+0x1e>
 8013ba8:	6994      	ldr	r4, [r2, #24]
 8013baa:	42a3      	cmp	r3, r4
 8013bac:	db01      	blt.n	8013bb2 <__sfputc_r+0x16>
 8013bae:	290a      	cmp	r1, #10
 8013bb0:	d103      	bne.n	8013bba <__sfputc_r+0x1e>
 8013bb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013bb6:	f000 bb23 	b.w	8014200 <__swbuf_r>
 8013bba:	6813      	ldr	r3, [r2, #0]
 8013bbc:	1c58      	adds	r0, r3, #1
 8013bbe:	6010      	str	r0, [r2, #0]
 8013bc0:	7019      	strb	r1, [r3, #0]
 8013bc2:	4608      	mov	r0, r1
 8013bc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013bc8:	4770      	bx	lr

08013bca <__sfputs_r>:
 8013bca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bcc:	4606      	mov	r6, r0
 8013bce:	460f      	mov	r7, r1
 8013bd0:	4614      	mov	r4, r2
 8013bd2:	18d5      	adds	r5, r2, r3
 8013bd4:	42ac      	cmp	r4, r5
 8013bd6:	d101      	bne.n	8013bdc <__sfputs_r+0x12>
 8013bd8:	2000      	movs	r0, #0
 8013bda:	e007      	b.n	8013bec <__sfputs_r+0x22>
 8013bdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013be0:	463a      	mov	r2, r7
 8013be2:	4630      	mov	r0, r6
 8013be4:	f7ff ffda 	bl	8013b9c <__sfputc_r>
 8013be8:	1c43      	adds	r3, r0, #1
 8013bea:	d1f3      	bne.n	8013bd4 <__sfputs_r+0xa>
 8013bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013bf0 <_vfiprintf_r>:
 8013bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bf4:	460d      	mov	r5, r1
 8013bf6:	b09d      	sub	sp, #116	; 0x74
 8013bf8:	4614      	mov	r4, r2
 8013bfa:	4698      	mov	r8, r3
 8013bfc:	4606      	mov	r6, r0
 8013bfe:	b118      	cbz	r0, 8013c08 <_vfiprintf_r+0x18>
 8013c00:	6983      	ldr	r3, [r0, #24]
 8013c02:	b90b      	cbnz	r3, 8013c08 <_vfiprintf_r+0x18>
 8013c04:	f7ff feb8 	bl	8013978 <__sinit>
 8013c08:	4b89      	ldr	r3, [pc, #548]	; (8013e30 <_vfiprintf_r+0x240>)
 8013c0a:	429d      	cmp	r5, r3
 8013c0c:	d11b      	bne.n	8013c46 <_vfiprintf_r+0x56>
 8013c0e:	6875      	ldr	r5, [r6, #4]
 8013c10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013c12:	07d9      	lsls	r1, r3, #31
 8013c14:	d405      	bmi.n	8013c22 <_vfiprintf_r+0x32>
 8013c16:	89ab      	ldrh	r3, [r5, #12]
 8013c18:	059a      	lsls	r2, r3, #22
 8013c1a:	d402      	bmi.n	8013c22 <_vfiprintf_r+0x32>
 8013c1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013c1e:	f7ff ff5b 	bl	8013ad8 <__retarget_lock_acquire_recursive>
 8013c22:	89ab      	ldrh	r3, [r5, #12]
 8013c24:	071b      	lsls	r3, r3, #28
 8013c26:	d501      	bpl.n	8013c2c <_vfiprintf_r+0x3c>
 8013c28:	692b      	ldr	r3, [r5, #16]
 8013c2a:	b9eb      	cbnz	r3, 8013c68 <_vfiprintf_r+0x78>
 8013c2c:	4629      	mov	r1, r5
 8013c2e:	4630      	mov	r0, r6
 8013c30:	f000 fb4a 	bl	80142c8 <__swsetup_r>
 8013c34:	b1c0      	cbz	r0, 8013c68 <_vfiprintf_r+0x78>
 8013c36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013c38:	07dc      	lsls	r4, r3, #31
 8013c3a:	d50e      	bpl.n	8013c5a <_vfiprintf_r+0x6a>
 8013c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8013c40:	b01d      	add	sp, #116	; 0x74
 8013c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c46:	4b7b      	ldr	r3, [pc, #492]	; (8013e34 <_vfiprintf_r+0x244>)
 8013c48:	429d      	cmp	r5, r3
 8013c4a:	d101      	bne.n	8013c50 <_vfiprintf_r+0x60>
 8013c4c:	68b5      	ldr	r5, [r6, #8]
 8013c4e:	e7df      	b.n	8013c10 <_vfiprintf_r+0x20>
 8013c50:	4b79      	ldr	r3, [pc, #484]	; (8013e38 <_vfiprintf_r+0x248>)
 8013c52:	429d      	cmp	r5, r3
 8013c54:	bf08      	it	eq
 8013c56:	68f5      	ldreq	r5, [r6, #12]
 8013c58:	e7da      	b.n	8013c10 <_vfiprintf_r+0x20>
 8013c5a:	89ab      	ldrh	r3, [r5, #12]
 8013c5c:	0598      	lsls	r0, r3, #22
 8013c5e:	d4ed      	bmi.n	8013c3c <_vfiprintf_r+0x4c>
 8013c60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013c62:	f7ff ff3a 	bl	8013ada <__retarget_lock_release_recursive>
 8013c66:	e7e9      	b.n	8013c3c <_vfiprintf_r+0x4c>
 8013c68:	2300      	movs	r3, #0
 8013c6a:	9309      	str	r3, [sp, #36]	; 0x24
 8013c6c:	2320      	movs	r3, #32
 8013c6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013c72:	f8cd 800c 	str.w	r8, [sp, #12]
 8013c76:	2330      	movs	r3, #48	; 0x30
 8013c78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013e3c <_vfiprintf_r+0x24c>
 8013c7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013c80:	f04f 0901 	mov.w	r9, #1
 8013c84:	4623      	mov	r3, r4
 8013c86:	469a      	mov	sl, r3
 8013c88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013c8c:	b10a      	cbz	r2, 8013c92 <_vfiprintf_r+0xa2>
 8013c8e:	2a25      	cmp	r2, #37	; 0x25
 8013c90:	d1f9      	bne.n	8013c86 <_vfiprintf_r+0x96>
 8013c92:	ebba 0b04 	subs.w	fp, sl, r4
 8013c96:	d00b      	beq.n	8013cb0 <_vfiprintf_r+0xc0>
 8013c98:	465b      	mov	r3, fp
 8013c9a:	4622      	mov	r2, r4
 8013c9c:	4629      	mov	r1, r5
 8013c9e:	4630      	mov	r0, r6
 8013ca0:	f7ff ff93 	bl	8013bca <__sfputs_r>
 8013ca4:	3001      	adds	r0, #1
 8013ca6:	f000 80aa 	beq.w	8013dfe <_vfiprintf_r+0x20e>
 8013caa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013cac:	445a      	add	r2, fp
 8013cae:	9209      	str	r2, [sp, #36]	; 0x24
 8013cb0:	f89a 3000 	ldrb.w	r3, [sl]
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	f000 80a2 	beq.w	8013dfe <_vfiprintf_r+0x20e>
 8013cba:	2300      	movs	r3, #0
 8013cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8013cc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013cc4:	f10a 0a01 	add.w	sl, sl, #1
 8013cc8:	9304      	str	r3, [sp, #16]
 8013cca:	9307      	str	r3, [sp, #28]
 8013ccc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013cd0:	931a      	str	r3, [sp, #104]	; 0x68
 8013cd2:	4654      	mov	r4, sl
 8013cd4:	2205      	movs	r2, #5
 8013cd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013cda:	4858      	ldr	r0, [pc, #352]	; (8013e3c <_vfiprintf_r+0x24c>)
 8013cdc:	f7ec fa88 	bl	80001f0 <memchr>
 8013ce0:	9a04      	ldr	r2, [sp, #16]
 8013ce2:	b9d8      	cbnz	r0, 8013d1c <_vfiprintf_r+0x12c>
 8013ce4:	06d1      	lsls	r1, r2, #27
 8013ce6:	bf44      	itt	mi
 8013ce8:	2320      	movmi	r3, #32
 8013cea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013cee:	0713      	lsls	r3, r2, #28
 8013cf0:	bf44      	itt	mi
 8013cf2:	232b      	movmi	r3, #43	; 0x2b
 8013cf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013cf8:	f89a 3000 	ldrb.w	r3, [sl]
 8013cfc:	2b2a      	cmp	r3, #42	; 0x2a
 8013cfe:	d015      	beq.n	8013d2c <_vfiprintf_r+0x13c>
 8013d00:	9a07      	ldr	r2, [sp, #28]
 8013d02:	4654      	mov	r4, sl
 8013d04:	2000      	movs	r0, #0
 8013d06:	f04f 0c0a 	mov.w	ip, #10
 8013d0a:	4621      	mov	r1, r4
 8013d0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013d10:	3b30      	subs	r3, #48	; 0x30
 8013d12:	2b09      	cmp	r3, #9
 8013d14:	d94e      	bls.n	8013db4 <_vfiprintf_r+0x1c4>
 8013d16:	b1b0      	cbz	r0, 8013d46 <_vfiprintf_r+0x156>
 8013d18:	9207      	str	r2, [sp, #28]
 8013d1a:	e014      	b.n	8013d46 <_vfiprintf_r+0x156>
 8013d1c:	eba0 0308 	sub.w	r3, r0, r8
 8013d20:	fa09 f303 	lsl.w	r3, r9, r3
 8013d24:	4313      	orrs	r3, r2
 8013d26:	9304      	str	r3, [sp, #16]
 8013d28:	46a2      	mov	sl, r4
 8013d2a:	e7d2      	b.n	8013cd2 <_vfiprintf_r+0xe2>
 8013d2c:	9b03      	ldr	r3, [sp, #12]
 8013d2e:	1d19      	adds	r1, r3, #4
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	9103      	str	r1, [sp, #12]
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	bfbb      	ittet	lt
 8013d38:	425b      	neglt	r3, r3
 8013d3a:	f042 0202 	orrlt.w	r2, r2, #2
 8013d3e:	9307      	strge	r3, [sp, #28]
 8013d40:	9307      	strlt	r3, [sp, #28]
 8013d42:	bfb8      	it	lt
 8013d44:	9204      	strlt	r2, [sp, #16]
 8013d46:	7823      	ldrb	r3, [r4, #0]
 8013d48:	2b2e      	cmp	r3, #46	; 0x2e
 8013d4a:	d10c      	bne.n	8013d66 <_vfiprintf_r+0x176>
 8013d4c:	7863      	ldrb	r3, [r4, #1]
 8013d4e:	2b2a      	cmp	r3, #42	; 0x2a
 8013d50:	d135      	bne.n	8013dbe <_vfiprintf_r+0x1ce>
 8013d52:	9b03      	ldr	r3, [sp, #12]
 8013d54:	1d1a      	adds	r2, r3, #4
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	9203      	str	r2, [sp, #12]
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	bfb8      	it	lt
 8013d5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8013d62:	3402      	adds	r4, #2
 8013d64:	9305      	str	r3, [sp, #20]
 8013d66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013e4c <_vfiprintf_r+0x25c>
 8013d6a:	7821      	ldrb	r1, [r4, #0]
 8013d6c:	2203      	movs	r2, #3
 8013d6e:	4650      	mov	r0, sl
 8013d70:	f7ec fa3e 	bl	80001f0 <memchr>
 8013d74:	b140      	cbz	r0, 8013d88 <_vfiprintf_r+0x198>
 8013d76:	2340      	movs	r3, #64	; 0x40
 8013d78:	eba0 000a 	sub.w	r0, r0, sl
 8013d7c:	fa03 f000 	lsl.w	r0, r3, r0
 8013d80:	9b04      	ldr	r3, [sp, #16]
 8013d82:	4303      	orrs	r3, r0
 8013d84:	3401      	adds	r4, #1
 8013d86:	9304      	str	r3, [sp, #16]
 8013d88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d8c:	482c      	ldr	r0, [pc, #176]	; (8013e40 <_vfiprintf_r+0x250>)
 8013d8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013d92:	2206      	movs	r2, #6
 8013d94:	f7ec fa2c 	bl	80001f0 <memchr>
 8013d98:	2800      	cmp	r0, #0
 8013d9a:	d03f      	beq.n	8013e1c <_vfiprintf_r+0x22c>
 8013d9c:	4b29      	ldr	r3, [pc, #164]	; (8013e44 <_vfiprintf_r+0x254>)
 8013d9e:	bb1b      	cbnz	r3, 8013de8 <_vfiprintf_r+0x1f8>
 8013da0:	9b03      	ldr	r3, [sp, #12]
 8013da2:	3307      	adds	r3, #7
 8013da4:	f023 0307 	bic.w	r3, r3, #7
 8013da8:	3308      	adds	r3, #8
 8013daa:	9303      	str	r3, [sp, #12]
 8013dac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013dae:	443b      	add	r3, r7
 8013db0:	9309      	str	r3, [sp, #36]	; 0x24
 8013db2:	e767      	b.n	8013c84 <_vfiprintf_r+0x94>
 8013db4:	fb0c 3202 	mla	r2, ip, r2, r3
 8013db8:	460c      	mov	r4, r1
 8013dba:	2001      	movs	r0, #1
 8013dbc:	e7a5      	b.n	8013d0a <_vfiprintf_r+0x11a>
 8013dbe:	2300      	movs	r3, #0
 8013dc0:	3401      	adds	r4, #1
 8013dc2:	9305      	str	r3, [sp, #20]
 8013dc4:	4619      	mov	r1, r3
 8013dc6:	f04f 0c0a 	mov.w	ip, #10
 8013dca:	4620      	mov	r0, r4
 8013dcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013dd0:	3a30      	subs	r2, #48	; 0x30
 8013dd2:	2a09      	cmp	r2, #9
 8013dd4:	d903      	bls.n	8013dde <_vfiprintf_r+0x1ee>
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d0c5      	beq.n	8013d66 <_vfiprintf_r+0x176>
 8013dda:	9105      	str	r1, [sp, #20]
 8013ddc:	e7c3      	b.n	8013d66 <_vfiprintf_r+0x176>
 8013dde:	fb0c 2101 	mla	r1, ip, r1, r2
 8013de2:	4604      	mov	r4, r0
 8013de4:	2301      	movs	r3, #1
 8013de6:	e7f0      	b.n	8013dca <_vfiprintf_r+0x1da>
 8013de8:	ab03      	add	r3, sp, #12
 8013dea:	9300      	str	r3, [sp, #0]
 8013dec:	462a      	mov	r2, r5
 8013dee:	4b16      	ldr	r3, [pc, #88]	; (8013e48 <_vfiprintf_r+0x258>)
 8013df0:	a904      	add	r1, sp, #16
 8013df2:	4630      	mov	r0, r6
 8013df4:	f3af 8000 	nop.w
 8013df8:	4607      	mov	r7, r0
 8013dfa:	1c78      	adds	r0, r7, #1
 8013dfc:	d1d6      	bne.n	8013dac <_vfiprintf_r+0x1bc>
 8013dfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013e00:	07d9      	lsls	r1, r3, #31
 8013e02:	d405      	bmi.n	8013e10 <_vfiprintf_r+0x220>
 8013e04:	89ab      	ldrh	r3, [r5, #12]
 8013e06:	059a      	lsls	r2, r3, #22
 8013e08:	d402      	bmi.n	8013e10 <_vfiprintf_r+0x220>
 8013e0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013e0c:	f7ff fe65 	bl	8013ada <__retarget_lock_release_recursive>
 8013e10:	89ab      	ldrh	r3, [r5, #12]
 8013e12:	065b      	lsls	r3, r3, #25
 8013e14:	f53f af12 	bmi.w	8013c3c <_vfiprintf_r+0x4c>
 8013e18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013e1a:	e711      	b.n	8013c40 <_vfiprintf_r+0x50>
 8013e1c:	ab03      	add	r3, sp, #12
 8013e1e:	9300      	str	r3, [sp, #0]
 8013e20:	462a      	mov	r2, r5
 8013e22:	4b09      	ldr	r3, [pc, #36]	; (8013e48 <_vfiprintf_r+0x258>)
 8013e24:	a904      	add	r1, sp, #16
 8013e26:	4630      	mov	r0, r6
 8013e28:	f000 f880 	bl	8013f2c <_printf_i>
 8013e2c:	e7e4      	b.n	8013df8 <_vfiprintf_r+0x208>
 8013e2e:	bf00      	nop
 8013e30:	0801735c 	.word	0x0801735c
 8013e34:	0801737c 	.word	0x0801737c
 8013e38:	0801733c 	.word	0x0801733c
 8013e3c:	0801739c 	.word	0x0801739c
 8013e40:	080173a6 	.word	0x080173a6
 8013e44:	00000000 	.word	0x00000000
 8013e48:	08013bcb 	.word	0x08013bcb
 8013e4c:	080173a2 	.word	0x080173a2

08013e50 <_printf_common>:
 8013e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e54:	4616      	mov	r6, r2
 8013e56:	4699      	mov	r9, r3
 8013e58:	688a      	ldr	r2, [r1, #8]
 8013e5a:	690b      	ldr	r3, [r1, #16]
 8013e5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013e60:	4293      	cmp	r3, r2
 8013e62:	bfb8      	it	lt
 8013e64:	4613      	movlt	r3, r2
 8013e66:	6033      	str	r3, [r6, #0]
 8013e68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013e6c:	4607      	mov	r7, r0
 8013e6e:	460c      	mov	r4, r1
 8013e70:	b10a      	cbz	r2, 8013e76 <_printf_common+0x26>
 8013e72:	3301      	adds	r3, #1
 8013e74:	6033      	str	r3, [r6, #0]
 8013e76:	6823      	ldr	r3, [r4, #0]
 8013e78:	0699      	lsls	r1, r3, #26
 8013e7a:	bf42      	ittt	mi
 8013e7c:	6833      	ldrmi	r3, [r6, #0]
 8013e7e:	3302      	addmi	r3, #2
 8013e80:	6033      	strmi	r3, [r6, #0]
 8013e82:	6825      	ldr	r5, [r4, #0]
 8013e84:	f015 0506 	ands.w	r5, r5, #6
 8013e88:	d106      	bne.n	8013e98 <_printf_common+0x48>
 8013e8a:	f104 0a19 	add.w	sl, r4, #25
 8013e8e:	68e3      	ldr	r3, [r4, #12]
 8013e90:	6832      	ldr	r2, [r6, #0]
 8013e92:	1a9b      	subs	r3, r3, r2
 8013e94:	42ab      	cmp	r3, r5
 8013e96:	dc26      	bgt.n	8013ee6 <_printf_common+0x96>
 8013e98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013e9c:	1e13      	subs	r3, r2, #0
 8013e9e:	6822      	ldr	r2, [r4, #0]
 8013ea0:	bf18      	it	ne
 8013ea2:	2301      	movne	r3, #1
 8013ea4:	0692      	lsls	r2, r2, #26
 8013ea6:	d42b      	bmi.n	8013f00 <_printf_common+0xb0>
 8013ea8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013eac:	4649      	mov	r1, r9
 8013eae:	4638      	mov	r0, r7
 8013eb0:	47c0      	blx	r8
 8013eb2:	3001      	adds	r0, #1
 8013eb4:	d01e      	beq.n	8013ef4 <_printf_common+0xa4>
 8013eb6:	6823      	ldr	r3, [r4, #0]
 8013eb8:	68e5      	ldr	r5, [r4, #12]
 8013eba:	6832      	ldr	r2, [r6, #0]
 8013ebc:	f003 0306 	and.w	r3, r3, #6
 8013ec0:	2b04      	cmp	r3, #4
 8013ec2:	bf08      	it	eq
 8013ec4:	1aad      	subeq	r5, r5, r2
 8013ec6:	68a3      	ldr	r3, [r4, #8]
 8013ec8:	6922      	ldr	r2, [r4, #16]
 8013eca:	bf0c      	ite	eq
 8013ecc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013ed0:	2500      	movne	r5, #0
 8013ed2:	4293      	cmp	r3, r2
 8013ed4:	bfc4      	itt	gt
 8013ed6:	1a9b      	subgt	r3, r3, r2
 8013ed8:	18ed      	addgt	r5, r5, r3
 8013eda:	2600      	movs	r6, #0
 8013edc:	341a      	adds	r4, #26
 8013ede:	42b5      	cmp	r5, r6
 8013ee0:	d11a      	bne.n	8013f18 <_printf_common+0xc8>
 8013ee2:	2000      	movs	r0, #0
 8013ee4:	e008      	b.n	8013ef8 <_printf_common+0xa8>
 8013ee6:	2301      	movs	r3, #1
 8013ee8:	4652      	mov	r2, sl
 8013eea:	4649      	mov	r1, r9
 8013eec:	4638      	mov	r0, r7
 8013eee:	47c0      	blx	r8
 8013ef0:	3001      	adds	r0, #1
 8013ef2:	d103      	bne.n	8013efc <_printf_common+0xac>
 8013ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8013ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013efc:	3501      	adds	r5, #1
 8013efe:	e7c6      	b.n	8013e8e <_printf_common+0x3e>
 8013f00:	18e1      	adds	r1, r4, r3
 8013f02:	1c5a      	adds	r2, r3, #1
 8013f04:	2030      	movs	r0, #48	; 0x30
 8013f06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013f0a:	4422      	add	r2, r4
 8013f0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013f10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013f14:	3302      	adds	r3, #2
 8013f16:	e7c7      	b.n	8013ea8 <_printf_common+0x58>
 8013f18:	2301      	movs	r3, #1
 8013f1a:	4622      	mov	r2, r4
 8013f1c:	4649      	mov	r1, r9
 8013f1e:	4638      	mov	r0, r7
 8013f20:	47c0      	blx	r8
 8013f22:	3001      	adds	r0, #1
 8013f24:	d0e6      	beq.n	8013ef4 <_printf_common+0xa4>
 8013f26:	3601      	adds	r6, #1
 8013f28:	e7d9      	b.n	8013ede <_printf_common+0x8e>
	...

08013f2c <_printf_i>:
 8013f2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013f30:	7e0f      	ldrb	r7, [r1, #24]
 8013f32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013f34:	2f78      	cmp	r7, #120	; 0x78
 8013f36:	4691      	mov	r9, r2
 8013f38:	4680      	mov	r8, r0
 8013f3a:	460c      	mov	r4, r1
 8013f3c:	469a      	mov	sl, r3
 8013f3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013f42:	d807      	bhi.n	8013f54 <_printf_i+0x28>
 8013f44:	2f62      	cmp	r7, #98	; 0x62
 8013f46:	d80a      	bhi.n	8013f5e <_printf_i+0x32>
 8013f48:	2f00      	cmp	r7, #0
 8013f4a:	f000 80d8 	beq.w	80140fe <_printf_i+0x1d2>
 8013f4e:	2f58      	cmp	r7, #88	; 0x58
 8013f50:	f000 80a3 	beq.w	801409a <_printf_i+0x16e>
 8013f54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013f58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013f5c:	e03a      	b.n	8013fd4 <_printf_i+0xa8>
 8013f5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013f62:	2b15      	cmp	r3, #21
 8013f64:	d8f6      	bhi.n	8013f54 <_printf_i+0x28>
 8013f66:	a101      	add	r1, pc, #4	; (adr r1, 8013f6c <_printf_i+0x40>)
 8013f68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013f6c:	08013fc5 	.word	0x08013fc5
 8013f70:	08013fd9 	.word	0x08013fd9
 8013f74:	08013f55 	.word	0x08013f55
 8013f78:	08013f55 	.word	0x08013f55
 8013f7c:	08013f55 	.word	0x08013f55
 8013f80:	08013f55 	.word	0x08013f55
 8013f84:	08013fd9 	.word	0x08013fd9
 8013f88:	08013f55 	.word	0x08013f55
 8013f8c:	08013f55 	.word	0x08013f55
 8013f90:	08013f55 	.word	0x08013f55
 8013f94:	08013f55 	.word	0x08013f55
 8013f98:	080140e5 	.word	0x080140e5
 8013f9c:	08014009 	.word	0x08014009
 8013fa0:	080140c7 	.word	0x080140c7
 8013fa4:	08013f55 	.word	0x08013f55
 8013fa8:	08013f55 	.word	0x08013f55
 8013fac:	08014107 	.word	0x08014107
 8013fb0:	08013f55 	.word	0x08013f55
 8013fb4:	08014009 	.word	0x08014009
 8013fb8:	08013f55 	.word	0x08013f55
 8013fbc:	08013f55 	.word	0x08013f55
 8013fc0:	080140cf 	.word	0x080140cf
 8013fc4:	682b      	ldr	r3, [r5, #0]
 8013fc6:	1d1a      	adds	r2, r3, #4
 8013fc8:	681b      	ldr	r3, [r3, #0]
 8013fca:	602a      	str	r2, [r5, #0]
 8013fcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013fd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013fd4:	2301      	movs	r3, #1
 8013fd6:	e0a3      	b.n	8014120 <_printf_i+0x1f4>
 8013fd8:	6820      	ldr	r0, [r4, #0]
 8013fda:	6829      	ldr	r1, [r5, #0]
 8013fdc:	0606      	lsls	r6, r0, #24
 8013fde:	f101 0304 	add.w	r3, r1, #4
 8013fe2:	d50a      	bpl.n	8013ffa <_printf_i+0xce>
 8013fe4:	680e      	ldr	r6, [r1, #0]
 8013fe6:	602b      	str	r3, [r5, #0]
 8013fe8:	2e00      	cmp	r6, #0
 8013fea:	da03      	bge.n	8013ff4 <_printf_i+0xc8>
 8013fec:	232d      	movs	r3, #45	; 0x2d
 8013fee:	4276      	negs	r6, r6
 8013ff0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013ff4:	485e      	ldr	r0, [pc, #376]	; (8014170 <_printf_i+0x244>)
 8013ff6:	230a      	movs	r3, #10
 8013ff8:	e019      	b.n	801402e <_printf_i+0x102>
 8013ffa:	680e      	ldr	r6, [r1, #0]
 8013ffc:	602b      	str	r3, [r5, #0]
 8013ffe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014002:	bf18      	it	ne
 8014004:	b236      	sxthne	r6, r6
 8014006:	e7ef      	b.n	8013fe8 <_printf_i+0xbc>
 8014008:	682b      	ldr	r3, [r5, #0]
 801400a:	6820      	ldr	r0, [r4, #0]
 801400c:	1d19      	adds	r1, r3, #4
 801400e:	6029      	str	r1, [r5, #0]
 8014010:	0601      	lsls	r1, r0, #24
 8014012:	d501      	bpl.n	8014018 <_printf_i+0xec>
 8014014:	681e      	ldr	r6, [r3, #0]
 8014016:	e002      	b.n	801401e <_printf_i+0xf2>
 8014018:	0646      	lsls	r6, r0, #25
 801401a:	d5fb      	bpl.n	8014014 <_printf_i+0xe8>
 801401c:	881e      	ldrh	r6, [r3, #0]
 801401e:	4854      	ldr	r0, [pc, #336]	; (8014170 <_printf_i+0x244>)
 8014020:	2f6f      	cmp	r7, #111	; 0x6f
 8014022:	bf0c      	ite	eq
 8014024:	2308      	moveq	r3, #8
 8014026:	230a      	movne	r3, #10
 8014028:	2100      	movs	r1, #0
 801402a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801402e:	6865      	ldr	r5, [r4, #4]
 8014030:	60a5      	str	r5, [r4, #8]
 8014032:	2d00      	cmp	r5, #0
 8014034:	bfa2      	ittt	ge
 8014036:	6821      	ldrge	r1, [r4, #0]
 8014038:	f021 0104 	bicge.w	r1, r1, #4
 801403c:	6021      	strge	r1, [r4, #0]
 801403e:	b90e      	cbnz	r6, 8014044 <_printf_i+0x118>
 8014040:	2d00      	cmp	r5, #0
 8014042:	d04d      	beq.n	80140e0 <_printf_i+0x1b4>
 8014044:	4615      	mov	r5, r2
 8014046:	fbb6 f1f3 	udiv	r1, r6, r3
 801404a:	fb03 6711 	mls	r7, r3, r1, r6
 801404e:	5dc7      	ldrb	r7, [r0, r7]
 8014050:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014054:	4637      	mov	r7, r6
 8014056:	42bb      	cmp	r3, r7
 8014058:	460e      	mov	r6, r1
 801405a:	d9f4      	bls.n	8014046 <_printf_i+0x11a>
 801405c:	2b08      	cmp	r3, #8
 801405e:	d10b      	bne.n	8014078 <_printf_i+0x14c>
 8014060:	6823      	ldr	r3, [r4, #0]
 8014062:	07de      	lsls	r6, r3, #31
 8014064:	d508      	bpl.n	8014078 <_printf_i+0x14c>
 8014066:	6923      	ldr	r3, [r4, #16]
 8014068:	6861      	ldr	r1, [r4, #4]
 801406a:	4299      	cmp	r1, r3
 801406c:	bfde      	ittt	le
 801406e:	2330      	movle	r3, #48	; 0x30
 8014070:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014074:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014078:	1b52      	subs	r2, r2, r5
 801407a:	6122      	str	r2, [r4, #16]
 801407c:	f8cd a000 	str.w	sl, [sp]
 8014080:	464b      	mov	r3, r9
 8014082:	aa03      	add	r2, sp, #12
 8014084:	4621      	mov	r1, r4
 8014086:	4640      	mov	r0, r8
 8014088:	f7ff fee2 	bl	8013e50 <_printf_common>
 801408c:	3001      	adds	r0, #1
 801408e:	d14c      	bne.n	801412a <_printf_i+0x1fe>
 8014090:	f04f 30ff 	mov.w	r0, #4294967295
 8014094:	b004      	add	sp, #16
 8014096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801409a:	4835      	ldr	r0, [pc, #212]	; (8014170 <_printf_i+0x244>)
 801409c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80140a0:	6829      	ldr	r1, [r5, #0]
 80140a2:	6823      	ldr	r3, [r4, #0]
 80140a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80140a8:	6029      	str	r1, [r5, #0]
 80140aa:	061d      	lsls	r5, r3, #24
 80140ac:	d514      	bpl.n	80140d8 <_printf_i+0x1ac>
 80140ae:	07df      	lsls	r7, r3, #31
 80140b0:	bf44      	itt	mi
 80140b2:	f043 0320 	orrmi.w	r3, r3, #32
 80140b6:	6023      	strmi	r3, [r4, #0]
 80140b8:	b91e      	cbnz	r6, 80140c2 <_printf_i+0x196>
 80140ba:	6823      	ldr	r3, [r4, #0]
 80140bc:	f023 0320 	bic.w	r3, r3, #32
 80140c0:	6023      	str	r3, [r4, #0]
 80140c2:	2310      	movs	r3, #16
 80140c4:	e7b0      	b.n	8014028 <_printf_i+0xfc>
 80140c6:	6823      	ldr	r3, [r4, #0]
 80140c8:	f043 0320 	orr.w	r3, r3, #32
 80140cc:	6023      	str	r3, [r4, #0]
 80140ce:	2378      	movs	r3, #120	; 0x78
 80140d0:	4828      	ldr	r0, [pc, #160]	; (8014174 <_printf_i+0x248>)
 80140d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80140d6:	e7e3      	b.n	80140a0 <_printf_i+0x174>
 80140d8:	0659      	lsls	r1, r3, #25
 80140da:	bf48      	it	mi
 80140dc:	b2b6      	uxthmi	r6, r6
 80140de:	e7e6      	b.n	80140ae <_printf_i+0x182>
 80140e0:	4615      	mov	r5, r2
 80140e2:	e7bb      	b.n	801405c <_printf_i+0x130>
 80140e4:	682b      	ldr	r3, [r5, #0]
 80140e6:	6826      	ldr	r6, [r4, #0]
 80140e8:	6961      	ldr	r1, [r4, #20]
 80140ea:	1d18      	adds	r0, r3, #4
 80140ec:	6028      	str	r0, [r5, #0]
 80140ee:	0635      	lsls	r5, r6, #24
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	d501      	bpl.n	80140f8 <_printf_i+0x1cc>
 80140f4:	6019      	str	r1, [r3, #0]
 80140f6:	e002      	b.n	80140fe <_printf_i+0x1d2>
 80140f8:	0670      	lsls	r0, r6, #25
 80140fa:	d5fb      	bpl.n	80140f4 <_printf_i+0x1c8>
 80140fc:	8019      	strh	r1, [r3, #0]
 80140fe:	2300      	movs	r3, #0
 8014100:	6123      	str	r3, [r4, #16]
 8014102:	4615      	mov	r5, r2
 8014104:	e7ba      	b.n	801407c <_printf_i+0x150>
 8014106:	682b      	ldr	r3, [r5, #0]
 8014108:	1d1a      	adds	r2, r3, #4
 801410a:	602a      	str	r2, [r5, #0]
 801410c:	681d      	ldr	r5, [r3, #0]
 801410e:	6862      	ldr	r2, [r4, #4]
 8014110:	2100      	movs	r1, #0
 8014112:	4628      	mov	r0, r5
 8014114:	f7ec f86c 	bl	80001f0 <memchr>
 8014118:	b108      	cbz	r0, 801411e <_printf_i+0x1f2>
 801411a:	1b40      	subs	r0, r0, r5
 801411c:	6060      	str	r0, [r4, #4]
 801411e:	6863      	ldr	r3, [r4, #4]
 8014120:	6123      	str	r3, [r4, #16]
 8014122:	2300      	movs	r3, #0
 8014124:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014128:	e7a8      	b.n	801407c <_printf_i+0x150>
 801412a:	6923      	ldr	r3, [r4, #16]
 801412c:	462a      	mov	r2, r5
 801412e:	4649      	mov	r1, r9
 8014130:	4640      	mov	r0, r8
 8014132:	47d0      	blx	sl
 8014134:	3001      	adds	r0, #1
 8014136:	d0ab      	beq.n	8014090 <_printf_i+0x164>
 8014138:	6823      	ldr	r3, [r4, #0]
 801413a:	079b      	lsls	r3, r3, #30
 801413c:	d413      	bmi.n	8014166 <_printf_i+0x23a>
 801413e:	68e0      	ldr	r0, [r4, #12]
 8014140:	9b03      	ldr	r3, [sp, #12]
 8014142:	4298      	cmp	r0, r3
 8014144:	bfb8      	it	lt
 8014146:	4618      	movlt	r0, r3
 8014148:	e7a4      	b.n	8014094 <_printf_i+0x168>
 801414a:	2301      	movs	r3, #1
 801414c:	4632      	mov	r2, r6
 801414e:	4649      	mov	r1, r9
 8014150:	4640      	mov	r0, r8
 8014152:	47d0      	blx	sl
 8014154:	3001      	adds	r0, #1
 8014156:	d09b      	beq.n	8014090 <_printf_i+0x164>
 8014158:	3501      	adds	r5, #1
 801415a:	68e3      	ldr	r3, [r4, #12]
 801415c:	9903      	ldr	r1, [sp, #12]
 801415e:	1a5b      	subs	r3, r3, r1
 8014160:	42ab      	cmp	r3, r5
 8014162:	dcf2      	bgt.n	801414a <_printf_i+0x21e>
 8014164:	e7eb      	b.n	801413e <_printf_i+0x212>
 8014166:	2500      	movs	r5, #0
 8014168:	f104 0619 	add.w	r6, r4, #25
 801416c:	e7f5      	b.n	801415a <_printf_i+0x22e>
 801416e:	bf00      	nop
 8014170:	080173ad 	.word	0x080173ad
 8014174:	080173be 	.word	0x080173be

08014178 <__sread>:
 8014178:	b510      	push	{r4, lr}
 801417a:	460c      	mov	r4, r1
 801417c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014180:	f000 fa62 	bl	8014648 <_read_r>
 8014184:	2800      	cmp	r0, #0
 8014186:	bfab      	itete	ge
 8014188:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801418a:	89a3      	ldrhlt	r3, [r4, #12]
 801418c:	181b      	addge	r3, r3, r0
 801418e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014192:	bfac      	ite	ge
 8014194:	6563      	strge	r3, [r4, #84]	; 0x54
 8014196:	81a3      	strhlt	r3, [r4, #12]
 8014198:	bd10      	pop	{r4, pc}

0801419a <__swrite>:
 801419a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801419e:	461f      	mov	r7, r3
 80141a0:	898b      	ldrh	r3, [r1, #12]
 80141a2:	05db      	lsls	r3, r3, #23
 80141a4:	4605      	mov	r5, r0
 80141a6:	460c      	mov	r4, r1
 80141a8:	4616      	mov	r6, r2
 80141aa:	d505      	bpl.n	80141b8 <__swrite+0x1e>
 80141ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80141b0:	2302      	movs	r3, #2
 80141b2:	2200      	movs	r2, #0
 80141b4:	f000 f9d0 	bl	8014558 <_lseek_r>
 80141b8:	89a3      	ldrh	r3, [r4, #12]
 80141ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80141be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80141c2:	81a3      	strh	r3, [r4, #12]
 80141c4:	4632      	mov	r2, r6
 80141c6:	463b      	mov	r3, r7
 80141c8:	4628      	mov	r0, r5
 80141ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80141ce:	f000 b869 	b.w	80142a4 <_write_r>

080141d2 <__sseek>:
 80141d2:	b510      	push	{r4, lr}
 80141d4:	460c      	mov	r4, r1
 80141d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80141da:	f000 f9bd 	bl	8014558 <_lseek_r>
 80141de:	1c43      	adds	r3, r0, #1
 80141e0:	89a3      	ldrh	r3, [r4, #12]
 80141e2:	bf15      	itete	ne
 80141e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80141e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80141ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80141ee:	81a3      	strheq	r3, [r4, #12]
 80141f0:	bf18      	it	ne
 80141f2:	81a3      	strhne	r3, [r4, #12]
 80141f4:	bd10      	pop	{r4, pc}

080141f6 <__sclose>:
 80141f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80141fa:	f000 b8db 	b.w	80143b4 <_close_r>
	...

08014200 <__swbuf_r>:
 8014200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014202:	460e      	mov	r6, r1
 8014204:	4614      	mov	r4, r2
 8014206:	4605      	mov	r5, r0
 8014208:	b118      	cbz	r0, 8014212 <__swbuf_r+0x12>
 801420a:	6983      	ldr	r3, [r0, #24]
 801420c:	b90b      	cbnz	r3, 8014212 <__swbuf_r+0x12>
 801420e:	f7ff fbb3 	bl	8013978 <__sinit>
 8014212:	4b21      	ldr	r3, [pc, #132]	; (8014298 <__swbuf_r+0x98>)
 8014214:	429c      	cmp	r4, r3
 8014216:	d12b      	bne.n	8014270 <__swbuf_r+0x70>
 8014218:	686c      	ldr	r4, [r5, #4]
 801421a:	69a3      	ldr	r3, [r4, #24]
 801421c:	60a3      	str	r3, [r4, #8]
 801421e:	89a3      	ldrh	r3, [r4, #12]
 8014220:	071a      	lsls	r2, r3, #28
 8014222:	d52f      	bpl.n	8014284 <__swbuf_r+0x84>
 8014224:	6923      	ldr	r3, [r4, #16]
 8014226:	b36b      	cbz	r3, 8014284 <__swbuf_r+0x84>
 8014228:	6923      	ldr	r3, [r4, #16]
 801422a:	6820      	ldr	r0, [r4, #0]
 801422c:	1ac0      	subs	r0, r0, r3
 801422e:	6963      	ldr	r3, [r4, #20]
 8014230:	b2f6      	uxtb	r6, r6
 8014232:	4283      	cmp	r3, r0
 8014234:	4637      	mov	r7, r6
 8014236:	dc04      	bgt.n	8014242 <__swbuf_r+0x42>
 8014238:	4621      	mov	r1, r4
 801423a:	4628      	mov	r0, r5
 801423c:	f000 f950 	bl	80144e0 <_fflush_r>
 8014240:	bb30      	cbnz	r0, 8014290 <__swbuf_r+0x90>
 8014242:	68a3      	ldr	r3, [r4, #8]
 8014244:	3b01      	subs	r3, #1
 8014246:	60a3      	str	r3, [r4, #8]
 8014248:	6823      	ldr	r3, [r4, #0]
 801424a:	1c5a      	adds	r2, r3, #1
 801424c:	6022      	str	r2, [r4, #0]
 801424e:	701e      	strb	r6, [r3, #0]
 8014250:	6963      	ldr	r3, [r4, #20]
 8014252:	3001      	adds	r0, #1
 8014254:	4283      	cmp	r3, r0
 8014256:	d004      	beq.n	8014262 <__swbuf_r+0x62>
 8014258:	89a3      	ldrh	r3, [r4, #12]
 801425a:	07db      	lsls	r3, r3, #31
 801425c:	d506      	bpl.n	801426c <__swbuf_r+0x6c>
 801425e:	2e0a      	cmp	r6, #10
 8014260:	d104      	bne.n	801426c <__swbuf_r+0x6c>
 8014262:	4621      	mov	r1, r4
 8014264:	4628      	mov	r0, r5
 8014266:	f000 f93b 	bl	80144e0 <_fflush_r>
 801426a:	b988      	cbnz	r0, 8014290 <__swbuf_r+0x90>
 801426c:	4638      	mov	r0, r7
 801426e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014270:	4b0a      	ldr	r3, [pc, #40]	; (801429c <__swbuf_r+0x9c>)
 8014272:	429c      	cmp	r4, r3
 8014274:	d101      	bne.n	801427a <__swbuf_r+0x7a>
 8014276:	68ac      	ldr	r4, [r5, #8]
 8014278:	e7cf      	b.n	801421a <__swbuf_r+0x1a>
 801427a:	4b09      	ldr	r3, [pc, #36]	; (80142a0 <__swbuf_r+0xa0>)
 801427c:	429c      	cmp	r4, r3
 801427e:	bf08      	it	eq
 8014280:	68ec      	ldreq	r4, [r5, #12]
 8014282:	e7ca      	b.n	801421a <__swbuf_r+0x1a>
 8014284:	4621      	mov	r1, r4
 8014286:	4628      	mov	r0, r5
 8014288:	f000 f81e 	bl	80142c8 <__swsetup_r>
 801428c:	2800      	cmp	r0, #0
 801428e:	d0cb      	beq.n	8014228 <__swbuf_r+0x28>
 8014290:	f04f 37ff 	mov.w	r7, #4294967295
 8014294:	e7ea      	b.n	801426c <__swbuf_r+0x6c>
 8014296:	bf00      	nop
 8014298:	0801735c 	.word	0x0801735c
 801429c:	0801737c 	.word	0x0801737c
 80142a0:	0801733c 	.word	0x0801733c

080142a4 <_write_r>:
 80142a4:	b538      	push	{r3, r4, r5, lr}
 80142a6:	4d07      	ldr	r5, [pc, #28]	; (80142c4 <_write_r+0x20>)
 80142a8:	4604      	mov	r4, r0
 80142aa:	4608      	mov	r0, r1
 80142ac:	4611      	mov	r1, r2
 80142ae:	2200      	movs	r2, #0
 80142b0:	602a      	str	r2, [r5, #0]
 80142b2:	461a      	mov	r2, r3
 80142b4:	f7ee faa7 	bl	8002806 <_write>
 80142b8:	1c43      	adds	r3, r0, #1
 80142ba:	d102      	bne.n	80142c2 <_write_r+0x1e>
 80142bc:	682b      	ldr	r3, [r5, #0]
 80142be:	b103      	cbz	r3, 80142c2 <_write_r+0x1e>
 80142c0:	6023      	str	r3, [r4, #0]
 80142c2:	bd38      	pop	{r3, r4, r5, pc}
 80142c4:	20008730 	.word	0x20008730

080142c8 <__swsetup_r>:
 80142c8:	4b32      	ldr	r3, [pc, #200]	; (8014394 <__swsetup_r+0xcc>)
 80142ca:	b570      	push	{r4, r5, r6, lr}
 80142cc:	681d      	ldr	r5, [r3, #0]
 80142ce:	4606      	mov	r6, r0
 80142d0:	460c      	mov	r4, r1
 80142d2:	b125      	cbz	r5, 80142de <__swsetup_r+0x16>
 80142d4:	69ab      	ldr	r3, [r5, #24]
 80142d6:	b913      	cbnz	r3, 80142de <__swsetup_r+0x16>
 80142d8:	4628      	mov	r0, r5
 80142da:	f7ff fb4d 	bl	8013978 <__sinit>
 80142de:	4b2e      	ldr	r3, [pc, #184]	; (8014398 <__swsetup_r+0xd0>)
 80142e0:	429c      	cmp	r4, r3
 80142e2:	d10f      	bne.n	8014304 <__swsetup_r+0x3c>
 80142e4:	686c      	ldr	r4, [r5, #4]
 80142e6:	89a3      	ldrh	r3, [r4, #12]
 80142e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80142ec:	0719      	lsls	r1, r3, #28
 80142ee:	d42c      	bmi.n	801434a <__swsetup_r+0x82>
 80142f0:	06dd      	lsls	r5, r3, #27
 80142f2:	d411      	bmi.n	8014318 <__swsetup_r+0x50>
 80142f4:	2309      	movs	r3, #9
 80142f6:	6033      	str	r3, [r6, #0]
 80142f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80142fc:	81a3      	strh	r3, [r4, #12]
 80142fe:	f04f 30ff 	mov.w	r0, #4294967295
 8014302:	e03e      	b.n	8014382 <__swsetup_r+0xba>
 8014304:	4b25      	ldr	r3, [pc, #148]	; (801439c <__swsetup_r+0xd4>)
 8014306:	429c      	cmp	r4, r3
 8014308:	d101      	bne.n	801430e <__swsetup_r+0x46>
 801430a:	68ac      	ldr	r4, [r5, #8]
 801430c:	e7eb      	b.n	80142e6 <__swsetup_r+0x1e>
 801430e:	4b24      	ldr	r3, [pc, #144]	; (80143a0 <__swsetup_r+0xd8>)
 8014310:	429c      	cmp	r4, r3
 8014312:	bf08      	it	eq
 8014314:	68ec      	ldreq	r4, [r5, #12]
 8014316:	e7e6      	b.n	80142e6 <__swsetup_r+0x1e>
 8014318:	0758      	lsls	r0, r3, #29
 801431a:	d512      	bpl.n	8014342 <__swsetup_r+0x7a>
 801431c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801431e:	b141      	cbz	r1, 8014332 <__swsetup_r+0x6a>
 8014320:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014324:	4299      	cmp	r1, r3
 8014326:	d002      	beq.n	801432e <__swsetup_r+0x66>
 8014328:	4630      	mov	r0, r6
 801432a:	f7ff fbeb 	bl	8013b04 <_free_r>
 801432e:	2300      	movs	r3, #0
 8014330:	6363      	str	r3, [r4, #52]	; 0x34
 8014332:	89a3      	ldrh	r3, [r4, #12]
 8014334:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014338:	81a3      	strh	r3, [r4, #12]
 801433a:	2300      	movs	r3, #0
 801433c:	6063      	str	r3, [r4, #4]
 801433e:	6923      	ldr	r3, [r4, #16]
 8014340:	6023      	str	r3, [r4, #0]
 8014342:	89a3      	ldrh	r3, [r4, #12]
 8014344:	f043 0308 	orr.w	r3, r3, #8
 8014348:	81a3      	strh	r3, [r4, #12]
 801434a:	6923      	ldr	r3, [r4, #16]
 801434c:	b94b      	cbnz	r3, 8014362 <__swsetup_r+0x9a>
 801434e:	89a3      	ldrh	r3, [r4, #12]
 8014350:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014354:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014358:	d003      	beq.n	8014362 <__swsetup_r+0x9a>
 801435a:	4621      	mov	r1, r4
 801435c:	4630      	mov	r0, r6
 801435e:	f000 f933 	bl	80145c8 <__smakebuf_r>
 8014362:	89a0      	ldrh	r0, [r4, #12]
 8014364:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014368:	f010 0301 	ands.w	r3, r0, #1
 801436c:	d00a      	beq.n	8014384 <__swsetup_r+0xbc>
 801436e:	2300      	movs	r3, #0
 8014370:	60a3      	str	r3, [r4, #8]
 8014372:	6963      	ldr	r3, [r4, #20]
 8014374:	425b      	negs	r3, r3
 8014376:	61a3      	str	r3, [r4, #24]
 8014378:	6923      	ldr	r3, [r4, #16]
 801437a:	b943      	cbnz	r3, 801438e <__swsetup_r+0xc6>
 801437c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014380:	d1ba      	bne.n	80142f8 <__swsetup_r+0x30>
 8014382:	bd70      	pop	{r4, r5, r6, pc}
 8014384:	0781      	lsls	r1, r0, #30
 8014386:	bf58      	it	pl
 8014388:	6963      	ldrpl	r3, [r4, #20]
 801438a:	60a3      	str	r3, [r4, #8]
 801438c:	e7f4      	b.n	8014378 <__swsetup_r+0xb0>
 801438e:	2000      	movs	r0, #0
 8014390:	e7f7      	b.n	8014382 <__swsetup_r+0xba>
 8014392:	bf00      	nop
 8014394:	20000040 	.word	0x20000040
 8014398:	0801735c 	.word	0x0801735c
 801439c:	0801737c 	.word	0x0801737c
 80143a0:	0801733c 	.word	0x0801733c

080143a4 <abort>:
 80143a4:	b508      	push	{r3, lr}
 80143a6:	2006      	movs	r0, #6
 80143a8:	f000 f988 	bl	80146bc <raise>
 80143ac:	2001      	movs	r0, #1
 80143ae:	f7ee fa03 	bl	80027b8 <_exit>
	...

080143b4 <_close_r>:
 80143b4:	b538      	push	{r3, r4, r5, lr}
 80143b6:	4d06      	ldr	r5, [pc, #24]	; (80143d0 <_close_r+0x1c>)
 80143b8:	2300      	movs	r3, #0
 80143ba:	4604      	mov	r4, r0
 80143bc:	4608      	mov	r0, r1
 80143be:	602b      	str	r3, [r5, #0]
 80143c0:	f7ee fa3d 	bl	800283e <_close>
 80143c4:	1c43      	adds	r3, r0, #1
 80143c6:	d102      	bne.n	80143ce <_close_r+0x1a>
 80143c8:	682b      	ldr	r3, [r5, #0]
 80143ca:	b103      	cbz	r3, 80143ce <_close_r+0x1a>
 80143cc:	6023      	str	r3, [r4, #0]
 80143ce:	bd38      	pop	{r3, r4, r5, pc}
 80143d0:	20008730 	.word	0x20008730

080143d4 <__sflush_r>:
 80143d4:	898a      	ldrh	r2, [r1, #12]
 80143d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143da:	4605      	mov	r5, r0
 80143dc:	0710      	lsls	r0, r2, #28
 80143de:	460c      	mov	r4, r1
 80143e0:	d458      	bmi.n	8014494 <__sflush_r+0xc0>
 80143e2:	684b      	ldr	r3, [r1, #4]
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	dc05      	bgt.n	80143f4 <__sflush_r+0x20>
 80143e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	dc02      	bgt.n	80143f4 <__sflush_r+0x20>
 80143ee:	2000      	movs	r0, #0
 80143f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80143f6:	2e00      	cmp	r6, #0
 80143f8:	d0f9      	beq.n	80143ee <__sflush_r+0x1a>
 80143fa:	2300      	movs	r3, #0
 80143fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014400:	682f      	ldr	r7, [r5, #0]
 8014402:	602b      	str	r3, [r5, #0]
 8014404:	d032      	beq.n	801446c <__sflush_r+0x98>
 8014406:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014408:	89a3      	ldrh	r3, [r4, #12]
 801440a:	075a      	lsls	r2, r3, #29
 801440c:	d505      	bpl.n	801441a <__sflush_r+0x46>
 801440e:	6863      	ldr	r3, [r4, #4]
 8014410:	1ac0      	subs	r0, r0, r3
 8014412:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014414:	b10b      	cbz	r3, 801441a <__sflush_r+0x46>
 8014416:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014418:	1ac0      	subs	r0, r0, r3
 801441a:	2300      	movs	r3, #0
 801441c:	4602      	mov	r2, r0
 801441e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014420:	6a21      	ldr	r1, [r4, #32]
 8014422:	4628      	mov	r0, r5
 8014424:	47b0      	blx	r6
 8014426:	1c43      	adds	r3, r0, #1
 8014428:	89a3      	ldrh	r3, [r4, #12]
 801442a:	d106      	bne.n	801443a <__sflush_r+0x66>
 801442c:	6829      	ldr	r1, [r5, #0]
 801442e:	291d      	cmp	r1, #29
 8014430:	d82c      	bhi.n	801448c <__sflush_r+0xb8>
 8014432:	4a2a      	ldr	r2, [pc, #168]	; (80144dc <__sflush_r+0x108>)
 8014434:	40ca      	lsrs	r2, r1
 8014436:	07d6      	lsls	r6, r2, #31
 8014438:	d528      	bpl.n	801448c <__sflush_r+0xb8>
 801443a:	2200      	movs	r2, #0
 801443c:	6062      	str	r2, [r4, #4]
 801443e:	04d9      	lsls	r1, r3, #19
 8014440:	6922      	ldr	r2, [r4, #16]
 8014442:	6022      	str	r2, [r4, #0]
 8014444:	d504      	bpl.n	8014450 <__sflush_r+0x7c>
 8014446:	1c42      	adds	r2, r0, #1
 8014448:	d101      	bne.n	801444e <__sflush_r+0x7a>
 801444a:	682b      	ldr	r3, [r5, #0]
 801444c:	b903      	cbnz	r3, 8014450 <__sflush_r+0x7c>
 801444e:	6560      	str	r0, [r4, #84]	; 0x54
 8014450:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014452:	602f      	str	r7, [r5, #0]
 8014454:	2900      	cmp	r1, #0
 8014456:	d0ca      	beq.n	80143ee <__sflush_r+0x1a>
 8014458:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801445c:	4299      	cmp	r1, r3
 801445e:	d002      	beq.n	8014466 <__sflush_r+0x92>
 8014460:	4628      	mov	r0, r5
 8014462:	f7ff fb4f 	bl	8013b04 <_free_r>
 8014466:	2000      	movs	r0, #0
 8014468:	6360      	str	r0, [r4, #52]	; 0x34
 801446a:	e7c1      	b.n	80143f0 <__sflush_r+0x1c>
 801446c:	6a21      	ldr	r1, [r4, #32]
 801446e:	2301      	movs	r3, #1
 8014470:	4628      	mov	r0, r5
 8014472:	47b0      	blx	r6
 8014474:	1c41      	adds	r1, r0, #1
 8014476:	d1c7      	bne.n	8014408 <__sflush_r+0x34>
 8014478:	682b      	ldr	r3, [r5, #0]
 801447a:	2b00      	cmp	r3, #0
 801447c:	d0c4      	beq.n	8014408 <__sflush_r+0x34>
 801447e:	2b1d      	cmp	r3, #29
 8014480:	d001      	beq.n	8014486 <__sflush_r+0xb2>
 8014482:	2b16      	cmp	r3, #22
 8014484:	d101      	bne.n	801448a <__sflush_r+0xb6>
 8014486:	602f      	str	r7, [r5, #0]
 8014488:	e7b1      	b.n	80143ee <__sflush_r+0x1a>
 801448a:	89a3      	ldrh	r3, [r4, #12]
 801448c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014490:	81a3      	strh	r3, [r4, #12]
 8014492:	e7ad      	b.n	80143f0 <__sflush_r+0x1c>
 8014494:	690f      	ldr	r7, [r1, #16]
 8014496:	2f00      	cmp	r7, #0
 8014498:	d0a9      	beq.n	80143ee <__sflush_r+0x1a>
 801449a:	0793      	lsls	r3, r2, #30
 801449c:	680e      	ldr	r6, [r1, #0]
 801449e:	bf08      	it	eq
 80144a0:	694b      	ldreq	r3, [r1, #20]
 80144a2:	600f      	str	r7, [r1, #0]
 80144a4:	bf18      	it	ne
 80144a6:	2300      	movne	r3, #0
 80144a8:	eba6 0807 	sub.w	r8, r6, r7
 80144ac:	608b      	str	r3, [r1, #8]
 80144ae:	f1b8 0f00 	cmp.w	r8, #0
 80144b2:	dd9c      	ble.n	80143ee <__sflush_r+0x1a>
 80144b4:	6a21      	ldr	r1, [r4, #32]
 80144b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80144b8:	4643      	mov	r3, r8
 80144ba:	463a      	mov	r2, r7
 80144bc:	4628      	mov	r0, r5
 80144be:	47b0      	blx	r6
 80144c0:	2800      	cmp	r0, #0
 80144c2:	dc06      	bgt.n	80144d2 <__sflush_r+0xfe>
 80144c4:	89a3      	ldrh	r3, [r4, #12]
 80144c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80144ca:	81a3      	strh	r3, [r4, #12]
 80144cc:	f04f 30ff 	mov.w	r0, #4294967295
 80144d0:	e78e      	b.n	80143f0 <__sflush_r+0x1c>
 80144d2:	4407      	add	r7, r0
 80144d4:	eba8 0800 	sub.w	r8, r8, r0
 80144d8:	e7e9      	b.n	80144ae <__sflush_r+0xda>
 80144da:	bf00      	nop
 80144dc:	20400001 	.word	0x20400001

080144e0 <_fflush_r>:
 80144e0:	b538      	push	{r3, r4, r5, lr}
 80144e2:	690b      	ldr	r3, [r1, #16]
 80144e4:	4605      	mov	r5, r0
 80144e6:	460c      	mov	r4, r1
 80144e8:	b913      	cbnz	r3, 80144f0 <_fflush_r+0x10>
 80144ea:	2500      	movs	r5, #0
 80144ec:	4628      	mov	r0, r5
 80144ee:	bd38      	pop	{r3, r4, r5, pc}
 80144f0:	b118      	cbz	r0, 80144fa <_fflush_r+0x1a>
 80144f2:	6983      	ldr	r3, [r0, #24]
 80144f4:	b90b      	cbnz	r3, 80144fa <_fflush_r+0x1a>
 80144f6:	f7ff fa3f 	bl	8013978 <__sinit>
 80144fa:	4b14      	ldr	r3, [pc, #80]	; (801454c <_fflush_r+0x6c>)
 80144fc:	429c      	cmp	r4, r3
 80144fe:	d11b      	bne.n	8014538 <_fflush_r+0x58>
 8014500:	686c      	ldr	r4, [r5, #4]
 8014502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014506:	2b00      	cmp	r3, #0
 8014508:	d0ef      	beq.n	80144ea <_fflush_r+0xa>
 801450a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801450c:	07d0      	lsls	r0, r2, #31
 801450e:	d404      	bmi.n	801451a <_fflush_r+0x3a>
 8014510:	0599      	lsls	r1, r3, #22
 8014512:	d402      	bmi.n	801451a <_fflush_r+0x3a>
 8014514:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014516:	f7ff fadf 	bl	8013ad8 <__retarget_lock_acquire_recursive>
 801451a:	4628      	mov	r0, r5
 801451c:	4621      	mov	r1, r4
 801451e:	f7ff ff59 	bl	80143d4 <__sflush_r>
 8014522:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014524:	07da      	lsls	r2, r3, #31
 8014526:	4605      	mov	r5, r0
 8014528:	d4e0      	bmi.n	80144ec <_fflush_r+0xc>
 801452a:	89a3      	ldrh	r3, [r4, #12]
 801452c:	059b      	lsls	r3, r3, #22
 801452e:	d4dd      	bmi.n	80144ec <_fflush_r+0xc>
 8014530:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014532:	f7ff fad2 	bl	8013ada <__retarget_lock_release_recursive>
 8014536:	e7d9      	b.n	80144ec <_fflush_r+0xc>
 8014538:	4b05      	ldr	r3, [pc, #20]	; (8014550 <_fflush_r+0x70>)
 801453a:	429c      	cmp	r4, r3
 801453c:	d101      	bne.n	8014542 <_fflush_r+0x62>
 801453e:	68ac      	ldr	r4, [r5, #8]
 8014540:	e7df      	b.n	8014502 <_fflush_r+0x22>
 8014542:	4b04      	ldr	r3, [pc, #16]	; (8014554 <_fflush_r+0x74>)
 8014544:	429c      	cmp	r4, r3
 8014546:	bf08      	it	eq
 8014548:	68ec      	ldreq	r4, [r5, #12]
 801454a:	e7da      	b.n	8014502 <_fflush_r+0x22>
 801454c:	0801735c 	.word	0x0801735c
 8014550:	0801737c 	.word	0x0801737c
 8014554:	0801733c 	.word	0x0801733c

08014558 <_lseek_r>:
 8014558:	b538      	push	{r3, r4, r5, lr}
 801455a:	4d07      	ldr	r5, [pc, #28]	; (8014578 <_lseek_r+0x20>)
 801455c:	4604      	mov	r4, r0
 801455e:	4608      	mov	r0, r1
 8014560:	4611      	mov	r1, r2
 8014562:	2200      	movs	r2, #0
 8014564:	602a      	str	r2, [r5, #0]
 8014566:	461a      	mov	r2, r3
 8014568:	f7ee f990 	bl	800288c <_lseek>
 801456c:	1c43      	adds	r3, r0, #1
 801456e:	d102      	bne.n	8014576 <_lseek_r+0x1e>
 8014570:	682b      	ldr	r3, [r5, #0]
 8014572:	b103      	cbz	r3, 8014576 <_lseek_r+0x1e>
 8014574:	6023      	str	r3, [r4, #0]
 8014576:	bd38      	pop	{r3, r4, r5, pc}
 8014578:	20008730 	.word	0x20008730

0801457c <__swhatbuf_r>:
 801457c:	b570      	push	{r4, r5, r6, lr}
 801457e:	460e      	mov	r6, r1
 8014580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014584:	2900      	cmp	r1, #0
 8014586:	b096      	sub	sp, #88	; 0x58
 8014588:	4614      	mov	r4, r2
 801458a:	461d      	mov	r5, r3
 801458c:	da08      	bge.n	80145a0 <__swhatbuf_r+0x24>
 801458e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014592:	2200      	movs	r2, #0
 8014594:	602a      	str	r2, [r5, #0]
 8014596:	061a      	lsls	r2, r3, #24
 8014598:	d410      	bmi.n	80145bc <__swhatbuf_r+0x40>
 801459a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801459e:	e00e      	b.n	80145be <__swhatbuf_r+0x42>
 80145a0:	466a      	mov	r2, sp
 80145a2:	f000 f8a7 	bl	80146f4 <_fstat_r>
 80145a6:	2800      	cmp	r0, #0
 80145a8:	dbf1      	blt.n	801458e <__swhatbuf_r+0x12>
 80145aa:	9a01      	ldr	r2, [sp, #4]
 80145ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80145b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80145b4:	425a      	negs	r2, r3
 80145b6:	415a      	adcs	r2, r3
 80145b8:	602a      	str	r2, [r5, #0]
 80145ba:	e7ee      	b.n	801459a <__swhatbuf_r+0x1e>
 80145bc:	2340      	movs	r3, #64	; 0x40
 80145be:	2000      	movs	r0, #0
 80145c0:	6023      	str	r3, [r4, #0]
 80145c2:	b016      	add	sp, #88	; 0x58
 80145c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080145c8 <__smakebuf_r>:
 80145c8:	898b      	ldrh	r3, [r1, #12]
 80145ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80145cc:	079d      	lsls	r5, r3, #30
 80145ce:	4606      	mov	r6, r0
 80145d0:	460c      	mov	r4, r1
 80145d2:	d507      	bpl.n	80145e4 <__smakebuf_r+0x1c>
 80145d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80145d8:	6023      	str	r3, [r4, #0]
 80145da:	6123      	str	r3, [r4, #16]
 80145dc:	2301      	movs	r3, #1
 80145de:	6163      	str	r3, [r4, #20]
 80145e0:	b002      	add	sp, #8
 80145e2:	bd70      	pop	{r4, r5, r6, pc}
 80145e4:	ab01      	add	r3, sp, #4
 80145e6:	466a      	mov	r2, sp
 80145e8:	f7ff ffc8 	bl	801457c <__swhatbuf_r>
 80145ec:	9900      	ldr	r1, [sp, #0]
 80145ee:	4605      	mov	r5, r0
 80145f0:	4630      	mov	r0, r6
 80145f2:	f7ff f871 	bl	80136d8 <_malloc_r>
 80145f6:	b948      	cbnz	r0, 801460c <__smakebuf_r+0x44>
 80145f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80145fc:	059a      	lsls	r2, r3, #22
 80145fe:	d4ef      	bmi.n	80145e0 <__smakebuf_r+0x18>
 8014600:	f023 0303 	bic.w	r3, r3, #3
 8014604:	f043 0302 	orr.w	r3, r3, #2
 8014608:	81a3      	strh	r3, [r4, #12]
 801460a:	e7e3      	b.n	80145d4 <__smakebuf_r+0xc>
 801460c:	4b0d      	ldr	r3, [pc, #52]	; (8014644 <__smakebuf_r+0x7c>)
 801460e:	62b3      	str	r3, [r6, #40]	; 0x28
 8014610:	89a3      	ldrh	r3, [r4, #12]
 8014612:	6020      	str	r0, [r4, #0]
 8014614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014618:	81a3      	strh	r3, [r4, #12]
 801461a:	9b00      	ldr	r3, [sp, #0]
 801461c:	6163      	str	r3, [r4, #20]
 801461e:	9b01      	ldr	r3, [sp, #4]
 8014620:	6120      	str	r0, [r4, #16]
 8014622:	b15b      	cbz	r3, 801463c <__smakebuf_r+0x74>
 8014624:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014628:	4630      	mov	r0, r6
 801462a:	f000 f875 	bl	8014718 <_isatty_r>
 801462e:	b128      	cbz	r0, 801463c <__smakebuf_r+0x74>
 8014630:	89a3      	ldrh	r3, [r4, #12]
 8014632:	f023 0303 	bic.w	r3, r3, #3
 8014636:	f043 0301 	orr.w	r3, r3, #1
 801463a:	81a3      	strh	r3, [r4, #12]
 801463c:	89a0      	ldrh	r0, [r4, #12]
 801463e:	4305      	orrs	r5, r0
 8014640:	81a5      	strh	r5, [r4, #12]
 8014642:	e7cd      	b.n	80145e0 <__smakebuf_r+0x18>
 8014644:	08013911 	.word	0x08013911

08014648 <_read_r>:
 8014648:	b538      	push	{r3, r4, r5, lr}
 801464a:	4d07      	ldr	r5, [pc, #28]	; (8014668 <_read_r+0x20>)
 801464c:	4604      	mov	r4, r0
 801464e:	4608      	mov	r0, r1
 8014650:	4611      	mov	r1, r2
 8014652:	2200      	movs	r2, #0
 8014654:	602a      	str	r2, [r5, #0]
 8014656:	461a      	mov	r2, r3
 8014658:	f7ee f8b8 	bl	80027cc <_read>
 801465c:	1c43      	adds	r3, r0, #1
 801465e:	d102      	bne.n	8014666 <_read_r+0x1e>
 8014660:	682b      	ldr	r3, [r5, #0]
 8014662:	b103      	cbz	r3, 8014666 <_read_r+0x1e>
 8014664:	6023      	str	r3, [r4, #0]
 8014666:	bd38      	pop	{r3, r4, r5, pc}
 8014668:	20008730 	.word	0x20008730

0801466c <_raise_r>:
 801466c:	291f      	cmp	r1, #31
 801466e:	b538      	push	{r3, r4, r5, lr}
 8014670:	4604      	mov	r4, r0
 8014672:	460d      	mov	r5, r1
 8014674:	d904      	bls.n	8014680 <_raise_r+0x14>
 8014676:	2316      	movs	r3, #22
 8014678:	6003      	str	r3, [r0, #0]
 801467a:	f04f 30ff 	mov.w	r0, #4294967295
 801467e:	bd38      	pop	{r3, r4, r5, pc}
 8014680:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014682:	b112      	cbz	r2, 801468a <_raise_r+0x1e>
 8014684:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014688:	b94b      	cbnz	r3, 801469e <_raise_r+0x32>
 801468a:	4620      	mov	r0, r4
 801468c:	f000 f830 	bl	80146f0 <_getpid_r>
 8014690:	462a      	mov	r2, r5
 8014692:	4601      	mov	r1, r0
 8014694:	4620      	mov	r0, r4
 8014696:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801469a:	f000 b817 	b.w	80146cc <_kill_r>
 801469e:	2b01      	cmp	r3, #1
 80146a0:	d00a      	beq.n	80146b8 <_raise_r+0x4c>
 80146a2:	1c59      	adds	r1, r3, #1
 80146a4:	d103      	bne.n	80146ae <_raise_r+0x42>
 80146a6:	2316      	movs	r3, #22
 80146a8:	6003      	str	r3, [r0, #0]
 80146aa:	2001      	movs	r0, #1
 80146ac:	e7e7      	b.n	801467e <_raise_r+0x12>
 80146ae:	2400      	movs	r4, #0
 80146b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80146b4:	4628      	mov	r0, r5
 80146b6:	4798      	blx	r3
 80146b8:	2000      	movs	r0, #0
 80146ba:	e7e0      	b.n	801467e <_raise_r+0x12>

080146bc <raise>:
 80146bc:	4b02      	ldr	r3, [pc, #8]	; (80146c8 <raise+0xc>)
 80146be:	4601      	mov	r1, r0
 80146c0:	6818      	ldr	r0, [r3, #0]
 80146c2:	f7ff bfd3 	b.w	801466c <_raise_r>
 80146c6:	bf00      	nop
 80146c8:	20000040 	.word	0x20000040

080146cc <_kill_r>:
 80146cc:	b538      	push	{r3, r4, r5, lr}
 80146ce:	4d07      	ldr	r5, [pc, #28]	; (80146ec <_kill_r+0x20>)
 80146d0:	2300      	movs	r3, #0
 80146d2:	4604      	mov	r4, r0
 80146d4:	4608      	mov	r0, r1
 80146d6:	4611      	mov	r1, r2
 80146d8:	602b      	str	r3, [r5, #0]
 80146da:	f7ee f85b 	bl	8002794 <_kill>
 80146de:	1c43      	adds	r3, r0, #1
 80146e0:	d102      	bne.n	80146e8 <_kill_r+0x1c>
 80146e2:	682b      	ldr	r3, [r5, #0]
 80146e4:	b103      	cbz	r3, 80146e8 <_kill_r+0x1c>
 80146e6:	6023      	str	r3, [r4, #0]
 80146e8:	bd38      	pop	{r3, r4, r5, pc}
 80146ea:	bf00      	nop
 80146ec:	20008730 	.word	0x20008730

080146f0 <_getpid_r>:
 80146f0:	f7ee b848 	b.w	8002784 <_getpid>

080146f4 <_fstat_r>:
 80146f4:	b538      	push	{r3, r4, r5, lr}
 80146f6:	4d07      	ldr	r5, [pc, #28]	; (8014714 <_fstat_r+0x20>)
 80146f8:	2300      	movs	r3, #0
 80146fa:	4604      	mov	r4, r0
 80146fc:	4608      	mov	r0, r1
 80146fe:	4611      	mov	r1, r2
 8014700:	602b      	str	r3, [r5, #0]
 8014702:	f7ee f8a8 	bl	8002856 <_fstat>
 8014706:	1c43      	adds	r3, r0, #1
 8014708:	d102      	bne.n	8014710 <_fstat_r+0x1c>
 801470a:	682b      	ldr	r3, [r5, #0]
 801470c:	b103      	cbz	r3, 8014710 <_fstat_r+0x1c>
 801470e:	6023      	str	r3, [r4, #0]
 8014710:	bd38      	pop	{r3, r4, r5, pc}
 8014712:	bf00      	nop
 8014714:	20008730 	.word	0x20008730

08014718 <_isatty_r>:
 8014718:	b538      	push	{r3, r4, r5, lr}
 801471a:	4d06      	ldr	r5, [pc, #24]	; (8014734 <_isatty_r+0x1c>)
 801471c:	2300      	movs	r3, #0
 801471e:	4604      	mov	r4, r0
 8014720:	4608      	mov	r0, r1
 8014722:	602b      	str	r3, [r5, #0]
 8014724:	f7ee f8a7 	bl	8002876 <_isatty>
 8014728:	1c43      	adds	r3, r0, #1
 801472a:	d102      	bne.n	8014732 <_isatty_r+0x1a>
 801472c:	682b      	ldr	r3, [r5, #0]
 801472e:	b103      	cbz	r3, 8014732 <_isatty_r+0x1a>
 8014730:	6023      	str	r3, [r4, #0]
 8014732:	bd38      	pop	{r3, r4, r5, pc}
 8014734:	20008730 	.word	0x20008730

08014738 <_init>:
 8014738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801473a:	bf00      	nop
 801473c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801473e:	bc08      	pop	{r3}
 8014740:	469e      	mov	lr, r3
 8014742:	4770      	bx	lr

08014744 <_fini>:
 8014744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014746:	bf00      	nop
 8014748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801474a:	bc08      	pop	{r3}
 801474c:	469e      	mov	lr, r3
 801474e:	4770      	bx	lr
